
if(window.isc){isc.setAutoDraw(false);isc.screenReader=false;}
var OB={Application:{testEnvironment:false,language:'139',language_string:'es_EC',systemVersion:'_version=2.1.21811&_language=139',contextUrl:'/openbravo/',communityBrandingStaticUrl:'utility/StaticCommunityBranding.html',butlerUtilsUrl:'//butler.openbravo.com/web/static-content/js/ob-utils.js',purpose:'D',licenseType:'C',isTrial:false,isGolden:false,versionDescription:'3.0 - Community Edition - MP31.4'},Format:{defaultGroupingSize:3,defaultGroupingSymbol:',',defaultDecimalSymbol:'.',defaultNumericMask:'#0.###',date:'dd-MM-yyyy',dateTime:'dd-MM-yyyy HH:mm:ss',formats:{'generalQtyEdition':'#0.######','qtyEdition':'#0.###','euroEdition':'#0.00','priceEdition':'#0.00','generalQtyRelation':'#,##0.######','priceExcel':'#,##0.##','euroRelation':'#,##0.00','qtyExcel':'#,##0.###','generalQtyExcel':'#,##0.######','integerExcel':'#,##0','integerRelation':'#,##0','amountInform':'#,##0.00','euroInform':'#,##0.00','integerEdition':'#0','priceRelation':'#,##0.00','qtyRelation':'#,##0.###','integerInform':'#,##0','priceInform':'#,##0.00','euroExcel':'#,##0.##'}},Constants:{WINTITLE:'Openbravo',IDENTIFIER:'_identifier',ID:'id',FIELDSEPARATOR:'$',WHERE_PARAMETER:'_where',SQL_WHERE_PARAMETER:'_sqlWhere',ORG_PARAMETER:'_org',ORDERBY_PARAMETER:'_orderBy',SQL_ORDERBY_PARAMETER:'_sqlOrderBy',FILTER_PARAMETER:'_filter',SQL_FILTER_PARAMETER:'_sqlFilter',SORTBY_PARAMETER:'_sortBy',OR_EXPRESSION:'_OrExpression',TEXT_MATCH_PARAMETER_OVERRIDE:'_textMatchStyleOverride',SUCCESS:'success',DBL_CLICK_DELAY:300,ERROR:'error'},Styles:{skinsPath:'/openbravo/'+'web/org.openbravo.userinterface.smartclient/openbravo/skins/'},I18N:{}};
$LAB.script('/openbravo/org.openbravo.client.kernel/OBCLKER_Kernel/ApplicationDynamic').wait(function(){var _exception; try{

OB=window.OB||{};OB.I18N=window.OB.I18N||{};OB.I18N.labels={'OBUIAPP_PgUpKey':'RePág','NO_DOCUMENTOPROCESADO':'El documento esta procesado, no se puede realizar esta accion.','NO_DOCPROCESADO':'No se puede realizar modificaciones a documentos que ya han sido procesados','OBUIAPP_Image_Error_WRONGFORMAT':'Formato de fichero no soportado. Los formatos soportados son JPG, PNG, GIF y BMP.','OBUIAPP_Personalization_Colspan':'Número de Columnas Ocupadas','OBUISC_Date.shortDayNames.Mon':'Lun','OBUIAPP_ActivateMessageWindowPersonalization':'<a href=\"http://wiki.openbravo.com/wiki/User_Manual/Window_Personalization#Saved_and_Named_Views\" target=\"_blank\"\>Personalización de Ventanas</a\> es una característica Premium','OBUISC_DateItem.invalidDateStringMessage':'El valor no es una fecha válida.','OBKMO_DeleteThisWidgetConfirmation':'¿Borrar este widget?','OBUISC_Dialog.NO_BUTTON_TITLE':'No','OBUIAPP_Warning':'Advertencia','OBUISC_GroupingMessages.byMinutesTitle':'By Minutes','OBUISC_RPCManager.removeDataPrompt':'${loadingImage}','OBUIAPP_RM_ReceivingMoreThanPending':'La cantidad recibida supera la cantidad pendiente. Por favor introduzca un rango válido: 0 - %0.','OBUISC_Time.PMIndicator':'PM','OBUIAPP_DownloadAttachments':'Descargar archivos adjuntos','OBUISC_ListGrid.confirmDiscardEditsMessage':'Todos los cambios no guardados en esta lista serán descartados.','OBKMO_License_Text':'Texto de la Licencia','OBUIAPP_No':'No','APRM_ButtonNotValid':'La acción no se puede ejecutar. No es una acción válida.','NE_VAC_FEC_FIN_VAL':'La Fecha Final de Vacación no puede ser menor a la Fecha de Inicio.','APRM_BankStatementLineWrongDate':'Fecha incorrecta para línea de extracto bancario. No se pueden importar líneas previas a ','OBKMO_LearnMore':'Obtener información','OBUIAPP_DeletingRecords':'Deleting...','APRM_OUTMULTICURRENCYNOTSUPPORTED':'El método de pago no permite realizar pagos en otras monedas.','APRM_ORDER_MAN_PAYMENTS':'El pedido tiene pagos creados desde el antiguo flujo de cobros y pagos. Por favor elimínelos antes de completarlos.','OBKMO_AdminValueLabel':'Valor','OBUIAPP_days_ago':'hace N días','UINAVBA_Openbravo_ERP':'Openbravo ERP','OBUIAPP_Personalization_StatusBar_Group':'Barra de estado','APRM_INVOICE_MAN_PAYMENTS':'La factura tiene pagos creados desde el antiguo flujo de cobros y pagos. Por favor elimínelos antes de completarlos.','OBUISC_Date.shortMonthNames.Mar':'Mar','OBKMO_UnknownEventType':'El tipo del evento enviado al gestor no está soportado.','OBUIAPP_PasteLink':'Pegar enlace en email o mensaje instantaneo','UINAVBA_About':'Acerca de','OBSERDS_TABLE_OR_CLASS_MUST_BE_SET':'Es preciso especificar la tabla o clase para una fuente de datos.','APRM_PaymentMethod':'Selected payment method doesn\'t exist.','APRM_WrongBankFileFormat':'La clase Java definida no existe','OBUISC_GroupingMessages.upcomingLaterTitle':'Upcoming Later','OBUIAPP_Personalization_Toolbar_Edit_Button':'Editar la disposición del formulario del registro de personalización de ventana seleccionado','NO_SINDATOS_CUENTA':'No existe cuenta configurada','OBUIAPP_Res_MoreThanPendingQty':'Total prereserved quantity exceeds the pending to receipt quantity. The sum of all prereserved quantities must be equal or lower than %0.','APRM_DoubtfulDebtMoreAmountThanOutstanding':'It is not possible to recognize more doubtful debt than the outstanding.','OBUIAPP_Personalization_ShowInStatusBar':'Mostrar en barra de estado','OBUIAPP_LogOut':'Salir','IDT_EjecucionError':'El proceso no se ha ejecutado correctamente por favor verifique los errores.','OBKMO_InstancePurpose':'Propósito de la Instancia','OBUIAPP_MakeSelectionItalic':'Make Selection Italic','APRM_NotValidNumber':'El valor no es un número valido','APRM_DifferentSignError':'Sólo se permiten líneas con el mismo signo.','OBUIAPP_GridEditButtonPrompt':'Editar el registro en el grid','APRM_Different_PaymentMethod_Selected':'Algunos de los pagos seleccionados tienen un método de pago diferente al método de pago seleccionado en la cabecera de la propuesta de pago.','ne_emp_fec_nac':'La Fecha de Nacimiento debe ser menor a la Fecha Actual','OBUIAPP_Image_Confirm_RESIZE':'Su imagen de AAAxBBB pixels se va a redimensionar automáticamente a XXXxYYY pixels. Esto puede suponer una perdida en la calidad de la imagen. ¿Desea continuar?','OBUISC_GroupingMessages.upcomingTodayTitle':'Upcoming Day','NO_UNICO_RUB_PRUBRO':'No se puede ingresar mas de una linea con un mismo rubro.','OBUIAPP_ShiftKey':'Mayús','OBUIAPP_Modified':'Modificado','APRM_FinancialAccountNotInNaturalTree':'La organización de la cuenta financiera no pertenece al arbol de organizaciones del pago','Action':'Action','OBUIAPP_Tab':'Solapa','OBUIAPP_Personalization_RemoveFromStatusBar':'Eliminar de la barra de estado','OBKMO_AdminEdit':'Editar','APRM_RefundPayment':'Efecto devuelto','OBUIAPP_ErrorInFields':'Uno o varios campos contienen valores ilegales, compruebe los errores para cada uno de ellos.','OBUIAPP_Current_day_of_last_month':'Día actual del mes anterior','NE_VAC_FEC_INI_MOD_VAL':'Las Fechas de Vacaciones no pueden ser modificadas.','APRM_Payment':'Pago','OBUISC_Dialog.ASK_TITLE':'Pregunta','OBUIAPP_Res_MoreThanReservationQty':'Total reserved quantity exceeds the reservation quantity. The sum of all reserved quantities must be equal or lower than %0.','NO_PERIODO_CERRADO':'No se puede calcular las utilidades de un periodo cerrado','OBUISC_GroupingMessages.upcomingThisWeekTitle':'Upcoming this Week','OBUISC_GroupingMessages.byHoursTitle':'By Hours','OBUISC_Date.shortMonthNames.Nov':'Nov','APRM_ReceivedAmountNotDeleted':'Las líneas de los planes de pago con importes recibidos (o pagado) no se pueden eliminar','APRM_InvoiceDescUsedCredit':'Factura pagada usando el crédito: %s','APRM_AddPaymentIn':'Añadir Cobro','OBUISC_ListGrid.unfreezeFieldText':'Desbloquear ${viewer.getSummaryTitle(field)}','OBUIAPP_UpgradeRunAPRMTitle':'Ejecute la utilidad de migración a APRM','APRM_DoubtfulDebtPaymentExists':'Doubtful Debt @documentNo@ could not be processed. Payment already exists.','OBUIAPP_RM_OutOfRange':'La cantidad devuelta, teniendo en cuenta la cantidad devuelta en otros pedidos de devolución de material, supera la Cantidad. Por favor introduzca un rango válido: 0 - %0.','OBUIAPP_AutoSaveError':'El guardado automático en la solapa %0 falló. Compruebe los errores detallados en dicha solapa, y corríjalos para que el guardado se pueda completar','OBUIAPP_MultipleParentsSelected':'Múltiples registros padre seleccionados. Solo se pueden mostrar los hijos de un solo padre simultánemente.','OBUISC_Validator.notAnInteger':'El valor no es un número entero válido','OBUIAPP_Personalization_Toolbar_Button':'Haga click aquí para personalizar la disposición de los campos de esta solapa.','OBUIAPP_PREVIOUSBUTTON':'Ir al Registro Anterior','OBUISC_Date.shortDayNames.Thu':'Jue','OBKMO_Java_Package':'Paquete Java','OBUIAPP_SummaryFunctionSum':'Sum','OBUIAPP_AlertGrid_Note':'Nota','OBUIAPP_GridClearFilter':'Desactivar Filtro(s)','OBUIAPP_CreateRecordInGrid':'Insertar fila','OBSEIG_Activate':'<a href=\"http://wiki.openbravo.com/wiki/Configuration_Manual/Google_Integration\" target=\"_blank\"\>hacer login en la aplicación utilizando una cuenta Google</a\>','OBKMO_AdminLevelRole':'Rol','APRM_NoLines':'There is no doubtful debt to be processed.','APRM_BSLineReconciled':'El Extracto Bancario tiene una línea reconciliada','NO_CheckRolTip':'Seleccione uno o varios roles','OBUIAPP_months_from_now':'N meses desde ahora','OBUIAPP_LinkedItemsEmptyMessage':'No hay elementos relacionados, seleccione una categoría en la parte izquierda para mostrar los elementos relacionados de esa categoría','OBUISC_ListGrid.loadingDataMessage':'Cargando datos...','OBUIAPP_ViewHasBeenDeleted':'La vista se ha eliminado.','APRM_Credit':'Crédito generado','APRM_OrderWithPayments':'El pedido tiene pagos relacionados.','OBSEIG_TooMuchConf':'La configuración de cuentas de Google de esta instancia no permite el acceso a la aplicación con @@emai@l@. <a href=\"http://wiki.openbravo.com/wiki/Configuration_Manual/Google_Integration\" target=\"_blank\"\>Más información</a\> sobre este problema, o contacte con el administrador del sistema de esta instancia.','APRM_DateWillBeUpdated':'Al seleccionar transacciones posteriores a la fecha de Conciliación, la fecha de la transacción será actualizada a la fecha de la línea del extracto bancario','FINPR_Payables':'Pagos','APRM_PsdInSeveralPayments':'El pago no se pudo crear. El detalle %s ya está pagado en otro pago.','OBUIAPP_SingleRecordFilterMsg':'The grid is filtered for the last document viewed. Due to high volumes, clearing this filter can take up to a 30 seconds delay.','OBUIAPP_PrintNoRecordSelected':'Ningún registro seleccionado para imprimir. Seleccione al menos uno y pruebe de nuevo','OBUIAPP_Personalization_Toolbar_Delete':'Eliminar la disposición personalizada del formulario, las disposiciones personalizadas de formulario solo pueden ser eliminadas por los usuarios que las crearon','APRM_Invoice':'Factura','UINAVBA_UnequalPwd':'Las contraseñas introducidas no son la misma.','OBUISC_GroupingMessages.upcomingTomorrowTitle':'Upcoming Tomorrow','UINAVBA_Help':'Ayuda','OBKMO_Author_URL':'URL del Autor','NO_NoAvanceSelected':'No se ha seleccionado ningún avance para completar','OBUIAPP_LinkedItemsCategoryListGridHeader':'Categoría de Elementos Relacionados','OBKMO_License_Type':'Tipo de Licencia','OBUIAPP_GroupBy10':'By 10','NO_NOBORRAR':'No puede borrar registros procesados','OBUIAPP_AlertGrid_AlertRule':'Regla de Alerta','APRM_INFINANCIALACCOUNT':'en la Cuenta Financiera','APRM_NoBankFileAvailableInfo':'Los administradores del sistema pueden instalar extensiones desde Gestión de Módulos \> Añadir Módulos','OBUIAPP_TabWithErrors':'La solapa (%0) contiene errores y uno o varios registros no pudieron guardarse. Compruebe el error detallado en la solapa.','NO_UNICO_EMP_NOVEDAD':'No se puede ingresar mas de una linea con un mismo empleado','OBUISC_ListGrid.ungroupText':'Desagrupar','UINAVBA_Language':'Lenguaje','OBUIAPP_UpgradeEndDesc':'El proceso de actualización a Openbravo 3 ha sido completado con éxito.<br/\> <br/\>Siguientes pasos:<ul\><li\>Lea las <a class=\"OBNoteListGridDelete\" href=\"http://wiki.openbravo.com/wiki/ERP/3.0/Release_Notes\" target=\"_blank\"\>notas de lanzamiento</a\></li\><li\>En caso de que su instancia utilizara una disposición de campos customizada, es recomendable revisar la disposición de las ventanas y modificarla si es necesario. <a class=\"OBNoteListGridDelete\" target=\"_blank\" href=\"http://wiki.openbravo.com/wiki/Personalizing_Openbravo#Field_Layout\"\>Obtener información de cómo hacerlo.</a\></li\><li\>Algunos tipos de customizaciones  podrían evitar que algunos componentes de Openbravo (ventanas, popups, ...) sean mostrados utilizando el nuevo interfaz de usuario. <a class=\"OBNoteListGridDelete\" href=\"http://wiki.openbravo.com/wiki/ERP/2.50/Developers_Guide/Concepts/How_to_Migrate_2.50_Modules_to_3.0#Required_changes\" target=\"_blank\"\>Obtener información de cómo detectar y corregir estos casos.</a\></li\><li\>Compruebe el funcionamiento de sus procesos de negocio antes de desplegar la versión en un entorno productivo</li\></ul\>','APRM_ReconciliationNoLines':'La Conciliación no contiene ninguna línea. Se requiere que haya al menos una línea de Conciliación para que un documento de reconciliacion se pueda procesar.','APRM_FATS_POSTED':'Contabilizado','NO_ConfirmCheckoutPagos':'Desea realizar el pago de las lineas seleccionadas?','APRM_BankStatementNo':'Extracto Bancario Nº:','OBUIAPP_Upload':'Subir','UINAVBA_ConfirmPwd':'Confirmar contraseña','APRM_JSZEROUNDERPAYMENT':'A zero amount Payment cannot be left as an underpayment.','OBUISC_Validator.notADecimal':'El valor no es un número decimal válido','UINAVBA_CurrentPwd':'Contraseña Actual','OBUISC_Dialog.OK_BUTTON_TITLE':'OK','OBKMO_Widget_Title':'Título de Widget','OBUIAPP_Personalization_FirstFocus':'Foco Inicial de la Solapa','FINPR_Receivables':'Cobros','OBUIAPP_Image_Warn_RECOMMENDED_MAXIMUM':'Para un mejor ajuste, se recomienda usar una imagen igual o menor de XXXxYYY pixels.','OBJSON_StaleDate':'El registro que va a guardar ya ha sido cambiado por otro usuario o proceso. Actualizar los datos haciendo clic en el botón de actualización, perderá los cambios actuales.','OBUIAPP_Personalization_Toolbar_Button_modified':'Solapa personalizada, haga click para cambiar la configuración personalizada.','OBUIAPP_AttachmentRemoveAll':'Eliminar Todos','APRM_ReconciledDocument':'El documento ya está reconciliado','OBUIAPP_PROCESSING':'Processing...','OBUIAPP_ArrowRightKey':'Flecha Derecha','OBUISC_Dialog.YES_BUTTON_TITLE':'Sí','APRM_ReconciliationMixed':'Combinación errónea de reconciliaciones: no se pueden ejecutar reconciliaciones manuales y automáticas en paralelo.','UINAVBA_QUICK_CREATE':'Crear Rápido','OBUIAPP_Clear':'Borrar','OBUIAPP_milliseconds_ago':'hace N milisegundos','OBUIAPP_Personalization_Rowspan':'Número de Filas Ocupadas','OBUIAPP_NotesPrompt':'Esta sección muestra las notas añadidas a este registro.','OBUIAPP_InvalidValue':'El valor introducido no es válido.','OBUIAPP_Image_Warn_RESIZE_NOASPECTRATIO':'Se redimensionará la imagen a XXXxYYY pixels. Para evitar deformaciones, se recomienda subir una imagen con la misma relación de aspecto.','OBUIAPP_LOADING':'CARGANDO...','NE_FECHA_FIN_EXCEPTION':'La Fecha Final de Contrato no puede ser menor a la Fecha de Inicio.','OBKMO_WidgetLabel':'Widget','APRM_ZeroAmountNotInserted':'%s row/s inserted.<br/\>%s row/s not inserted because credit and debit amount were 0.','NO_NullCuentaRubroEgreso':'No se ha configurado una cuenta para el rubro de egreso.','OBUIAPP_weeks_from_now':'N semanas desde ahora','APRM_InvoiceWithPayments':'La factura tiene pagos relacionados.','APRM_GLItem':'Conceptos Contables','OBUIAPP_Undo':'Deshacer los cambios actuales y volver a los últimos cambios guardados o cargados.','OBUIAPP_New':'Nuevo','NE_CON_EMP_FEC_FIN_VAL':'La Fecha Final de Contrato no puede ser menor o igual a la Fecha de Inicio.','OBCQL_NoAccessToWidget':'Current user/role does not have access to widget %0','OBUIAPP_Image_Confirm_RECOMMENDED':'La imagen que ha subido (AAAxBBB pixels) tiene diferente tamaño de lo recomendado (XXXxYYY pixels). Esto podría resultar en efectos visuales no deseados. ¿Quiere continuar?','OBUISC_GroupingMessages.upcomingNextWeekTitle':'Upcoming next Week','APRM_PaymentDocumentno':'Pago/Cobro','OBUISC_Date.shortMonthNames.May':'May','APRM_OutstandingDeposits':'Depósitos Pendientes','OBUIAPP_GoToAttachments':'Mostrar archivos adjuntos','APRM_AlgorithmConfirm':'Do you want the algorithm to be run against unmatched bank statement lines?','OBUIAPP_pickerIconPrompt':'Mostrar Selector de Fecha','OBKMO_PublishWarning':'Los cambios serán publicados a todos los usuarios de esta entidad','OBUIAPP_TabKey':'Tab','OBUIAPP_SummaryFunctionMax':'Max','OBKMO_NoWidgetsRemoved':'Ningún widget ha sido eliminado.','OBUIAPP_RM_MoreThanAvailable':'La cantidad servida supera la cantidad disponible. Por favor introduzca un rango válido: 0 - %0.','OBUIAPP_ConfirmRemove':'El archivo será eliminado. ¿Está seguro de que desea continuar?','OBUIAPP_RestrictedUser':'This user doesn\'t have access to the backend. To be able to access Openbravo, a user needs a role with access to the backend.','OBUIAPP_ExecuteInCallout':'Esta ventana está haciendo uso de una funcionalidad que necesita ser actualizada para funcionar correctamente en Openbravo 3. Se ha añadido una preferencia para que esta ventana sea abierta automáticamente en modo clásico hasta que el problema sea arreglado. Contacte con su Administrador del Sistema, o con el desarrollador del módulo para arreglar este problema. Ahora debe salir de la aplicación, y logarse de nuevo, para que esta ventana se muestre en modo clásico.','OBUIAPP_ArrowUpKey':'Flecha Arriba','OBUIAPP_Save':'Guardar','OBUIAPP_seconds_ago':'hace N segundos','OBUIAPP_Organization':'Organización','APRM_MissingMatchingAlgorithm':'La cuenta financiera no tiene definido de ningún algoritmo de ajuste.','NE_NO_CB_EMP_ING_EGR_REP':'Tipo de Ingreso o Egreso existente','APRM_Multiple_Payment_Schedules':'El pedido dispone de más de un Plan de Pago para el Detalle de Pago. Por favor, contacte con el Administrador del Systema para que lo solucione.','OBKMO_MoveDown':'Mover Abajo','OBUIAPP_CalWidget_AddEvent':'Add Event','OBUIAPP_RefreshData':'Refrescar los datos actuales leyendo de la base de datos.','OBUIAPP_UseAsFilter':'Usar como filtro','CO_VALOR_CERO':'No existe valor a procesar','UINAVBA_SetAsDefault':'Por defecto','UINAVBA_LogOut':'Log Out','APRM_CreditWithoutBPartner':'Los pagos sin tercero relacionado, no pueden generar ni consumir crédito.','OBUIAPP_ClearSummaryFunction':'Remove Summary Function','OBUIAPP_NoParentSelected':'Seleccione un registro padre para que sus hijos se muestren aquí.','OBUIAPP_Done':'Hecho','OBKMO_DB_Prefix':'Prefijo de Base de Datos','OBUIAPP_months_ago':'hace N meses','OBKMO_AdminLevelOrg':'Organización','NO_VACACION_FECHA':'Ingrese correctamente la fecha final, esta no puede ser menor que la fecha de inicio.','OBUIAPP_Role':'Rol','OBUIAPP_LinkedItemsListGridHeader':'Elemento Relacionado','NE_CON_EMP_FEC_INI_MOD_VAL':'La Fecha de Inicio de Contrato no puede ser modificada.','OBUIAPP_RM_TooMuchShipped':'La suma de la cantidad enviada supera la cantidad pendiente para el pedido de devolución de material y número de línea. Por favor introduzca un rango válido: 0 - %0.','OBUIAPP_CreateNewRecord':'Crear Nuevo Registro','OBKMO_RecentDocuments':'Documentos Recientes','OBUISC_Dialog.DONE_BUTTON_TITLE':'Hecho','APRM_DocumentTypeNotFound':'Tipo de Documento no definido','OBUISC_Date.shortDayNames.Fri':'Vie','OBUIAPP_Image_Warn_ALLOWED_MINIMUM':'El tamaño mínimo de la imagen es XXXxYYY pixels.','OBUIAPP_ConfirmUndo':'Existen datos sin guardar en la ventana, y al deshacer los cambios, se perderán. ¿Desea continuar con el refresco?','OBJSON_InvalidProperty':'The name %0 is invalid, use one of the following names: %1','UINAVBA_QUICK_LAUNCH':'Abrir Rápidamente','OBKMO_WidgetSection':'Widget','OBUIAPP_Yes':'Sí','APRM_SplitBankStatementLineConfirm':'Los importes de la línea de banco y la transacción no coinciden. ¿Quiere realizar una conciliación parcial?','OBUIAPP_EditInForm':'Editar en formulario','OBUISC_Validator.notAString':'El valor no es una cadena de texto válida','NE_HORA_PARCIAL_EXCEPTION':'El Número de Horas Parciales no puede ser menor a cero.','OBUIAPP_ConfirmDownloadMultiple':'¿Desea descargar todos los archivos adjuntos de los registros seleccionados comprimidos en un archivo attachments.zip?','OBUIAPP_GridCreateOne':'Crear un Registro','OBUIAPP_Delete':'Eliminar','OBUIAPP_weeks_ago_1':'hace %0 semanas','NE_TERCERO_CON_RUB':'No se puede eliminar el registro porque el mismo se encuentra en el Rol de Pagos.','OBUIAPP_NewIconPrompt':'Está creando un registro nuevo.','OBUIAPP_Personalization_HeaderProperties':'Propiedades','UINAVBA_Cancel':'Cancelar','OBUIAPP_GroupBy':'Group by ${title}','OBUIAPP_months_ago_1':'hace %0 meses','UINAVBA_PasswordChanged':'La contraseña ha sido modificada!','NE_NO_PER_FEC_VAL':'La Fecha de Permiso debe estar entre las Fechas de Contrato.','OBUIAPP_Personalization_Toolbar_Save':'Haga click aquí para guardar la disposición actual de los campos y actualizar el formulario','OBUIAPP_GroupBy100':'By 100','OBUIAPP_AttachmentSubmit':'Subir','OBUIAPP_DialogTitle_DeleteRecords':'Eliminar Registros','OBUISC_ListGrid.editSummaryFieldText':'Editar Campo Resumen...','OBSEIG_LinkedOK':'El usuario y la cuenta Google han sido enlazados satisfactoriamente.','NO_Insertar_Pago_Linea':'No se puede insertar una linea más al pago','OBUIAPP_SummaryFunctionAvg':'Avg','OBUIAPP_AttachmentBy':'por','OBUIAPP_Apply':'Aplicar','OBUISEL_DATASOURCE_FIELD_OR_PROPERTY_MUST_BE_SET':'Debe especificarse el campo de la fuente de datos. Uno de los dos campos será visible y debe ser especificado.','APRM_MoreAmountThanOutstanding':'It is not possible to pay more amount than the outstanding.','APRM_BankStatementLineWrongDateWarning':'Bank statement line with wrong date. Cannot process lines previous to ','OBUIAPP_Image_Error_ALLOWED_MAXIMUM':'El tamaño de la imagen que ha subido (AAAxBBB pixels)  es mayor que el tamaño máximo permitido (XXXxYYY pixels).','OBUIAPP_years_from_now':'N años desde ahora','OBUISC_Date.shortMonthNames.Jul':'Jul','NO_ConfirmCheckoutRol':'Desea completar los roles seleccionados?','OBUIAPP_UpgradeRunAPRMBtn':'Ejecutar la herramienta de migración','APRM_JSDIFFERENCEWITHOUTACTION':'Existen diferencias en los importes y no ha seleccionado ninguna acción. Por favor, haga coincidir los importes o seleccione una de las acciones.','OBUISC_GroupingMessages.byUpcomingTitle':'By Upcoming Period','OBUIAPP_ConfirmDeleteImage':'¿Está seguro de que desea eliminar de forma permanente esta imagen?','APRM_NoFinancialAccountDefined':'It does not exist any Financial Account defined for this payment method and currency','APRM_BankFee':'Gastos Bancarios','OBUISC_Dialog.WARN_BUTTON_TITLE':'Nota','OBUISC_DateItem.pickerIconPrompt':'Mostrar selector de fecha','OBCQL_RowsNumber':'Mostrando %0 de %1 filas','OBKMO_Type':'Tipo','OK':'OK','NO_CheckoutResultPagos':'El proceso de pagos ha sido exitoso','OBUISC_Validator.notABoolean':'El valor no es un booleano válido','OBUISC_ListGrid.sortFieldAscendingText':'Ordenar Ascendentemente','OBUIAPP_Personalization_HeaderPreview':'Previsualización','OBUIAPP_Open':'Abrir','OBCQL_ShowAll':'Mostrar todos...','OBUIAPP_GridFilterNoResults':'El filtro aplicado no seleccionó ningún registro','OBUIAPP_Personalization_Toolbar_CancelEdit':'Cancelar los cambios actuales y volver a la disposición guardada','OBUIAPP_SaveNoteButtonTitle':'Guardar Nota','OBUIAPP_NoDataInGrid':'No hay datos en el grid.','APRM_Order':'Pedido','NO_SINDATOS':'Sin datos para procesar','OBUIAPP_ClickSelectedCount':'Haga click para desplazarse al primer registro seleccionado','APRM_PAYEXECMNGT_DOCUMENTNO':'Nº documento','OBUIAPP_NoAccess':'El rol actual no permite acceso a esta funcionalidad.','OBUIAPP_HomeKey':'Inicio','UINAVBA_Client':'Cliente','APRM_UnReconciled':'Pendiente de Reconciliar','OBUIAPP_WindowFieldMandatory':'If the personalization type is \'Window\' then the Window field is mandatory and cannot be left empty.','OBUIAPP_ArrowLeftKey':'Flecha Izquierda','OBUISC_Identifier':'Identificador','APRM_JSNOTALLAMOUTALLOCATED':'No se ha asignado toda la cantidad disponible.','OBUIAPP_Info':'Información','NO_CheckoutResultAva':'El proceso de completar los avances a sido exitoso','OBUIAPP_ActivateMessagePersonalization':'use <a href=\"http://wiki.openbravo.com/wiki/User_Manual/Window_Personalization\" target=\"_blank\"\>Window Personalization</a\>','OBUIAPP_UndoChanges':'Cancelar cambios','APRM_NoStatementsToMatch':'No hay líneas de extracto bancario para conciliar. Por favor importe un extracto bancario','OBUIAPP_BackspaceKey':'Retroceso','CO_FACTURA_VENTA_PAGADA':'La factura ha sido cobrada completamente, no se puede procesar la retención.','OBUISC_Date.shortMonthNames.Apr':'Abr','OBKMO_CreateNew':'Crear Nuevo','OBUIAPP_FillMandatoryFields':'Few mandatory fields have not been filled. Refer lines','OBUIAPP_LearnMore':'Más Información','OBUISC_Date.shortMonthNames.Jun':'Jun','NO_PERMITE_BORRA_DATOS':'No se permite borrar un regisro que no este en estado borrador.','OBUISC_ListGrid.addSummaryFieldText':'Añadir Campo Resumen...','APRM_ReversePayment':'Payment can not be reactivated as it is a reverse payment.','OBUIAPP_TabFieldMandatory':'If the personalization type is \'Form\' then the Tab field is mandatory and cannot be left empty.','NO_UNICO_CONTRATO':'No se puede crear mas de un contrato activo para un empleado\n','OBUIAPP_DeleteRow':'Eliminar el registro actual (el seleccionado) de la base de datos.','APRM_PeriodNotAvailableClearedItem':'The reconciliation cannot be completed because it contains one or more items in a closed period.<BR\>The period of the cleared item (%s) is not open or available.','OBKMO_Module_Name':'Nombre del Módulo','OBUIAPP_AlertGrid_Alert':'Alerta','OBKMO_OpenbravoTypeInstanceMustOnTop':'Las instancias de comunidad no pueden cambiar la posición de las instancias de widgets por defecto en Openbravo','OBUIAPP_AttachmentPrompt':'Esta sección muestra todos los ficheros adjuntados a este registro, y permite añadir nuevos, o eliminar los ya existentes.','OBUIAPP_SetHyperlinkURL':'Set Hyperlink URL','OBUIAPP_AttachmentUploading':'Subiendo...','OBUIAPP_Image_Warn_ALLOWED_MAXIMUM':'El tamaño máximo de la imagen es XXXxYYY pixels.','ASV_MENSAJE_ESTANTE':'Es necesario seleccionar una Estantería','OBUIAPP_UpgradeEndTitle':'Proceso de actualización completado','OBUIAPP_AddNew':'Añadir Nuevo','OBUIAPP_LinkedItemsTitle':'Items Relacionados','OBUIAPP_Saved':'Guardado','OBUIAPP_minutes_from_now':'N minutos desde ahora','NO_NoExistProcedure':'No existe PROCEDIMIENTO que realizar el cálculo del rubro: ','OBUISC_No':'No','APRM_processProposalNoLines':'No es posible procesar una Propuesta de Pago sin líneas.','OBUIAPP_Image_Error_ALLOWED_MINIMUM':'El tamaño de la imagen que ha subido (AAAxBBB pixels)  es menor que el tamaño mínimo permitido (XXXxYYY pixels).','OBKMO_NoWidgetsAdded':'Ningún widget se ha añadido.','OBUIAPP_DeleteView':'Eliminar Vista','OBKMO_AddLabel':'Añadir','OBUIAPP_User':'Usuario','OBUISEL_CAN_NOT_CHANGE_DATASOURCE_OR_TABLE_WITH_FIELDS':'El campo de la fuente de datos o de la tabla no puede ser cambiado si hay campos definidos para el selector. Todos los campos del selector deben ser eliminados antes de poder cambiar la tabla o la fuente de datos','OBUIAPP_ParentIsNew':'El registro padre todavía no ha sido guardado. Guárdelo para poder crear registros hijos.','APRM_JSAMOUNTDIFFTOZERO':'Sólo puede haber una cantidad diferente de cero.','OBUIAPP_DialogTitle_RemoveAttachments':'Eliminar Adjuntos','OBKMO_CommunityCanNotDeleteMyOBWidgets':'Las instancias de Comunidad no pueden borrar clases de widget que pertenecen al módulo de Espacio de Trabajo.','APRM_JSMOREAMOUTALLOCATED':'Se ha distribuido más cantidad de la disponible.','OBUIAPP_Personalization_Hidden':'Oculto','OBUIAPP_WindowPersonalization_Guidance':'Arrastre un campo verticalmente en el panel de Campos para cambiar el orden y la sección en la que aparece.','OBUIAPP_Document_Link':'Enlace del Documento','UINAVBA_Role':'Rol','OBCLKER_TEMPLATE_OR_TEMPLATE_LOCATION_MUST_BE_SET':'La plantilla o la localización de la plantilla deben ser definidos','OBUIAPP_EndKey':'Fin','APRM_SplitBSLReconciliationPosted':'La Conciliación ya se ha contabilizado. No es posible dividir la línea de banco. Por favor, descontabilice la Conciliación si quiere dividir la línea de banco.','OBUISC_GroupingMessages.byDayTitle':'By Day','OBUISC_Dialog.SAY_BUTTON_TITLE':'Nota','OBUIAPP_EditInGrid':'Editar en grid','OBUIAPP_FormConfirmDownloadMultiple':'Do you want to download all attachments of the selected record as attachments.zip?','OBUIAPP_hours_from_now':'N horas desde ahora','OBUIAPP_SummaryFunctionMin':'Min','UINAVBA_Warehouse':'Almacén','OBUIAPP_PgDnKey':'AvPág','OBKMO_Update_Information':'Información de Actualización','OBUIAPP_NotAddingFieldsWhileGridEditing':'New fields cannot be added to the grid while it is being edited.','OBUIAPP_AttachmentRemove':'Eliminar','OBUIAPP_SaveView':'Guardar Vista','OBUISC_GroupingMessages.byWeekTitle':'By Week','OBUIAPP_SummaryFunctionCount':'Count','OBUISC_Dialog.CANCEL_BUTTON_TITLE':'Cancelar','OBUIAPP_Personalization_Main_Group':'Principal','OBUIAPP_SetSummaryFunction_Description':'Set the summary function which is used to compute/show a separate summary row.','OBUIAPP_ungroup':'Ungroup','OBUISEL_ONE_SELECTOR_PER_REFERENCE':'Solo un selector puede definirse por cada referencia.','OBUISC_GroupingMessages.byMonthTitle':'By Month','OBUISC_DateChooser.todayButtonTitle':'Hoy','UINAVBA_CurrentPwdIncorrect':'La contraseña actual es incorrecta.','UINAVBA_AlertPresent':'%0 Alertas','OBUIAPP_ConfirmRemoveNote':'¿Está seguro de que desea borrar de forma permanente esta nota?','OBUIAPP_Error':'Error','OBUIAPP_StandardView':'Vista Estándar','APRM_PaymentInExecution':'Otro proceso está ejecutando este efecto','APRM_OutstandingPayments':'Reintegros Pendientes','OBUIAPP_MoveSelectedToStatus':'Mover seleccionados a %0','OBUISC_GroupingMessages.byYearTitle':'By Year','APRM_PaidInvoice':'Invoice %s is already fully paid.','APRM_InvalidOrMissingValues':'Could not load the statement. Please check the file because it could contain invalid values or there are missing values.','APRM_FATS_PAYMENTNO':'Pago/Cobro','OBUISC_Date.shortDayNames.Tue':'Mar','OBUIAPP_Tomorrow':'Mañana','OBKMO_Author_Message':'Mensaje del Autor','OBUIAPP_SelectDateRange':'Seleccionar Rango de Fecha','OBUISC_Date.shortDayNames.Sun':'Dom','UINAVBA_NewPwd':'Nueva contraseña','APRM_DoubtfulDebtNoDocument':'Document Type not defined for Doubtful Debts.','OBUISC_Date.shortMonthNames.Aug':'Ago','OBUIAPP_ApplyFilters':'Click here to apply the current filters','NO_CheckoutResultRol':'El proceso de completar los roles ha sido exitoso','OBUIAPP_EditIconPrompt':'Está editando este registro.','OBUISC_GroupingMessages.byQuarterTitle':'By Quarter','UINAVBA_APPLICATION_MENU':'Aplicación','OBUIAPP_days_from_now':'N días desde ahora','OBUISC_GroupingMessages.bySecondsTitle':'By Seconds','CO_ESQUEMA_FALTA':'Faltan datos en esquema contable','APRM_RefundAmount':'Cantidad devuelta','OBUIAPP_SaveAs':'Guardar como','APRM_bpmandatory_creditrefund':'El tercero no puede ser vacio al devolver el importe al cliente o al generar o utilizar crédito.','APRM_CreditUsedinInvoice':'Crédito consumido en la factura Nº: %s','APRM_PAYMENTMETHOD_MISSING':'El campo método de pago es obligatorio y no se puede dejar vacio','OBUIAPP_minutes_ago_1':'hace %0 minutos','OBUIAPP_CalWidget_Filter':'Filter','OBUISC_GroupingMessages.upcomingNextMonthTitle':'Upcoming next Month','OBUIAPP_View':'Vista','OBUIAPP_ActionNotAllowed':'Con su rol actual esta acción no está permitida.','NE_RUB_LIN_DEB_HAB_VAL':'Es necesario seleccionar por lo menos una cuenta de Debe o Haber.','OBUIAPP_NEXTBUTTON':'Ir al Registro Siguiente','OBUIAPP_ErrorInFieldsGrid':'Una o más filas no pudo ser guardada. Arregle el problema o <a href=\"#\" style=\"color: green;\" onclick=\"window[\'%0\'].undo();\"\>cancele todos los cambios pendientes</a\> para volver al último estado guardado.','OBUIAPP_SaveClose':'Guardar y cerrar la vista de formulario ','NO_ErrorLiquidacion':'No se han podido completar las liquidaciones seleccionadas','OBUIAPP_Personalization_PropertiesFormEmptyMessage':'Seleccione un campo mostrado en el panel izquierdo, para editar sus propiedades en este panel.','OBUIAPP_GroupBy100000':'By 100000','OBSEIG_DuplicatedIdentifier':'Esta cuenta de Google está asociada ya con otro usuario Openbravo. Solo se puede asociar una cuenta de Google con cada usuario Openbravo.','OBKMO_PublishSuccessful':'Los cambios han publicado a _level_ _levelvalue_','OBUIAPP_by':'por','APRM_AmountMismatch':'Los importes no cuadran. La suma de los importes pendientes debería ser la misma para la versión antigua y nueva del plan. Intente refrescar la cabecera de la factura.','UINAVBA_RoleClient':'Rol - Cliente','OBUIAPP_Res_MoreQtyThanAvailable':'Reserved quantity exceeds the available quantity (%0) considering the quantity reserved in other reservations (%1). Please, enter a valid number.','APRM_AddPaymentOut':'Añadir Pago','CO_FACTURA_PAGO_TT_RET':'La factura ha sido pagada total mente no se puede aplicar la retención','OBUIAPP_GridSelectColumnPrompt':'Deseleccionar este registro','OBUIAPP_GridNoRecords':'Ningún registro.','No_ConfiguracionTIE':'La configuración esta incorrecta en el Tipo de ingreso/Egreso','OBUIAPP_From':'Desde','OBUIAPP_Close':'Cerrar','NO_EjecucionCorrecta':'El proceso se ha ejecutado con éxito.','OBUIAPP_GridFilterImplicitToolTip':'Filtros implícitos (de sistema) aplicados. Haga click aquí para desactivarlos.','OBKMO_PublishLabel':'Editando el Espacio de Trabajo para _level_: _levelvalue_','OBUIAPP_GroupBy1':'By 1','NO_AvanceMayorSueldo':'No se pueden entregar un avances mayor o igual que el sueldo.','OBUIAPP_PropertyNotFound':'Property not found','NE_NO_CB_EMP_ING_EGR':'Es necesario seleccionar por lo menos una Cuenta de Ingreso o Egreso.','OBKMO_Publish':'Publicar','OBUIAPP_UpgradeDesc':'Lo sentimos, pero el sistema está en modo mantenimiento debido a una actualización, y solo se permiten realizar tareas de mantenimiento.<br/\><br/\>Solo se permite el acceso en modo Administrador del Sistema.<br/\>Por favor <b\>salga</b\> de la aplicación a menos que su acceso haya sido autorizado por el Administrador del Sistema.<br/\>','OBUIAPP_RestoreDefaults':'Restablecer valores por defecto','APRM_GainLossFeeAccountsError':'Se deben rellenar las cuentas: Beneficios por plusvalías, Pérdidas por minusvalías y Gastos bancarios.','OBUISC_DateChooser.cancelButtonTitle':'Cancelar','OBKMO_AdminLevelSystem':'Sistema','OBUIAPP_AlertGrid_Time':'Tiempo','CO_RET_CONTABILIZA':'No se puede reactivar, la retención esta contabilizada','NE_NO_PER_DIA_HOR_VAL':'Es necesario ingresar un valor válido para Días u Horas de Permiso.','OBKMO_Data_Access_Level':'Nivel de Acceso de Datos','NO_Borra_Pago_Lineas':'No puede borrar los pagos que se encuentran en estado Pagado','UINAVBA_AlertManagement':'Gestión de Alertas','OBUIAPP_GridFilterSingleRecord':'Single record filter applied. Click to clear.','OBUIAPP_Current_day_of_next_week':'Día actual de la semana siguiente','OBUISC_ListGrid.sortFieldDescendingText':'Ordenar Descendentemente','APRM_AwaitingExecutionAmountError':'Si una línea del plan de pagos tiene un detalle de pago asociado que esté pendiente de ejecución, el nuevo importe pendiente debe ser, al menos, el importe del detalle del pago.','OBKMO_ParentModuleSection':'Módulo Padre','APRM_FATS_PAIDAMOUNT':'Importe Pagado','OBUIAPP_Level':'Nivel','OBUIAPP_Image_Warn_RECOMMENDED_MINIMUM':'Para un mejor ajuste, se recomienda usar una imagen con al menos XXXxYYY pixels.','OBUIAPP_SetFont':'Set Font','UINAVBA_NoAlert':'No hay ninguna alerta','OBUISC_ListGrid.groupByText':'Agrupar por ${viewer.getSummaryTitle(field)}','OBKMO_Widget_Description':'Descripción del Widget','OBUIAPP_GroupByDecimal10':'By 0.1','APRM_TransactionExists':'El documento no se puede reactivar. El registro ya se ha almacenado en la cuenta financiera','OBKMO_AdminOtherMyOpenbravos':'Administrar Otros','OBKMO_WMO_EditSettings':'Editar Configuración','OBUIAPP_weeks_ago':'hace N semanas','OBUISC_GroupingMessages.byDayOfMonthTitle':'By Day of Month','OBUIAPP_DeleteConfirmationSingle':'Está seguro de que desea eliminar el registro seleccionado? Esta acción eliminará también los registros hijos','OBUIAPP_ErrorSavingFailed':'La acción de guardado falló.','OBUIAPP_Success':'Éxito','APRM_OldFlowDisabled':'El flujo financiero antiguo está deshabilitado. Por favor utilice el nuevo flujo del módulo Advanced and Payables and Receivables Management','NE_FECHA_VAC_VAL':'La Fecha de Inicio y Final de Vacación deben estar entre las Fechas del Contrato.','OBUIAPP_StrikeThroughSelection':'Strike Through Selection','OBUIAPP_DialogTitle_RemoveAttachment':'Eliminar Adjunto','OBUIAPP_ImageFile':'Fichero','OBUIAPP_GridSelectAllColumnPrompt':'Deseleccionartodos los registros','OBUIAPP_AttachmentDownloadAll':'Descargar Todos','OBUIAPP_milliseconds_from_now':'N milisegundos desde ahora','APRM_SplitBSLAlreadyMatched':'No es posible dividir la línea de banco seleccionada porque ya se ha relacionado con una transacción.','OBUIAPP_years_ago':'hace N años','UINAVBA_ChangePassword':'Cambiar Contraseña','OBUIAPP_LogoutConfirmation':'¿Está seguro de que desea salir de la aplicación?','OBKMO_Module_Version':'Versión del Módulo','OBKMO_WMO_Refresh':'Refrescar','OBUISC_ListGrid.emptyMessage':'No hay registros que mostrar.','NE_RUBRO_LINE_EXCEPTION':'Este Rubro ya existe en el Perfil seleccionado.','APRM_FATS_BPARTNER':'Tercero','OBUIAPP_Personalization_Displayed':'Mostrado','OBUIAPP_GC_Unique_Client':'Only one default configuration per instance is allowed.','OBUIAPP_Image_Warn_RESIZE_ASPECTRATIONL':'Se redimensionará la imagen al tamaño máximo de XXXxYYY pixels (manteniendo la relación de aspecto) si tiene un tamaño mayor.','OBUIAPP_OtherUploadInProgress':'It seems that another file is being uploaded. If a new file is uploaded, the previous one will be canceled. Are you sure you want to upload a new file?','OBUIAPP_CLOSEBUTTON':'Cerrar el registro actual y volver a vista en modo grid','OBUIAPP_CancelEdit':'Cancelar los cambios y volver al último estado guardado','NO_unico_linea_empleado':'No se puede crear mas de una linea con el mismo empleado al rubro seleccionado','NO_VACACION_MAX':'No puede tener vacaciones mas de 15 días.','OBUIAPP_quarters_ago':'hace N trimestres','OBUIAPP_AttachmentsSpecifyFile':'Por favor especifique un fichero para subir.','OBUISC_RPCManager.fetchDataPrompt':'${loadingImage}','APRM_InvoiceWithUnprocessedProposal':'La factura tiene un pago previsto incluido en una propuesta sin procesar.','NO_OneLiquidOnly':'Solo ha seleccionado una liquidación','OBUIAPP_delete':'Eliminar','OBUIAPP_GetDirectLink':'Obtener un enlace directo a esta vista o registro','CO_EjecucionCorrecta':'El proceso se ha ejecutado Correctamente.','APRM_AlreadyPaidInvoice':'El plan de pagos archivado no se puede modificar porque la factura ya está pagada (al menos parcialmente), incluso si el pago se anula posteriormente.','OBUIAPP_RestrictedUserTitle':'Access Restricted','OBUIAPP_AltKey':'Alt','OBSEIG_SignInAltMsg':'Acceder usando una cuenta Google','OBUISC_GroupingMessages.upcomingBeforeTitle':'Before','OBKMO_AdminLevelLabel':'Nivel','OBUIAPP_AttachmentEditDesc':'Edit Description','OBUIAPP_Res_LessThanReleased':'Reserved quantity is lower than the released quantity. Enter a valid number equal or higher than %0.','OBUIAPP_SelectedRecords':'%0 seleccionados','OBUIAPP_FilteredGrid':'Este grid está siendo filtrado usando','APRM_FATS_RECEIVEDAMOUNT':'Importe Recibido','OBUIAPP_URL':'URL','OBUIAPP_AttachmentDownload':'Descargar','NE_NO_VACACION_FECHA_VAL':'La Fecha Final de vacaciones no puede ser menor o igual a la Fecha de Inicio.','OBUIAPP_InsertKey':'Ins','OBUIAPP_RM_MoreThanPending':'La cantidad enviada supera la cantidad pendiente. Por favor introduzca un rango válido: 0 - %0.','APRM_ReconciliationDiscrepancy':'Hay una discrepancia entre el Extracto y la Transacción seleccionadas. El extracto tiene objetos que permanecen sin reconciliar con un total de:','OBKMO_NotAllParametersSet':'No todos los parámetros han sido introducidos, por favor introduzca valores para los parámetros obligatorios.','APRM_FutureReconciliationExists':'No se puede realizar la acción ya que existe una Conciliación posterior. Reactive primero y elimine las reconciliaciones posteriores.','OBUIAPP_ConfirmCancelEdit':'Cancelar esta edición eliminará los cambios no guardados de este registro. ¿Continuar?','OBUISC_Validator.notOneOf':'El valor introducido no existe en la lista de valores. Seleccione uno de los valores de la lista','APRM_JSNOTLINESELECTED':'No es posible añadir un pago sin líneas.','OBUIAPP_ProcessClassNotFound':'Cannot find class for process in window %0<br/\><br/\>\nAll modules in this window must be \"in development\".','APRM_NotAllowWriteOff':'This action is not allowed, write off limit exceeded','APRM_InvoiceWithDoubtfulDebt':'The invoice has related doubtful debt.','OBKMO_AdminLevelClient':'Cliente','OBUIAPP_SpaceKey':'Espacio','OBUIAPP_ActivateMessagePortal':'Portal is a Premium Feature','OBUIAPP_SetSummaryFunction':'Set Summary Function','OBUIAPP_ClearSummaries':'Clear Summary Functions','OBUISC_Time.AMIndicator':'AM','OBUIAPP_ImplicitFilter':'un filtro implícito','APRM_PaymentReversed':'Payment can not be reactivated as it has been reversed. Please undo reversal prior to reactivate this payment.','OBUISC_Validator.requiredField':'Es necesario introducir un valor para el campo. Por favor introduzca o seleccione un valor.','OBUIAPP_Personalization_Toolbar_SaveClose':'Guarde sus cambios y cierre el personalizador de formularios','OBUIAPP_LinkedItemsPrompt':'Esta sección muestra los registros que hacen referencia al registro actual.','ATS_ValoresNoCuadran':'Los montos de los reembolsos no son iguales a los totales de la factura','OBUIAPP_MyOpenbravo':'Espacio de Trabajo','NO_SINDATOS_VALOR':'No valor a procesar datos ','OBUIAPP_Image_Warn_RECOMMENDED':'Para un mejor ajuste, se recomienda usar una imagen de exactamente XXXxYYY pixels.','OBUIAPP_ConfirmUploadOverwrite':'El fichero que ha seleccionado ya existe, por lo que el anterior será reemplazado. ¿Está seguro de que desea continuar?','RE_PagosPendientes':' pagos vencidos','OBUIAPP_UpgradeScriptDesc':'Los siguientes scripts de configuración no han sido exportados:<br/\>%0.<br/\>Los cambios en la disposición de los campos contenidos en estas plantillas han sido desactivados durante el proceso de actualización.<br/\>Debe exportar sus scripts de configuración para actualizar su código fuente.  <a target=\"_blank\" href=\"http://wiki.openbravo.com/wiki/ERP/2.50/Developers_Guide/Concepts/Development_Build_Tasks#Modules\" class=\"OBNoteListGridDelete\"\>Obtener información sobre cómo exportar un script de configuración. </a\><br/\>Después, debe salir y volver a entrar en la aplicación para que los cambios se hagan efectivos.','OBKMO_ActivateMessage':'para borrar este widget','OBUIAPP_SaveSuccess':'El registro fue guardado con éxito.','OBUIAPP_AttachmentAdd':'Añadir','OBUIAPP_NewDoc':'Crear un registro en modo formulario','APRM_AwaitingExecutionAmountNotDeleted':'Las líneas con importes pendientes de ejecución no pueden ser borradas.','APRM_ReconcileInFutureOrPast':'No se puede reconciliar ningún día antes de la última Conciliación ni ningún día futuro.','OBUIAPP_Image_Warn_ALLOWED':'El tamaño de la imagen debe ser exactamente XXXxYYY pixels.','OBUIAPP_ConfirmOverwriteImage':'La imagen existente será reemplazada por la nueva. ¿Desea continuar?','Cancel':'Cancelar','OBUIAPP_WantToCloneOrder':'Desea clonar el pedido?','OBKMO_RecentViews':'Vistas Recientes','OBUISC_RPCManager.saveDataPrompt':'${loadingImage}','UINAVBA_Profile':'Perfil','OBUIAPP_LazyFilteringNoFetch':'Apply any filters you need and click on the \'Apply filters\' button to display the results','OBUIAPP_AttachFile':'Adjuntar Fichero','OBUIAPP_hours_ago':'hace N horas','OBKMO_Manage_MyOpenbravo':'Gestionar el Espacio de Trabajo','APRM_CreditConsumed':'Payment can not be reversed. Some of the credit from this payment has already been used. Please undo credit consumption prior to reverse this payment.','OBUIAPP_ClearIconPrompt':'Hacer clic aquí vaciará el valor del campo','NO_CheckAvanTip':'Seleccione uno o varios avances','APRM_BankStatementLineWrongDateWarning2':'Check the lines with Line No.:','NE_ING_EGR_UNI_CON':'Sólo se puede ingresar un registro por cada Tipo de Ingreso o Egreso.','OBUIAPP_Personalization_HeaderFields':'Campos','obcql_column_whereclause_chk':'\'Parte Izquierda de la cláusula Where\' es obligatoria cuando \'Puede ser filtrado\' está activado.','OBUIAPP_Personalization_ConfirmDelete':'¿Desea eliminar su disposición personalizada del formulario? Si continua, se usará la disposición estandar. ','FINPR_RecPay':'Cobros/Pagos','UINAVBA_EndSession':'Finalizar Sesión','APRM_INVOICED_ORDER_MAN_PAYMENTS':'El pedido facturado tiene pagos creados desde el antiguo flujo de cobros y pagos. Por favor elimínelos antes de completarlos.','OBUIAPP_Client':'Entidad','OBUIAPP_AutoSaveNotPossibleExecuteAction':'El guardado automático de los cambios no es posible. ¿Desea continuar?','OBUIAPP_CreateRecordInForm':'Nuevo registro en formulario','OBUIAPP_UpgradeTitle':'Sistema en modo de mantenimiento','OBUISC_ListGrid.removeSummaryFieldText':'Eliminar Campo Resumen...','OBUIAPP_CheckOptionalFilters':'The field can be filtered only if @optional_filters@ is included in the where clause of the hql query.','OBUIAPP_AttachmentTitle':'Archivos Adjuntos','OBKMO_Maturity_Status':'Nivel de Madurez','OBUIAPP_AlertGrid_Record':'Registro','OBKMO_PublishError':'Error al publicar cambios a _level_ _levelvalue_','APRM_AmountOutOfRange':'Importe fuera de rango: %s no se puede usar ya que el importe pendiente es %s','OBUISC_ListGrid.removeFormulaFieldText':'Eliminar Campo de Fórmula...','APRM_CreditAmount':'Cantidad a crédito','OBUIAPP_RESTOREBUTTON':'Restablecer la solapa a su tamaño anterior','OBUIAPP_Personalization_PropertiesForm_DynamicStatusBarField':'El campo seleccionado existe tambien en el formulario, sus propiedades no pueden ser editadas ','OBUISC_RPCManager.defaultPrompt':'Estableciendo conexión con el servidor...','OBUIAPP_DeleteConfirmationMultiple':'Está seguro de que desea eliminar los %0 registros seleccionados? Esta acción también eliminará los registros hijos','OBUIAPP_MaxGroupingReached':'There are more than %0 records, grouping is disabled for larger datasets.','OBUIAPP_MakeSelectionUnderlined':'Make Selection Underlined','OBUIAPP_ViewHasBeenSaved':'El estado de la vista se ha guardado.','OBUIAPP_ProcessTitle_Done':'%0 [done]','OBUIAPP_Image_Warn_RESIZE_ASPECTRATIO':'Se redimensionará la imagen al tamaño máximo de XXXxYYY pixels (manteniendo la relación de aspecto).','OBUIAPP_Current_day_of_next_month':'Día actual del mes siguiente','NO_NoLiquidSelected':'No se ha seleccionado ninguna Liquidacion','APRM_TransactionLinesAmountNotMatch':'La transacción se ha creado, pero no se puede reconciliar debido a que los importes de la transacción y la línea del extracto bancario seleccionados no coinciden.','NO_Gastos_Duplicados':'No se pueden ingresar gastos duplicados','UINAVBA_Organization':'Organización','OBUIAPP_DeleteResult':'%0 registro(s) borrados','OBJSON_InvalidFilterValue':'Invalid filter value %0.','APRM_PaymentNotRPAE_NotVoid':'No se puede anular porque no está en estado A Ejecutar','OBUIAPP_DialogTitle_DeleteNote':'Eliminar Nota','OBUIAPP_EnterKey':'Intro','NO_ExisteCunetaEmp':'No se ha asignado cuentas del rubro para el empleado en el esquema contable: ','NO_ConfirmCheckoutAva':'Desea completar los avances seleccionados?','OBUISC_ListGrid.freezeFieldText':'Bloquear ${viewer.getSummaryTitle(field)}','NO_NumSchemaNomina':'La configuración de las cuentas y esquemas contables es incorrecta en el tipo de ingreso y egresos.','CO_NO_LINEAS':'La retención no tiene lineas','OBUIAPP_Res_MoreThanOrderedQty':'Total prereserved quantity exceeds the quantity in sales order line (%0) considering the already reserved quantity in other reservations (%1). Please enter a valid number.','NE_C_BPA_FEC_NAC_VAL':'La Fecha de Nacimiento debe ser menor a la fecha actual.','OBUIAPP_ImageSelectorTitle':'Subir imagen','OBUIAPP_ClearFilters':'Haga clic en el icono de embudo en la parte superior derecha del grid para cancelar todos los filtros.','OBUIAPP_Current_day_of_last_week':'Día actual de la semana anterior','APRM_PaymentGeneratedCreditIsUsed':'El pago tiene todo o parte del crédito utilizado en otros pagos.','OBUISC_GroupingMessages.byMilisecondsTitle':'By Milliseconds','OBUIAPP_SetFontSize':'Set Font Size','OBKMO_NoWidgetsMoved':'No se ha cambiado la posición de ningún widget.','ASV_MENSAJE':'La fecha debe ser mayor a la actual','OBUIAPP_GridSaveButtonPrompt':'Guardar los cambios en la base de datos','OBKMO_AddWidget':'Añadir Widget','OBUIAPP_ConfirmRemoveTitle':'Confirmar Eliminación','IDT_EjecucionCorrecta':'El proceso de importación se ha ejecutado con éxito','OBUIAPP_CALLOUT_JS_EXPR_RESULT':'Resultado de la evaluacion de la expresión:','OBCQL_ActivateMessageExport':'Exportar datos','OBUIAPP_Edit':'Editar','APRM_ExistingPlanIsNotCorrect':'Los importes en el plan de pagos existente no son correctos y no se pueden modificar. Pruebe a refrescar la cabecera de la factura, reactivarla y procesarla de nuevo.','OBUIAPP_DelKey':'Sup','OBKMO_PublishTitle':'Los Cambios han sido Publicados','OBUIAPP_SaveRow':'Guardar los cambios en base de datos','OBUIAPP_GroupBy1000':'By 1000','APRM_FATS_DESCRIPTION':'Descripción','OBUIAPP_Value':'Nivel','OBUIAPP_WantToCloneRecord':'Do you want to clone the selected record?','OBUIAPP_GridCancelButtonPrompt':'Cancelar cambios','CO_NO_FACTURA':'No existe factura asociada','OBUIAPP_SaveChangesBeforeAddRemoveNote':'There are changes in the current record.\nPlease save or discard them before add or remove a note.','NO_NoRolesSelected':'No se han seleccionado roles para completar','UINAVBA_Alerts':'Alertas (%0)','NO_ConfirmCheckoutLiq':'Desea completar las liquidaciones seleccionadas?','OBUIAPP_CalWidget_Legend':'Legend','UINAVBA_OpenView':'Abrir Vista','OBUISC_Date.shortDayNames.Sat':'Sab','OBUISC_ListGrid.fieldVisibilitySubmenuTitle':'Columnas','OBUIAPP_CtrlKey':'Ctrl','APRM_NoBankFileAvailable':'No se ha instalado ningún importador de ficheros','OBUIAPP_DialogTitle_DeleteRecord':'Eliminar Registro','NO_CheckGenerarPagoTip':'Seleccione una o varias lineas para realizar el pago','OBUISC_Validator.notADate':'El valor no es una fecha válida','OBUISC_Date.shortMonthNames.Feb':'Feb','NO_UNICO_QUINCENA_EXCEPTION':'No se puede crear mas de una quincena con el mismo periodo y sucursal\n','APRM_PAYEXECMNGT_DUEDATE':'Fecha vencimiento','OBUIAPP_Print':'Print','APRM_Reconciled':'Reconciliado','APRM_No_ExecutionProcess_Defined':'Proceso de Ejecución no definido para el par Cuenta Financiera - Método de Pago.','OBUIAPP_OpenOnTab':'Abrir en solapa','OBUIAPP_CreateAttachments':'Subir nuevo archivo adjunto','OBUIAPP_toDateOnlyPrefix':'Antes de','OBUIAPP_Personalization_ConfirmClose':'Hay cambios sin guardar, que se perderán si continua. ¿Está seguro de que desea continuar?','APRM_FATS_DATE':'Fecha','OBUISEL_DATASOURCE_OR_TABLE_MUST_BE_SET':'Debe especificarse la fuente de datos o la tabla.','CO_FACTURA_PROCESADA':'Factura no procesada','OBUIAPP_Loading':'Cargando...','OBSEIG_AssociateAccount':'Este proceso enlaza un usuario Openbravo con una cuenta Google. Al finalizar el proceso si se accede al sistema con dicha cuenta Google, se hará login con el usuario Openbravo especificado.\n¿Está seguro de que desea continuar?','APRM_AmountNotFullyAllocated':'Los importes asociados al plan de pagos del pedido no se distribuyeron por completo.','OBUIAPP_ActivateMessage':'Solo usuarios de la edición Básica o Profesional de Openbravo pueden %0. <a target=\"_blank\" href=\"http://www.openbravo.com/product/erp/editions/\"\>Más información</a\> acerca de los beneficios de las ediciones comerciales de Openbravo','NO_CheckLiquidTip':'Seleccione una liquidacion','OBUIAPP_Personalization_Toolbar_RefreshData':'Actualizar el formulario mostrado abajo, en la ventana de personalización de formulario','OBUIAPP_GroupBy10000':'By 10000','OBUISC_Yes':'Sí','OBUIAPP_Personalize_TitlePrefix':'Personalizar - %0','OBKMO_Author':'Autor','OBUIAPP_ManageViews_Toolbar_Button':'Guardar Vista','OBUIAPP_CALLOUT_JS_EXPR_ERROR':'Error evaluando expresión:','UINAVBA_CREATE_NEW':'Crear Nuevo','OBUIAPP_TransactionalFilter':'un filtro transaccional <i\>(solo documentos en estado borrador o modificados en los últimos %n días)</i\>','APRM_RelatedPostedDocument':'Existe un documento relacionado contabilizado. Por favor, antes de modificar la información de la transacción, compruebe que la Conciliación relacionada no está contabilizada ya que el asiento depende de ello.','OBUISC_ListGrid.clearSortFieldText':'Eliminar orden','OBKMO_MoveUp':'Mover Arriba','OBUIAPP_fromDateOnlyPrefix':'Desde','OBUIAPP_Personalization_DisplayLogicPrompt':'Este campo tiene lógica especial que controla su visualización, por lo que puede estar oculto en el formulario real. Sin embargo, siempre se mostrará en la previsualización.','OBUIAPP_ProcessTitle_Executing':'%0 [executing]','OBUIAPP_GAinCommunity':'Solo usuarios registrados de la Edición Básica o Profesional de Openbravo pueden restringir el acceso a módulos en estado de madurez %0.<br/\><a href=\"http://wiki.openbravo.com/wiki/Modules_Management#Learn_why\" class=\"OBNoteListGridDelete\" target=\"_blank\"\>Aprenda por qué</a\>.','OBUIAPP_AttachmentFile':'Fichero','OBKMO_EditParameters':'Editar Parámetros','OBUIAPP_AutosaveConfirm':'Hay cambios en el registro actual. ¿Desea guardar los cambios?','OBUIAPP_ConfirmRefresh':'Existen datos sin guardar en la ventana, y al refrescar la ventana se perderán. ¿Desea continuar con el refresco?','OBUIAPP_CloneData':'Copiar registro','APRM_PaymentNoLines':'No es posible procesar un Pago sin líneas.','OBUIAPP_InstanceActivation':'Instance Activation','OBUIAPP_AlertSectionHeader':'%0 (%1)','APRM_FATS_CLEARED':'Conciliado','NE_SALARIO_NEG_EXCEPTION':'El Salario no puede ser menor o igual a cero.','OBKMO_Widget_Superclass':'Superclase de Widget','OBUISC_Date.shortMonthNames.Oct':'Oct','OBUIAPP_StartPageTitle':'Mi Openbravo','APRM_TaxPaymentReactivation':'Tax payments can not be reactivated.','NE_VAC_FEC_EST_TOM_VAL':'Validar Fecha Fin de Vacaciones Aprobadas.','CCO_TOTAL_COSTOS':'El valor Total de Costos no puede ser mayor que el Valor Total de factura','OBUIAPP_Personalization_Startrow':'Empieza en una nueva fila','OBUIAPP_TimeUnits':'year,years,Year,Years,month,months,Month,Months,week,weeks,Week,Weeks,d,day,days,D,Day,Days,h,hr,hrs,hour,hours,H,Hr,Hrs,Hour,Hours,m,min,mins,minute,minutes,M,Min,Mins,Minute,Minutes,s,sec,secs,second,seconds,S,Sec,Secs,Second,Seconds','OBUIAPP_seconds_from_now':'N segundos desde ahora','NO_NullCuentaRubroIngreso':'No se ha configurado una cuenta para el rubro de ingreso.','FINPR_BPartner_Category':'Grupos de Terceros','OBUISC_Date.shortMonthNames.Dec':'Dic','OBUIAPP_MoveToStatus':'Mover a %0','OBUIAPP_PrintGridLink':'Print','OBKMO_Enabled_For_All_Users':'Activado para todos los Usuarios','OBUIAPP_MakeSelectionBold':'Make Selection Bold','OBUIAPP_NeverShowMessageAgain':'No mostrar este mensaje nunca más','OBUIAPP_ExportGrid':'Exportar a Hoja de Cálculo','OBUIAPP_Image_Confirm_RECOMMENDED_MINIMUM':'El tamaño de la imagen que ha subido (AAAxBBB pixels) es menor de lo recomendado (XXXxYYY pixels). Esto podría resultar en efectos visuales no deseados. ¿Quiere continuar?','NO_SINDATOS_LINEA':'No existe datos en la línea','OBUIAPP_MAXIMIZEBUTTON':'Maximizar la solapa actual','OBUIAPP_UpgradeRunAPRMDesc':'Esta instancia no ha sido todavía migrada al módulo recientemente instalado de Gestión de Cobros y pagos.<br/\>Necesita ejecutar la herramienta de migración a APRM para hacerlo.<br/\><a class=\"OBNoteListGridDelete\" target=\"_blank\" href=\"http://wiki.openbravo.com/wiki/Projects/APR_Migration_Tool/User_Manual\"\>Lea el manual de la herramienta de migración para más información.</a\><br/\><br/\>Después de la migración necesita salir y volver a entrar en la aplicación para continuar con el proceso de actualización.','OBUIAPP_Image_Error_ALLOWED':'La imagen que ha subido (AAAxBBB pixels)  tiene un tamaño diferente al permitido (XXXxYYY pixels).','OBUIAPP_DefaultView':'Establecer por Defecto','OBUIAPP_To':'A','OBUIAPP_DeepLinkNote':'Nota: este enlace puede ser pegado en el campo de \"Abrir Rápidamente\" para abrir la solapa/registro en un entorno Openbravo.','CO_REACT_REV':'Se debe eliminar el registro del cobro de la retención antes de reactivar la retención.','FINPR_NoDataFound':'No se ha encontrado ningún dato. Compruebe que los filtros son correctos.','OBUIAPP_hours_ago_1':'hace %0 horas','OBKMO_WMO_About':'Acerca de','APRM_CreditCurrency':'Al generar o consumir crédito la moneda del pago/cobro debe coincidir con la del tercero: %s','OBUIAPP_Yesterday':'Ayer','APRM_LinesAmountMismatch':'Los importes de las líneas de la transacción y del extracto bancario seleccionados no coinciden.','OBUIAPP_ConfirmRemoveAll':'Todos los ficheros adjuntados a este registro serán eliminados. ¿Está seguro de que desea continuar?','OBUISC_Date.shortMonthNames.Jan':'Ene','UINAVBA_NEW':'Nuevo','OBUISC_ListGrid.editFormulaFieldText':'Editar Campo de Fórmula...','NO_CheckoutResultLiq':'El proceso de completar ha sido exitoso','OBKMO_WMO_DeleteThisWidget':'Borrar este widget','OBUIAPP_Personalization_ConfirmCancel':'Se han realizado uno o varios cambios a la disposición del formulario. ¿Desea cancelar estos cambios?','APRM_Transaction':'Trasacción','OBKMO_ParameterValues':'Valores de Parámetros','APRM_INMULTICURRENCYNOTSUPPORTED':'El método de pago no permite cobrar en otras monedas.','OBUIAPP_EscKey':'Esc','OBUIAPP_GridFilterExplicitToolTip':'Filtros explícitos (de usuario) aplicados. Haga click aquí para desactivarlos.','OBSEIG_SignIn':'Acceder usando:','OBUIAPP_quarters_from_now':'N trimestres desde ahora','APRM_CreditNoPricelistCurrency':'No se ha definido moneda en la lista de precios del tercero','OBUIAPP_Image_Confirm_RECOMMENDED_MAXIMUM':'El tamaño de la imagen que ha subido (AAAxBBB pixels) es mayor de lo recomendado (XXXxYYY pixels). Esto podría resultar en efectos visuales no deseados. ¿Quiere continuar?','FINPR_NoConversionFound':'No se ha encontrado conversión para: ','APRM_ReconciliationNo':'Nº Conciliación','OBUIAPP_ArrowDownKey':'Flecha Abajo','OBUIAPP_days_ago_1':'hace %0 días','OBUIAPP_ColumnMustBeSet':'if property is not set then column must be set','OBUIAPP_CalendarCanNotUpdateEvent':'This event can\'t be updated','OBUIAPP_NewRow':'Insertar fila','OBUIAPP_Personalization_Statusbar_Close':'Cerrar la vista de personalización del formulario, y volver a la vista anterior','OBUISC_Date.shortMonthNames.Sep':'Sep','OBUIAPP_minutes_ago':'hace N minutos','OBUISC_Dialog.CONFIRM_BUTTON_TITLE':'Confirmar','OBUISC_ListGrid.addFormulaFieldText':'Añadir Campo de Fórmula...','OBUIAPP_GridFilterBothToolTip':'Filtros aplicados. Haga click para desactivarlos.','OBUISC_Date.shortDayNames.Wed':'Mie','OBUIAPP_UpgradeScriptTitle':'Configuration Script(s) no exportados','OBUIAPP_CloneDataDone':'El registro ha sido copiado.','OBUIAPP_Editing':'Editando','UINAVBA_Save':'Guardar','OBUIAPP_GridFormButtonPrompt':'Abrir el registro en modo formulario','OBSEIG_NoDefaultConf':'La configuración de cuentas de Google de esta instancia no permite el acceso a la aplicación con @@email@@. <a href=\"http://wiki.openbravo.com/wiki/Configuration_Manual/Google_Integration\" target=\"_blank\"\>Más información</a\> sobre este problema, o contacte con el administrador del sistema de esta instancia.','OBUIAPP_NotesTitle':'Notas','OBUIAPP_SetDefaultView':'Establecer Vista por Defecto','APRM_Payments_Created':'Se han creado y ejecutado los siguientes pagos: %s'};OB.I18N.getLabel=function(key,params,object,property){var label,i;if(!OB.I18N.labels[key]){if(object&&property){OB.I18N.getLabelFromServer(key,params,object,property);}
return'UNDEFINED '+key;}
label=OB.I18N.labels[key];if(params&&params.length&&params.length>0){for(i=0;i<params.length;i++){label=label.replace("%"+i,params[i]);}}
if(object&&property){if(Object.prototype.toString.call(object[property])==='[object Function]'){object[property](label);}else{object[property]=label;}}
return label;};OB.I18N.getLabelFromServer=function(key,params,object,property){var requestParameters,rpcRequest;if(!isc){return'UNDEFINED '+key;}
requestParameters={};requestParameters._action='org.openbravo.client.kernel.GetLabelActionHandler';requestParameters.key=key;rpcRequest={};rpcRequest.actionURL=OB.Application.contextUrl+'org.openbravo.client.kernel';rpcRequest.callback=function(response,data,request){var clientContext=response.clientContext;if(data.label){OB.I18N.labels[clientContext.key]=data.label;OB.I18N.getLabel(clientContext.key,clientContext.params,clientContext.object,clientContext.property);}else{if(isc.isA.Function(clientContext.object[clientContext.property])){clientContext.object[clientContext.property]('LABEL NOT FOUND '+clientContext.key);}else{clientContext.object[clientContext.property]='LABEL NOT FOUND '+clientContext.key;}}};rpcRequest.httpMethod='GET';rpcRequest.contentType='application/json;charset=UTF-8';rpcRequest.useSimpleHttp=true;rpcRequest.evalResult=true;rpcRequest.params=requestParameters;rpcRequest.clientContext={'key':key,'object':object,'params':params,'property':property};isc.RPCManager.sendRequest(rpcRequest);};
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2010-2012 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */

OB.KernelUtilities = {};

// ** {{{ OB.KernelUtilities.handleUserException }}} **
//
// Shows a warning message from the exception. The message is translatable.
//
// Parameters:
// * {{{msg}}}: Translatable message to show
// * {{{params}}}: Optional parameters to add to the message
OB.KernelUtilities.handleUserException = function (msg, params) {
  // todo: make this nice
  OB.I18N.getLabel(msg, params, isc, 'warn');
};

// ** {{{ OB.KernelUtilities.handleSystemException }}} **
//
// Shows a warning message from the exception. The message is not translatable.
//
// Parameters:
// * {{{msg}}}: Message to show
OB.KernelUtilities.handleSystemException = function (msg) {
  // todo: make this nice
  isc.warn('Error occured: ' + msg);
};
/*============================================================
    "Enterprise" theme programmatic settings
    Copyright 2003 and beyond, Isomorphic Software
============================================================*/


isc.loadSkin = function (theWindow) {
if (theWindow == null) theWindow = window;
with (theWindow) {


//----------------------------------------
// Specify skin directory
//----------------------------------------
    // must be relative to your application file or isomorphicDir
    // isc.Page.setSkinDir("[ISOMORPHIC]/skins/Enterprise/");
    isc.Page.setSkinDir("[ISOMORPHIC]/../openbravo/skins/Default/smartclient/");
    isc.Browser.useCSS3 = false;


//----------------------------------------
// Load skin style sheet(s)
//----------------------------------------
    // isc.Page.loadStyleSheet("[SKIN]/skin_styles.css", theWindow);

    var useCSS3 = isc.Browser.useCSS3;

    if (useCSS3) {

        isc.Canvas.setProperties({
            // this skin uses custom scrollbars
            groupBorderCSS:"1px solid #165fa7",
            showCustomScrollbars:true
        });


        if (isc.Browser.isIE && isc.Browser.version >= 7) {
            isc.Canvas.setAllowExternalFilters(false);
            isc.Canvas.setNeverUseFilters(true);

            if (isc.Window) {
                isc.Window.addProperties({
                    modalMaskOpacity:null,
                    modalMaskStyle:"normal"
                });
                isc.Window.changeDefaults("modalMaskDefaults", { src:"[SKIN]opacity.png" });
            }
        }

        if (isc.RPCManager) {
            isc.RPCManager.addClassProperties({
                promptStyle:"cursor"
            });
        }

        //----------------------------------------
        // 1) Scrollbars
        //----------------------------------------
        isc.SimpleScrollThumb.addProperties({
            baseStyle:"scrollThumb",
            hSrc:"[SKIN]hthumb_grip.png",
            vSrc:"[SKIN]vthumb_grip.png"
        });

        isc.Scrollbar.addProperties({
            baseStyle:"scrollbar",
            btnSize:18,
            hSrc:"[SKIN]hscroll.png",
            hThumbClass:isc.HSimpleScrollThumb,
            showRollOver:true,
            thumbInset:0,
            thumbMinSize:20,
            thumbOverlap:2,
            vSrc:"[SKIN]vscroll.png",
            vThumbClass:isc.VSimpleScrollThumb
        });


        //----------------------------------------
        // 2) Buttons
        //----------------------------------------
        isc.Button.addProperties({
            height:22,
            baseStyle:"button"
        });

        // define IButton so examples that support the new SmartClient skin image-based
        // button will fall back on the CSS-based Button with this skin
        isc.ClassFactory.defineClass("IButton", "Button").addProperties({
            baseStyle:"buttonRounded"
        });
        isc.ClassFactory.defineClass("IAutoFitButton", "AutoFitButton").addProperties({
            baseStyle:"buttonRounded"
        });

        if (isc.IButton.markAsFrameworkClass != null) isc.IButton.markAsFrameworkClass();
        if (isc.IAutoFitButton.markAsFrameworkClass != null) isc.IAutoFitButton.markAsFrameworkClass();

        isc.ClassFactory.defineClass("HeaderMenuButton", "IButton").addProperties({
            baseStyle:"headerButton"
        });

        // Have IMenuButton be just a synonym for IMenuButton
        if (isc.MenuButton) {
            isc.ClassFactory.overwriteClass("IMenuButton", "MenuButton");

            if (isc.IMenuButton.markAsFrameworkClass != null) isc.IMenuButton.markAsFrameworkClass();

            isc.MenuButton.addProperties({
                // copy the header (.button) background-color to match when sort arrow is hidden
                baseStyle:"button"
            });
        }

        if (isc.MenuButton) {
            isc.MenuButton.addProperties({
                baseStyle:"menuButton",
                iconHeight:4,
                iconWidth:7,
                menuButtonImage:"[SKIN]menu_button.png",
                menuButtonImageUp:"[SKIN]menu_button_up.png",
                showFocusedAsOver:true
            });
        }

        if (isc.IMenuButton) {
            isc.IMenuButton.addProperties({
                capSize:4,
                height:22,
                iconWidth:7,
                iconHeight:4,
                menuButtonImage:"[SKIN]menu_button.png",
                menuButtonImageUp:"[SKIN]menu_button_up.png",
                showFocused:true,
                showFocusedAsOver:true,
                src:"[SKIN]button/button.png",
                titleStyle:"buttonTitle",
                vertical:false,
                width:100
            });
        }

        if (isc.Menu) {
            isc.Menu.addProperties({
                bodyBackgroundColor:null,
                bodyStyleName:"gridBody",
                cellHeight:22,
                checkmarkDisabledImage:{src:"[SKIN]check_disabled.png", width:7, height:6},
                checkmarkImage:{src:"[SKIN]check.png", width:9, height:8},
                fastCellUpdates:false,
                iconBodyStyleName:"menuMain",
                shadowDepth:5,
                showEdges:false,
                showShadow:false,
                submenuDisabledImage:{src:"[SKIN]submenu_disabled.png", height:7, width:4},
                submenuImage:{src:"[SKIN]submenu.png", height:7, width:4}
            });

            isc.addProperties(isc.Menu.ICON_FIELD, {
                baseStyle:"menuIconField",
                width:24
            });

            isc.Menu.TITLE_FIELD.baseStyle = "menuTitleField";
        }

        if (isc.PickTreeItem) {
            isc.PickTreeItem.addProperties({
                buttonDefaults:{ height:21 }
            });
        }

        isc.Label.addProperties({
            showFocused:false
        });

        //----------------------------------------
        // 3) Resizebars
        //----------------------------------------
        // StretchImgSplitbar class renders as resize bar
        isc.StretchImgSplitbar.addProperties({
            capSize:10,
            showGrip:true,
            showOver:false
        });

        isc.Snapbar.addProperties({
            hBaseStyle:"hSplitbar",
            vBaseStyle:"vSplitbar",
            gripBreadth:3,
            gripLength:20,
            hSrc:"[SKIN]hsplit.png",
            items:[
                {name:"blank", width:"*", height:"*"}
            ],
            showClosedGrip:false,
            showDown:false,
            showDownGrip:false,
            showRollOver:false,
            vSrc:"[SKIN]vsplit.png"
        });

        isc.Layout.addProperties({
            resizeBarSize:5,
            // Use the Snapbar as a resizeBar by default - subclass of Splitbar that
            // shows interactive (closed/open) grip images
            // Other options include the Splitbar, StretchImgSplitbar or ImgSplitbar
            resizeBarClass:"Snapbar"
        })

        if (isc.SectionItem) {
            isc.SectionItem.addProperties({
                height:26
            });
        }
        if (isc.SectionStack) {
            isc.SectionStack.addProperties({
                headerHeight:26
            });
        }

        if (isc.ListGrid) {
            isc.ListGrid.addProperties({
                alternateRecordStyles:true,
                alternateBodyStyleName:null,
                backgroundColor:null,
                cellHeight:22,
                checkboxFieldImageHeight:13,
                checkboxFieldImageWidth:13,
                editFailedCSSText:"color:FF6347;",
                errorIconSrc:"[SKINIMG]actions/exclamation.png",
                expansionFieldImageHeight:16,
                expansionFieldImageWidth:16,
                expansionFieldFalseImage:"[SKINIMG]/ListGrid/row_collapsed.png",
                expansionFieldTrueImage:"[SKINIMG]/ListGrid/row_expanded.png",
                expansionFieldImageWidth: 16,
                expansionFieldImageHeight: 16,
                groupIcon:"[SKINIMG]/ListGrid/group.png",
                groupIconPadding:3,
                groupLeadingIndent:1,
                headerBackgroundColor:null,
                headerBaseStyle:"headerButton",
                headerHeight:23,
                headerMenuButtonIcon:"[SKINIMG]ListGrid/sort_descending.png",
                headerMenuButtonConstructor:"HeaderMenuButton",
                headerMenuButtonWidth:17,
                normalCellHeight:22,
                showHeaderMenuButton:true,
                sortAscendingImage:{src:"[SKINIMG]ListGrid/sort_ascending.png", width:9, height:6},
                sortDescendingImage:{src:"[SKINIMG]ListGrid/sort_descending.png", width:9, height:6},
                summaryRowHeight:21,
                tallBaseStyle:"tallCell"
            });
        }

        if (isc.TreeGrid) {
            isc.TreeGrid.addProperties({
                alternateRecordStyles:false,
                folderIcon:"[SKIN]folder.png",
                manyItemsImage:"[SKIN]folder_file.png",
                nodeIcon:"[SKIN]file.png",
                normalBaseStyle:"treeCell",
                openerIconSize:22,
                openerImage:"[SKIN]opener.png",
                sortAscendingImage:{src:"[SKINIMG]ListGrid/sort_ascending.png", width:9, height:6},
                sortDescendingImage:{src:"[SKINIMG]ListGrid/sort_descending.png", width:9, height:6},
                tallBaseStyle:"treeTallCell"
            });
        }
        
        if (isc.MultiSortPanel) {
            isc.MultiSortPanel.changeDefaults("levelUpButtonDefaults", {
                src: "[SKINIMG]TransferIcons/up.png",
                height: 22,
                width: 24
            });
            isc.MultiSortPanel.changeDefaults("levelDownButtonDefaults", {
                src: "[SKINIMG]TransferIcons/down.png",
                height: 22,
                width: 24
            });
        }

        if (isc.TabSet) {
            isc.TabSet.addProperties({
                closeTabIconSize:12,
                paneContainerClassName:"tabSetContainer",
                paneMargin:5,
                pickerButtonSize:20,
                pickerButtonSrc:"[SKIN]picker.png",
                showScrollerRollOver:false,
                scrollerButtonSize:19,
                scrollerSrc:"[SKIN]scroll.png",
                showEdges:false,
                symmetricScroller:false,
                symmetricPickerButton:false,
                tabBarThickness:24,
                useSimpleTabs:true
            });

            // In Netscape Navigator 4.7x, set the backgroundColor directly since the css
            // background colors are not reliable
            if (isc.Browser.isNav) {
                isc.TabSet.addProperties({paneContainerDefaults:{backgroundColor:"#FFFFFF"}});
            }

            isc.TabBar.addProperties({
                baseLineConstructor:"Canvas",
                baseLineProperties:{ backgroundColor:"#C0C3C7", height:1, overflow:"hidden" },
                baseLineThickness:1,
                bottomStyleName:"tabBarBottom",
                layoutEndMargin:5,
                layoutStartMargin:5,
                leadingMargin:5,
                leftStyleName:"tabBarLeft",
                membersMargin:1,
                rightStyleName:"tabBarRight",
                styleName:"tabBar",
                topStyleName:"tabBarTop"
            });
        }

        if (isc.ImgTab) isc.ImgTab.addProperties({capSize:6});

        if (isc.Window) {
            isc.Window.addProperties({
                backgroundColor:null,
                bodyStyle:"windowBody",
                layoutBottomMargin:4,
                layoutLeftMargin:4,
                layoutRightMargin:4,
                layoutTopMargin:1,
                modalMaskOpacity:10,
                membersMargin:0,
                styleName:"windowBackground",
                showHeaderBackground:false,
                showFooter:false
            });

            isc.Window.changeDefaults("headerDefaults", {
                height:20,
                layoutMargin:0
            });

            isc.Window.changeDefaults("resizerDefaults", { src:"[SKIN]/Window/resizer.png" });

            isc.Window.changeDefaults("headerIconDefaults", {
                height:15,
                src:"[SKIN]/Window/headerIcon.png",
                width:15
            });

            isc.Window.changeDefaults("restoreButtonDefaults", {
                height:15,
                showDown:false,
                showRollOver:true,
                src:"[SKIN]/headerIcons/cascade.png",
                width:15
            });

            isc.Window.changeDefaults("closeButtonDefaults", {
                height:15,
                showDown:false,
                showRollOver:true,
                src:"[SKIN]/headerIcons/close.png",
                width:15
            });

            isc.Window.changeDefaults("maximizeButtonDefaults", {
                height:15,
                showRollOver:true,
                src:"[SKIN]/headerIcons/maximize.png",
                width:15
            });

            isc.Window.changeDefaults("minimizeButtonDefaults", {
                height:15,
                showDown:false,
                showRollOver:true,
                src:"[SKIN]/headerIcons/minimize.png",
                width:15
            });

            isc.Window.changeDefaults("toolbarDefaults", { buttonConstructor:"IButton" });

            if (isc.ColorPicker) {
                isc.ColorPicker.addProperties({
                    layoutMargin:2
                });
            }
        }

        if (isc.Dialog) {
            isc.Dialog.addProperties({
                bodyColor:"#FFFFFF",
                bodyStyle:"windowBody",
                layoutBottomMargin:4,
                layoutLeftMargin:4,
                layoutRightMargin:4,
                layoutTopMargin:1,
                modalMaskOpacity:10,
                membersMargin:0,
                styleName:"windowBackground",
                showHeaderBackground:false,
                showFooter:false
            });

            // even though Dialog inherits from Window, we need a separate changeDefaults block
            // because Dialog defines its own toolbarDefaults
            isc.Dialog.changeDefaults("toolbarDefaults", {
                buttonConstructor:"IButton",
                height:42, // 10px margins + 22px button
                membersMargin:10
            });
            
            if (isc.Dialog.Warn && isc.Dialog.Warn.toolbarDefaults) {
                isc.addProperties(isc.Dialog.Warn.toolbarDefaults, {
                    buttonConstructor:"IButton",
                    height:42,
                    membersMargin:10
                });
            }
            
        }

        // Dynamic form skinning
        if (isc.SectionHeader) {
            isc.SectionHeader.addProperties({
                icon:"[SKIN]/SectionHeader/opener.png"
            });
        }

        if (isc.FormItem) {
            isc.FormItem.addProperties({
                defaultIconSrc:"[SKIN]/DynamicForm/default_formItem_icon.png",
                errorIconSrc:"[SKINIMG]actions/exclamation.png",
                iconHeight:18,
                iconVAlign:"middle",
                iconWidth:18
            });
        }

        if (isc.CheckboxItem) {
            isc.CheckboxItem.addProperties({
                checkedImage:"[SKINIMG]/DynamicForm/checked.png",
                partialSelectedImage:"[SKINIMG]/DynamicForm/partialcheck.png",
                showValueIconFocused:false,
                showValueIconOver:false,
                uncheckedImage:"[SKINIMG]/DynamicForm/unchecked.png",
                unsetImage:"[SKINIMG]/DynamicForm/unsetcheck.png",
                valueIconWidth:13,
                valueIconHeight:13
            });
        }

        if (isc.TextItem) {
            isc.TextItem.addProperties({
                height:22,
                showFocused:true
            });
        }

        if (isc.TextAreaItem) {
            isc.TextAreaItem.addProperties({
                showFocused:true
            });
        }

        if (isc.SelectItem) {
            isc.SelectItem.addProperties({
                height:22,
                pickerIconSrc:"[SKIN]/pickers/comboBoxPicker.png",
                pickerIconWidth:18,
                showFocusedPickerIcon:false,
                textBoxStyle:"selectItemText"
            });
        }

        if (isc.ComboBoxItem) {
            isc.ComboBoxItem.addProperties({
                height:22,
                pendingTextBoxStyle:"comboBoxItemPendingText",
                pickerIconSrc:"[SKIN]/pickers/comboBoxPicker.png",
                pickerIconWidth:18,
                showFocusedPickerIcon:false,
                textBoxStyle:"selectItemText"
            });
        }

        // used by SelectItem and ComboBoxItem for picklist
        if (isc.ScrollingMenu) {
            isc.ScrollingMenu.addProperties({
            shadowDepth:5,
            showShadow:false
            });
        }

        if (isc.DateItem) {
            isc.DateItem.addProperties({
                height:22,
                pickerIconHeight:14,
                pickerIconSrc:"[SKIN]/DynamicForm/date_control.png",
                pickerIconWidth:16
            });
        }

        if (isc.SpinnerItem) {
            isc.SpinnerItem.addProperties({
                height:22,
                textBoxStyle:"selectItemText"
            });

            isc.SpinnerItem.INCREASE_ICON = isc.addProperties(isc.SpinnerItem.INCREASE_ICON,
            {
                height:11,
                imgOnly:true,
                showDown:false,
                showFocused:false,
                showRollOver:false,
                src:"[SKIN]/DynamicForm/spinner_control_increase.png",
                width:16
            });

            isc.SpinnerItem.DECREASE_ICON = isc.addProperties(isc.SpinnerItem.DECREASE_ICON,
            {
                height:11,
                imgOnly:true,
                showDown:false,
                showFocused:false,
                showRollOver:false,
                src:"[SKIN]/DynamicForm/spinner_control_decrease.png",
                width:16
            });
        }

        if (isc.PopUpTextAreaItem) {
            isc.PopUpTextAreaItem.addProperties({
                popUpIconHeight:16,
                popUpIconSrc:"[SKIN]/DynamicForm/text_control.gif",
                popUpIconWidth:16
            });
        }
        if (isc.ButtonItem && isc.IButton) {isc.ButtonItem.addProperties({
            showFocused:true,
            showFocusAsOver:false,
            buttonConstructor:isc.IButton,
            height:22
        })}

        if (isc.ToolbarItem && isc.IAutoFitButton) {
            isc.ToolbarItem.addProperties({
                buttonConstructor:isc.IAutoFitButton,
                buttonProperties:{ autoFitDirection:isc.Canvas.BOTH }
            });
        }

        if (isc.DateRangeDialog) {
            isc.DateRangeDialog.changeDefaults("headerIconProperties", { src:"[SKIN]/DynamicForm/date_control.png" });
        }

        if (isc.MiniDateRangeItem) {
            isc.MiniDateRangeItem.changeDefaults("pickerIconDefaults", { src:"[SKIN]/DynamicForm/date_control.png" });
        }

        if (isc.RelativeDateItem) {
            isc.RelativeDateItem.changeDefaults("pickerIconDefaults", { src:"[SKIN]/DynamicForm/date_control.png" });
        }

        // Native FILE INPUT items are rendered differently in Safari from other browsers
        // Don't show standard textbox styling around them as it looks odd
        if (isc.UploadItem && isc.Browser.isSafari) {
            isc.UploadItem.addProperties({
                textBoxStyle:"normal"
            });
        }

        if (isc.DateChooser) {
            isc.DateChooser.addProperties({
                alternateWeekStyles:false,
                backgroundColor:"#FFFFFF",
                baseNavButtonStyle:"dateChooserNavButton",
                baseWeekdayStyle:"dateChooserWeekday",
                baseWeekendStyle:"dateChooserWeekend",
                baseBottomButtonStyle:"dateChooserBottomButton",
                edgeCenterBackgroundColor:"#FFFFFF",
                headerStyle:"dateChooserButton",
                nextMonthIcon:"[SKINIMG]/DateChooser/arrow_right.png",
                nextMonthIconHeight:16,
                nextMonthIconWidth:16,
                nextYearIcon:"[SKINIMG]/DateChooser/doubleArrow_right.png",
                nextYearIconHeight:16,
                nextYearIconWidth:16,
                prevMonthIcon:"[SKINIMG]/DateChooser/arrow_left.png",
                prevMonthIconHeight:16,
                prevMonthIconWidth:16,
                prevYearIcon:"[SKINIMG]/DateChooser/doubleArrow_left.png",
                prevYearIconHeight:16,
                prevYearIconWidth:16,
                showDoubleYearIcon:false,
                showEdges:false,
                skinImgDir:"images/DateChooser/",
                todayButtonHeight:20,
                weekendHeaderStyle:"dateChooserWeekendButton",
                styleName:"dateChooserBorder"
            });
        }
        
        if (isc.ToolStrip) {
            isc.ToolStrip.addProperties({
                defaultLayoutAlign:"center",
                height:30
            });

            isc.ToolStrip.changeDefaults("formWrapperDefaults",{cellPadding:3});
        }
        if (isc.ToolStripMenuButton) {
            
            isc.overwriteClass("ToolStripMenuButton", "MenuButton").addProperties({
                autoFit:true,
                baseStyle:"toolStripButton",
                height:22,
                labelVPad:0,
                showDown:true,
                showRollOver:true,
                showTitle:false
            });
        }

        if (isc.ToolStripButton) {
            
            isc.overwriteClass("ToolStripButton", "Button").addProperties({
                autoFit:true,
                baseStyle:"toolStripButton",
                height:22,
                labelVPad:0,
                showTitle:false,
                showRollOver:true,
                showDown:true,
                title:null
            });
        }

        if (isc.RichTextEditor) {
            isc.RichTextEditor.addProperties({
                showEdges:false,
                styleName:"richTextEditorBorder"
            });
        }
        
        if (isc.EdgedCanvas) {
            isc.EdgedCanvas.addProperties({
                edgeSize:6,
                edgeImage: "[SKINIMG]edges/edge.png"
            });
        }

        if (isc.Slider) {
            isc.Slider.addProperties({
                hThumbStyle:"hSliderThumb",
                hTrackStyle:"hSliderTrack",
                thumbConstructor:"StatefulCanvas",
                thumbThickWidth:14,
                thumbThinWidth:14,
                trackConstructor:"StatefulCanvas",
                trackWidth:5,
                vThumbStyle:"vSliderThumb",
                vTrackStyle:"vSliderTrack"
            });
        }

        if (isc.TileGrid) {
            isc.TileGrid.addProperties({
                showEdges:false,
                styleName:null,
                valuesShowRollOver:true
            });
        }

        if (isc.Calendar) {
            isc.Calendar.changeDefaults("datePickerButtonDefaults", {
                showDown:false,
                showOver:false,
                src:"[SKIN]/DynamicForm/date_control.png"
            });

            isc.Calendar.changeDefaults("controlsBarDefaults", {
                height:10,
                layoutBottomMargin:10
            });
        }

        if (isc.Hover) {
            isc.addProperties(isc.Hover.hoverCanvasDefaults, {
                shadowDepth:5,
                showShadow:false
            });
        }

        //indicate type of media used for various icon types
        isc.pickerImgType = "gif";
        isc.transferImgType = "gif";
        isc.headerImgType = "gif";

        isc.Page.checkBrowserAndRedirect("[SKIN]/unsupported_browser.html");

    } else { // useCSS3 is false


//============================================================
//  Component Skinning
//============================================================
//   1) Scrollbars
//   2) Buttons
//   3) Resizebars
//   4) Sections
//   5) Progressbars
//   6) TabSets
//   7) Windows
//   8) Dialogs
//   9) Pickers
//  10) Menus
//  11) Hovers
//  12) ListGrids
//  13) TreeGrids
//  14) Form controls
//  15) Drag & Drop
//  16) Edges
//  17) Sliders
//  18) TileList
//  19) CubeGrid
//  20) FilterBuilder
//  21) Printing
//  22) ToolStrip
//============================================================


	isc.Canvas.addProperties({
		groupBorderCSS: "1px solid #A7ABB4"
	});

    if(isc.Browser.isIE && isc.Browser.version >= 7 && !isc.Browser.isIE9) {
        isc.Canvas.setAllowExternalFilters(false);
        isc.Canvas.setNeverUseFilters(true);
        if(isc.Window) {
          isc.Window.addProperties({
                modalMaskOpacity:null,
                modalMaskStyle:"normal"
            });
            isc.Window.changeDefaults("modalMaskDefaults", { src : "[SKIN]opacity.png" });
        }
    }

    if(isc.RPCManager) {
        isc.RPCManager.addClassProperties({ promptStyle:"cursor" });
    }

//----------------------------------------
// 1) Scrollbars
//----------------------------------------
    isc.Canvas.addProperties({
        showCustomScrollbars:true,
        scrollbarSize:16,
		cornerSize: 16
    });
    isc.ScrollThumb.addProperties({
        capSize:2,
        vSrc:"[SKIN]vthumb.png",
        hSrc:"[SKIN]hthumb.png",
        showGrip:true,
        gripLength:10,
        gripBreadth:10,
		showRollOver: true,
		//showDown: true,
        backgroundColor:"transparent"
    });
    isc.Scrollbar.addProperties({
        btnSize:18,
        showRollOver:true,
        //showDown: true,
        thumbMinSize:20,
        thumbInset:0,
        thumbOverlap:2,
        backgroundColor:"#FFFFFF",
        vSrc:"[SKIN]vscroll.png",
        hSrc:"[SKIN]hscroll.png"
    });


//----------------------------------------
// 2) Buttons
//----------------------------------------

    // "IButton" is the new standard button class for SmartClient applications. Application
    // code should use IButton instead of Button for all standalone buttons. Other skins may
    // map IButton directly to Button, so this single class will work everywhere. Button remains
    // for internal and advanced uses (eg if you need to mix both CSS-based and image-based
    // standalone buttons in the same application).
    isc.defineClass("IButton", "StretchImgButton").addProperties({
        src:"[SKIN]button/button.png",
        height:22,
        width:100,
        capSize:4,
        vertical:false,
        titleStyle:"buttonTitle",
        showFocused:true,
        showFocusedAsOver:true
    });
    if (isc.IButton.markAsFrameworkClass != null) isc.IButton.markAsFrameworkClass();

    isc.defineClass("IAutoFitButton", "IButton").addProperties({
        autoFit: true,
        autoFitDirection: isc.Canvas.HORIZONTAL
    });
    if (isc.IAutoFitButton.markAsFrameworkClass != null) isc.IAutoFitButton.markAsFrameworkClass();


    isc.ImgButton.addProperties({
        showFocused: true,
        showFocusedAsOver:true

    });

    isc.defineClass("HeaderImgButton", "ImgButton").addProperties({
        showFocused: false,
        showRollOver:false,
        showFocusedAsOver: false,
        showDown:false
    });

	isc.Button.addProperties({
		height:22,
		showFocused: true,
		showFocusedAsOver: false
	});

	isc.Label.addProperties({
		showFocused: false
	});



//----------------------------------------
// 3) Resizebars
//----------------------------------------
    // StretchImgSplitbar class renders as resize bar with
    // end caps, body, grip
    isc.StretchImgSplitbar.addProperties({
        // modify vSrc / hSrc for custom appearance
        //vSrc:"[SKIN]vsplit.gif",
        //hSrc:"[SKIN]hsplit.gif",
        capSize:10,
        showGrip:true
    });

    // ImgSplitbar renders as resizebar with resize grip only
    isc.ImgSplitbar.addProperties({
        // modify these properties for custom appearance
        //vSrc:"[SKIN]vgrip.png",
        //hSrc:"[SKIN]hgrip.png",
        //showDown:true,
        //styleName:"splitbar"
    });

    isc.Snapbar.addProperties({
        vSrc:"[SKIN]vsplit.png",
        hSrc:"[SKIN]hsplit.png",
        baseStyle:"splitbar",
	    /*items : [
    	    {name:"blank", width:"capSize", height:"capSize"},
    		{name:"blank", width:"*", height:"*"},
	    	{name:"blank", width:"capSize", height:"capSize"}
        ],*/
        items : [
    	    {name:"bg", width:"*", height:"*"}
        ],
        showDownGrip:false,
        showClosedGrip:false,
        showRollOver:false,
        showDown:false,
        gripBreadth:3,
        gripLength:20
        //capSize:8
    });

    isc.Layout.addProperties({
        resizeBarSize:5,
        // Use the Snapbar as a resizeBar by default - subclass of Splitbar that
        // shows interactive (closed/open) grip images
        // Other options include the Splitbar, StretchImgSplitbar or ImgSplitbar
        resizeBarClass:"Snapbar"
    });


//----------------------------------------
// 4) Sections
//----------------------------------------
    if (isc.SectionItem) {
        isc.SectionItem.addProperties({
            sectionHeaderClass:"ImgSectionHeader",
            height:26
        });
    }
    if (isc.SectionStack) {

        isc.SectionStack.addProperties({
            backgroundColor:null,
            sectionHeaderClass:"ImgSectionHeader",
            headerHeight:26
        });
        isc.ImgSectionHeader.changeDefaults("backgroundDefaults", {
            showRollOver:false,
            showDown:false,
            showDisabledIcon:false,
            showRollOverIcon:false,
            src:"[SKIN]SectionHeader/header.png",
            icon:"[SKIN]SectionHeader/opener.png",
			iconSize: 16,
            capSize:2,
            titleStyle:"imgSectionHeaderTitle",
            baseStyle:"imgSectionHeader",
            backgroundColor:"transparent"
        });
        isc.SectionHeader.addProperties({
            icon:"[SKIN]SectionHeader/opener.png",
			iconSize: 16
        });
    }


//----------------------------------------
// 5) Progressbars
//----------------------------------------
    if (isc.Progressbar) {
        isc.Progressbar.addProperties({
            horizontalItems: [
            {name:"h_start",size:2},
            {name:"h_stretch",size:0},
            {name:"h_end",size:2},
            {name:"h_empty_start",size:2},
            {name:"h_empty_stretch",size:0},
            {name:"h_empty_end",size:2}
            ],
            verticalItems: [
            {name:"v_empty_start",size:2},
            {name:"v_empty_stretch",size:0},
            {name:"v_empty_end",size:0},
            {name:"v_start",size:2},
            {name:"v_stretch",size:0},
            {name:"v_end",size:2}
            ],
            breadth:24,
            length : 300
        });
    }


//----------------------------------------
// 6) TabSets
//----------------------------------------
    if (isc.TabSet) {
        isc.TabSet.addProperties({
            tabBarThickness:24,
            scrollerButtonSize:19,
            pickerButtonSize:20,

            symmetricScroller:false,
            symmetricPickerButton:false,

            scrollerSrc:"[SKIN]scroll.png",
            pickerButtonSrc:"[SKIN]picker.png",

            closeTabIconSize:10,

            showEdges:false,
            paneContainerClassName:"tabSetContainer",

            paneMargin:5,

            showScrollerRollOver: false
        });
        isc.TabSet.changeDefaults("paneContainerDefaults", {
            showEdges:false
        });
        isc.TabBar.addProperties({
            membersMargin:1,

            // keep the tabs from reaching the curved edge of the pane (regardless of align)
            layoutStartMargin:5,
            layoutEndMargin:5,

            styleName:"tabBar",

            // have the baseline overlap the top edge of the TabSet, using rounded media
            baseLineConstructor:"Canvas",
            baseLineProperties : {
                backgroundColor: "#C0C3C7",
                overflow:"hidden",
                height:1
            }

            /*baseLineSrc:"[SKIN]baseline.png",
            baseLineThickness:3,
            baseLineCapSize:4*/

        });
    }
    if (isc.ImgTab) {
        isc.ImgTab.addProperties({
            src:"[SKIN]tab.png",
            capSize:6,
            showRollOver:true,
            showDown:false,
            showDisabled:true,
            showDisabledIcon:false,
            titleStyle:"tabTitle"
        });
    }


//----------------------------------------
// 7) Windows
//----------------------------------------
    if (isc.Window) {
        isc.Window.addProperties({
            // rounded frame edges
            showEdges:true,
            edgeImage: "[SKINIMG]Window/window.png",
            customEdges:null,
            edgeSize:6,
            edgeTop:23,
            edgeBottom:6,
			edgeOffsetTop:2,
			edgeOffsetRight:5,
			edgeOffsetBottom:5,
			minimizeHeight:29,
            showHeaderBackground:false, // part of edges
            showHeaderIcon:true,

            // clear backgroundColor and style since corners are rounded
            backgroundColor:null,
			border: null,
            styleName:"normal",
            edgeCenterBackgroundColor:"#FFFFFF",
            bodyColor:"transparent",
            bodyStyle:"windowBody",

            layoutMargin:0,
            membersMargin:0,

            showFooter:false,

            showShadow:false,
            shadowDepth:5
        });

        isc.Window.changeDefaults("headerDefaults", {
            layoutMargin:0,
            height:20
        });
        isc.Window.changeDefaults("resizerDefaults", {
            src:"[SKIN]/Window/resizer.png"
        });

        isc.Window.changeDefaults("headerIconDefaults", {
            width:15,
            height:15,
            src:"[SKIN]/Window/headerIcon.png"
        });
        isc.Window.changeDefaults("restoreButtonDefaults", {
             src:"[SKIN]/headerIcons/cascade.png",
             showRollOver:true,
             showDown:false,
             width:15,
             height:15
        });
        isc.Window.changeDefaults("closeButtonDefaults", {
             src:"[SKIN]/headerIcons/close.png",
             showRollOver:true,
             showDown:false,
             width:15,
             height:15
        });
        isc.Window.changeDefaults("maximizeButtonDefaults", {
             src:"[SKIN]/headerIcons/maximize.png",
             showRollOver:true,
             width:15,
             height:15
        });
        isc.Window.changeDefaults("minimizeButtonDefaults", {
             src:"[SKIN]/headerIcons/minimize.png",
             showRollOver:true,
             showDown:false,
             width:15,
             height:15
        });
        isc.Window.changeDefaults("toolbarDefaults", {
            buttonConstructor: "IButton"
        });


        if (isc.ColorPicker) {
            isc.ColorPicker.addProperties({
                layoutMargin:0
            });
        }

//----------------------------------------
// 8) Dialogs
//----------------------------------------
        if (isc.Dialog) {
            isc.Dialog.addProperties({
                bodyColor:"transparent",
                hiliteBodyColor:"transparent"
            });
            // even though Dialog inherits from Window, we need a separate changeDefaults block
            // because Dialog defines its own toolbarDefaults
            isc.Dialog.changeDefaults("toolbarDefaults", {
                buttonConstructor: "IButton",
                height:42, // 10px margins + 22px button
                membersMargin:10
            });
            if (isc.Dialog.Warn && isc.Dialog.Warn.toolbarDefaults) {
                isc.addProperties(isc.Dialog.Warn.toolbarDefaults, {
                    buttonConstructor: "IButton",
                    height:42,
                    membersMargin:10
                });
            }
        }

    } // end isc.Window


//----------------------------------------
// 9) Pickers
//----------------------------------------
    // add bevels and shadows to all pickers
    isc.__pickerDefaults = {
        showEdges:true,
        edgeSize:6,
        edgeImage: "[SKINIMG]Window/window.png",
        backgroundColor:"#FFFFFF",
        showShadow:false,
        shadowDepth:6,
        shadowOffset:5
    };
    if (isc.ButtonTable) {
        isc.ButtonTable.addProperties({
            backgroundColor:"#FFFFFF"
        });
    }
    if (isc.FormItem) {
        isc.FormItem.changeDefaults("pickerDefaults", isc.__pickerDefaults);
        isc.FormItem.addProperties({
            defaultIconSrc:"[SKIN]/DynamicForm/default_formItem_icon.png"
        });
    }
    if (isc.CheckboxItem) {
        isc.CheckboxItem.addProperties({
            checkedImage:"[SKINIMG]/DynamicForm/checked.png",
            uncheckedImage:"[SKINIMG]/DynamicForm/unchecked.png",
            unsetImage:"[SKINIMG]/DynamicForm/unsetcheck.png",
            partialSelectedImage:"[SKINIMG]/DynamicForm/partialcheck.png",
            valueIconWidth:13,
            valueIconHeight:13,
            showValueIconOver:false,
            showValueIconFocused:false
        });
    }
    if(isc.RelationItem) {
        isc.RelationItem.changeDefaults("removeButtonDefaults", {
            src: "[SKIN]DynamicForm/Remove_icon.png"
        });
    }

    if (isc.DateChooser) {
        isc.DateChooser.addProperties({
            headerStyle:"dateChooserButton",
            weekendHeaderStyle:"dateChooserWeekendButton",
            baseNavButtonStyle:"dateChooserNavButton",
            baseWeekdayStyle:"dateChooserWeekday",
            baseWeekendStyle:"dateChooserWeekend",
            baseBottomButtonStyle:"dateChooserBottomButton",
            alternateWeekStyles:false,

            showEdges:true,

            edgeImage: "[SKINIMG]Window/window.png",
            edgeSize:6,
            edgeTop:26,
            edgeBottom:5,
			edgeOffsetTop:1,
			edgeOffsetRight:5,
			edgeOffsetLeft:5,
			edgeOffsetBottom:5,

            todayButtonHeight:20,

            headerHeight:24,

            edgeCenterBackgroundColor:"#FFFFFF",
            backgroundColor:null,

            showShadow:false,
            shadowDepth:6,
            shadowOffset:5,

            showDoubleYearIcon:false,
            skinImgDir:"images/DateChooser/",
            prevYearIcon:"[SKIN]doubleArrow_left.png",
            prevYearIconWidth:16,
            prevYearIconHeight:16,
            nextYearIcon:"[SKIN]doubleArrow_right.png",
            nextYearIconWidth:16,
            nextYearIconHeight:16,
            prevMonthIcon:"[SKIN]arrow_left.png",
            prevMonthIconWidth:16,
            prevMonthIconHeight:16,
            nextMonthIcon:"[SKIN]arrow_right.png",
            nextMonthIconWidth:16,
            nextMonthIconHeight:16
        });
    }
    if (isc.MultiFilePicker) {
        isc.MultiFilePicker.addProperties({
            backgroundColor:"#C7C7C7"
        });
    }
    if (isc.RelationPicker) {
        isc.RelationPicker.addProperties({
            backgroundColor:"#C7C7C7"
        });
    }

    // Native FILE INPUT items are rendered differently in Safari from other browsers
    // Don't show standard textbox styling around them as it looks odd
    if (isc.UploadItem && isc.Browser.isSafari) {
        isc.UploadItem.addProperties({
            textBoxStyle:"normal"
        });
    }
//----------------------------------------
// 10) Menus
//----------------------------------------
    if (isc.Menu) {
        isc.Menu.addProperties({
            cellHeight:22,
            fastCellUpdates:false,
            showShadow:false,
            shadowDepth:5,
            showEdges:false,
            submenuImage:{src:"[SKIN]submenu.png", height:7, width:4},
            submenuDisabledImage:{src:"[SKIN]submenu_disabled.png", height:7, width:4},
	        checkmarkImage:{src:"[SKIN]check.png", width:9, height:8},
	        checkmarkDisabledImage:{src:"[SKIN]check_disabled.png", width:7, height:6},
            bodyStyleName:"gridBody",
			iconBodyStyleName:"menuMain",
			iconBodyStyleName_rtl:"menuMainRTL",
            bodyBackgroundColor:null
        });
		isc.addProperties(isc.Menu.ICON_FIELD, {
			width:24,
			baseStyle:"menuIconField"
		});
		isc.Menu.TITLE_FIELD.baseStyle = "menuTitleField";
    }

    if (isc.MenuButton) {
        isc.MenuButton.addProperties({
			baseStyle: "menuButton",
            menuButtonImage:"[SKIN]menu_button.png",
            menuButtonImageUp:"[SKIN]menu_button_up.png",
            iconWidth:7,
            iconHeight:4,
            showFocusedAsOver:true
        });
    }
    if (isc.IMenuButton) {
        isc.IMenuButton.addProperties({

			menuButtonImage:"[SKIN]menu_button.png",
            menuButtonImageUp:"[SKIN]menu_button_up.png",
            iconWidth:7,
            iconHeight:4,

            // Other properties (match IButton)
            src:"[SKIN]button/button.png",
            height:22,
            capSize:4,
            titleStyle:"buttonTitle",
            showFocused:true,
            showFocusedAsOver:true
        });
    }

	if (isc.SelectionTreeMenu) {
		isc.SelectionTreeMenu.addProperties({
			showIcons:false,
			showKeys:false,
            bodyStyleName:"treeMenuBody",
            bodyBackgroundColor:null
		});
	}

//----------------------------------------
// 11) Hovers
//----------------------------------------
    if (isc.Hover) {
        isc.addProperties(isc.Hover.hoverCanvasDefaults, {
            showShadow:false,
            shadowDepth:5
        });
    }


//----------------------------------------
// 12) ListGrids
//----------------------------------------
    if (isc.ListGrid) {
        isc.ListGrid.addProperties({
            alternateRecordStyles : true,

            editFailedCSSText:"color:FF6347;",
            errorIconSrc : "[SKINIMG]actions/exclamation.png",
			tallBaseStyle: "tallCell",

            headerButtonConstructor:"Button",
            sorterConstructor:"ImgButton",

            sortAscendingImage:{src:"[SKIN]sort_ascending.png", width:9, height:6},
            sortDescendingImage:{src:"[SKIN]sort_descending.png", width:9, height:6},

            backgroundColor:null, bodyBackgroundColor:null,

            headerHeight:23,
            summaryRowHeight:21,
            cellHeight:22,
            normalCellHeight:22,
            headerBackgroundColor:null,
            headerBaseStyle:"headerButton",
            bodyStyleName:"gridBody",
            alternateBodyStyleName:null,

            summaryRowStyle:"gridSummaryCell",
            groupSummaryStyle:"groupSummaryCell",

            showHeaderMenuButton:true,
			headerMenuButtonConstructor:"HeaderImgButton",
            headerMenuButtonWidth:17,
            headerMenuButtonSrc:"[SKIN]/ListGrid/header_menu.png",
            headerMenuButtonIcon:"[SKINIMG]/ListGrid/sort_descending.png",
            headerMenuButtonIconWidth: 9,
            headerMenuButtonIconHeight: 6,

            groupLeadingIndent : 1,
            groupIconPadding : 3,
            groupIcon: "[SKINIMG]/ListGrid/group.png",

            expansionFieldTrueImage : "[SKINIMG]/ListGrid/row_expanded.png",
            expansionFieldFalseImage: "[SKINIMG]/ListGrid/row_collapsed.png",
            expansionFieldImageWidth : 16,
            expansionFieldImageHeight : 16,
            checkboxFieldImageWidth : 13,
            checkboxFieldImageHeight : 13
        });
        isc.ListGrid.changeDefaults("sorterDefaults", {
            // baseStyle / titleStyle is auto-assigned from headerBaseStyle
            showFocused:false,
            src:"[SKIN]ListGrid/header.png",
            baseStyle:"sorterButton"
        });
        isc.ListGrid.changeDefaults("headerButtonDefaults", {
            showRollOver:true,
            showDown:false,
            showFocused:false,
            baseStyle:"headerButton"
        });
        isc.ListGrid.changeDefaults("headerMenuButtonDefaults", {
            showDown:false,
            showTitle:true,
            src:"[SKIN]ListGrid/header.png"
        });
        isc.ListGrid.changeDefaults("summaryRowDefaults", {
            bodyBackgroundColor:null,
            bodyStyleName:"summaryRowBody"
        });
    }

   if (isc.TreeGrid) {
        isc.TreeGrid.addProperties({
            alternateRecordStyles : false,
			tallBaseStyle: "treeTallCell",
			normalBaseStyle: "treeCell",
            openerImage:"[SKIN]opener.png",
            sortAscendingImage:{src:"[SKINIMG]ListGrid/sort_ascending.png", width:9, height:6},
            sortDescendingImage:{src:"[SKINIMG]ListGrid/sort_descending.png", width:9, height:6}
        });
    }

    if (isc.MultiSortPanel) {
        isc.MultiSortPanel.changeDefaults("levelUpButtonDefaults", {
			src: "[SKINIMG]TransferIcons/up.png",
            height: 22,
            width: 24
		});
        isc.MultiSortPanel.changeDefaults("levelDownButtonDefaults", {
			src: "[SKINIMG]TransferIcons/down.png",
            height: 22,
            width: 24
		});
    }
//----------------------------------------
// 13) TreeGrids
//----------------------------------------
    if (isc.TreeGrid) {
        isc.TreeGrid.addProperties({
			openerIconSize: 22,
            folderIcon:"[SKIN]folder.png",
            nodeIcon:"[SKIN]file.png",
            manyItemsImage:"[SKIN]folder_file.png"
        });
    }
    if (isc.ColumnTree) {
        isc.ColumnTree.addProperties({
            folderIcon:"[SKIN]folder.png",
            nodeIcon:"[SKIN]file.png"
        });
    }


//----------------------------------------
// 14) Form controls
//----------------------------------------
    if (isc.FormItem) {isc.FormItem.addProperties({
        defaultIconSrc:"[SKIN]/DynamicForm/default_formItem_icon.png",
        errorIconSrc : "[SKINIMG]actions/exclamation.png",
        iconHeight:18,
        iconWidth:18,
        iconVAlign:"middle"

    })}

    if (isc.PickTreeItem) {isc.PickTreeItem.addProperties({
        buttonDefaults: {
            height:21
        }
    })}

    if (isc.TextItem) {isc.TextItem.addProperties({
        height:22,
        showFocused: true
    })}

    if (isc.TextAreaItem) {isc.TextAreaItem.addProperties({
        showFocused: true
    })}
    if (isc.SelectItem) {isc.SelectItem.addProperties({
        pickListTallBaseStyle:"tallPickListCell",
        textBoxStyle:"selectItemText",
        showFocusedPickerIcon:false,
        pickerIconSrc:"[SKIN]/pickers/comboBoxPicker.png",
        height:22,
        pickerIconWidth:18
    })}

    if (isc.ComboBoxItem) {isc.ComboBoxItem.addProperties({
        pickListTallBaseStyle:"tallPickListCell",
        textBoxStyle:"selectItemText",
        pendingTextBoxStyle:"comboBoxItemPendingText",
        showFocusedPickerIcon:false,
        pickerIconSrc:"[SKIN]/pickers/comboBoxPicker.png",
        height:22,
        pickerIconWidth:18
    })}
    // used by SelectItem and ComboBoxItem for picklist
    if (isc.ScrollingMenu) {isc.ScrollingMenu.addProperties({
        showShadow:false,
        shadowDepth:5
    })}
    if (isc.DateItem) {
        isc.DateItem.addProperties({
            height:22,
            pickerIconWidth:16,
            pickerIconHeight:14,
            pickerIconSrc:"[SKIN]/DynamicForm/date_control.png"
        })
    }
    if (isc.SpinnerItem) {
        isc.SpinnerItem.addProperties({
            textBoxStyle:"selectItemText",
            height:22
        });
        isc.SpinnerItem.INCREASE_ICON = isc.addProperties(isc.SpinnerItem.INCREASE_ICON, {
            width:16,
            height:11,
            showRollOver:true,
            showFocused:true,
            showDown:true,
            imgOnly:true,
            src:"[SKIN]/DynamicForm/spinner_control_increase.png"
        });
        isc.SpinnerItem.DECREASE_ICON = isc.addProperties(isc.SpinnerItem.DECREASE_ICON, {
            width:16,
            height:11,
            showRollOver:true,
            showFocused:true,
            showDown:true,
            imgOnly:true,
            src:"[SKIN]/DynamicForm/spinner_control_decrease.png"
        });
    }



    if (isc.PopUpTextAreaItem) {isc.PopUpTextAreaItem.addProperties({
        popUpIconSrc: "[SKIN]/DynamicForm/text_control.gif",
        popUpIconWidth:16,
        popUpIconHeight:16
    })}
    if (isc.ButtonItem && isc.IButton) {isc.ButtonItem.addProperties({
        showFocused:true,
        showFocusAsOver:false,
        buttonConstructor:isc.IButton,
        height:22
    })}

    if (isc.ToolbarItem && isc.IAutoFitButton) {isc.ToolbarItem.addProperties({
        buttonConstructor:isc.IAutoFitButton,
        buttonProperties: {
            autoFitDirection: isc.Canvas.BOTH
        }
    })}

    if(isc.DateRangeDialog) {
        isc.DateRangeDialog.changeDefaults("headerIconProperties", {
            src: "[SKIN]/DynamicForm/date_control.png"
        });
    }
    if(isc.MiniDateRangeItem) {
        isc.MiniDateRangeItem.changeDefaults("pickerIconDefaults", {
            src: "[SKIN]/DynamicForm/date_control.png"
        });
    }
    if(isc.RelativeDateItem) {
        isc.RelativeDateItem.changeDefaults("pickerIconDefaults", {
            src: "[SKIN]/DynamicForm/date_control.png"
        });
    }
//----------------------------------------
// 15) Drag & Drop
//----------------------------------------
    // drag tracker drop shadow (disabled by default because many trackers are irregular shape)
    //isc.addProperties(isc.EH.dragTrackerDefaults, {
    //    showShadow:false,
    //    shadowDepth:4
    //});
    // drag target shadow and opacity
    isc.EH.showTargetDragShadow = true;
    isc.EH.targetDragOpacity = 50;



//----------------------------------------
// 16) Edges
//----------------------------------------
    // default edge style serves as a pretty component frame/border - just set showEdges:true
    if (isc.EdgedCanvas) {
        isc.EdgedCanvas.addProperties({
            edgeSize:6,
            edgeImage: "[SKINIMG]edges/edge.png"
        });
    }


//----------------------------------------
// 17) Sliders
//----------------------------------------
    if (isc.Slider) {
        isc.Slider.addProperties({
            thumbThickWidth:14,
            thumbThinWidth:14,
            trackWidth:5,
            trackCapSize:2,
            thumbSrc:"thumb.png",
            trackSrc:"track.png"
        });
    }

//----------------------------------------
// 18) TileList
//----------------------------------------
    if (isc.TileGrid) {
        isc.TileGrid.addProperties({
            valuesShowRollOver: true,
            styleName:null,
            showEdges:true
        });
    }

// ----------------------------------------
// 19)  CubeGrid
//----------------------------------------
    if (isc.CubeGrid) {
        isc.CubeGrid.addProperties({
            bodyStyleName:"cubeGridBody",
            alternateBodyStyleName:"alternateCubeGridBody"
        });
    }

// ----------------------------------------
// 20) FilterBuilder
//----------------------------------------
	if (isc.FilterBuilder) {
		isc.FilterBuilder.changeDefaults("addButtonDefaults", {
			showFocused: false
		});
		isc.FilterBuilder.changeDefaults("removeButtonDefaults", {
			showFocused: false
		});
	}

// -------------------------------------------
// 21) Printing
// -------------------------------------------
    if (isc.PrintWindow) {
        isc.PrintWindow.changeDefaults("printButtonDefaults", {
            height: 18
        });
    }

// -------------------------------------------
// 21) Printing
// -------------------------------------------
    if (isc.Calendar) {
        isc.Calendar.changeDefaults("datePickerButtonDefaults", {
            showDown:false,
            showOver : false,
            src:"[SKIN]/DynamicForm/date_control.png"
        });

        isc.Calendar.changeDefaults("controlsBarDefaults", {
            height:10,
            layoutBottomMargin :10
        });
        isc.Calendar.changeDefaults("addEventButtonDefaults", {
            src:"[SKINIMG]actions/plus.png"
        });

        isc.EventWindow.changeDefaults("resizerDefaults", {
            src:"[SKIN]/Window/v_resizer.png"
        });

        isc.TimelineWindow.changeDefaults("resizerDefaults", {
            src:"[SKIN]/Window/h_resizer.png"
        })
    }

// -------------------------------------------
// 22) ToolStrip
// -------------------------------------------
    if(isc.ToolStrip) {
        isc.ToolStrip.addProperties({
            height:30,
            defaultLayoutAlign:"center",
			verticalStyleName:"toolStripVertical"
        });

        isc.ToolStrip.changeDefaults("formWrapperDefaults",
            {cellPadding:3}
        );
    }

// -------------------------------------------
// ExampleViewPane - used in the feature explorer
// -------------------------------------------
    if (isc.ExampleViewPane) {
        isc.ExampleViewPane.addProperties({
            styleName:"normal"
        });
    }

// specify where the browser should redirect if not supported
isc.Page.checkBrowserAndRedirect("[SKIN]/unsupported_browser.html");

    } // end useCSS3 else block
}   // end with()
}   // end loadSkin()

isc.loadSkin();


/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2010-2012 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */
// jslint
/*
 * The code below sets all standard Smartclient system labels.
 * For more information see the 'Internationalization and Localization (i18n,l10n)'
 * section of the Smartclient reference.
 *
 * Note: Smartclient label properties can be class or instance properties. For instance
 * properties a call to addProperties needs to be done.
 */

// note different locales can have different starting day of the week
// new Date(2000, 0, 2).getDay() is a sunday, so start from there
(function (i18n, isc) {

  var getLabel = i18n.getLabel; // local reference for faster identifier resolution
  isc.Date.shortDayNames = [];
  isc.Date.shortDayNames[new Date(2000, 0, 2).getDay()] = getLabel('OBUISC_Date.shortDayNames.Sun');
  isc.Date.shortDayNames[new Date(2000, 0, 3).getDay()] = getLabel('OBUISC_Date.shortDayNames.Mon');
  isc.Date.shortDayNames[new Date(2000, 0, 4).getDay()] = getLabel('OBUISC_Date.shortDayNames.Tue');
  isc.Date.shortDayNames[new Date(2000, 0, 5).getDay()] = getLabel('OBUISC_Date.shortDayNames.Wed');
  isc.Date.shortDayNames[new Date(2000, 0, 6).getDay()] = getLabel('OBUISC_Date.shortDayNames.Thu');
  isc.Date.shortDayNames[new Date(2000, 0, 7).getDay()] = getLabel('OBUISC_Date.shortDayNames.Fri');
  isc.Date.shortDayNames[new Date(2000, 0, 8).getDay()] = getLabel('OBUISC_Date.shortDayNames.Sat');

  isc.Date.shortMonthNames = [
  getLabel('OBUISC_Date.shortMonthNames.Jan'), getLabel('OBUISC_Date.shortMonthNames.Feb'), getLabel('OBUISC_Date.shortMonthNames.Mar'), getLabel('OBUISC_Date.shortMonthNames.Apr'), getLabel('OBUISC_Date.shortMonthNames.May'), getLabel('OBUISC_Date.shortMonthNames.Jun'), getLabel('OBUISC_Date.shortMonthNames.Jul'), getLabel('OBUISC_Date.shortMonthNames.Aug'), getLabel('OBUISC_Date.shortMonthNames.Sep'), getLabel('OBUISC_Date.shortMonthNames.Oct'), getLabel('OBUISC_Date.shortMonthNames.Nov'), getLabel('OBUISC_Date.shortMonthNames.Dec')];

  isc.Dialog.OK_BUTTON_TITLE = getLabel('OBUISC_Dialog.OK_BUTTON_TITLE');
  isc.Dialog.APPLY_BUTTON_TITLE = getLabel('OBUISC_Dialog.APPLY_BUTTON_TITLE');
  isc.Dialog.YES_BUTTON_TITLE = getLabel('OBUISC_Dialog.YES_BUTTON_TITLE');
  isc.Dialog.NO_BUTTON_TITLE = getLabel('OBUISC_Dialog.NO_BUTTON_TITLE');
  isc.Dialog.CANCEL_BUTTON_TITLE = getLabel('OBUISC_Dialog.CANCEL_BUTTON_TITLE');
  isc.Dialog.DONE_BUTTON_TITLE = getLabel('OBUISC_Dialog.DONE_BUTTON_TITLE');
  isc.Dialog.CONFIRM_TITLE = getLabel('OBUISC_Dialog.CONFIRM_BUTTON_TITLE');
  isc.Dialog.SAY_TITLE = getLabel('OBUISC_Dialog.SAY_BUTTON_TITLE');
  isc.Dialog.WARN_TITLE = getLabel('OBUISC_Dialog.WARN_BUTTON_TITLE');
  isc.Dialog.ASK_TITLE = getLabel('OBUISC_Dialog.ASK_TITLE');
  isc.Dialog.ASK_FOR_VALUE_TITLE = getLabel('OBUISC_Dialog.ASK_FOR_VALUE_TITLE');
  isc.Dialog.LOGIN_TITLE = getLabel('OBUISC_Dialog.LOGIN_TITLE');
  isc.Dialog.USERNAME_TITLE = getLabel('OBUISC_Dialog.USERNAME_TITLE');
  isc.Dialog.PASSWORD_TITLE = getLabel('OBUISC_Dialog.PASSWORD_TITLE');
  isc.Dialog.LOGIN_BUTTON_TITLE = getLabel('OBUISC_Dialog.LOGIN_BUTTON_TITLE');
  isc.Dialog.LOGIN_ERROR_MESSAGE = getLabel('OBUISC_Dialog.LOGIN_ERROR_MESSAGE');
  isc.RPCManager.defaultPrompt = getLabel('OBUISC_RPCManager.defaultPrompt');
  isc.RPCManager.timeoutErrorMessage = getLabel('OBUISC_RPCManager.timeoutErrorMessage');
  isc.RPCManager.removeDataPrompt = getLabel('OBUISC_RPCManager.removeDataPrompt');
  isc.RPCManager.saveDataPrompt = getLabel('OBUISC_RPCManager.saveDataPrompt');
  isc.RPCManager.fetchDataPrompt = getLabel('OBUISC_RPCManager.fetchDataPrompt');
  isc.Operators.equalsTitle = getLabel('OBUISC_Operators.equalsTitle');
  isc.Operators.notEqualTitle = getLabel('OBUISC_Operators.notEqualTitle');
  isc.Operators.greaterThanTitle = getLabel('OBUISC_Operators.greaterThanTitle');
  isc.Operators.lessThanTitle = getLabel('OBUISC_Operators.lessThanTitle');
  isc.Operators.greaterOrEqualTitle = getLabel('OBUISC_Operators.greaterOrEqualTitle');
  isc.Operators.lessOrEqualTitle = getLabel('OBUISC_Operators.lessOrEqualTitle');
  isc.Operators.betweenTitle = getLabel('OBUISC_Operators.betweenTitle');
  isc.Operators.betweenInclusiveTitle = getLabel('OBUISC_Operators.betweenInclusiveTitle');
  isc.Operators.iContainsTitle = getLabel('OBUISC_Operators.iContainsTitle');
  isc.Operators.iStartsWithTitle = getLabel('OBUISC_Operators.iStartsWithTitle');
  isc.Operators.iEndsWithTitle = getLabel('OBUISC_Operators.iEndsWithTitle');
  isc.Operators.containsTitle = getLabel('OBUISC_Operators.containsTitle');
  isc.Operators.startsWithTitle = getLabel('OBUISC_Operators.startsWithTitle');
  isc.Operators.endsWithTitle = getLabel('OBUISC_Operators.endsWithTitle');
  isc.Operators.iNotContainsTitle = getLabel('OBUISC_Operators.iNotContainsTitle');
  isc.Operators.iNotStartsWithTitle = getLabel('OBUISC_Operators.iNotStartsWithTitle');
  isc.Operators.iNotEndsWithTitle = getLabel('OBUISC_Operators.iNotEndsWithTitle');
  isc.Operators.notContainsTitle = getLabel('OBUISC_Operators.notContainsTitle');
  isc.Operators.notStartsWithTitle = getLabel('OBUISC_Operators.notStartsWithTitle');
  isc.Operators.notEndsWithTitle = getLabel('OBUISC_Operators.notEndsWithTitle');
  isc.Operators.isNullTitle = getLabel('OBUISC_Operators.isNullTitle');
  isc.Operators.notNullTitle = getLabel('OBUISC_Operators.notNullTitle');
  isc.Operators.regexpTitle = getLabel('OBUISC_Operators.regexpTitle');
  isc.Operators.iregexpTitle = getLabel('OBUISC_Operators.iregexpTitle');
  isc.Operators.inSetTitle = getLabel('OBUISC_Operators.inSetTitle');
  isc.Operators.notInSetTitle = getLabel('OBUISC_Operators.notInSetTitle');
  isc.Operators.equalsFieldTitle = getLabel('OBUISC_Operators.equalsFieldTitle');
  isc.Operators.notEqualFieldTitle = getLabel('OBUISC_Operators.notEqualFieldTitle');
  isc.Operators.andTitle = getLabel('OBUISC_Operators.andTitle');
  isc.Operators.notTitle = getLabel('OBUISC_Operators.notTitle');
  isc.Operators.orTitle = getLabel('OBUISC_Operators.orTitle');
  isc.GroupingMessages.upcomingTodayTitle = getLabel('OBUISC_GroupingMessages.upcomingTodayTitle');
  isc.GroupingMessages.upcomingTomorrowTitle = getLabel('OBUISC_GroupingMessages.upcomingTomorrowTitle');
  isc.GroupingMessages.upcomingThisWeekTitle = getLabel('OBUISC_GroupingMessages.upcomingThisWeekTitle');
  isc.GroupingMessages.upcomingNextWeekTitle = getLabel('OBUISC_GroupingMessages.upcomingNextWeekTitle');
  isc.GroupingMessages.upcomingNextMonthTitle = getLabel('OBUISC_GroupingMessages.upcomingNextMonthTitle');
  isc.GroupingMessages.upcomingBeforeTitle = getLabel('OBUISC_GroupingMessages.upcomingBeforeTitle');
  isc.GroupingMessages.upcomingLaterTitle = getLabel('OBUISC_GroupingMessages.upcomingLaterTitle');
  isc.GroupingMessages.byDayTitle = getLabel('OBUISC_GroupingMessages.byDayTitle');
  isc.GroupingMessages.byWeekTitle = getLabel('OBUISC_GroupingMessages.byWeekTitle');
  isc.GroupingMessages.byMonthTitle = getLabel('OBUISC_GroupingMessages.byMonthTitle');
  isc.GroupingMessages.byQuarterTitle = getLabel('OBUISC_GroupingMessages.byQuarterTitle');
  isc.GroupingMessages.byYearTitle = getLabel('OBUISC_GroupingMessages.byYearTitle');
  isc.GroupingMessages.byDayOfMonthTitle = getLabel('OBUISC_GroupingMessages.byDayOfMonthTitle');
  isc.GroupingMessages.byUpcomingTitle = getLabel('OBUISC_GroupingMessages.byUpcomingTitle');
  isc.GroupingMessages.byHoursTitle = getLabel('OBUISC_GroupingMessages.byHoursTitle');
  isc.GroupingMessages.byMinutesTitle = getLabel('OBUISC_GroupingMessages.byMinutesTitle');
  isc.GroupingMessages.bySecondsTitle = getLabel('OBUISC_GroupingMessages.bySecondsTitle');
  isc.GroupingMessages.byMilisecondsTitle = getLabel('OBUISC_GroupingMessages.byMilisecondsTitle');
  isc.Validator.notABoolean = getLabel('OBUISC_Validator.notABoolean');
  isc.Validator.notAString = getLabel('OBUISC_Validator.notAString');
  isc.Validator.notAnInteger = getLabel('OBUISC_Validator.notAnInteger');
  isc.Validator.notADecimal = getLabel('OBUISC_Validator.notADecimal');
  isc.Validator.notADate = getLabel('OBUISC_Validator.notADate');
  isc.Validator.mustBeLessThan = getLabel('OBUISC_Validator.mustBeLessThan');
  isc.Validator.mustBeGreaterThan = getLabel('OBUISC_Validator.mustBeGreaterThan');
  isc.Validator.mustBeLaterThan = getLabel('OBUISC_Validator.mustBeLaterThan');
  isc.Validator.mustBeEarlierThan = getLabel('OBUISC_Validator.mustBeEarlierThan');
  isc.Validator.mustBeShorterThan = getLabel('OBUISC_Validator.mustBeShorterThan');
  isc.Validator.mustBeLongerThan = getLabel('OBUISC_Validator.mustBeLongerThan');
  isc.Validator.mustBeExactLength = getLabel('OBUISC_Validator.mustBeExactLength');
  isc.Validator.requiredField = getLabel('OBUISC_Validator.requiredField');
  isc.Validator.notOneOf = getLabel('OBUISC_Validator.notOneOf');
  isc.Time.AMIndicator = getLabel('OBUISC_Time.AMIndicator');
  isc.Time.PMIndicator = getLabel('OBUISC_Time.PMIndicator');
  isc.Window.title = getLabel('OBUISC_Window.title');
  isc.FilterBuilder.removeButtonPrompt = getLabel('OBUISC_FilterBuilder.removeButtonPrompt');
  isc.FilterBuilder.addButtonPrompt = getLabel('OBUISC_FilterBuilder.addButtonPrompt');
  isc.FilterBuilder.rangeSeparator = getLabel('OBUISC_FilterBuilder.rangeSeparator');
  isc.FilterBuilder.subClauseButtonTitle = getLabel('OBUISC_FilterBuilder.subClauseButtonTitle');
  isc.FilterBuilder.subClauseButtonPrompt = getLabel('OBUISC_FilterBuilder.subClauseButtonPrompt');
  isc.Button.title = getLabel('OBUISC_Button.title');
  isc.DateChooser.todayButtonTitle = getLabel('OBUISC_DateChooser.todayButtonTitle');
  isc.DateChooser.cancelButtonTitle = getLabel('OBUISC_DateChooser.cancelButtonTitle');
  isc.DynamicForm.errorsPreamble = getLabel('OBUISC_DynamicForm.errorsPreamble');
  isc.DynamicForm.unknownErrorMessage = getLabel('OBUISC_DynamicForm.unknownErrorMessage');
  // the following two do not seem to exist
  // isc.SelectOtherItem.otherTitle = getLabel('OBUISC_SelectOtherItem.otherTitle');
  // isc.SelectOtherItem.selectOtherPrompt = getLabel('OBUISC_SelectOtherItem.selectOtherPrompt');
  isc.DateItem.invalidDateStringMessage = getLabel('OBUISC_DateItem.invalidDateStringMessage');
  isc.DateItem.pickerIconPrompt = getLabel('OBUISC_');
  isc.ValuesManager.unknownErrorMessage = getLabel('OBUISC_ValuesManager.unknownErrorMessage');
  isc.DataBoundComponent.addFormulaFieldText = getLabel('OBUISC_DataBoundComponent.addFormulaFieldText');
  isc.DataBoundComponent.editFormulaFieldText = getLabel('OBUISC_DataBoundComponent.editFormulaFieldText');
  isc.DataBoundComponent.addSummaryFieldText = getLabel('OBUISC_DataBoundComponent.addSummaryFieldText');
  isc.DataBoundComponent.editSummaryFieldText = getLabel('OBUISC_DataBoundComponent.editSummaryFieldText');
  isc.Selection.selectionRangeNotLoadedMessage = getLabel('OBUISC_Selection.selectionRangeNotLoadedMessage');
  isc.GridRenderer.emptyMessage = getLabel('OBUISC_GridRenderer.emptyMessage');

  isc.ListGrid.addProperties({
    addFormulaFieldText: getLabel('OBUISC_ListGrid.addFormulaFieldText')
  });
  isc.ListGrid.addProperties({
    editFormulaFieldText: getLabel('OBUISC_ListGrid.editFormulaFieldText')
  });
  isc.ListGrid.addProperties({
    removeFormulaFieldText: getLabel('OBUISC_ListGrid.removeFormulaFieldText')
  });
  isc.ListGrid.addProperties({
    addSummaryFieldText: getLabel('OBUISC_ListGrid.addSummaryFieldText')
  });
  isc.ListGrid.addProperties({
    editSummaryFieldText: getLabel('OBUISC_ListGrid.editSummaryFieldText')
  });
  isc.ListGrid.addProperties({
    removeSummaryFieldText: getLabel('OBUISC_ListGrid.removeSummaryFieldText')
  });
  isc.ListGrid.addProperties({
    emptyMessage: getLabel('OBUISC_ListGrid.emptyMessage')
  });
  isc.ListGrid.addProperties({
    loadingDataMessage: getLabel('OBUISC_ListGrid.loadingDataMessage')
  });
  isc.ListGrid.addProperties({
    loadingMessage: ''
  }); // empty string is fine see description in smartclient reference getLabel('OBUISC_ListGrid.loadingMessage')
  isc.ListGrid.addProperties({
    removeFieldTitle: getLabel('OBUISC_ListGrid.removeFieldTitle')
  });
  isc.ListGrid.addProperties({
    cancelEditingConfirmationMessage: getLabel('OBUISC_ListGrid.cancelEditingConfirmationMessage')
  });
  isc.ListGrid.addProperties({
    confirmDiscardEditsMessage: getLabel('OBUISC_ListGrid.confirmDiscardEditsMessage')
  });
  isc.ListGrid.addProperties({
    discardEditsSaveButtonTitle: getLabel('OBUISC_ListGrid.discardEditsSaveButtonTitle')
  });
  isc.ListGrid.addProperties({
    freezeOnRightText: getLabel('OBUISC_ListGrid.freezeOnRightText')
  });
  isc.ListGrid.addProperties({
    freezeOnLeftText: getLabel('OBUISC_ListGrid.freezeOnLeftText')
  });
  isc.ListGrid.addProperties({
    sortFieldAscendingText: getLabel('OBUISC_ListGrid.sortFieldAscendingText')
  });
  isc.ListGrid.addProperties({
    sortFieldDescendingText: getLabel('OBUISC_ListGrid.sortFieldDescendingText')
  });
  isc.ListGrid.addProperties({
    fieldVisibilitySubmenuTitle: getLabel('OBUISC_ListGrid.fieldVisibilitySubmenuTitle')
  });
  isc.ListGrid.addProperties({
    freezeFieldText: getLabel('OBUISC_ListGrid.freezeFieldText')
  });
  isc.ListGrid.addProperties({
    unfreezeFieldText: getLabel('OBUISC_ListGrid.unfreezeFieldText')
  });
  isc.ListGrid.addProperties({
    groupByText: getLabel('OBUISC_ListGrid.groupByText')
  });
  isc.ListGrid.addProperties({
    ungroupText: getLabel('OBUISC_ListGrid.ungroupText')
  });
  isc.ListGrid.addProperties({
    fieldVisibilitySubmenuTitle: getLabel('OBUISC_ListGrid.fieldVisibilitySubmenuTitle')
  });
  isc.ListGrid.addProperties({
    clearSortFieldText: getLabel('OBUISC_ListGrid.clearSortFieldText')
  });

  isc.TreeGrid.parentAlreadyContainsChildMessage = getLabel('OBUISC_TreeGrid.parentAlreadyContainsChildMessage');
  isc.TreeGrid.cantDragIntoSelfMessage = getLabel('OBUISC_TreeGrid.cantDragIntoSelfMessage');
  isc.TreeGrid.cantDragIntoChildMessage = getLabel('OBUISC_TreeGrid.cantDragIntoChildMessage');
  isc.MenuButton.title = getLabel('OBUISC_MenuButton.title');
  isc.FormulaBuilder.autoHideCheckBoxLabel = getLabel('OBUISC_FormulaBuilder.autoHideCheckBoxLabel');
  isc.FormulaBuilder.helpTextIntro = getLabel('OBUISC_FormulaBuilder.helpTextIntro');
  isc.FormulaBuilder.instructionsTextStart = getLabel('OBUISC_FormulaBuilder.instructionsTextStart');
  isc.FormulaBuilder.samplePrompt = getLabel('OBUISC_FormulaBuilder.samplePrompt');
  isc.SummaryBuilder.autoHideCheckBoxLabel = getLabel('OBUISC_SummaryBuilder.autoHideCheckBoxLabel');
  isc.SummaryBuilder.helpTextIntro = getLabel('OBUISC_SummaryBuilder.helpTextIntro');

  //isc.Calendar is not loaded as a default
  //isc.Calendar.invalidDateMessage = getLabel('OBUISC_Calendar.invalidDateMessage');
  //isc.Calendar.dayViewTitle = getLabel('OBUISC_Calendar.dayViewTitle');
  //isc.Calendar.weekViewTitle = getLabel('OBUISC_Calendar.weekViewTitle');
  //isc.Calendar.monthViewTitle = getLabel('OBUISC_Calendar.monthViewTitle');
  //isc.Calendar.timelineViewTitle = getLabel('OBUISC_Calendar.timelineViewTitle');
  //isc.Calendar.eventNameFieldTitle = getLabel('OBUISC_Calendar.eventNameFieldTitle');
  //isc.Calendar.saveButtonTitle = getLabel('OBUISC_Calendar.saveButtonTitle');
  //isc.Calendar.detailsButtonTitle = getLabel('OBUISC_Calendar.detailsButtonTitle');
  //isc.Calendar.cancelButtonTitle = getLabel('OBUISC_Calendar.cancelButtonTitle');
  //isc.Calendar.previousButtonHoverText = getLabel('OBUISC_Calendar.previousButtonHoverText');
  //isc.Calendar.nextButtonHoverText = getLabel('OBUISC_Calendar.nextButtonHoverText');
  //isc.Calendar.addEventButtonHoverText = getLabel('OBUISC_Calendar.addEventButtonHoverText');
  //isc.Calendar.datePickerHoverText = getLabel('OBUISC_Calendar.datePickerHoverText');
}(OB.I18N, isc));
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2011-2013 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */
// This file contains direct overrides of Smartclient types.
// Normally we introduce new subtypes of Smartclient types. However for
// some cases it makes sense to directly set properties on top Smartclient
// types. This is done in this file.
// We have dates/times in the database without timezone, we assume GMT therefore 
// for all our date/times we use GMT on both the server and the client
// NOTE: causes issue https://issues.openbravo.com/view.php?id=16014
// NOTE: disabled as now timezone is send from the client to the server
// Time.setDefaultDisplayTimezone(0);
// Call duplicated - we include SmartClient embedded in StaticResources for classic windows
isc.setAutoDraw(false);
isc.screenReader = false;

isc.DataSource.serializeTimeAsDatetime = true;

isc.DataSource.addProperties({
  compareDates: function (date1, date2, fieldName, otherFieldName) {
    var field = this.getField(fieldName),
        otherField = otherFieldName ? this.getField(otherFieldName) : null;
    if ((field && (field.type === "datetime" || field.type === "_id_24" || field.type === "_id_16")) || (otherField && (otherField.type === "datetime" || otherField.type === "_id_24" || otherField.type === "_id_16"))) {
      return Date.compareDates(date1, date2);
    } else {
      return Date.compareLogicalDates(date1, date2);
    }
  }
});

isc.DataSource.addSearchOperator({
  ID: 'exists',
  // Compares two criteria that use the 'exists' operator:
  // - If they are the same, return 0 (no need to reapply the filter)
  // - If they are not the same, return -1 to force a datasource call. 
  // - Returning 1 would imply that the new criterion is more retrictive than the old criterion and that the filtered results can be
  // fetched locally, we don't want to do that with criteria that use the 'exists' operator
  compareCriteria: function (newCriterion, oldCriterion, operator, ds) {
    var newValues, oldValues, i;
    if (newCriterion.fieldName === oldCriterion.fieldName && newCriterion.existsQuery === oldCriterion.existsQuery) {
      // If the fieldName and the exists query is the same, compare the values
      newValues = newCriterion.value;
      oldValues = oldCriterion.value;
      if (newValues.length === oldValues.length) {
        // They have the same length, check if they are the same in the same order
        for (i = 0; i < newValues.length; i++) {
          if (newValues[i] !== oldValues[i]) {
            return -1;
          }
        }
        // Same fieldName, same existsQuery, same values: both criterias are the same
        return 0;
      } else {
        return -1;
      }
    } else {
      return -1;
    }
  }
});

isc.ResultSet.addProperties({
  _original_removeCacheData: isc.ResultSet.getPrototype().removeCacheData,
  removeCacheData: function (updateData) {
    var filteringOnClient = this.allRows !== null,
        i, index, ds;
    this._original_removeCacheData(updateData);
    if (filteringOnClient) {
      ds = this.getDataSource();
      // remove any rows that were present in the cache
      for (i = 0; i < updateData.length; i++) {
        index = ds.findByKeys(updateData[i], this.localData);
        if (index !== -1) {
          this.localData.removeAt(index);
        }
      }
    }
  },

  _original_updateCacheData: isc.ResultSet.getPrototype().updateCacheData,
  updateCacheData: function (updateData, dsRequest) {
    var filteringOnClient = this.allRows !== null,
        i, indexAllRows, indexLocalData, ds;
    this._original_updateCacheData(updateData, dsRequest);
    if (filteringOnClient) {
      ds = this.getDataSource();
      // remove any rows that were present in the cache
      for (i = 0; i < updateData.length; i++) {
        indexLocalData = ds.findByKeys(updateData[i], this.localData);
        indexAllRows = ds.findByKeys(updateData[i], this.allRows);
        if (indexLocalData !== -1 && indexAllRows !== -1) {
          this.localData[indexLocalData] = this.allRows[indexAllRows];
        }
      }
    }
  },

  _original_shouldUseClientSorting: isc.ResultSet.getPrototype().shouldUseClientSorting,
  shouldUseClientSorting: function () {
    if (this.grid && this.grid._filteringAndSortingManually) {
      return false;
    } else {
      return this._original_shouldUseClientSorting();
    }
  }
});


isc.Canvas.addProperties({

  // make sure that the datasources are also destroyed
  _original_destroy: isc.Canvas.getPrototype().destroy,
  destroy: function () {
    if (this.optionDataSource && !this.optionDataSource.potentiallyShared) {
      this.optionDataSource.destroy();
      this.optionDataSource = null;
    }
    if (this.dataSource && !this.dataSource.potentiallyShared) {
      this.dataSource.destroy();
      this.dataSource = null;
    }
    this._original_destroy();
  }
});

//Let the click on an ImgButton and Button fall through to its action method 
isc.ImgButton.addProperties({
  click: function () {
    if (this.action) {
      this.action();
    }
  }
});

isc.Button.addProperties({
  click: function () {
    if (this.action) {
      this.action();
    }
  }
});

isc.StaticTextItem.addProperties({
  canFocus: false
});

// we generate datasources with minimal field sets to 
// minimize the javascript, therefore the standard
// processValue implementation does not work for this
// filter operator, it uses the datasource field definitions
// therefore override it to only return the value
// see DataSourceConstants.MINIMAL_PROPERTY_OUTPUT
// https://issues.openbravo.com/view.php?id=18557
if (!isc.DynamicForm.getOperatorIndex()) {
  isc.DynamicForm.buildOperatorIndex();
}
isc.DynamicForm.getOperatorIndex()['=.'][0].processValue = function (value, ds) {
  return value;
};

isc.Layout.addProperties({

  destroyAndRemoveMembers: function (toDestroy) {
    var i, len, nextIndex = 0;
    if (!isc.isA.Array(toDestroy)) {
      toDestroy = [toDestroy];
    }
    len = toDestroy.length;
    for (i = 0; i < len; i++) {
      if (toDestroy[nextIndex] && toDestroy[nextIndex].destroy) {
        toDestroy[nextIndex].destroy();
      }
      if (toDestroy.length === len) {
        nextIndex = nextIndex + 1;
      }
    }
    this.removeMembers(toDestroy);
  }
});

isc.TextItem.addProperties({

  // to support and/or in text items
  // https://issues.openbravo.com/view.php?id=18747
  // NOTE: if Smartclient starts to support and/or, revisit this code
  parseValueExpressions: function (value, fieldName) {
    // enable hack to force Smartclient to support and/or logic
    if (isc.isA.String(value) && (value.toUpperCase().contains(' OR ') || value.toUpperCase().contains(' AND '))) {
      return this.parseOBValueExpressions(value, fieldName);
    }
    return this.Super('parseValueExpressions', arguments);
  },

  // this is a copy of the FormItem.parseValueExpressions to support
  // and/or logic for enum and text fields
  parseOBValueExpressions: function (value, fieldName) {
    var type = this.getType(),
        i, isValidLogicType = (isc.SimpleType.inheritsFrom(type, 'enum') || isc.SimpleType.inheritsFrom(type, 'text') || isc.SimpleType.inheritsFrom(type, 'integer') || isc.SimpleType.inheritsFrom(type, 'float') || isc.SimpleType.inheritsFrom(type, 'date')),
        opIndex = isc.DynamicForm.getOperatorIndex(),
        validOps = isc.getKeys(opIndex),
        result = {
        operator: "and",
        criteria: []
        },
        crit = result.criteria,
        valueParts = [],
        allowEx = true,
        ds = isc.DS.get(this.form.expressionDataSource || this.form.dataSource);

    if (!value) {
      value = this.getValue();
    }
    if (!value) {
      return;
    }

    if (!isc.isA.String(value)) {
      value += "";
    }

    var tempOps, tempOp;

    var defOpName = this.getOperator();
    if (defOpName) {
      validOps.add(defOpName);
    }

    var defOp = ds ? ds.getSearchOperator(defOpName) : {
      id: defOpName
    };

    var field, insensitive = defOp.caseInsensitive;
    var partIndex, parts, partCrit, part;

    if (isValidLogicType && value.contains(" and ")) {
      valueParts = value.split(" and ");
    } else if (isValidLogicType && value.contains(" or ")) {
      valueParts = value.split(" or ");
      result.operator = "or";
    } else if (value.contains("...")) {
      valueParts = value.split("...");
      if (valueParts.length === 2) {
        tempOps = opIndex["..."];

        if (tempOps) {
          tempOp = (insensitive ? tempOps.find("caseInsensitive", true) : tempOps[0]);
        }

        field = ds ? ds.getField(fieldName) : null;

        if (field && isc.SimpleType.inheritsFrom(field.type, "date")) {
          valueParts[0] = new Date(Date.parse(valueParts[0]));
          valueParts[0].logicalDate = true;
          valueParts[1] = new Date(Date.parse(valueParts[1]));
          valueParts[1].logicalDate = true;
        } else if (field && field.type === "text") {

          if (!valueParts[1].endsWith(this._betweenInclusiveEndCrit)) {
            valueParts[1] += this._betweenInclusiveEndCrit;
          }
        }

        return {
          fieldName: fieldName,
          operator: tempOp.ID,
          start: valueParts[0],
          end: valueParts[1]
        };
      }
    } else {
      valueParts = [value];
    }

    var skipTheseOps = [" and ", " or "];

    for (i = 0; i < valueParts.length; i++) {
      var key, valuePart = valueParts[i],
          subCrit = {
          fieldName: fieldName
          };

      field = ds ? ds.getField(fieldName) : null;
      var isDateField = (field ? field && isc.SimpleType.inheritsFrom(field.type, "date") : false),
          valueHasExpression = false;

      for (key in opIndex) {
        if (opIndex.hasOwnProperty(key)) {
          if (!key) {
            continue;
          }

          var ops = opIndex[key],
              wildCard = false,
              op;

          if (key === "==" && isc.isA.String(valuePart) && valuePart.startsWith("=") && !valuePart.startsWith("==") && !valuePart.startsWith("=(")) {
            wildCard = true;
          }

          if (ops && ops.length) {
            op = ops.find("caseInsensitive", insensitive) || ops[0];
          }

          if (!op || !op.symbol || skipTheseOps.contains(op.symbol)) {
            continue;
          }

          if (validOps.contains(op.symbol) && ((isc.isA.String(valuePart) && (valuePart.startsWith(op.symbol) ||

          (op.symbol === "..." && valuePart.contains(op.symbol)))) || wildCard)) {
            valueHasExpression = true;

            if (valuePart.startsWith(op.symbol)) {
              valuePart = valuePart.substring(op.symbol.length - (wildCard ? 1 : 0));
            }

            if (op.closingSymbol) {
              // this is a containing operator (inSet, notInSet), with opening and 
              // closing symbols...  check that the value endsWith the correct 
              // closing symbol and strip it off - op.processValue() will split 
              // the string for us later
              if (valuePart.endsWith(op.closingSymbol)) {
                valuePart = valuePart.substring(0, valuePart.length - op.closingSymbol.length);
              }
            }

            if (valuePart.contains("...")) {
              // allow range operators as well as conjunctives
              var rangeValueParts = valuePart.split("...");
              if (rangeValueParts.length === 2) {
                tempOps = opIndex["..."];

                if (tempOps) {
                  tempOp = (insensitive ? tempOps.find("caseInsensitive", true) : tempOps[0]);
                }

                field = ds ? ds.getField(fieldName) : null;

                if (field && isc.SimpleType.inheritsFrom(field.type, "date")) {
                  rangeValueParts[0] = new Date(Date.parse(rangeValueParts[0]));
                  rangeValueParts[0].logicalDate = true;
                  rangeValueParts[1] = new Date(Date.parse(rangeValueParts[1]));
                  rangeValueParts[1].logicalDate = true;
                } else if (field && field.type === "text") {

                  if (!rangeValueParts[1].endsWith(this._betweenInclusiveEndCrit)) {
                    rangeValueParts[1] += this._betweenInclusiveEndCrit;
                  }
                }

                result.criteria.add({
                  fieldName: fieldName,
                  operator: tempOp.ID,
                  start: rangeValueParts[0],
                  end: rangeValueParts[1]
                });

                continue;
              }
            }

            if (isDateField) {
              valuePart = new Date(Date.parse(valuePart));
              valuePart.logicalDate = true;
            }

            subCrit.operator = op.ID;

            if (op.processValue) {
              valuePart = op.processValue(valuePart, ds);
            }

            if (op.wildCard && isc.isA.String(valuePart) && valuePart.contains(op.wildCard)) {
              // this is an operator that supports wildCards (equals, notEquals)...
              parts = valuePart.split(op.wildCard);

              if (parts.length > 1) {
                for (partIndex = 0; partIndex < parts.length; partIndex++) {
                  part = parts[partIndex];

                  if (!part || part.length === 0) {
                    continue;
                  }

                  partCrit = {
                    fieldName: fieldName,
                    value: part
                  };

                  var hasPrefix = partIndex > 0,
                      hasSuffix = parts.length - 1 > partIndex;

                  if (hasPrefix && hasSuffix) {
                    // this is a contains criteria
                    partCrit.operator = insensitive ? "iContains" : "contains";
                  } else if (hasPrefix) {
                    // this is an endsWith criteria
                    partCrit.operator = insensitive ? "iEndsWith" : "endsWith";
                  } else if (hasSuffix) {
                    // this is a startsWith criteria
                    partCrit.operator = insensitive ? "iStartsWith" : "startsWith";
                  }

                  result.criteria.add(partCrit);
                }

                // we'll include a check for this attribute when rebuilding the 
                // value later
                this._lastValueHadWildCards = true;

                // clear out the sub-crit's operator - this will prevent it being
                // added to the result criteria below (we've already added 
                // everything we need above
                subCrit.operator = null;
              }
            } else {
              // set the value if one is required for the op
              if (op.valueType !== "none") {
                subCrit.value = valuePart;
              }
            }

            break;
          }
        }
      }
      if (!valueHasExpression) {
        // this was a straight expression like "10"
        subCrit.operator = defOpName;
        subCrit.value = valuePart;
      }
      if (subCrit.operator) {
        result.criteria.add(subCrit);
      }
    }
    //  this.logWarn("Parsed expression:" + value + " to criterion:" + this.echo(result));
    if (result.criteria.length === 1) {
      result = result.criteria[0];
    }
    if (result.criteria && result.criteria.length === 0) {
      result = null;
    }
    if (!result.fieldName) {
      result.fieldName = fieldName;
    }

    return result;
  },

  // see comments in super type for useDisabledEventMask
  // http://forums.smartclient.com/showthread.php?p=70160#post70160
  // https://issues.openbravo.com/view.php?id=17936
  useDisabledEventMask: function () {
    if (isc.Browser.isIE) {
      return false;
    }
    return this.Super('useDisabledEventMask', arguments);
  }

});

// NOTE BEWARE: methods/props added here will overwrite and NOT extend FormItem
// properties! 
isc.FormItem.addProperties({
  // default, is overridden in generated field template
  personalizable: true,
  updatable: true,
  width: '*',

  // always take up space when an item is hidden in a form
  alwaysTakeSpace: true,

  // If an item has an optiomDataSource, a fetch is made in the init() or setValue() ...
  // "The fetch occurs if the item value is non null on initial draw of the form or whenever setValue() is called"
  // http://www.smartclient.com/docs/8.1/a/b/c/go.html#attr..FormItem.fetchMissingValues
  fetchMissingValues: false,

  // disable tab to icons
  canTabToIcons: false,

  _original_validate: isc.FormItem.getPrototype().validate,
  validate: function () {

    // prevent validation when we are showing the editor and moving
    // the focus around
    if (this.form && this.form.grid && this.form.grid._showingEditor) {
      return;
    }
    return this._original_validate();
  },

  _original_init: isc.FormItem.getPrototype().init,
  init: function () {
    this.obShowIf = this.showIf; // Copy the reference of showIf definition
    OB.Utilities.addRequiredSuffixToBaseStyle(this);
    // and continue with the original init
    this._original_init();
  },

  _handleEditorExit: isc.FormItem.getPrototype().handleEditorExit,
  handleEditorExit: function () {
    if (this.form && this.form._isRedrawing) {
      return;
    }
    return this._handleEditorExit();
  },

  // make sure that the datasources are also destroyed
  _original_destroy: isc.FormItem.getPrototype().destroy,
  destroy: function () {
    if (this.optionDataSource && !this.optionDataSource.potentiallyShared) {
      this.optionDataSource.destroy();
      this.optionDataSource = null;
    }
    if (this.dataSource && !this.dataSource.potentiallyShared) {
      this.dataSource.destroy();
      this.dataSource = null;
    }
    this._original_destroy();
  },

  // overridden to not show if hiddenInForm is set
  _show: isc.FormItem.getPrototype().show,
  show: function (arg1) {
    if (this.hiddenInForm) {
      return;
    }
    this._show(arg1);
  },

  // overridden to not make a difference between undefined and null
  _original_compareValues: isc.FormItem.getPrototype().compareValues,
  compareValues: function (value1, value2) {
    var undef, val1NullOrUndefined = (value1 === null || value1 === undef || value1 === ''),
        val2NullOrUndefined = (value2 === null || value2 === undef || value2 === '');
    if (val1NullOrUndefined && val2NullOrUndefined) {
      return true;
    }
    // a special case, smartclient makes a mistake when comparing
    // zero against an empty string
    if (value1 === 0 && value2 !== 0) {
      return false;
    }
    if (value1 !== 0 && value2 === 0) {
      return false;
    }
    return this._original_compareValues(value1, value2);
  },

  _handleTitleClick: isc.FormItem.getPrototype().handleTitleClick,
  handleTitleClick: function () {
    // always titleclick directly as sc won't call titleclick
    // in that case
    if (this.isDisabled()) {
      this.titleClick(this.form, this);
      return false;
    }
    // forward to the original method
    return this._handleTitleClick();
  },

  titleClick: function (form, item) {
    item.focusInItem();
    if (item.linkButtonClick) {
      item.linkButtonClick();
    }
  },

  changed: function (form, item, value) {
    this._hasChanged = true;
    this.clearErrors();

    if (this.redrawOnChange) {
      if (this.form.onFieldChanged) {
        this.form.onFieldChanged(this.form, item || this, value);
      }
      if (this.form && this.form.view && this.form.view.toolBar && this.form.view.toolBar.refreshCustomButtonsView) {
        this.form.view.toolBar.refreshCustomButtonsView(this.form.view);
      }
    }
  },

  focus: function (form, item) {
    var view = OB.Utilities.determineViewOfFormItem(item);
    if (view) {
      view.lastFocusedItem = this;
    }
    this.hasFocus = true;
  },

  blur: function (form, item) {
    if (this.form && this.form._isRedrawing) {
      return;
    }
    if (item._hasChanged && form && form.handleItemChange) {
      form.handleItemChange(item);
    }
  },

  // prevent a jscript error in ie when closing a tab
  // https://issues.openbravo.com/view.php?id=18890
  _doBlurItem: isc.FormItem.getPrototype().blurItem,
  blurItem: function () {
    if (!this.form || this.form.destroyed || this.form._isRedrawing) {
      return;
    }
    this._doBlurItem();
  },

  isDisabled: function (ignoreTemporaryDisabled) {
    if (!this.form) {
      return false;
    }
    // disabled if the property can not be updated and the form or record is new
    // explicitly comparing with false as it is only set for edit form fields
    if (this.updatable === false && !(this.form.isNew || this.form.getValue('_new'))) {
      // note: see the ob-view-form.js resetCanFocus method 
      this.canFocus = false;
      return true;
    }
    var disabled = this.form.readOnly || this.readonly || this.disabled;
    // allow focus if all items are disabled
    // note: see the ob-view-form.js resetCanFocus method 
    this.canFocus = this.form.allItemsDisabled || !disabled;
    return (!ignoreTemporaryDisabled && this.form.allItemsDisabled) || disabled;
  },

  // return all relevant focus condition
  isFocusable: function (ignoreTemporaryDisabled) {
    return this.getCanFocus() && this.isVisible() && !this.isDisabled(ignoreTemporaryDisabled);
  },

  // overridden to never use the forms datasource for fields
  getOptionDataSource: function () {
    var ods = this.optionDataSource;

    if (isc.isA.String(ods)) {
      ods = isc.DataSource.getDataSource(ods);
    }

    return ods;
  }
});

// To fix issue https://issues.openbravo.com/view.php?id=21786
isc.ComboBoxItem.addProperties({
  isPickListShown: function () {
    return (this.pickList ? (this.pickList.isDrawn() && this.pickList.isVisible()) : false);
  },

  hidePicker: function () {
    if (this.pickList) {
      this.pickList.hideClickMask();
      this.pickList.hide();
    }
  }
});

// overridden to never show a prompt. A prompt can be created manually 
// when overriding for example the DataSource (see the OBStandardView).
isc.RPCManager.showPrompt = false;
isc.RPCManager.neverShowPrompt = true;

// Overrides hasFireBug function to always return false,
// the SmartClient code has too many trace() calls that result in worse
// performance when using Firefox/Firebug
isc.Log.hasFireBug = function () {
  return false;
};

// prevent caching of picklists globally to prevent js error 
// when a picklist has been detached from a formitem
isc.PickList.getPrototype().cachePickListResults = false;

isc.RelativeDateItem.addProperties({
  displayFormat: OB.Format.date,
  inputFormat: OB.Format.date,
  pickerConstructor: 'OBDateChooser',

  // overridden as the displayDateFormat does not seem to work fine
  formatDate: function (dt) {
    return OB.Utilities.Date.JSToOB(dt, OB.Format.date);
  },

  // updateEditor() Fired when the value changes (via updateValue or setValue)
  // Shows or hides the quantity box and updates the hint to reflect the current value.
  // overridden to solve: https://issues.openbravo.com/view.php?id=16295
  updateEditor: function () {

    if (!this.valueField || !this.quantityField) {
      return;
    }

    var focusItem, selectionRange, mustRefocus = false;

    if (this.valueField.hasFocus) {
      focusItem = this.valueField;
      selectionRange = this.valueField.getSelectionRange();
    } else if (this.quantityField.hasFocus) {
      focusItem = this.quantityField;
      selectionRange = this.quantityField.getSelectionRange();
    }

    var value = this.valueField.getValue(),
        quantity = this.quantityField.getValue();

    var showQuantity = (value && isc.isA.String(value) && this.relativePresets[value]);

    if (!showQuantity) {
      if (this.quantityField.isVisible()) {
        mustRefocus = true;
        this.quantityField.hide();
      }
    } else {
      if (!this.quantityField.isVisible()) {
        mustRefocus = true;
        this.quantityField.show();
      }
    }

    if (this.calculatedDateField) {
      value = this.getValue();
      var displayValue = this.editor.getValue('valueField');
      // only show if the value is not a direct date
      // https://issues.openbravo.com/view.php?id=16295
      if (displayValue && displayValue.length > 0) {
        displayValue = OB.Utilities.trim(displayValue);
        // if it starts with a number then it must be a real date
        if (displayValue.charAt(0) < '0' || displayValue.charAt(0) > '9') {
          this.calculatedDateField.setValue(!value ? '' : '(' + this.formatDate(value) + ')');
        } else {
          this.calculatedDateField.setValue('');
        }
      } else {
        this.calculatedDateField.setValue('');
      }
    }

    // If we redrew the form to show or hide the qty field, we may need to refocus and
    // reset the selection range
    if (mustRefocus && focusItem !== null) {
      if (!showQuantity && focusItem === this.quantityField) {
        this.valueField.focusInItem();
      } else {
        if (selectionRange) {
          focusItem.delayCall('setSelectionRange', [selectionRange[0], selectionRange[1]]);
        }
      }
    }
    this.calculatedDateField.canFocus = false;
  },

  // overridden because the picker is now part of the combo and not a separate field.
  // custom code to center the picker over the picker icon
  getPickerRect: function () {
    // we want the date chooser to float centered over the picker icon.
    var form = this.canvas;
    return [this.getPageLeft() + form.getLeft(), this.getPageTop() + form.getTop() - 40];
  }

});

isc.DateItem.changeDefaults('textFieldDefaults', {
  isDisabled: function () {
    var disabled = this.Super('isDisabled', arguments);
    if (disabled) {
      return true;
    }
    if (this.parentItem.isDisabled()) {
      return true;
    }
    return false;
  }
});

// if not overridden then also errors handled by OB are shown in a popup
// see https://issues.openbravo.com/view.php?id=17136
isc.RPCManager.addClassProperties({
  _handleError: isc.RPCManager.getPrototype().handleError,
  handleError: function (response, request) {
    if (!request.willHandleError) {
      isc.RPCManager.handleError(response, request);
    }
  }
});

isc.Class.addClassProperties({
  _originalFireOnPause: isc.Class.fireOnPause,
  fireOnPause: function (id, callback, delay, target, instanceID) {
    if (id === 'performFilter') {
      if (target.currentThresholdToFilter) {
        delay = target.currentThresholdToFilter;
      }
    }
    this._originalFireOnPause(id, callback, delay, target, instanceID);
  }
});


// Allow searchs (with full dataset in memory/the datasource) not distinguish
// between accent or non-accent words
isc.DataSource.addProperties({

  _fieldMatchesFilter: isc.DataSource.getPrototype().fieldMatchesFilter,
  fieldMatchesFilter: function (fieldValue, filterValue, requestProperties) {
    if (fieldValue && typeof fieldValue === 'string') {
      fieldValue = fieldValue.replace(/á|à|ä|â/g, 'a').replace(/Á|À|Ä|Â/g, 'A');
      fieldValue = fieldValue.replace(/é|è|ë|ê/g, 'e').replace(/É|È|Ë|Ê/g, 'E');
      fieldValue = fieldValue.replace(/í|ì|ï|î/g, 'i').replace(/Í|Ì|Ï|Î/g, 'I');
      fieldValue = fieldValue.replace(/ó|ò|ö|ô/g, 'o').replace(/Ó|Ò|Ö|Ô/g, 'O');
      fieldValue = fieldValue.replace(/ú|ù|ü|û/g, 'u').replace(/Ú|Ù|Ü|Û/g, 'U');
      fieldValue = fieldValue.replace(/ç/g, 'c').replace(/Ç/g, 'C');
      fieldValue = fieldValue.replace(/ñ/g, 'n').replace(/Ñ/g, 'N');
    }
    if (filterValue && typeof filterValue === 'string') {
      filterValue = filterValue.replace(/á|à|ä|â/g, 'a').replace(/Á|À|Ä|Â/g, 'A');
      filterValue = filterValue.replace(/é|è|ë|ê/g, 'e').replace(/É|È|Ë|Ê/g, 'E');
      filterValue = filterValue.replace(/í|ì|ï|î/g, 'i').replace(/Í|Ì|Ï|Î/g, 'I');
      filterValue = filterValue.replace(/ó|ò|ö|ô/g, 'o').replace(/Ó|Ò|Ö|Ô/g, 'O');
      filterValue = filterValue.replace(/ú|ù|ü|û/g, 'u').replace(/Ú|Ù|Ü|Û/g, 'U');
      filterValue = filterValue.replace(/ç/g, 'c').replace(/Ç/g, 'C');
      filterValue = filterValue.replace(/ñ/g, 'n').replace(/Ñ/g, 'N');
    }
    return this._fieldMatchesFilter(fieldValue, filterValue, requestProperties);
  }
});

isc.RecordEditor.addProperties({
  _originalPerformFilter: isc.RecordEditor.getPrototype().performFilter,
  performFilter: function (suppressPrompt, forceFilter) {
    var grid = this.parentElement,
        key = isc.EventHandler.getKey();
    if (grid.lazyFiltering && !forceFilter && key === 'Enter') {
      // Pressing the enter key in the filter editor triggers the 'Apply Filter' actions
      grid.sorter.click();
      return;
    }
    if (!grid.lazyFiltering || forceFilter || grid._cleaningFilter) {
      this._originalPerformFilter(suppressPrompt);
    }
  }
});

// When filtering strings in backend, spaces are replaced by % in the resultant
// ilike expression. For example if filter is "jo sm" the query will be 
// "ilike '%jo%sm%'", so "John Smith" would be found. When filtering in client
// Smartclient doesn't do this conversion. This code, overwrittes Smartclient
// isc.contains comparator to work like in backend when it is called from stringComparasion
// function.
(function () {
  var containsNoBlanks, stringComparison = isc.DataSource.getSearchOperators().iContains.condition,
      originalContains = isc.clone(isc.contains);

  // Replaces isc.contains in the custom string comparator. Blank spaces are not
  // part of the comparision, but they separate different tokens to be found in 
  // the text. It returns true in case the tested text contains, in order, all the
  // tokens separated by blank spaces. 
  containsNoBlanks = function (tested, test) {
    var tokens, token, i, pendingToTest, idx;
    if (!tested) {
      return true;
    }

    tokens = test.split(' ');
    pendingToTest = tested;
    for (i = 0; i < tokens.length; i++) {
      token = tokens[i];
      idx = pendingToTest.indexOf(token);
      if (token && idx === -1) {
        return false;
      }
      pendingToTest = pendingToTest.substring(idx + token.length);
    }
    return true;
  };

  isc.addMethods(isc, {
    contains: function (string1, substring) {
      var args = arguments;
      if (args.callee.caller === stringComparison) {
        // invoking from stringComparsin function to do local (adaptive) filtering
        return containsNoBlanks(string1, substring);
      } else {
        // in other cases, use default logic
        return OB.Utilities.callAction({
          method: originalContains,
          target: this,
          parameters: arguments
        });
      }
    }
  });
}());

isc.SimpleType.create({inheritsFrom:'enum',name:'_id_6660044FBAA84B528A798EDFD7C5B2E3',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Tipos Rubro'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_DF7938526F074F33A9C8A7ED74EA315A',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Model Object Type'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_159',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'C_BPartner Location'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_158',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'C_Tax Parent is NULL'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_157',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'C_Region'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_156',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'C_Country'});isc.SimpleType.create({inheritsFrom:'text',name:'_id_2F55D47EF548441E8433D2005620C88D',editorType:'OBSelectorItem',gridEditorType:'OBSelectorItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'Busqueda Usuario'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_155',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'M_DiscountPriceList RoundingRule'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_36972531DA994BB38ECB91993058282F',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'FIN_Payment process actions'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_154',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'All_PriorityRule'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_152',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'C_Order DeliveryViaRule'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_153',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'C_Order FreightCostRule'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_150',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'C_Order InvoiceRule'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_151',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'C_Order DeliveryRule'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_73DAA2221E964DDA881CB80A83A9AE39',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'lista calificacion'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_405408C120EE473FBB07EA49919DF0F7',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'OBCLKER_Template_Language'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_A280DA82215C4D9496EA39289951608C',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'Utilidad'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_202',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'M_EDI Status'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_203',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'M_EDI Trx Type'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_204',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'AD_Find AndOr'});isc.SimpleType.create({inheritsFrom:'text',name:'_id_FF80818132D8F0F30132D9BC395D0038',editorType:'OBTextItem',gridEditorType:'OBTextItem',filterEditorType:'OBTextFilterItem',referenceName:'Window Reference'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_205',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'AD_Find Operation'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_F903F726B41A49D3860243101CEEBA25',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'FIN_Receivable payment on create action'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_200',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'C_Charge'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_201',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'C_BP_EDI EDI Type'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_5E77652CBFEB4F03A3A0629642D024DD',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'FIN_Payment'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_169',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'C_Project Parent'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_37BA0878B5494179AB05545C9B9805B7',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'OBUISEL_Selector Display/Value Field'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_2457000D1DDF495AADF4F3211370FB7B',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Forma Pago'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_6EE3EA7321544309803D4992D165F316',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Estado Vacaciones'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_206',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'AD_Table Posting'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_166',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'M_PriceListForSale'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_45B9E9D6BF264556A1B164B11E52653F',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'Widget Instance'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_207',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'GL Category Type'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_208',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'AD_ImpFormat Type'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_168',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'C_InvoiceSchedule InvoiceFrequency'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_209',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'AD_ImpFormat FormatType'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_167',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Weekdays'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_8A623B355DDC41A5A9FA6111E7223EB8',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Anio'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_3',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'AD_Column ColumnName'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_161',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'M_Product Parent'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_2',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'AD_Reference Validation Types'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_162',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'M_Product (no summary)'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_1',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'AD_Reference Data Types'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_163',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'M_Product Category'});isc.SimpleType.create({inheritsFrom:'text',name:'_id_6932F568D27E47DB861809AD66C15A01',editorType:'OBTextItem',gridEditorType:'OBTextItem',filterEditorType:'OBTextFilterItem',referenceName:'Modify Payment In Plan'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_5',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'AD_Table Access Levels'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_4',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'AD_Reference Subreferences'});isc.SimpleType.create({inheritsFrom:'text',name:'_id_2209AD8206A64CEAA47289C092FDE41F',editorType:'OBSelectorItem',gridEditorType:'OBSelectorItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'Busqueda Retencion Compra'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_211',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'M_Product BOM (stocked)'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_212',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'M_InventoryCount QtyRange'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_727B9E7086D647E2AD6F386DD9A16C5F',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'C_Doc_type Prov Cabecera'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_210',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'AD_ImpFormat_Row Type'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_215',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'C_Payment Trx Type'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_216',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'C_Bank Account Type'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_213',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'C_Payment AVS'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_214',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'C_Payment Tender Type'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_179',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'C_SalesRegion Parent'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_178',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'GL_Budget Status'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_217',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'C_Cash Trx Type'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_177',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'C_PeriodControl Status'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_176',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'C_PeriodControl Action'});isc.SimpleType.create({inheritsFrom:'text',name:'_id_42FE2710157A42ECA23DA1B7817562F9',editorType:'OBSelectorItem',gridEditorType:'OBSelectorItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'Busqueda Documento Factura'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_FF80818130217A35013021A672400035',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Order_Document Action'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_22F546D49D3A48E1B2B4F50446A8DE58',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'C_DocType_Trx'});isc.SimpleType.create({inheritsFrom:'text',name:'_id_FF8080813123BF670131241C2BB30012',editorType:'OBWidgetInFormItem',gridEditorType:'OBWidgetInFormItem',filterEditorType:'OBWidgetInFormItem',referenceName:'OBKMO_Widget in Form Reference'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_170',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'C_DocType'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_99EC3A7013654794BB52975DAA3B80E6',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'M_Inventory'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_171',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'M_Product (stocked)'});isc.SimpleType.create({inheritsFrom:'text',name:'_id_B8C833E4F0A44A2DA5FC7606F3CD9439',editorType:'OBTextItem',gridEditorType:'OBTextItem',filterEditorType:'OBTextFilterItem',referenceName:'Modify Payment Out Plan'});isc.SimpleType.create({inheritsFrom:'text',name:'_id_4FE370EC4A194C0EA1AE50D91B8CCD1B',editorType:'OBMultiSelectorItem',gridEditorType:'OBMultiSelectorItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'Product Multiple Selector for Add Product'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_175',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'C_ValidCombination'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_172',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'C_DocType SO'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_173',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'C_BPartner Customers'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_77430223925D4C0BB79EF1C68B7BBC5F',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Tipo de Hora'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_5AD08D5DF85549E0BCC0DEBDE4C0D340',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Use Attribute Set Value As'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_5E77652CBFEB4F03A3A0629642D024BD',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'FIN_Payment'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_223',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'C_BPartner Vendors Active'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_224',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'C_Commission DocBasis'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_07F0779771DA475F8C7D5696F4B30072',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'TipoRubro'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_225',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'C_Commission Frequency'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_46C76320911F4085B2CE2E3504166517',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Lista Meses'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_226',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'AD_Role User Level'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_CBFE484519794465B6BED250F7FB26AF',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'End Year Close Status'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_227',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'C_PaymentTerm'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_228',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'PA_Goal'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_188',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'M_PriceList Version'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_229',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'PA_Achievement Parent'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_187',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'C_BPartner SalesRep'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_FF8081813310CEAE0133116AA792014D',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'OBUIAPP_ProcessDefinition'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_189',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'M_Transaction Movement Type'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_180',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'All_ErrorType'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_F3455CBD6B69470396BE1FF35EC8CEDA',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'C_Tax'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_181',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'C_AcctSchema ElementType'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_C123B7BF5B2C438D84D2E509734776B5',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Bank Account Format'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_182',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'C_ElementValue (all)'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_183',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'C_DocType DocBaseType'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_184',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'AD_Tree'});isc.SimpleType.create({inheritsFrom:'text',name:'_id_785E274649F34ED68AEA2D15FE401F3D',editorType:'OBSelectorItem',gridEditorType:'OBSelectorItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'Cuenta Pago'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_26C900F41851449C8907E56534D0206B',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'C_DocType_Trx_No'});isc.SimpleType.create({inheritsFrom:'text',name:'_id_A85EA9A581DB42DCA5576FAFCD08A1B7',editorType:'OBSearchItem',gridEditorType:'OBSearchItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'Account Element Value'});isc.SimpleType.create({inheritsFrom:'text',name:'_id_FF9658201F8B4BE780BE00AAA9499ED5',editorType:'OBSelectorItem',gridEditorType:'OBSelectorItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'C_BPartner Customers no combo'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_4553302DFEF34EBE891E0907EC364E42',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'DocumentoBaseExternos'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_C1B4345A1F8841C2B1ADD403CA733D75',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Transaction Type AddTransaction'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_116',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'C_Element Type'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_117',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'C_ElementValue AccountType'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_114',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'C_UOM'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_F4175D3FED5949AAAA9C04A281E60866',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'AD_Column date column'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_115',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'C_Period Type'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_B80E53C3F99349B69AE340818093FC5A',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Formato de salida Atrums'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_112',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'C_Currency'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_0E3C675559F34AE2B19635A5DAA3448F',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'CO_BP_RETENCION_VENTA'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_113',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'AD_Org Parent'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_110',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'AD_User'});isc.SimpleType.create({inheritsFrom:'text',name:'_id_712D9821BE8246AC95E6C16D8BEEBE5E',editorType:'OBSelectorItem',gridEditorType:'OBSelectorItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'ProductSimple'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_111',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'C_Conversion_Rate Types'});isc.SimpleType.create({inheritsFrom:'image',name:'_id_4AA6C3BE9D3B4D84A3B80489505A23E5',editorType:'OBImageItem',gridEditorType:'OBImageItem',filterEditorType:'OBImageItem',shortDisplayFormatter:function(value,field,component,record){return"";},referenceName:'Image BLOB'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_4C36DC179A5F40DC80B3F3798E121152',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Audit Actions'});isc.SimpleType.create({inheritsFrom:'text',name:'_id_482FE0CA9E0F438BBE576E612111BF31',editorType:'OBSelectorItem',gridEditorType:'OBSelectorItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'Physical Inventory line selector'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_118',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'C_ElementValue Account Sign'});isc.SimpleType.create({inheritsFrom:'text',name:'_id_B36DF126DF5F4077A37F1E5B963AA636',editorType:'OBTextItem',gridEditorType:'OBTextItem',filterEditorType:'OBTextFilterItem',referenceName:'Grid Properties Reference'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_4EFC9773F30B4ACE97D225BD13CFF8CB',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'FinAcc Trx Type'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_B08E1E7FC07F46AEB9CF7301EE8ACD50',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Lista Motivos Salida Empleado'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_DE78D015D6AD4F9E8DB9A120C6227FF7',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'Modules'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_657B89EF105149F2B011CF8F5034FF92',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'M_Internal_Consumption actions'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_5BCEFDAAF41642E5BA3E334D4C810E6D',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Lista Motivos Permiso Empleado'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_1CC9902786384893A551465428468C2A',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'C_Settlement'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_125',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'All_Posting Type'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_73625A8F22EF4CD7808603156BA606D7',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Accruals and Deferrals Plan Types'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_126',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'AD_Table Replication Type'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_F1FFE7C244A14C4FA1AB6D98D4FE9FFC',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'Co_Doc_type Declaracion'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_B80AAAE24FC1451A8AB1363F3A325699',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'Tabla Vacacion'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_128',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'AD_Sequence for Documents'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_121',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'X12DE98 Entity Identifier Code'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_122',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'C_AcctSchema Costing Method'});isc.SimpleType.create({inheritsFrom:'text',name:'_id_11EC0EA165BF43439ACEFD63C34F5766',editorType:'OBSelectorItem',gridEditorType:'OBSelectorItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'Busqueda Bodega Local'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_123',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'C_AcctSchema GAAP'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_124',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'C_BPartner Parent'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_5399B74563094E35B96D005012B4A6D9',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Regiones'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_129',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'AD_Client'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_2FE25E4AF395479EB8BAB0539A829C28',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'UOM Volume'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_E1D9BFAEDABA4F81837C68E0F67F6C5E',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'C_Doc_type Prov Mes'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_C9C4B1804C7A4A2AB624642C4481EFBE',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'Provincias'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_F8BC73C4041E4164834499FF4D6388F1',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'m_ch_subset of characteristic'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_120',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'AD_TreeType Type'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_58F1F6B9031E42958986214558A889C2',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Estado Pedido'});isc.SimpleType.create({inheritsFrom:'text',name:'_id_52529102938F41D5B84D3DE1F8892249',editorType:'OBTextItem',gridEditorType:'OBTextItem',filterEditorType:'OBTextFilterItem',referenceName:'Masked String'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_1000300000',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'AD_AlertRule Type'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_7A335E6DA5774F89972F6903C9A142AA',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Condition of the goods'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_1000300001',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Number of Employees'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_1000300002',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'Countries'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_1000300003',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Type of Business'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_134',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'C_Accounts - User1'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_135',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'All_Document Action'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_132',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'C_ElementValue (Accounts)'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_133',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'C_Location'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_138',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'C_BPartner'});isc.SimpleType.create({inheritsFrom:'text',name:'_id_5921E65E7BFA4134B98CCDA388CC0559',editorType:'OBSelectorItem',gridEditorType:'OBSelectorItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'OBUISEL Account Element Value '});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_136',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'C_AcctSchema'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_137',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'C_Accounts - User2'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_D3ABDF451DE343F592A72DF0B8238870',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'Referencia_Cargo_Empleado'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_D2D4CC1F12434BB69733166A9423F2C6',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'C_Incoterms'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_131',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'All_Document Status'});isc.SimpleType.create({inheritsFrom:'text',name:'_id_A253A91D78324DC4A1661E96B390D888',editorType:'OBSelectorItem',gridEditorType:'OBSelectorItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'C_OrderLine no combo'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_130',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'AD_Org (Trx)'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_143',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'C_Campaign'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_725CD8C6882C40AFB4D1C27B1AEF8BB4',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Module status'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_144',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'C_Sales Region'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_145',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'C_Element'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_3F854F4DC7284CE4857A5EA941BE032C',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Module type'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_86086D70DDBC42B09E2BEB51D25C159F',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Session Login Status'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_B953095C5CB94B939B468DA0E887D8D2',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Estados'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_148',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'C_DocType SubTypeSO'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_15B7F4E83CFF4593923719B7B335EB4D',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'NO_Config_Hora_Extra_nombre'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_149',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'C_Payment CreditCard Type'});isc.SimpleType.create({inheritsFrom:'text',name:'_id_401065C7CE134B019476EFAA057635FF',editorType:'OBSelectorItem',gridEditorType:'OBSelectorItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'DatasourceSelectorForTables'});isc.SimpleType.create({inheritsFrom:'text',name:'_id_224C53E343404771A44494C2AD51DAF3',editorType:'OBSelectorItem',gridEditorType:'OBSelectorItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'M_InOutLine no combo'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_8BA0A3775CE14CE69989B6C09982FB2E',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Dependency Enforcement'});isc.SimpleType.create({inheritsFrom:'text',name:'_id_89A08501440B470CA3E9E5F399F32D31',editorType:'OBSearchItem',gridEditorType:'OBSearchItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'Invoice Payment Plan'});isc.SimpleType.create({inheritsFrom:'text',name:'_id_0B1E56A8135D43D39C55452EDC1C9200',editorType:'OBSelectorItem',gridEditorType:'OBSelectorItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'Product filtered by Product Category'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_FCEF52C7FAD14B23A24000D5107E67DD',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'Zona'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_DF812D5784884A83A0D0E3E711819BF5',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Custom Query Type'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_140',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'C_Product'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_5B988E35236D404B8210801472E363CE',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'LevelPricingAlgorithms'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_142',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'C_Activity'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_141',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'C_Project'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_621494B5280946F6A7C4EAB0AAC3AFD5',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Sustento Tributario - 1'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_C3ED971A900A414B8A0A937B442374E1',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'UOM Weight'});isc.SimpleType.create({inheritsFrom:'text',name:'_id_C0F73A728D584BAA991A4496562D24C1',editorType:'OBSelectorItem',gridEditorType:'OBSelectorItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'Busqueda Retencion Venta'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_7A4D156C7DD94868A3D05363B9EF1AB1',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Estado Avances'});isc.SimpleType.create({inheritsFrom:'text',name:'_id_64522A2F925244F282036B827E8FA3D0',editorType:'OBSelectorItem',gridEditorType:'OBSelectorItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'Invoice Selector'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_78DB616C4DC2489EB6FFA164B282C619',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'vendedores'});isc.SimpleType.create({inheritsFrom:'text',name:'_id_C9252925E607456A9BE935B3B8F1BC9F',editorType:'OBTextItem',gridEditorType:'OBTextItem',filterEditorType:'OBTextFilterItem',referenceName:'ManageVariants Pick and Execute'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_F19E4A390AAB4A02B3D3CC944F091598',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'OPSLicenseType'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_AB875664BA4A4F88817B38A4E0C6D1A6',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'Tipo Ingreso Egreso'});isc.SimpleType.create({inheritsFrom:'text',name:'_id_C01DEDDA9B35427786058CB649FB972F',editorType:'OBSearchItem',gridEditorType:'OBSearchItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'Order Payment Plan'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_180774E575694F81B753B3DD46316E0E',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'M_Internal_Consumption_Line'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_2DB8D643B64B4EDD9B5E71E2527ACF25',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'Cuenta Costos'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_2F57E5B5EBF44E0A9D45492DECBD3CC1',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'C_GLItem Ordered by Organization'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_FF808181312414380131241C5A41001F',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Payment description'});isc.SimpleType.create({inheritsFrom:'text',name:'_id_2F18FEBF939D4F6DA5D5AEED73AE11D0',editorType:'OBSelectorItem',gridEditorType:'OBSelectorItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'Orderline selector'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_66F2DCC800A34F94923444C29478E70A',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'FIN_Payment Reverse Actions'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_D90979EA306F493EBD3EF5D201355C56',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Vacaciones Estado'});isc.SimpleType.create({inheritsFrom:'text',name:'_id_467CA50808444F9890E23536FDE10405',editorType:'OBSelectorItem',gridEditorType:'OBSelectorItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'Portal Role Selector'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_A5E1E86CF0EF408FA268F71E8A75C7F5',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Codigos Telefonicos'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_3791E45CC96445919F0992FB85EC360A',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Dias de pagos'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_A575717E83C24F7392511B7CC18B9D3C',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'M_Internal_Consumption Status'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_F909D710BC084C92BC740A4FD498C99D',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Report Type'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_D15C950D445D408E8CC8135E530C246B',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Tab UI Pattern'});isc.SimpleType.create({inheritsFrom:'text',name:'_id_263693E51C7847BF90C897ADB830E2BB',editorType:'OBSelectorItem',gridEditorType:'OBSelectorItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'On hand warehouse'});isc.SimpleType.create({inheritsFrom:'text',name:'_id_FF808181312D569C01312D8C837E003C',editorType:'OBSelectorItem',gridEditorType:'OBSelectorItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'Campaign selector'});isc.SimpleType.create({inheritsFrom:'text',name:'_id_25400A74C902418B815D70EFDCD29153',editorType:'OBSelectorItem',gridEditorType:'OBSelectorItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'C_BPartner Vendors no combo'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_5BBEA02A7BCE441A81BC546DF034162E',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'All document tax amount calculation criteria'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_39A7A2B909B541E280A59075CE49E585',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'FIN Execution Process Parameter input type'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_1DE1CAC0CCB64662AE2ED37450143DD7',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Sujeto de retenciones'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_60E231391A7348DDA7171E780F62EF99',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'InstancePurpose'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_808852664FCF4615A2A901308737F81F',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'OBCLKER_Component Type'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_BFF8DEC4F31C4ABF87D2F33B453D6A9C',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Tipos de Retenciones'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_085E99751D2045AA9D4FA23F4B765B21',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'New Financial Flows Accounts'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_64A2DED1E5754BEEBE9524F8995018DE',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Tipo Retencion  IVA'});isc.SimpleType.create({inheritsFrom:'text',name:'_id_FF808181312D569C01312D8E60800051',editorType:'OBSelectorItem',gridEditorType:'OBSelectorItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'Sales region selector'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_F15C13A199A748F1B0B00E985A64C036',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'FIN_Payable payment on create action'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_3CB3EA9508A04344A4C6391CC47F6CAA',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Concepto Retencion Fuente'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_416198E39DEE4AB7A6D2686F0B242484',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'lista_calificacion'});isc.SimpleType.create({inheritsFrom:'text',name:'_id_FB9C3B9C927A4AE5A554B952D67FAFED',editorType:'OBTextItem',gridEditorType:'OBTextItem',filterEditorType:'OBTextFilterItem',referenceName:'Payment Proposal Pick and Edit Lines'});isc.SimpleType.create({inheritsFrom:'text',name:'_id_AADA51C554014A2DA108BA393706AD1D',editorType:'OBTextItem',gridEditorType:'OBTextItem',filterEditorType:'OBTextFilterItem',referenceName:'Doubtful Debt Pick and Edit Reference'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_D174DD8350684AC78F3C23D641158A3A',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'Ats_Doc_type Declaracion'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_E16CC92DFC8E4CC1AF23ACF1BAFC7C4F',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Información Anexo SRI'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_195',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'All_Payment Rule'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_194',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'M_DiscountPriceList Base'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_197',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'M_Warehouse of Client'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_196',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'C_RevenueRecognition Frequency'});isc.SimpleType.create({inheritsFrom:'text',name:'_id_37D0712A65774E2EBFA1EBA45CCB51A4',editorType:'OBTextItem',gridEditorType:'OBTextItem',filterEditorType:'OBTextFilterItem',referenceName:'RM Shipment Pick Edit Lines'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_65447418FD4D428CA025AC9AF26ADA21',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'PeriodNo'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_191',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'M_Locator'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_6805F1DCCF004C31B0918AD340877960',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'Nombre Producto'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_190',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'AD_User SalesRep'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_193',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'C_BankAccount for Credit Card'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_58658C3460FE4CF3B545C3AB10A79AE3',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'Widget Superclass'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_192',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'C_BPartner Vendors'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_08622CB965B844CFBD2A337BEDB70EFD',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'AD_Heartbeat - Type of beat'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_C5D23F30AB38448C8984AA890C30AB67',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Lista Tipo Persona'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_198',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'M_Inventory ReportType'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_199',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'M_PriceList_Version for Client'});isc.SimpleType.create({inheritsFrom:'text',name:'_id_83AD04A0C49E4801BF276B690265A3D1',editorType:'OBTextItem',gridEditorType:'OBTextItem',filterEditorType:'OBTextFilterItem',referenceName:'RM Receipt Pick Edit Lines'});isc.SimpleType.create({inheritsFrom:'text',name:'_id_746C95F41182419C921254B6CB4D8F8A',editorType:'OBSelectorItem',gridEditorType:'OBSelectorItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'Reservation Selector'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_E6D38ADAAF5A4B9C81D4B98E5CCB6BBB',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'OBCLKER_Template'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_716D04974DCE4559821C8D60D4FA84A1',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'OBKMO_Country Table '});isc.SimpleType.create({inheritsFrom:'text',name:'_id_D65D16C78404437AAB008E8040715D2F',editorType:'OBSelectorItem',gridEditorType:'OBSelectorItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'All Products Simple Selector'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_E8E9B9F9FBDE4E679EC69611D2CCE1E3',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'M_Transaction Status'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_4452E6997DD14363AB4387B06939871A',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'CommercialTier'});isc.SimpleType.create({inheritsFrom:'text',name:'_id_10DF247CCCB346FE931028AA98E569F0',editorType:'OBSearchItem',gridEditorType:'OBSearchItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'AD_User no combo'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_61F24136C58741C182F784020E2B2C25',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'OBUISEL_TextMatchStyleType'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_84F9333A9141482C8AAC5B9779CDD512',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'m_ch_value order by seqno'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_E91B038ABF4F4A2280264C4A475852A4',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'APR_buttonList'});isc.SimpleType.create({inheritsFrom:'text',name:'_id_4BEF5D0691664A939E8710FA9EB0BAF5',editorType:'OBSelectorItem',gridEditorType:'OBSelectorItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'Payment Selector'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_D782279EDFB144A2914AC7C7C8036C19',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'No_Decimo'});isc.SimpleType.create({inheritsFrom:'text',name:'_id_FF808181312D569C01312D846CC40032',editorType:'OBSelectorItem',gridEditorType:'OBSelectorItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'Activity selector'});isc.SimpleType.create({inheritsFrom:'text',name:'_id_00037F8CF0644AF7A1987E7BF6DF68A4',editorType:'OBSelectorItem',gridEditorType:'OBSelectorItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'Element Value Selector'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_295DC3D3A3D14DFB84739181DDE941A2',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'FIN_Payment_Proposal process actions'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_575BCB88A4694C27BC013DE9C73E6FE7',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'FIN_Payment status'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_E605E99712A245CBB6D7610595BFB017',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'Vendedores_VentasCiudad'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_316D81CF244F43259040F4ECF527770F',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'Retención Ventas'});isc.SimpleType.create({inheritsFrom:'textArea',name:'_id_C632F1CFF5A1453EB28BDF44A70478F8',editorType:'OBCharacteristicsItem',gridEditorType:'OBCharacteristicsGridItem',filterEditorType:'OBCharacteristicsFilterItem',referenceName:'Product Characteristics'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_800099',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Quantity type'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_0728B80415774EA1919926E55C3D4ACB',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'Tipo Rubro Liquidación'});isc.SimpleType.create({inheritsFrom:'text',name:'_id_800096',editorType:'OBSearchItem',gridEditorType:'OBSearchItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'Invoice Line'});isc.SimpleType.create({inheritsFrom:'text',name:'_id_800095',editorType:'OBSearchItem',gridEditorType:'OBSearchItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'Shipment/Receipt'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_800098',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'In/out transaction types for planning'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_800097',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Class format type'});isc.SimpleType.create({inheritsFrom:'text',name:'_id_800092',editorType:'OBSearchItem',gridEditorType:'OBSearchItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'Locator search'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_16DBB4BF7A6A4E3DBECEFC73567938D1',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'co_tipo_retencion'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_FC98D43996374909B1AAC0197BBE95BA',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Payment Execution Type'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_800093',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'Responsible employee'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_800090',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'C_BP_TaxCategory'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_8C83DEB7CA664B359FD14679B64236A0',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Permiso Estados'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_FF808181321576F301321587CBB4004A',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'M_AttributeUse To'});isc.SimpleType.create({inheritsFrom:'text',name:'_id_DB71FC312327430EAEACF42918405BF9',editorType:'OBSelectorLinkItem',gridEditorType:'OBSelectorLinkItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'Transactions link'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_C2D366A01E934F6680A729489FE33FA0',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'cob_calificacion'});isc.SimpleType.create({inheritsFrom:'text',name:'_id_D61E6D984E214F99B10DE56395ED692B',editorType:'OBSelectorItem',gridEditorType:'OBSelectorItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'Element Selector'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_892231CFE03848758D74B0209B801C14',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Yes/No/Default'});isc.SimpleType.create({inheritsFrom:'text',name:'_id_101787D75B4E4D7280C75D9802FE5FB6',editorType:'OBSelectorItem',gridEditorType:'OBSelectorItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'Product UOM Selector'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_86EEA87DADD7440E98D1F36D6BC73569',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'TiposIngresosEgreso'});isc.SimpleType.create({inheritsFrom:'text',name:'_id_34C68674AF5443E09294AD3D33617B30',editorType:'OBSearchItem',gridEditorType:'OBSearchItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'CO_DireccionEcuador'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_D6193AA7FAB6429C8F34249FBF5A5F50',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'OBUIAPP_ViewImplementation'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_1005900000',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'All_Processed_Status_Expenses'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_6669508E338F4A10BA3E0D241D133E62',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Default Period Options'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_49D090F3259F438696D291D4C3BCB27C',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'estados pago linea'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_486FE08DA0E547FDAD04256CB130EB22',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'C_Doc_type Prov Linea'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_47351A0FFE37422AB3A596238721D247',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Tipo Costo'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_800021',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Invoicingtype'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_800020',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Invoicingmode'});isc.SimpleType.create({inheritsFrom:'text',name:'_id_9FFC72525D7E49069272B22293F7D163',editorType:'OBSelectorItem',gridEditorType:'OBSelectorItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'Org_no_role_orgaccess'});isc.SimpleType.create({inheritsFrom:'text',name:'_id_35',editorType:'OBPAttributeSearchItem',gridEditorType:'OBPAttributeSearchItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'PAttribute'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_800023',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Bankingrule'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_800022',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'AD_Table Posting TRL'});isc.SimpleType.create({inheritsFrom:'text',name:'_id_33',editorType:'OBTextItem',gridEditorType:'OBTextItem',filterEditorType:'OBTextFilterItem',referenceName:'Assignment'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_800025',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Cost Type'});isc.SimpleType.create({inheritsFrom:'text',name:'_id_34',editorType:'OBTextItem',gridEditorType:'OBTextItem',filterEditorType:'OBTextFilterItem',referenceName:'Memo'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_800024',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'All_Processed_Status'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_800027',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Quarter'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_800026',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Scheduled invoice grouping'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_EE87179E8B7D42BC9FB99FB461B77855',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'C_Cities Ecuador'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_800029',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Offers'});isc.SimpleType.create({inheritsFrom:'text',name:'_id_531F166E5A7C437F9438A94AD8DDF212',editorType:'OBSelectorItem',gridEditorType:'OBSelectorItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'Business Partner With Location And User'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_800028',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'AD_Form'});isc.SimpleType.create({inheritsFrom:'float',name:'_id_800019',editorType:'OBNumberItem',gridEditorType:'OBNumberItem',filterEditorType:'OBNumberFilterItem',parseInput:function(value,field,component,record){if(OB.Utilities.Number.IsValidValueString(this,value)){return OB.Utilities.Number.OBMaskedToJS(value,'.',',');}else{return value;}},'maskNumeric':'#0.######','decSeparator':'.','groupSeparator':',',editFormatter:function(value,field,component,record){return OB.Utilities.Number.JSToOBMasked(value,'#,##0.######','.',',',OB.Format.defaultGroupingSize);},shortDisplayFormatter:function(value,field,component,record){return OB.Utilities.Number.JSToOBMasked(value,'#,##0.######','.',',',OB.Format.defaultGroupingSize);},createClassicString:function(value,field,component,record){return OB.Utilities.Number.JSToOBMasked(value,'#,##0.######','.',',',OB.Format.defaultGroupingSize);},referenceName:'General Quantity'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_BCDF0DC3ECD14B07AC54287DCB1276D2',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Text Filter Behavior (System)'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_EECE3B7B82874108B0F72EA85059C57A',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'Area Empresa'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_800010',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Settlement type'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_357176BB709540878100C255063176EB',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'C_Doc_type Nomina'});isc.SimpleType.create({inheritsFrom:'text',name:'_id_FF808181312D569C01312D8FA681005A',editorType:'OBSelectorItem',gridEditorType:'OBSelectorItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'Project Selector'});isc.SimpleType.create({inheritsFrom:'float',name:'_id_22',editorType:'OBNumberItem',gridEditorType:'OBNumberItem',filterEditorType:'OBNumberFilterItem',parseInput:function(value,field,component,record){if(OB.Utilities.Number.IsValidValueString(this,value)){return OB.Utilities.Number.OBMaskedToJS(value,'.',',');}else{return value;}},'maskNumeric':'#0.######','decSeparator':'.','groupSeparator':',',editFormatter:function(value,field,component,record){return OB.Utilities.Number.JSToOBMasked(value,'#,##0.######','.',',',OB.Format.defaultGroupingSize);},shortDisplayFormatter:function(value,field,component,record){return OB.Utilities.Number.JSToOBMasked(value,'#,##0.######','.',',',OB.Format.defaultGroupingSize);},createClassicString:function(value,field,component,record){return OB.Utilities.Number.JSToOBMasked(value,'#,##0.######','.',',',OB.Format.defaultGroupingSize);},referenceName:'Number'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_800014',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'C_ElementValue show value conditions'});isc.SimpleType.create({inheritsFrom:'image',name:'_id_23',editorType:'OBTextItem',gridEditorType:'OBTextItem',filterEditorType:'OBTextItem',referenceName:'Binary'});isc.SimpleType.create({inheritsFrom:'time',name:'_id_24',editorType:'OBTimeItem',gridEditorType:'OBTimeItem',filterEditorType:'OBTimeItem',referenceName:'Time'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_800012',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Type maintenance'});isc.SimpleType.create({inheritsFrom:'text',name:'_id_25',editorType:'OBSearchItem',gridEditorType:'OBSearchItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'Account'});isc.SimpleType.create({inheritsFrom:'text',name:'_id_800011',editorType:'OBSelectorItem',gridEditorType:'OBSelectorItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'Product Complete'});isc.SimpleType.create({inheritsFrom:'text',name:'_id_26',editorType:'OBTextItem',gridEditorType:'OBTextItem',filterEditorType:'OBTextFilterItem',referenceName:'RowID'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_800018',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'DocumentDocTypeCopy'});isc.SimpleType.create({inheritsFrom:'text',name:'_id_27',editorType:'OBTextItem',gridEditorType:'OBTextItem',filterEditorType:'OBTextFilterItem',referenceName:'Color'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_800017',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Storage Payment Rule'});isc.SimpleType.create({inheritsFrom:'boolean',name:'_id_28',editorType:'OBCheckboxItem',gridEditorType:'OBCheckboxItem',filterEditorType:'OBYesNoItem',valueMap:[null,true,false],sortNormalizer:function(item,field,context){return OB.Utilities.yesNoSortNormalizer(item,field,context);},shortDisplayFormatter:function(value,field,component,record){return OB.Utilities.getYesNoDisplayValue(value);},createClassicString:function(value){return OB.Utilities.getClassicValue(value);},normalDisplayFormatter:function(value,field,component,record){return OB.Utilities.getYesNoDisplayValue(value);},referenceName:'Button'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_800016',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Schedule_Periodicity'});isc.SimpleType.create({inheritsFrom:'float',name:'_id_29',editorType:'OBNumberItem',gridEditorType:'OBNumberItem',filterEditorType:'OBNumberFilterItem',parseInput:function(value,field,component,record){if(OB.Utilities.Number.IsValidValueString(this,value)){return OB.Utilities.Number.OBMaskedToJS(value,'.',',');}else{return value;}},'maskNumeric':'#0.###','decSeparator':'.','groupSeparator':',',editFormatter:function(value,field,component,record){return OB.Utilities.Number.JSToOBMasked(value,'#,##0.###','.',',',OB.Format.defaultGroupingSize);},shortDisplayFormatter:function(value,field,component,record){return OB.Utilities.Number.JSToOBMasked(value,'#,##0.###','.',',',OB.Format.defaultGroupingSize);},createClassicString:function(value,field,component,record){return OB.Utilities.Number.JSToOBMasked(value,'#,##0.###','.',',',OB.Format.defaultGroupingSize);},referenceName:'Quantity'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_800015',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'C_ElementValue level'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_94DD3D9C266148BEAE4E201BD84F8F76',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Tipo_Comprobante_Venta'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_1000500000',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'M_Product_Org - ABC'});isc.SimpleType.create({inheritsFrom:'float',name:'_id_800008',editorType:'OBNumberItem',gridEditorType:'OBNumberItem',filterEditorType:'OBNumberFilterItem',parseInput:function(value,field,component,record){if(OB.Utilities.Number.IsValidValueString(this,value)){return OB.Utilities.Number.OBMaskedToJS(value,'.',',');}else{return value;}},'maskNumeric':'#0.00','decSeparator':'.','groupSeparator':',',editFormatter:function(value,field,component,record){return OB.Utilities.Number.JSToOBMasked(value,'#,##0.00','.',',',OB.Format.defaultGroupingSize);},shortDisplayFormatter:function(value,field,component,record){return OB.Utilities.Number.JSToOBMasked(value,'#,##0.00','.',',',OB.Format.defaultGroupingSize);},normalDisplayFormatter:function(value,field,component,record){return OB.Utilities.Number.JSToOBMasked(value,'#,##0.00','.',',',OB.Format.defaultGroupingSize);},createClassicString:function(value,field,component,record){return OB.Utilities.Number.JSToOBMasked(value,'#,##0.00','.',',',OB.Format.defaultGroupingSize);},referenceName:'Price'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_DAC4875A281747C7B62C82779269C07B',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Lista Tipos de Gastos'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_06E970A0382243109FE719BF2F0AC763',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'Retencion Compra'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_800009',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Product_Template_Type'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_7957E48BE5074984A4EB79D646A7ABAB',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Process Definition UIPattern'});isc.SimpleType.create({inheritsFrom:'text',name:'_id_30',editorType:'OBSearchItem',gridEditorType:'OBSearchItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'Search'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_FF851E05CFBC41B4B2C444569A1ADC51',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'Conta Tipo Retencion'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_FF8080812EC85BDE012EC8B2DB30001E',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Alert status'});isc.SimpleType.create({inheritsFrom:'text',name:'_id_32',editorType:'OBTextItem',gridEditorType:'OBTextItem',filterEditorType:'OBTextFilterItem',referenceName:'Image'});isc.SimpleType.create({inheritsFrom:'text',name:'_id_31',editorType:'OBSearchItem',gridEditorType:'OBSearchItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'Locator'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_0CC268ED2E8D4B0397A0DCBBFA2237DE',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'FIN_BankStatementLine Payment Type'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_001BC3A319184B40ACB36A3C9B994904',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Receive Payment Action'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_800041',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Amortization schedule'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_800040',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Amortization type'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_800042',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Create/recalculate amortization'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_DBCF65339D0F4403822A8A7928533D6B',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'FACT_FactAcctType'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_5172465775754728829C327A8CF6CDED',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Frecuencia Pagos'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_19',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'TableDir'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_17',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'List'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_18',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'Table'});isc.SimpleType.create({inheritsFrom:'date',name:'_id_15',editorType:'OBDateItem',gridEditorType:'OBDateItem',filterEditorType:'OBMiniDateRangeItem',editFormatter:function(value,field,component,record){return OB.Utilities.Date.JSToOB(value,OB.Format.date);},parseInput:function(value,field,component,record){return OB.Utilities.Date.OBToJS(value,OB.Format.date);},shortDisplayFormatter:function(value,field,component,record){return OB.Utilities.Date.JSToOB(value,OB.Format.date);},normalDisplayFormatter:function(value,field,component,record){return OB.Utilities.Date.JSToOB(value,OB.Format.date);},createClassicString:function(value){return OB.Utilities.Date.JSToOB(value,OB.Format.date);},getGroupingModes:isc.SimpleType.getType('date').getGroupingModes,getGroupValue:isc.SimpleType.getType('date').getGroupValue,getGroupTitle:isc.SimpleType.getType('date').getGroupTitle,referenceName:'Date'});isc.SimpleType.create({inheritsFrom:'datetime',name:'_id_16',editorType:'OBDateTimeItem',gridEditorType:'OBDateTimeItem',filterEditorType:'OBMiniDateRangeItem',editFormatter:function(value,field,component,record){return OB.Utilities.Date.JSToOB(value,OB.Format.dateTime);},parseInput:function(value,field,component,record){return OB.Utilities.Date.OBToJS(value,OB.Format.dateTime);},shortDisplayFormatter:function(value,field,component,record){return OB.Utilities.Date.JSToOB(value,OB.Format.dateTime);},normalDisplayFormatter:function(value,field,component,record){return OB.Utilities.Date.JSToOB(value,OB.Format.dateTime);},createClassicString:function(value){return OB.Utilities.Date.JSToOB(value,OB.Format.dateTime);},getGroupingModes:isc.SimpleType.getType('date').getGroupingModes,getGroupValue:isc.SimpleType.getType('date').getGroupValue,getGroupTitle:isc.SimpleType.getType('date').getGroupTitle,referenceName:'DateTime'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_3AE2B2C5C5F640EC83A5E77B0484C316',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'User2'});isc.SimpleType.create({inheritsFrom:'text',name:'_id_13',editorType:'OBTextItem',gridEditorType:'OBTextItem',filterEditorType:'OBTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'ID'});isc.SimpleType.create({inheritsFrom:'textArea',name:'_id_14',editorType:'OBTextAreaItem',gridEditorType:'OBPopUpTextAreaItem',filterEditorType:'OBTextItem',referenceName:'Text'});isc.SimpleType.create({inheritsFrom:'integer',name:'_id_11',editorType:'OBNumberItem',gridEditorType:'OBNumberItem',filterEditorType:'OBNumberFilterItem',parseInput:function(value,field,component,record){if(OB.Utilities.Number.IsValidValueString(this,value)){return OB.Utilities.Number.OBMaskedToJS(value,'.',',');}else{return value;}},'maskNumeric':'#0','decSeparator':'.','groupSeparator':',',editFormatter:function(value,field,component,record){return OB.Utilities.Number.JSToOBMasked(value,'#,##0','.',',',OB.Format.defaultGroupingSize);},shortDisplayFormatter:function(value,field,component,record){return OB.Utilities.Number.JSToOBMasked(value,'#,##0','.',',',OB.Format.defaultGroupingSize);},normalDisplayFormatter:function(value,field,component,record){return OB.Utilities.Number.JSToOBMasked(value,'#,##0','.',',',OB.Format.defaultGroupingSize);},createClassicString:function(value,field,component,record){return OB.Utilities.Number.JSToOBMasked(value,'#,##0','.',',',OB.Format.defaultGroupingSize);},referenceName:'Integer'});isc.SimpleType.create({inheritsFrom:'float',name:'_id_12',editorType:'OBNumberItem',gridEditorType:'OBNumberItem',filterEditorType:'OBNumberFilterItem',parseInput:function(value,field,component,record){if(OB.Utilities.Number.IsValidValueString(this,value)){return OB.Utilities.Number.OBMaskedToJS(value,'.',',');}else{return value;}},'maskNumeric':'#0.00','decSeparator':'.','groupSeparator':',',editFormatter:function(value,field,component,record){return OB.Utilities.Number.JSToOBMasked(value,'#,##0.00','.',',',OB.Format.defaultGroupingSize);},shortDisplayFormatter:function(value,field,component,record){return OB.Utilities.Number.JSToOBMasked(value,'#,##0.00','.',',',OB.Format.defaultGroupingSize);},normalDisplayFormatter:function(value,field,component,record){return OB.Utilities.Number.JSToOBMasked(value,'#,##0.00','.',',',OB.Format.defaultGroupingSize);},createClassicString:function(value,field,component,record){return OB.Utilities.Number.JSToOBMasked(value,'#,##0.00','.',',',OB.Format.defaultGroupingSize);},referenceName:'Amount'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_800046',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'C_BankAccount'});isc.SimpleType.create({inheritsFrom:'text',name:'_id_21',editorType:'OBSearchItem',gridEditorType:'OBSearchItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'Location'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_D30C26E6452843B4BA4F8D71A651EB80',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'OBUISEL_Selector Out Field'});isc.SimpleType.create({inheritsFrom:'boolean',name:'_id_20',editorType:'OBCheckboxItem',gridEditorType:'OBCheckboxItem',filterEditorType:'OBYesNoItem',valueMap:[null,true,false],sortNormalizer:function(item,field,context){return OB.Utilities.yesNoSortNormalizer(item,field,context);},shortDisplayFormatter:function(value,field,component,record){return OB.Utilities.getYesNoDisplayValue(value);},createClassicString:function(value){return OB.Utilities.getClassicValue(value);},normalDisplayFormatter:function(value,field,component,record){return OB.Utilities.getYesNoDisplayValue(value);},referenceName:'YesNo'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_368E5F32B443454093D14D4E0AD44E13',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'OBPSLicenseEdition'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_F6A9745024274BD48686CAC8A063AA3E',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'C_Period Status'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_75810C8F12474BE1B5A7FF2356AB39C3',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Tipo Empleado'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_800032',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'MA_CostCenter'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_800031',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'M_PriceListForPurchase'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_800030',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'IsManager'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_C3C19DE8AB3B42E78748E20D986FBBC9',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'SO_Res_Status'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_1852D69AB3FD453F8F031813501B26F0',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Create_Reservation list'});isc.SimpleType.create({inheritsFrom:'text',name:'_id_4E7BCFB5EB4B48958AAD4C833047F2B7',editorType:'OBSelectorItem',gridEditorType:'OBSelectorItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'no_busqueda_empleado'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_EE8B072E19034D0FB34CA1CEB3583620',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Reservation Status'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_7CD9193198B94EF5B174D0F8512B0857',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Module Action'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_800039',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Value Type'});isc.SimpleType.create({inheritsFrom:'text',name:'_id_08500AA6E7F5411EA0B03DD1CB645DF6',editorType:'OBMultiSelectorItem',gridEditorType:'OBMultiSelectorItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'Multi Business Partner Selector'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_800038',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Shift'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_800037',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'WorkRequirementType'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_23FC4FD90F7F4E738E615DBB40A04F2D',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Estados_Boton_SRI'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_800035',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'C_BPartner Worker'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_800034',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Production Type'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_800033',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Maintenance type'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_79FDE7805FC84C2BB251EE57E96C0AEE',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'FIN_Process Proposal Window Reference'});isc.SimpleType.create({inheritsFrom:'text',name:'_id_E1C0B1C7D7C84E85903409A39A53E855',editorType:'OBSelectorItem',gridEditorType:'OBSelectorItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'FIN_Payment no combo'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_5D4B2983E0254AA1B60A82A7B92DB67D',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'License Type'});isc.SimpleType.create({inheritsFrom:'text',name:'_id_10',editorType:'OBTextItem',gridEditorType:'OBTextItem',filterEditorType:'OBTextFilterItem',referenceName:'String'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_1AC7885279E44C4F976267C28270E1F9',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Text Filter Behavior (Window/Tab/Field)'});isc.SimpleType.create({inheritsFrom:'text',name:'_id_8238E1DF040B4641877766194CD1EF33',editorType:'OBSelectorItem',gridEditorType:'OBSelectorItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'M_Offer no combo'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_800066',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Parameter type (In/Out)'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_D703D674FF7247DB9DCEC1B0F8B21396',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Sistema de Salario Neto'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_800067',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'RappelType'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_800068',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'AmortizationCalcType'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_800069',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Budget_Type'});isc.SimpleType.create({inheritsFrom:'text',name:'_id_0E0D1661E18E4E05A118785A7CF146B8',editorType:'OBSelectorItem',gridEditorType:'OBSelectorItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'User Dimension 1 Selector'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_1004400000',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Requisition status'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_AFA80A98B3C6469EA15ECB8A0011A79F',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'UOM Time'});isc.SimpleType.create({inheritsFrom:'text',name:'_id_800060',editorType:'OBSelectorItem',gridEditorType:'OBSelectorItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'Product'});isc.SimpleType.create({inheritsFrom:'text',name:'_id_800061',editorType:'OBSelectorItem',gridEditorType:'OBSelectorItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'Project'});isc.SimpleType.create({inheritsFrom:'text',name:'_id_800062',editorType:'OBSearchItem',gridEditorType:'OBSearchItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'Order'});isc.SimpleType.create({inheritsFrom:'text',name:'_id_800063',editorType:'OBSearchItem',gridEditorType:'OBSearchItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'Order Line'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_8A9921F241B344F3AD99B6F59173F788',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Audit Process type'});isc.SimpleType.create({inheritsFrom:'text',name:'_id_800064',editorType:'OBSearchItem',gridEditorType:'OBSearchItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'Shipment/Receipt Line'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_FBC599C796664DD49AD002C61DAFF813',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'C_DocType DocBaseType Dimensions configuration'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_800065',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Maintenance Periodicity'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_665CE68BB382425BB43057256767B5DE',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Process Frequency'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_55B6E5B5A8EA4139951B4D13CF5BBAF8',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'Salario Digno'});isc.SimpleType.create({inheritsFrom:'text',name:'_id_F9D2F974C7004FC690CE146C815B939C',editorType:'OBSelectorItem',gridEditorType:'OBSelectorItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'C_Order Purchase no combo'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_7FB5608D7ED64B0DA88308BE0234600A',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Tipo Permiso'});isc.SimpleType.create({inheritsFrom:'text',name:'_id_800057',editorType:'OBSelectorItem',gridEditorType:'OBSelectorItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'Business Partner'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_C3D96AF9E9BA410FB45333086B6AD567',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Genero'});isc.SimpleType.create({inheritsFrom:'text',name:'_id_800058',editorType:'OBSearchItem',gridEditorType:'OBSearchItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'Debt/Payment'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_C3531F85C14B4515AB7259F0D338050D',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Write off type'});isc.SimpleType.create({inheritsFrom:'text',name:'_id_800059',editorType:'OBSearchItem',gridEditorType:'OBSearchItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'Invoice'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_7039147A5B49457DA3D13F807EC8E01F',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Process Finish'});isc.SimpleType.create({inheritsFrom:'datetime',name:'_id_487AE3E73E8542538CDC4A9EED5F6434',editorType:'OBDateTimeFromDateItem',gridEditorType:'OBDateTimeFromDateItem',filterEditorType:'OBMiniDateRangeItem',editFormatter:function(value,field,component,record){return OB.Utilities.Date.JSToOB(value,OB.Format.dateTime);},parseInput:function(value,field,component,record){return OB.Utilities.Date.OBToJS(value,OB.Format.dateTime);},shortDisplayFormatter:function(value,field,component,record){return OB.Utilities.Date.JSToOB(value,OB.Format.dateTime);},normalDisplayFormatter:function(value,field,component,record){return OB.Utilities.Date.JSToOB(value,OB.Format.dateTime);},createClassicString:function(value){return OB.Utilities.Date.JSToOB(value,OB.Format.dateTime);},getGroupingModes:isc.SimpleType.getType('date').getGroupingModes,getGroupValue:isc.SimpleType.getType('date').getGroupValue,getGroupTitle:isc.SimpleType.getType('date').getGroupTitle,referenceName:'DateTime_From (Date)'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_556C6580590E4D53AEE10AD0CC2EFC77',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'FIN Payment Run status'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_8E02C49C87DE4E799EF875ED6F1B2E3E',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Tipo Carga'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_0FCD269097054C5790CFDC3E9CBEFD21',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Query/List Include in'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_1004400001',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Requisition lock cause'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_1004400002',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'External Services'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_865D46B9A1C148D1A119F2F0F7F55589',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'AD_System System Status'});isc.SimpleType.create({inheritsFrom:'text',name:'_id_01303128416E4CFC92E3A71D793F6EFF',editorType:'OBTextItem',gridEditorType:'OBTextItem',filterEditorType:'OBTextFilterItem',referenceName:'Manage Reservation Pick and Edit'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_84ECA724EF074F679DFD69556C6DAF21',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'Generic Product'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_E8F31E09E4EB4943A6F2091166C1043D',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Tipo Identificación'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_800088',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Cost Uom'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_800089',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Cost type'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_B88DB8C2B8C441DF8DCF3CF3C8565201',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'OBPSLicenseStatus'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_800084',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Arguments'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_800085',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Accounting report type'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_D7DDAF2DB75A4A0A9B158D907798518F',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'Calcula Rubro'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_800086',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'DimensionalFilterPurchase'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_8F0DA53BE1374CEBB48936663BF82283',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'ATS_Anexo'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_800087',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'DimensionalFilterSale'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_4E9582AEF3DC4E9A9AF575B359A6A170',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'Retenciones Compra Terceros'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_800081',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'AT_TestType'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_800082',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'AD_Language_Using'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_800083',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Argument Type'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_ABD8815EDEDB412C820FB94532952721',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Process Timing Option'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_66E310A87A844A51B8BAD2884E996CD6',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'C_GLItem'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_92297F99EE3945ABBCA85ED1411FB8DA',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'C_Countries'});isc.SimpleType.create({inheritsFrom:'text',name:'_id_16EC6DF4A59747749FDF256B7FBBB058',editorType:'OBEncryptedItem',gridEditorType:'OBEncryptedItem',filterEditorType:'OBTextFilterItem',shortDisplayFormatter:function(value,field,component,record){return new Array((value&&value.length>0?value.length+1:0)).join("*");},normalDisplayFormatter:function(value,field,component,record){return new Array((value&&value.length>0?value.length+1:0)).join("*");},referenceName:'Password (decryptable)'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_3924C9794AA74CD5A5809DFBDA882E1C',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'em_atecfe_facturas'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_2969F07308CB43ECBCDAE151C12F03E0',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'All base amount'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_9413570F6240406385FB633C7A9CC283',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'UOM Length'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_27A729423DEE4023B8B799377CB19D11',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'C_poc_doctype_template HeaderMargin'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_D6C4E62C3EB040989001DA16B3925DC8',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Smtp Connection Security'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_AE201981DDC0467FB59F64CA978C749F',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Data Origin Type'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_800078',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Order status'});isc.SimpleType.create({inheritsFrom:'text',name:'_id_28D6F0121E844F56937AE51C247133C7',editorType:'OBTextItem',gridEditorType:'OBTextItem',filterEditorType:'OBTextFilterItem',referenceName:'Create PO LInes Pick and Execute'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_800075',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'C_ExternalPOS_State'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_800076',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'C_Remittance no canceled or returned'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_800073',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'C_Debt_Payment'});isc.SimpleType.create({inheritsFrom:'text',name:'_id_DE2C18CCE5D540519E606CBC1A4B336D',editorType:'OBTextItem',gridEditorType:'OBTextItem',filterEditorType:'OBTextFilterItem',referenceName:'SRM Order Pick / Edit Lines'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_800074',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Accounting period'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_EED0EF97D4A7421687F3B365D009E7A6',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'FIN_PaymentMethod'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_800071',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Freight_Unit'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_800072',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Freight round'});isc.SimpleType.create({inheritsFrom:'text',name:'_id_0537E1156A064FDE8EF0CFBC97577E5F',editorType:'OBSelectorItem',gridEditorType:'OBSelectorItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'Storage Bin Selector'});isc.SimpleType.create({inheritsFrom:'text',name:'_id_C5C21C28B39E4683A91779F16C112E40',editorType:'OBEncryptedItem',gridEditorType:'OBEncryptedItem',filterEditorType:'OBTextFilterItem',shortDisplayFormatter:function(value,field,component,record){return new Array((value&&value.length>0?value.length+1:0)).join("*");},normalDisplayFormatter:function(value,field,component,record){return new Array((value&&value.length>0?value.length+1:0)).join("*");},referenceName:'Password (not decryptable)'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_800070',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'C_DP_Management_Status'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_F73D4D2BFC084F93AD6EC37BE5857EE4',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Tipo de Liquidacion'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_44B4889EE0D54BB48283D666B0E673B9',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'NO_TIPOCOMPROBANTE'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_FC3E8E2652184032A86BE0F760A97B90',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'UOM Types'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_BCB384A80DDA4E64BF1DF6CC9B049AC0',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'tipo doc avance'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_EC75B6F5A9504DB6B3F3356EA85F15EE',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'FIN_BankStatement Process Actions'});isc.SimpleType.create({inheritsFrom:'text',name:'_id_56DEFF37A33F46D1AC918C97C4447EAF',editorType:'OBSelectorItem',gridEditorType:'OBSelectorItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'Business Partner selector'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_3DDC9BFFE43342C4826EC65E97D40586',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Tab Level'});isc.SimpleType.create({inheritsFrom:'text',name:'_id_1FAD22496E6F468DBC46CA23FE204B41',editorType:'OBSelectorItem',gridEditorType:'OBSelectorItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'FIN_PaymentSchedule'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_FF80818132DB35640132DB37A9D40006',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Image Sizes Value Action'});isc.SimpleType.create({inheritsFrom:'text',name:'_id_84BD487714B04B838A8D562A30E8792C',editorType:'OBSelectorItem',gridEditorType:'OBSelectorItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'Products'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_13E2E2A54F1B45C892ED4F914D8560A6',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'C_DocTypeTarget_ID'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_280',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'AD_Print Label Line Type'});isc.SimpleType.create({inheritsFrom:'text',name:'_id_8FAA2F7B2F67456780B3551099E13917',editorType:'OBTextItem',gridEditorType:'OBTextItem',filterEditorType:'OBTextFilterItem',referenceName:'Manage Prereservation Pick and Edit'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_AD93286C917A4A74BE5898FD0158100A',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'AD_Heartbeat - Status'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_285',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'K_Entry Related'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_284',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'AD_Window'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_283',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'C_Recurring Frequency'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_282',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'C_Recurring Type'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_288',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'C_ProjectType Category'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_289',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'C_BPartner SOCreditStatus'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_286',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'AD_User - Internal'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_279F05C514AB40868B83484C11DD4A01',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Decimal Separator'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_3BC92F27F3F64DBE9C50AA5B489626E4',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'Bodega Origen'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_287',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'C_Tax SPPOType'});isc.SimpleType.create({inheritsFrom:'text',name:'_id_542DBBA308434483B006BBE8392C1327',editorType:'OBSearchItem',gridEditorType:'OBSearchItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'DIRE_DireccionZona'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_8B9C763C0ACC48C98A80AC7408A0B4D8',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'Tipo Ingresos Egreso Asignados'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_9A3725A8049E4409B39AA3F54BF379A7',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Estado Civil Empleado'});isc.SimpleType.create({inheritsFrom:'text',name:'_id_1A6C5E0A5868417786ECCF3C02B17D65',editorType:'OBSelectorItem',gridEditorType:'OBSelectorItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'GL Item selector'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_A4A3CFDF02D94C71867272A9D6649CB0',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Documentos para Autorizaciones SRI'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_FF808181329203980132921324270015',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'MA_SequenceProductFrom'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_55BB57CFEF7E4EA0B3F429E4A55586D8',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'AD_Process UIPattern'});isc.SimpleType.create({inheritsFrom:'text',name:'_id_45B39681AFBC4808A64C9B776A290BA4',editorType:'OBSelectorItem',gridEditorType:'OBSelectorItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'OBUISEL_SelectorFieldPropertySelector'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_7DB6D4792CDC4ED297C70A4F4282A52E',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Process Status'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_440DDA64A43F4799AAFF48BC86DC8F78',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Reservation Actions'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_21A4E92C455C432FACDC0C45372454F5',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Process Daily Option'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_270',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'M_Product_ProductType'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_272',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'I_ElementValue Column'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_271',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'C_OrderLine'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_273',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'C_ElementValue (Parents)'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_275',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'C_Period (all)'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_47209D76F3EE4B6D84222C5BDF170AA2',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Yes/No search box'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_276',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'AD_Org (all)'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_277',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'C_BPartner Employee w Address'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_278',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'AD_Tab'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_279',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'M_Product BOM Type'});isc.SimpleType.create({inheritsFrom:'text',name:'_id_FF80808133186ADD01331B465E32002D',editorType:'OBWidgetInFormItem',gridEditorType:'OBWidgetInFormItem',filterEditorType:'OBWidgetInFormItem',referenceName:'Reconciliation Detail Widget'});isc.SimpleType.create({inheritsFrom:'text',name:'_id_70608617261A474EBAD0E8D56345FC68',editorType:'OBSelectorItem',gridEditorType:'OBSelectorItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'Reservation Stock Selector'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_0286D46E34EA46AF80D13D059E052DC1',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Empleado Sistema Salario'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_287F09495CE941118F4CA4D7AE452919',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Base Imponible'});isc.SimpleType.create({inheritsFrom:'text',name:'_id_FF808181312DA8D801312DDDAA750008',editorType:'OBSelectorItem',gridEditorType:'OBSelectorItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'Product selector'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_798239EB069F41A9BA8EE040C63DDBBC',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Doubtful Debt Process actions'});isc.SimpleType.create({inheritsFrom:'text',name:'_id_95A596F08D1D45E1A36C84832920A6B3',editorType:'OBSelectorItem',gridEditorType:'OBSelectorItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'OBUISEL_Model Selector '});isc.SimpleType.create({inheritsFrom:'text',name:'_id_95278813E7434F82B343FFA9F452A03C',editorType:'OBSearchItem',gridEditorType:'OBSearchItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'Localizacion'});isc.SimpleType.create({inheritsFrom:'link',name:'_id_800101',editorType:'OBLinkItem',gridEditorType:'OBLinkItem',filterEditorType:'OBTextItem',referenceName:'Link'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_800102',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Skin list'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_800100',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'MRP_ProductionLine'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_800105',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'AD_Role'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_800106',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'AD_Language system'});isc.SimpleType.create({inheritsFrom:'text',name:'_id_95E2A8B50A254B2AAE6774B8C2F28120',editorType:'OBSelectorItem',gridEditorType:'OBSelectorItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'OBUISEL_Selector Reference'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_800103',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Development Status'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_CE467008C64E436C979B3CAB4EFF2BC2',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'FinancialMgmtAccountingRpt Consider Zero Condition'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_800104',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Output format'});isc.SimpleType.create({inheritsFrom:'text',name:'_id_4FA73FBEF8CE4A54926DDD317E385486',editorType:'OBSelectorItem',gridEditorType:'OBSelectorItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'Valid Combination Selector'});isc.SimpleType.create({inheritsFrom:'text',name:'_id_DEE6B917B36D4648B2DA729FC2872CF4',editorType:'OBSelectorItem',gridEditorType:'OBSelectorItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'Cost Center Selector'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_108',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'AD_Window Types'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_02FD9CE6DE354362A30459DDC55866A5',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'CO_tipoTrCheque'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_106',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'AD_Language'});isc.SimpleType.create({inheritsFrom:'text',name:'_id_90EA0BD7E85A48658E5D61638510842B',editorType:'OBSelectorItem',gridEditorType:'OBSelectorItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'Business Partner Empleado'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_105',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'AD_Menu Parent'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_104',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'AD_Menu Action'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_103',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'AD_Message Type'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_54AC2749F26440F3AEA33378858569E4',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'M_InoutLine'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_102',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'AD_Message'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_101',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'AD_Validation Rule Types'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_100',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'AD_Validation Rules Parent'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_DF1CEA94B3564A33AFDB37C07E1CE353',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'FIN_Financial_Account'});isc.SimpleType.create({inheritsFrom:'text',name:'_id_1D633277F197492E89330ED9A6FF3D56',editorType:'OBSelectorItem',gridEditorType:'OBSelectorItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'Perfil Rubro'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_BCABCED4983A4ECB814A6D142593ACEA',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'FIN_Matching Type'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_54C2C06B49414368A7ED6D06B67719AA',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Estado Documentos Nomina'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_FF8080812E443491012E443C053A001A',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'APRM_Reconciliation process actions'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_15CCD38B5F534E03BB3C344BCD1FBB1E',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'APRM_StandardButtonList'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_7F16E35E98544100B5128AC166E01B93',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'TipoDocumentoBuffer'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_414E5DD3A1304C7781FB856A6872F428',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'AD_Table'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_290',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'C_Order Purchase'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_9C5B12FF0D424C638816FA7BC8E17B9B',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Estado Permiso'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_5C5A20E0E7234DD58B5E95E0F06615A4',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'FIN_Finacc_Transaction'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_0B9B138495E141C8A3C2BFDA4BEE3B4B',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'Imp_importacion'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_EF7663EA89524CE087D6C056A0F6F66F',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Lista Niveles Educación'});isc.SimpleType.create({inheritsFrom:'RichTextEditor',name:'_id_7CB371C13D204EB69BF370217F692999',editorType:'OBRichTextItem',gridEditorType:'OBPopUpTextAreaItem',filterEditorType:'OBTextItem',referenceName:'Rich Text Area'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_9750460836504FF9ADD6A60DD871EA00',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'C_Commission BasisStatus'});isc.SimpleType.create({inheritsFrom:'text',name:'_id_4028E61131FB4B1B0131FB5226C90008',editorType:'OBSelectorItem',gridEditorType:'OBSelectorItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'Business Partner not filtered by default by customer/vendor'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_6C11958E975D4DF8A38E7F4A119A3077',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Process Month Option'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_1F603F334B704F53928B8DB908611657',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'M_Product'});isc.SimpleType.create({inheritsFrom:'datetime',name:'_id_439F775E24BF48EDA51A7AE2535F0DCE',editorType:'OBDateTimeToDateItem',gridEditorType:'OBDateTimeToDateItem',filterEditorType:'OBMiniDateRangeItem',editFormatter:function(value,field,component,record){return OB.Utilities.Date.JSToOB(value,OB.Format.dateTime);},parseInput:function(value,field,component,record){return OB.Utilities.Date.OBToJS(value,OB.Format.dateTime);},shortDisplayFormatter:function(value,field,component,record){return OB.Utilities.Date.JSToOB(value,OB.Format.dateTime);},normalDisplayFormatter:function(value,field,component,record){return OB.Utilities.Date.JSToOB(value,OB.Format.dateTime);},createClassicString:function(value){return OB.Utilities.Date.JSToOB(value,OB.Format.dateTime);},getGroupingModes:isc.SimpleType.getType('date').getGroupingModes,getGroupValue:isc.SimpleType.getType('date').getGroupValue,getGroupTitle:isc.SimpleType.getType('date').getGroupTitle,referenceName:'DateTime_To (Date)'});isc.SimpleType.create({inheritsFrom:'text',name:'_id_1850A5390D97470EBB35A3A5F43AB533',editorType:'OBSelectorItem',gridEditorType:'OBSelectorItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'User Dimension 2 Selector'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_E45117AAE15841AAB98FFF75970AA6E0',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Estado contrato'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_8CEE50DD83244E51AF4949827A04FC52',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'FIN Payment Run Payment result'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_240',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'PA_ReportLine'});isc.SimpleType.create({inheritsFrom:'text',name:'_id_444F3B4F45544B9CA45E4035D49C1176',editorType:'OBSelectorItem',gridEditorType:'OBSelectorItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'Asset Selector'});isc.SimpleType.create({inheritsFrom:'text',name:'_id_E36031A58A9843AD8DE1EA886D14750C',editorType:'OBSelectorItem',gridEditorType:'OBSelectorItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'Activos con Codigo1'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_241',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'PA_Report LineType'});isc.SimpleType.create({inheritsFrom:'text',name:'_id_80B1630792EA46F298A3FBF81E77EF9C',editorType:'OBSelectorLinkItem',gridEditorType:'OBSelectorLinkItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'OBUISEL_SelectorAsLink Reference'});isc.SimpleType.create({inheritsFrom:'text',name:'_id_85BB80BF34AB41829DFC488AF06D8A2E',editorType:'OBSelectorItem',gridEditorType:'OBSelectorItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'Responsables'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_B5730B21173B4AA9BB44ADAE2660A853',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Query/List Summarize type'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_FCDE0AC769944E6B9516F32020B15E30',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'Referencia a perfiles'});isc.SimpleType.create({inheritsFrom:'text',name:'_id_14A9BE1555CF4616BDC2E0C8E5EB6542',editorType:'OBSearchItem',gridEditorType:'OBSearchItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'AD_Process_Request'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_1722C8B5D1BC4B349332167C3E3A4561',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Database Object Type'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_CBF00FA9F3744F1A86025AD16F2AF86A',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'End Year Close Actions'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_245',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'All_Entity Type'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_244',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'AD_Column Key ColumnNames'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_09415664FE72489AA486802902DCC81A',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Lista Viviendas'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_243',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'AD_Color Type'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_5D6C1C0E37A245BAA8728B34C39DB87D',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Estados_Documentos_SRI'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_242',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'PA_ReportLine Parent'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_249',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'M_DiscountSchema'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_248',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'AD_Color StartPoint'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_247',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'M_Discount Type'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_246',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'M_Discount CumulativeLevel'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_53A44F83297A4061A29F217AE948ABD4',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'Ciudades_VentasCiudad'});isc.SimpleType.create({inheritsFrom:'text',name:'_id_2E37130191624CC2BFEACECC53C0DD98',editorType:'OBSelectorItem',gridEditorType:'OBSelectorItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'Huecos'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_E5062D33268B45BCBB6A0F08170E00FD',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'Busqueda Area Producto'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_230',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'PA_Goal Parent'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_1002100000',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'ReportTypeGeneralLedger'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_5E6828AAA48A4DC8A29C550AD84406DA',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'User1'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_31D050E5C2D843B99AD7E9470D9E8579',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Estado Liquidacion'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_A19872A5A16149ECAD01E5E37CC0843A',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'FIN_Payment_Schedule order'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_DBE0CE97929A4EB3A2093E35875EA82B',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Anio'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_239',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'PA_ReportColumn'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_A6BDFA712FF948CE903C4C463E832FC1',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Financial account type'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_40B84CF78FC9435790887846CCDAE875',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Add Transaction Document Type'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_B7E66794F4BA46C3ADB2CBD013252AA6',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'FIN_Pay_Exec_Process'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_F1FD1E6C7E0C49C2A4D2D790E670033E',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'FIN Payment Run source'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_E943EF6DC4524209BD5933661EC0BDDC',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'FIN_Payment_Schedule_V invoice'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_232',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'C_BPartner Vendor or SalesRep'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_231',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'PA_Measure Type'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_FF80818132F94B500132F9575619000A',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Button List'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_234',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'All_Posted Status'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_233',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'C_Period (Open)'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_236',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'PA_Report CalculationType'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_956E8F5C98A345AFBCCDD12E49A9074D',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'FIN Execution Process Parameter type'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_235',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'PA_Report AmountType'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_238',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'PA_Report CurrencyType'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_237',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'PA_Report ColumnType'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_262',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'AD_PrintFormat Order'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_263',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'AD_PrintFormat Shipment'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_261',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'AD_PrintFormat Invoice'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_EABFCB54D20B4EE99A099AF5DB14DA17',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'Contrato Area'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_A18160D7A6D247C8AF5904F61A8BEEF2',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'c_year'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_B0BA46A241B543CF80B4046F080FA9DE',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'Widget Class'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_CB6C648A6CAB4F749CB25EB1EBC4BAB5',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'List Widget Type'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_800007',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Print Format Invoice'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_800004',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Projectkind'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_800005',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'PublicPrivate'});isc.SimpleType.create({inheritsFrom:'text',name:'_id_6BBBF18412CE4454B7C2F45E5FC1F6A3',editorType:'OBSelectorItem',gridEditorType:'OBSelectorItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'Tab Access Selector'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_FF80818130217A350130218D802B0011',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Order_Document Status'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_800002',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'ProjectStatus'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_800003',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Projectphase'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_800000',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'M_Product_UOM'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_800001',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'C_Tax_Parent'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_269',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'AD_PrintFormat Not TableBased'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_01F377BC3C0743E7868F81C20D062AA8',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'FIN_Payment_Schedule invoice'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_268',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'AD_PrintFormat Check'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_267',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'AD_PrintFont'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_266',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'AD_PrintColor'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_265',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'AD_Print Graph Type'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_264',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'AD_PrintFormatItem'});isc.SimpleType.create({inheritsFrom:'text',name:'_id_87E6CFF8F71548AFA33F181C317970B5',editorType:'OBMultiSelectorItem',gridEditorType:'OBMultiSelectorItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'OBUISEL_Multi Selector Reference'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_250',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'M_Product_Costing Source'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_251',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'AD_Column Name'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_252',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'C_BPartner Employee'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_1DBAAD6ABF2E4FE7A4654DDE387B89C9',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'TableBasedTableSelector'});isc.SimpleType.create({inheritsFrom:'text',name:'_id_8DC520C5887F4F20822DF61609E1A4C6',editorType:'OBSelectorItem',gridEditorType:'OBSelectorItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'Open reservations of product'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_595E4FB3F743477BA5A670452556C3DF',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'FIN_Payment_Schedule_v order'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_A26BA480E2014707B47257024C3CBFF7',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Property Configuration'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_258',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'AD_Column YesNo'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_CB29EF103ACC49108693B711ACEF6261',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Estado Retención'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_257',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'AD_Column Integer'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_7A55F24E10FD467EA8436DFE32D2C368',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Price List Type'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_259',editorType:'OBFKItem',gridEditorType:'OBFKItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'AD_PrintFormat'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_772B5918358B443A83F82F81A9A4BFB6',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'C_Commission BasisAmt'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_254',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'AD_Print Line Alignment'});isc.SimpleType.create({inheritsFrom:'text',name:'_id_005073F7D540413B98E1D2E245CBC039',editorType:'OBSelectorItem',gridEditorType:'OBSelectorItem',filterEditorType:'OBFKFilterTextItem',sortNormalizer:function(item,field,context){return OB.Utilities.enumSortNormalizer(item,field,context);},referenceName:'AD_User Selector'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_253',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'AD_Print Field Alignment'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_BF8938658DFD4AF8A5F876EFF603BB53',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Tipo Contrato'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_256',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'AD_Print Area'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_FF8081813201F2DE013201F5628C0003',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Personalization Type'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_FF808181322476640132249E3417002F',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'Special Product Attributes'});isc.SimpleType.create({inheritsFrom:'enum',name:'_id_255',editorType:'OBListItem',gridEditorType:'OBListItem',filterEditorType:'OBListFilterItem',referenceName:'AD_Print Format Type'});isc.Date.setShortDisplayFormat(function(useCustomTimeZone){return OB.Utilities.Date.JSToOB(this,OB.Format.date);});isc.Date.setNormalDisplayFormat(function(useCustomTimeZone){return OB.Utilities.Date.JSToOB(this,OB.Format.date);});isc.Date.inputFormat=function(dateString,format,centuryThreshold,suppressConversion){return OB.Utilities.Date.OBToJS(dateString,OB.Format.date);};isc.Date.setInputFormat(function(value){return OB.Utilities.Date.OBToJS(value,OB.Format.date);});isc.Date.setShortDatetimeDisplayFormat(function(useCustomTimeZone){return OB.Utilities.Date.JSToOB(this,OB.Format.dateTime);});isc.Date.toShortDatetime=function(formatter,isDatetimeField){return OB.Utilities.Date.JSToOB(this,OB.Format.dateTime);};
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2009-2013 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */

// = Openbravo Datasource Utilities =
// Defines a number of utility methods related to datasources.
OB.Datasource = {};

// ** {{{ OB.Datasource.get(dataSourceId, target, dsFieldName) }}} **
//
// Retrieves a datasource from the server. The return from the server is a
// javascript
// string which is evaluated. This string should create a datasource. The
// datasource
// object is set in a field of the target (if the target parameter is set). This
// is
// done asynchronously.
//
// The method returns the datasourceid.
//
// Parameters:
// * {{{dataSourceId}}}: the id or name of the datasource
// * {{{target}}}: the target object which needs the datasource
// * {{{dsFieldName}}}: the field name to set in the target object.
// * {{{doNew}}}: if set to true then a new datasource is created
// If not set then setDataSource or optionDataSource are used.
//
OB.Datasource.get = function (dataSourceId, target, dsFieldName, doNew) {
  var ds, callback, rpcRequest;

  if (!doNew) {
    ds = isc.DataSource.getDataSource(dataSourceId);
    if (ds) {
      // only set if target is defined
      if (target) {
        if (dsFieldName) {
          target[dsFieldName] = ds;
        } else if (target.setDataSource) {
          target.setDataSource(ds);
        } else {
          target.optionDataSource = ds;
        }
      }
      return ds;
    }
  }

  // create the callback
  callback = function (rpcResponse, data, rpcRequest) {
    // prevent registering it again
    var ds = isc.DataSource.getDataSource(data.ID);
    if (ds) {
      data = ds;
    } else if (!isc.DataSource.get(data.ID)) {
      isc.DataSource.registerDataSource(data);
    }

    // only set if target is defined
    if (target) {
      if (dsFieldName) {
        target[dsFieldName] = data;
      } else if (target.setDataSource) {
        target.setDataSource(data);
      } else {
        target.optionDataSource = data;
      }
    }
  };

  rpcRequest = {};
  rpcRequest.params = {
    '_create': true
  };
  if (doNew) {
    rpcRequest.params._new = true;
  }
  rpcRequest.httpMethod = 'GET';
  rpcRequest.actionURL = OB.Application.contextUrl + 'org.openbravo.client.kernel/OBSERDS_Datasource/' + dataSourceId;
  rpcRequest.callback = callback;
  rpcRequest.useSimpleHttp = true;
  rpcRequest.evalResult = true;
  isc.RPCManager.sendRequest(rpcRequest);

  // return null
  return dataSourceId;
};

// ** {{{ OB.Datasource.create}}} **
// Performs a last check if the datasource was already registered before
// actually creating it, prevents re-creating datasources when multiple
// async requests are done for the same datasource.
// Parameters:
// * {{{dsProperties}}}: the properties of the datasource which needs to be
// created.
OB.Datasource.create = function (dsProperties) {
  var i, length, flds;

  // set some default properties
  if (!dsProperties.operationBindings) {
    dsProperties.operationBindings = [{
      operationType: 'fetch',
      dataProtocol: 'postParams',
      requestProperties: {
        httpMethod: 'POST'
      }
    }, {
      operationType: 'add',
      dataProtocol: 'postMessage'
    }, {
      operationType: 'remove',
      dataProtocol: 'postParams',
      requestProperties: {
        httpMethod: 'DELETE'
      }
    }, {
      operationType: 'update',
      dataProtocol: 'postMessage',
      requestProperties: {
        httpMethod: 'PUT'
      }
    }];
  }
  dsProperties.recordXPath = dsProperties.recordXPath || '/response/data';
  dsProperties.dataFormat = dsProperties.dataFormat || 'json';
  dsProperties.titleField = dsProperties.titleField || OB.Constants.IDENTIFIER;

  if (dsProperties.fields) {
    flds = dsProperties.fields;
    length = flds.length;
    for (i = 0; i < length; i++) {
      if (!flds[i].type) {
        flds[i].type = 'text';
      }
    }
  }

  // if must be a new datasource then change the id 
  // https://issues.openbravo.com/view.php?id=16581
  if (dsProperties._new && dsProperties.ID) {
    dsProperties.ID = dsProperties.ID + '_' + new Date().getTime();
  }
  if (dsProperties.ID) {
    var ds = isc.DataSource.getDataSource(dsProperties.ID);
    if (ds) {
      return ds;
    }
  }
  if (dsProperties.createClassName) {
    return isc[dsProperties.createClassName].create(dsProperties);
  }
  return isc.OBRestDataSource.create(dsProperties);
};

// always use a subclass to make it easier to override some default stuff
isc.ClassFactory.defineClass('OBRestDataSource', isc.RestDataSource);

isc.OBRestDataSource.addClassProperties({
  // is used to force a unique criterion with a unique value
  DUMMY_CRITERION_NAME: '_dummy',

  getDummyCriterion: function () {
    return {
      fieldName: isc.OBRestDataSource.DUMMY_CRITERION_NAME,
      operator: 'equals',
      value: new Date().getTime()
    };
  }
});

isc.OBRestDataSource.addProperties({
  sendDSRequest: function (dsRequest) {
    //TODO: Report an issue to SmartClient - This part is a work around
    if (dsRequest.params && this.requestProperties && this.requestProperties.params) {
      isc.addProperties(dsRequest.params, this.requestProperties.params);
    }
    this.Super('sendDSRequest', arguments);
  },

  // always let the dummy criterion be true
  evaluateCriterion: function (record, criterion) {
    if (criterion && criterion.fieldName && criterion.fieldName === isc.OBRestDataSource.DUMMY_CRITERION_NAME) {
      return true;
    }
    return this.Super('evaluateCriterion', arguments);
  }
});
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2011-2013 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */

// = Openbravo Utilities =
// Defines utility methods in the top-level OB.Utilities object. Utility methods
// are related to opening views, opening popups, displaying yes/no, etc. 
OB.Utilities = {};

OB.Utilities.isIE9Strict = false;
if (navigator.userAgent.toUpperCase().indexOf("MSIE") !== -1 && (document.documentMode && document.documentMode >= 9)) {
  OB.Utilities.isIE9Strict = true;
}

//** {{{OB.Utilities.checkProfessionalLicense}}} **
// Checks if the current instance is using a professional license 
// (!= community). If the instance has a community instance then 
// a popup message is shown and false is returned.
// The parameter can be used to add a custom message to the popup.
OB.Utilities.checkProfessionalLicense = function (msg, doNotShowMessage) {
  if (OB.Application.licenseType === 'C') {
    if (!doNotShowMessage) {
      if (!msg) {
        msg = '';
      }
      isc.warn(OB.I18N.getLabel('OBUIAPP_ActivateMessage', [msg]), {
        isModal: true,
        showModalMask: true,
        toolbarButtons: [isc.Dialog.OK]
      });
    }
    return false;
  }
  return true;
};

//** {{{OB.Utilities.notifyIfPortalIsNotAllowed}}} **
// Used in the 'Role' window, in the 'For Portal Users' onchange field
// It shows a warning dialog, if Portal is not available due to license restrictions
OB.Utilities.notifyIfPortalIsNotAllowed = function (item, view, form, grid) {
  if (item.getValue() && OB.Application.licenseType === 'C') {
    OB.Utilities.checkProfessionalLicense(OB.I18N.getLabel('OBUIAPP_ActivateMessagePortal'));
    item.setValue(false);
  }
};

//** {{{OB.Utilities.encodeSearchOperator}}} **
//Encodes and and or in a string with a forward slash
OB.Utilities.encodeSearchOperator = function (value) {
  var val = value;
  if (!val || !isc.isA.String(val)) {
    return val;
  }
  val = val.replace(/ and /g, ' \\and ');
  val = val.replace(/ or /g, ' \\or ');
  return val;
};

// ** {{{OB.Utilities.truncTitle}}} **
// Truncs a string after a specific length. Initial implementation is 
// simple (just cuts of at the specified length). Returns the trunced title
// if no cutLength is set then the default length of 30 is chosen. If no
// suffix is set then ... is appended
// TODO: more advanced implementations can cut of at a space or dash for 
// example
OB.Utilities.truncTitle = function (title, cutLength, suffix) {
  cutLength = cutLength || 30;
  if (!title || title.length < cutLength) {
    return title;
  }
  var newTitle = title.substring(0, cutLength);
  // To remove ugly title ends
  while (newTitle.length > 4 && (newTitle.lastIndexOf(' - ') === newTitle.length - 3 || newTitle.lastIndexOf(' -') === newTitle.length - 2 || newTitle.lastIndexOf('  ') === newTitle.length - 2)) {
    if (newTitle.lastIndexOf(' - ') === newTitle.length - 3) {
      newTitle = newTitle.substring(0, newTitle.length - 2);
    }
    if (newTitle.lastIndexOf(' -') === newTitle.length - 2) {
      newTitle = newTitle.substring(0, newTitle.length - 1);
    }
    if (newTitle.lastIndexOf('  ') === newTitle.length - 2) {
      newTitle = newTitle.substring(0, newTitle.length - 1);
    }
  }
  newTitle += suffix || '...';
  return newTitle;
};

// ** {{{OB.Utilities.createDialog}}} **
// Creates a dialog with a title, an ok button and a layout in the middle.
// The dialog is not shown but returned. The caller needs to call setContent to 
// set the content in the dialog and show it.
OB.Utilities.createDialog = function (title, focusOnOKButton, properties) {
  var dialog = isc.Dialog.create({
    title: title,
    toolbarButtons: [isc.Dialog.OK],
    isModal: true,
    canDragReposition: true,
    keepInParentRect: true,
    autoSize: true,
    autoCenter: true,

    contentLayout: 'horizontal',
    autoChildParentMap: isc.addProperties({}, isc.Window.getInstanceProperty("autoChildParentMap"), {
      stack: 'body',
      layout: 'stack',
      toolbar: 'stack'
    }),

    stackDefaults: {
      height: 1
    },

    toolbarDefaults: isc.addProperties({}, isc.Dialog.getInstanceProperty("toolbarDefaults"), {
      layoutAlign: 'center',
      buttonConstructor: isc.OBFormButton
    }),

    createChildren: function () {
      this.showToolbar = false;
      this.Super('createChildren');
      this.addAutoChild('stack', null, isc.VStack);
      this.addAutoChild('layout', {
        height: 1,
        width: '100%',
        overflow: 'visible'
      }, isc.VLayout);
      this.showToolbar = true;
      this.makeToolbar();

      // can't be done via defaults because policy and direction are dynamically determined
      this.body.hPolicy = 'fill';
    },

    // will set the content and show it
    setContent: function (content) {

      // Note: we lazily create children on draw, so verify that the items have been
      // initialized before manipulating the label
      if (!this._isInitialized) {
        this.createChildren();
      }

      // Update the content in the body        
      this.layout.addMember(content);
      this.toolbar.layoutChildren();
      if (this.isDrawn()) {
        this.stack.layoutChildren();
        this.body.layoutChildren();
        this.layoutChildren();
      }

      this.show();

      // focus in the first button so you can hit Enter to do the default thing
      if (this.toolbar && focusOnOKButton) {
        var firstButton = this.toolbar.getMember(0);
        firstButton.focus();
      }
    }

  }, properties);
  return dialog;
};

OB.Utilities.uploadFinished = function (target, data) {
  var origButton = window[target];
  OB.Utilities.currentUploader = null;
  if (origButton && origButton.callback) {
    origButton.callback(data);
  }
};
OB.Utilities.currentUploader = null;
// ** {{{OB.Utilities.createLoadingLayout}}} **
// Creates a layout with the loading image.
OB.Utilities.createLoadingLayout = function (label) {
  var mainLayout = isc.HLayout.create({
    styleName: OB.Styles.LoadingPrompt.mainLayoutStyleName,
    width: '100%',
    height: '100%',
    align: 'center',
    defaultLayoutAlign: 'center'
  });
  var loadingLayout = isc.HLayout.create({
    align: 'center',
    defaultLayoutAlign: 'center',
    membersMargin: 0,
    overflow: 'visible'
  });
  if (!label) {
    label = OB.I18N.getLabel('OBUIAPP_LOADING');
  }
  mainLayout.addMember(loadingLayout);
  loadingLayout.addMember(isc.Label.create({
    contents: label,
    styleName: OB.Styles.LoadingPrompt.loadingTextStyleName,
    width: 1,
    overflow: 'visible'
  }));
  loadingLayout.addMember(isc.Img.create(OB.Styles.LoadingPrompt.loadingImage));
  return mainLayout;
};

// ** {{{OB.Utilities.addRequiredSuffixToBaseStyle}}} **
// Adds the Required suffix to a base style for a required formitem, to show it yellow in 
// the forms.
OB.Utilities.addRequiredSuffixToBaseStyle = function (item) {
  if (item && item.required) {
    // apparently this is called many times therefore do not append
    // if we already did append it
    if (item.textFieldProperties && item.textFieldProperties.textBoxStyle) {
      if (!item.textFieldProperties.textBoxStyle.endsWith('Required')) {
        // make a copy as the textFieldProperties object is shared by many instances
        // so you can't change it directly
        item.textFieldProperties = isc.addProperties({}, item.textFieldProperties);
        item.textFieldProperties.textBoxStyle = item.textFieldProperties.textBoxStyle + 'Required';
      }
    } else if (item.textBoxStyle && !item.textBoxStyle.endsWith('Required')) {
      item.textBoxStyle = item.textBoxStyle + 'Required';
    }
  }
};

// ** {{{OB.Utilities.determineViewOfFormItem}}} **
// Handles the different ways to find the view of a form item.
OB.Utilities.determineViewOfFormItem = function (item) {
  var form;
  if (!item) {
    return null;
  }
  form = item.form;
  if (form.view) {
    // form item in standard form
    return form.view;
  } else if (form.grid) {
    // row editor form item
    if (form.grid.view) {
      return form.grid.view;
    } else if (isc.isA.RecordEditor(form.grid) && form.grid.sourceWidget && form.grid.sourceWidget.view) {
      // filter editor form item
      return form.grid.sourceWidget.view;
    }
  }
  return null;
};

// ** {{{OB.Utilities.callAction}}} **
// Calls the action defined by the action object, if the action object has a callback
// property, it is assumed to be a function and it is called. Otherwise the following
// properties are assumed to be in the action object: method (a function), target (the 
// object to call the function on) and parameters (an array passed to the function).
// If action is null/undefined then nothing is done and undefined is returned.
// When the action is called the result of the action is returned.
OB.Utilities.callAction = function (action) {
  var response;

  function IEApplyHack(method, object, parameters) {
    if (!object) {
      object = window;
    }
    if (!parameters) {
      parameters = [];
    }

    object.customApplyMethod = method;

    var argsString = [],
        i, length = parameters.length;
    for (i = 0; i < length; i++) {
      argsString[i] = 'parameters[' + i + ']';
    }

    var argsList = argsString.join(",");

    var result = eval('object.customApplyMethod(' + argsList + ');');

    delete object.customApplyMethod;

    return result;
  }

  if (!action || !action.method) {
    return;
  }
  if (action.callback) {
    action.callback();
  } else {
    if (navigator.userAgent.toUpperCase().indexOf("MSIE") !== -1) {
      response = IEApplyHack(action.method, action.target, action.parameters);
    } else {
      response = action.method.apply(action.target, action.parameters);
    }
  }
  return response;
};

// ** {{{OB.Utilities.replaceNullStringValue}}} **
// Replaces values which are 'null' with null
OB.Utilities.replaceNullStringValue = function (form, values) {
  var prop;
  for (prop in values) {
    if (values.hasOwnProperty(prop)) {
      var value = values[prop];
      if (value === 'null') {
        values[prop] = null;
      }
    }
  }
};

// ** {{{OB.Utilities.useClassicMode}}} **
// Returns true if the user wants to work in classic mode, checks the url parameter
// as well as a property value.
OB.Utilities.useClassicMode = function (windowId) {
  if (OB.Utilities.hasUrlParameter('mode', 'classic')) {
    return true;
  }
  var propValue = OB.PropertyStore.get('OBUIAPP_UseClassicMode', windowId);
  if (propValue === 'Y') {
    return true;
  }
  if (OB.WindowDefinitions[windowId] && OB.WindowDefinitions[windowId].showInClassicMode) {
    return true;
  }
  return false;
};

// ** {{{OB.Utilities.openDirectTab}}} **
// Open a view using a tab id and record id. The tab can be a child tab. If the record id
// is not set then the tab is opened in grid mode. If command is not set then default is
// used.
OB.Utilities.openDirectTab = function (tabId, recordId, command, position, criteria, direct) {

  tabId = OB.Utilities.removeFragment(tabId);
  recordId = OB.Utilities.removeFragment(recordId);
  command = OB.Utilities.removeFragment(command);

  var urlParams = OB.Utilities.getUrlParameters(),
      callback, isDirect = direct;

  //added to have the additional filter clause and tabid. Mallikarjun M
  callback = function (response, data, request) {
    command = command || 'DEFAULT';
    var view = {
      viewId: '_' + data.windowId,
      tabTitle: data.tabTitle,
      windowId: data.windowId,
      tabId: data.tabId,
      id: data.tabId,
      command: command,
      tabPosition: position
    };
    // new is only supported for the top tab
    if (command !== 'NEW') {
      view.targetTabId = tabId;
    }

    if (recordId) {
      view.targetRecordId = recordId;
      if (direct !== false) {
        isDirect = true;
      }
    }

    //// Begins-added to have the additional filter clause and tabid..Mallikarjun M
    //URL example:http://localhost:8080/openbravo/?tabId=186&filterClause=e.businessPartner.searchKey%3D%27mcgiver%27&replaceDefaultFilter=true&
    if (urlParams.filterClause) {
      view.additionalFilterTabId = data.tabId;
      view.additionalFilterClause = urlParams.filterClause;
    }
    if (urlParams.criteria) {
      view.additionalCriteriaTabId = data.tabId;
      view.additionalCriteria = urlParams.criteria;
    }

    if (urlParams.replaceDefaultFilter) {
      view.replaceDefaultFilter = urlParams.replaceDefaultFilter;
    }

    if (criteria) {
      view.additionalCriteriaTabId = data.tabId;
      view.additionalCriteria = criteria;
    }
    ////Ends..
    OB.Layout.ViewManager.openView(view.viewId, view, null, isDirect);
  };

  OB.RemoteCallManager.call('org.openbravo.client.application.ComputeWindowActionHandler', {}, {
    'tabId': tabId,
    'recordId': recordId
  }, callback);
};

// ** {{{OB.Utilities.removeFragment}}} **
// remove a # and the rest from a string
OB.Utilities.removeFragment = function (str) {
  if (!str) {
    return str;
  }
  var index = str.indexOf('#');
  if (index !== -1) {
    return str.substring(0, index);
  }
  return str;
};

// ** {{{OB.Utilities.openView}}} **
// Open a view taking into account if a specific window should be opened in classic mode or not.
// Returns the object used to open the window.
OB.Utilities.openView = function (windowId, tabId, tabTitle, recordId, command, icon, readOnly, singleRecord, direct, editOrDeleteOnly) {
  var isClassicEnvironment = OB.Utilities.useClassicMode(windowId),
      openObject, isDirect = direct,
      isSingleRecord;
  if (recordId) {
    if (direct !== false) {
      isDirect = true;
    }
    if (singleRecord !== false) {
      isSingleRecord = true;
    }
  }
  if (isClassicEnvironment) {
    if (recordId) {
      OB.Layout.ClassicOBCompatibility.openLinkedItem(tabId, recordId);
      return null;
    }
    openObject = {
      viewId: 'OBClassicWindow',
      windowId: windowId,
      tabId: tabId,
      id: tabId,
      command: 'DEFAULT',
      tabTitle: tabTitle,
      icon: icon
    };
  } else if (recordId) {
    openObject = {
      viewId: '_' + windowId,
      id: tabId,
      targetRecordId: recordId,
      targetTabId: tabId,
      tabTitle: tabTitle,
      windowId: windowId,
      readOnly: readOnly,
      singleRecord: isSingleRecord,
      editOrDeleteOnly: editOrDeleteOnly
    };
  } else {
    openObject = {
      viewId: '_' + windowId,
      id: tabId,
      tabId: tabId,
      tabTitle: tabTitle,
      windowId: windowId,
      icon: icon,
      readOnly: readOnly,
      singleRecord: isSingleRecord,
      editOrDeleteOnly: editOrDeleteOnly
    };
  }
  if (command) {
    openObject.command = command;
  }
  OB.Layout.ViewManager.openView(openObject.viewId, openObject, null, isDirect);
  return openObject;
};

// ** {{{OB.Utilities.openDirectView}}} **
// Open the correct view for a passed in target definition, coming from a certain source Window.
OB.Utilities.openDirectView = function (sourceWindowId, keyColumn, targetEntity, recordId) {
  var actionURL = OB.Application.contextUrl + 'utility/ReferencedLink.html',
      callback, reqObj, request;

  callback = function (response, data, request) {
    OB.Utilities.openView(data.windowId, data.tabId, data.tabTitle, data.recordId, null, null, null, null, true);
  };

  reqObj = {
    params: {
      Command: 'JSON',
      inpEntityName: targetEntity,
      inpKeyReferenceId: recordId,
      inpwindowId: sourceWindowId,
      inpKeyReferenceColumnName: keyColumn
    },
    callback: callback,
    evalResult: true,
    httpMethod: 'GET',
    useSimpleHttp: true,
    actionURL: actionURL
  };
  request = isc.RPCManager.sendRequest(reqObj);
};

// ** {{{OB.Utilities.getPromptString}}} **
// Translates a string or array of strings to a string with html returns.
OB.Utilities.getPromptString = function (msg) {
  var msgString = '',
      i, length;
  if (!isc.isAn.Array(msg)) {
    msg = [msg];
  }
  length = msg.length;
  for (i = 0; i < length; i++) {
    msgString += (i > 0 ? '<br>' : '') + msg[i].asHTML();
  }
  return msgString;
};
// ** {{{OB.Utilities.getUrlParameters}}} **
// Returns the url parameters as a javascript object. Note works for simple cases
// where no & is used for character encoding, this is fine for most cases.
OB.Utilities.getUrlParameters = function (href) {
  href = href || window.location.href;
  var vars = {},
      hash, length, hashes = href.slice(href.indexOf('?') + 1).split('&'),
      i;

  length = hashes.length;

  for (i = 0; i < length; i++) {
    hash = hashes[i].split('=');
    if (hash[i] && hash[i].contains('#')) {
      hash[i] = hash[i].substring(0, hash[i].indexOf('#'));
    }
    vars[hash[0]] = hash[1];
  }
  return vars;
};

// ** {{{OB.Utilities.hasUrlParameter}}} **
// Returns true if the url has a certain parameter with a certain value.
OB.Utilities.hasUrlParameter = function (name, value) {
  var url = window.document.location.href,
      checkPoint = url.indexOf(name + '=' + value);
  return checkPoint !== -1;
};

// ** {{{OB.Utilities.getLocationUrlWithoutFragment()}}} **
// Returns the url of the page without the fragment (the part starting with #)
OB.Utilities.getLocationUrlWithoutFragment = function () {
  var url = window.document.location.href,
      checkPoint = url.indexOf('#');
  if (checkPoint !== -1) {
    url = url.substring(0, checkPoint);
  }
  return url;
};

// ** {{{ OB.Utilities.openProcessPopup(/*String*/ processId }}} **
// Opens a separate window for classic OB windows.
// Parameters:
// * {{{url}}}: the url of the html page to open
// * {{{noFrameSet}}}: if true then the page is opened directly without a
// * {{{postParams}}}: if this object is set and noFrameSet is not true, main Framset send
//                     properties of this object to url as POST, other case a GET to url is
//                     performed
// frameset
OB.Utilities.openProcessPopup = function (url, noFrameSet, postParams, height, width) {
  height = height || 450;
  width = width || 625;
  var top = (screen.height - height) / 2;
  var left = (screen.width - width) / 2;
  var adds = 'height=' + height + ', width=' + width + ', left=' + left + ', top=' + top;
  adds += ', location=0';
  adds += ', scrollbars=1';
  adds += ', status=1';
  adds += ', menubar=0';
  adds += ', toolbar=0';
  adds += ', resizable=1';
  var winPopUp;

  if (noFrameSet) {
    winPopUp = window.open(url, 'PROCESS', adds);
  } else {
    winPopUp = window.open('', 'PROCESS', adds);
    var mainFrameSrc = !postParams ? ('src="' + url + '"') : '',
        html = '<html>' + '<frameset cols="0%,100%" frameborder="no" border="0" framespacing="0" rows="*" id="framesetMenu">' + '<frame name="frameMenu" scrolling="no" src="' + OB.Application.contextUrl + 'utility/VerticalMenu.html?Command=LOADING" id="paramFrameMenuLoading"></frame>' + '<frame name="mainframe" noresize="" ' + mainFrameSrc + ' id="fieldProcessId"></frame>' + '<frame name="hiddenFrame" scrolling="no" noresize="" src=""></frame>' + '</frameset>' + '</html>';

    winPopUp.document.write(html);
    if (postParams) {
      var doc = winPopUp.frames[1].document,
          frm = doc.createElement('form'),
          i;
      frm.setAttribute('method', 'post');
      frm.setAttribute('action', url);
      for (i in postParams) {
        if (postParams.hasOwnProperty(i)) {
          var inp = winPopUp.document.createElement('input');
          inp.setAttribute('type', 'hidden');
          inp.setAttribute('name', i);
          inp.setAttribute('value', postParams[i]);
          frm.appendChild(inp);
        }
      }
      doc.body.appendChild(frm);
      frm.submit();
    }
    winPopUp.document.close();
  }
  OB.Utilities.registerClassicPopupInTestRegistry(url, winPopUp);
  winPopUp.focus();
  return winPopUp;
};

// ** {{{ OB.Utilities.registerClassicPopupInTestRegistry(/*String*/ url, /*Object*/ obj }}} **
// Registers the obj as a classic popup
OB.Utilities.registerClassicPopupInTestRegistry = function (url, obj) {
  if (url.startsWith('/')) {
    var index = url.indexOf('/', 1);
    url = url.substring(index + 1);
  }
  OB.TestRegistry.register('org.openbravo.classicpopup.' + url, obj);
};

// ** {{{ OB.Utilities.isNonEmptyString(/*String*/ strValue }}} **
// Returns true if the parameter is a valid String which has length > 0
// Parameters:
// * {{{strValue}}}: the value to check
OB.Utilities.isNonEmptyString = function (strValue) {
  if (!strValue) {
    return false;
  }
  strValue = strValue.replace(/^\s*/, '').replace(/\s*$/, '');
  return strValue.length > 0;
};

// ** {{{ OB.Utilities.areEqualWithTrim(/*String*/ str1, /*String*/ str2}}} **
// Returns true if the two strings are equal after trimming them.
// Parameters:
// * {{{str1}}}: the first String to check
// * {{{str2}}}: the second String to compare
OB.Utilities.areEqualWithTrim = function (str1, str2) {
  if (!str1 || !str2) {
    return false;
  }
  str1 = str1.replace(/^\s*/, '').replace(/\s*$/, '');
  str2 = str2.replace(/^\s*/, '').replace(/\s*$/, '');
  return str1 === str2;
};

//** {{{ OB.Utilities.trim(/*String*/ str)}}} **
//Trims a string
OB.Utilities.trim = function (str) {
  if (!str) {
    return str;
  }
  return str.replace(/^\s*/, '').replace(/\s*$/, '');
};

OB.Utilities.processLogoutQueue = function () {
  var q = OB.Utilities.logoutWorkQueue,
      qElement, result, tab, tabID;

  if (q && q.length === 0) {
    return;
  }

  if (typeof arguments[1] === 'string') {
    // The 2nd parameter in a sendRequest callback is the 'data' parameter
    // http://www.smartclient.com/docs/7.0rc2/a/b/c/go.html#type..RPCCallback
    result = eval('(' + arguments[1] + ')');
    if (result && result.oberror) {
      if (result.oberror.type === 'Error') {
        tab = OB.MainView.TabSet.getTab(arguments[2].params.tabID);
        if (tab) {
          tab.pane.getAppFrameWindow().location.href = result.redirect;
        }
        q = [];
        return;
      }
    }
  }
  // Process one element at the time,
  // the save callbacks will empty the queue
  qElement = q.pop();
  if (qElement.func && qElement.args !== undefined) {
    qElement.func.apply(qElement.self, qElement.args);
  }
};

// ** {{{ OB.Utilities.logout }}} **
// Logout from the application, removes server side session info and redirects
// the client to the Login page.
OB.Utilities.logout = function (confirmed) {
  if (!confirmed) {
    isc.confirm(OB.I18N.getLabel('OBUIAPP_LogoutConfirmation'), function (ok) {
      if (ok) {
        OB.Utilities.logout(true);
      }
    });
    return;
  }
  OB.Utilities.logoutWorkQueue = [];
  var q = OB.Utilities.logoutWorkQueue,
      i, tabs = OB.MainView.TabSet.tabs,
      tabsLength = tabs.length,
      appFrame;

  // Push the logout process to the 'end' of the queue
  q.push({
    func: OB.RemoteCallManager.call,
    self: this,
    args: ['org.openbravo.client.application.LogOutActionHandler',
    {}, {}, function () {
      window.location.href = OB.Application.contextUrl;
    }]
  });

  for (i = 0; i < tabsLength; i++) {
    if (tabs[i].pane.Class === 'OBClassicWindow') {
      appFrame = tabs[i].pane.appFrameWindow || tabs[i].pane.getAppFrameWindow();
      if (appFrame && appFrame.isUserChanges) {
        if (appFrame.validate && !appFrame.validate()) {
          q = [];
          return;
        }
        q.push({
          func: tabs[i].pane.saveRecord,
          self: tabs[i].pane,
          args: [tabs[i].ID, OB.Utilities.processLogoutQueue]
        });
      }
    }
  }
  OB.Utilities.processLogoutQueue();
};

// ** {{{ OB.Utilities.getYesNoDisplayValue }}} **
// Returns the Yes label if the passed value is true, the No label if false.
OB.Utilities.getYesNoDisplayValue = function (value) {
  if (value === true || value === 'true') {
    return OB.I18N.getLabel('OBUISC_Yes');
  } else if (value === false) {
    return OB.I18N.getLabel('OBUISC_No');
  } else {
    return '';
  }
};

// ** {{{ OB.Utilities.getClassicValue }}} **
// Returns the Y if the passed value is true, and N if false.
OB.Utilities.getClassicValue = function (value) {
  if (value) {
    return 'Y';
  } else if (value === false) {
    return 'N';
  } else {
    return '';
  }
};

// ** {{{ OB.Utilities.applyDefaultValues }}} **
//
// Sets the value for each property in the defaultValues in the Fields object
// if it is not set there yet.
//
// Parameters:
// * {{{fields}}}: the current values
// * {{{defaultValues}}}: the default values to set in the fields object (if the
// property is not set in the fields object).
OB.Utilities.applyDefaultValues = function (fields, defaultValues) {
  var fieldsLength = fields.length,
      i, property;
  for (i = 0; i < fieldsLength; i++) {
    var field = fields[i];
    for (property in defaultValues) {
      if (defaultValues.hasOwnProperty(property)) {
        if (!field[property] && field[property] !== false) {
          field[property] = defaultValues[property];
        }
      }
    }
  }
};

// ** {{{ OB.Utilities.addFormInputsToCriteria }}} **
//
// Adds all input values on the standard OB form (document.frmMain) to the
// criteria object.
// 
// Parameters:
// * {{{criteria}}}: the current criteria object.
// * {{{win}}}: (Optional) a reference to the global context (window) where to
// get the document
// and functions are located, if not passed, the current window is used
OB.Utilities.addFormInputsToCriteria = function (criteria, win) {
  var d = (win && win.document ? win.document : null) || window.document,
      elementsLength = (d.frmMain ? d.frmMain.elements.length : 0),
      inputValue = (win && win.inputValue ? win.inputValue : null) || window.inputValue,
      i, elem;

  for (i = 0; i < elementsLength; i++) {
    elem = d.frmMain.elements[i];
    if (elem.name) {
      criteria[elem.name] = inputValue(elem);
    }
  }

  // the form can have an organization field,
  // in the server it is used to determine the accessible orgs
  // TODO: make this optional or make it possible to set the orgid html id
  if (d.frmMain.inpadOrgId) {
    criteria[OB.Constants.ORG_PARAMETER] = inputValue(d.frmMain.inpadOrgId);
  }
};

//** {{{ OB.Utilities.postThroughHiddenForm }}} **
//
// Global method to post a request through a hidden form located on:
// org.openbravo.client.application/index.html
//
// Parameters:
// * {{{url}}}: the url to post the request.
// * {{{data}}}: the data to include in the request.
OB.Utilities.postThroughHiddenForm = function (url, data) {
  var key;
  OB.GlobalHiddenForm.setAttribute('action', url);

  // remove all children, needs to be done like this as the 
  // children array is getting updated while removing a child  
  while (OB.GlobalHiddenForm.children[0]) {
    OB.GlobalHiddenForm.removeChild(OB.GlobalHiddenForm.children[0]);
  }

  var encodeProperties = {
    // prevents timezone issues
    encodeDate: function (dt) {
      var ret, oldXMLSchemaMode = isc.Comm.xmlSchemaMode;
      isc.Comm.xmlSchemaMode = true;
      ret = dt.toSerializeableDate();
      isc.Comm.xmlSchemaMode = oldXMLSchemaMode;
      return '"' + ret + '"';
    }
  };

  for (key in data) {
    if (data.hasOwnProperty(key)) {
      var field = document.createElement('input');
      field.setAttribute('type', 'hidden');
      field.setAttribute('name', key);
      if (isc.isA.Object(data[key])) {
        field.setAttribute('value', isc.JSON.encode(data[key], encodeProperties));
      } else {
        field.setAttribute('value', data[key]);
      }
      OB.GlobalHiddenForm.appendChild(field);
    }
  }

  OB.GlobalHiddenForm.submit();
};

// ** {{{ OB.Utilities.updateSmartClientComponentValue }}} **
//
// Updates the value of a smartclient component.
//
// Parameters:
// * {{{input}}}: the input field (html dom input element)
// * {{{component}}}: the Smartclient component (must have a setValue function)
OB.Utilities.updateSmartClientComponentValue = function (input, component) {
  component.setValue(input.value);
};

//** {{{ OB.Utilities.fixNull250 }}} **
//
// Transforms null values into '' to adapt display logic to 2.50 behavior.
//
// Parameters:
// * {{{currentValues}}}: array of values
OB.Utilities.fixNull250 = function (currentValues) {
  var i;
  for (i in currentValues) {
    if (currentValues.hasOwnProperty(i) && (currentValues[i] === null || currentValues[i] === undefined)) {
      currentValues[i] = '';
    }
  }
};

// ** {{{ OB.Utilities.isValidURL}}} **
// Checks if a String is a valid URL
//
// Parameters:
// * {{{url}}}: String url
OB.Utilities.isValidURL = function (url) {
  // Validation based on: http://view.jquery.com/trunk/plugins/validate/jquery.validate.js
  // Note: http://localhost is not a valid URL, http://localhost.localdomain is a valid one
  if (!url) {
    return false;
  }
  return (/^(https?|ftp|file):\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(\#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/i).test(url);
};

// ** {{{ applicationUrl(path) }}} **
//
// Get the full URL to the supplied path under the application context
//
// Parameters:
//  * {{{path}}} path portion of URL
//
OB.Utilities.applicationUrl = function (path) {
  var appUrl = OB.Application.contextUrl + path;
  if (appUrl.indexOf('//') === 0) {
    // Double slash at start of relative URL only keeps scheme, not server
    appUrl = appUrl.substring(1);
  }
  return appUrl;
};

// ** {{{ refreshWorkspaceWidget(widgetId) }}} **
//
// Refresh all instances of the widget placed in the Workspace of the given widget id
//
// Parameters:
//  * {{{widgetId}}} the widget id
//
OB.Utilities.refreshWorkspaceWidget = function (widgetId) {
  var i;
  if (!OB.MyOB || !OB.MyOB.widgets) {
    return;
  }
  for (i = 0; i < OB.MyOB.widgets.length; i++) {
    if (OB.MyOB.widgets[i].widgetClassId === widgetId) {
      if (OB.MyOB.widgets[i].ID && isc.Canvas.getById(OB.MyOB.widgets[i].ID)) {
        isc.Canvas.getById(OB.MyOB.widgets[i].ID).refresh();
      }
    }
  }
};

OB.Utilities.formatTimePassedMessage = function (n, messageId) {
  var message = OB.I18N.getLabel(messageId, [n]);
  return message;
};

OB.Utilities.getTimePassed = function (created) {
  // 0-59 minutes: minutes
  // 1-24 hours: hours
  // >24 hours: days
  // >7 days: weeks
  // >30 days: months
  var now = new Date(),
      msCreated = created.getTime(),
      msNow = now.getTime();

  // time difference in days
  return OB.Utilities.getTimePassedInterval(msNow - msCreated);
};

OB.Utilities.getTimePassedInterval = function (timeInMiliseconds) {
  var n;
  var diffDays = Math.floor((timeInMiliseconds) / (1000 * 60 * 60 * 24));
  if (diffDays >= 30) {
    n = Math.floor(diffDays / 30);
    return OB.Utilities.formatTimePassedMessage(n, 'OBUIAPP_months_ago_1');
  } else if (diffDays >= 7) {
    n = Math.floor(diffDays / 7);
    return OB.Utilities.formatTimePassedMessage(n, 'OBUIAPP_weeks_ago_1');
  } else if (diffDays >= 1) {
    n = diffDays;
    return OB.Utilities.formatTimePassedMessage(n, 'OBUIAPP_days_ago_1');
  }

  // time difference in hours
  var diffHours = Math.floor((timeInMiliseconds) / (1000 * 60 * 60));
  if (diffHours >= 1) {
    n = diffHours;
    return OB.Utilities.formatTimePassedMessage(n, 'OBUIAPP_hours_ago_1');
  }

  // time difference in minutes
  n = Math.floor((timeInMiliseconds) / (1000 * 60));
  return OB.Utilities.formatTimePassedMessage(n, 'OBUIAPP_minutes_ago_1');
};

//** {{{ OB.Utilities.getValue }}} **
//
// Gets the value of a field using the square bracket notation
// This prevents errors from happening when the name of the property
// is a reserved javascript word
OB.Utilities.getValue = function (object, property) {
  return object[property];
};

//** {{{ OB.Utilities.generateRandomString }}} **
//
// Generates a random string based on the arguments
// Parameters:
//  * {{{stringLength}}} Length of the generated random string
//  * {{{allowLowerCaseChars}}} Boolean to check if lower case characters are allowed (true by default)
//  * {{{allowUpperCaseChars}}} Boolean to check if upper case characters are allowed (true by default)
//  * {{{allowDigits}}} Boolean to check if digits are allowed (false by default)
//  * {{{allowSpecialChars}}} Boolean to check if special characters are allowed (false by default)
OB.Utilities.generateRandomString = function (stringLength, allowLowerCaseChars, allowUpperCaseChars, allowDigits, allowSpecialChars) {
  stringLength = parseInt(stringLength, 10);
  if (!stringLength) {
    stringLength = 1;
  }
  allowLowerCaseChars = (allowLowerCaseChars !== false ? true : false);
  allowUpperCaseChars = (allowUpperCaseChars !== false ? true : false);
  allowDigits = (allowDigits !== true ? false : true);
  allowSpecialChars = (allowSpecialChars !== true ? false : true);

  var chars = '',
      randomString = '',
      i, rnum;
  if (allowLowerCaseChars) {
    chars += 'abcdefghijklmnopqrstuvwxyz';
  }
  if (allowUpperCaseChars) {
    chars += 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
  }
  if (allowDigits) {
    chars += '0123456789';
  }
  if (allowSpecialChars) {
    chars += '!@#$%^&*()+=-[]\\\';,./{}|\":<>?~_';
  }
  if (chars === '') {
    return '';
  }

  for (i = 0; i < stringLength; i++) {
    rnum = Math.floor(Math.random() * chars.length);
    randomString += chars.substring(rnum, rnum + 1);
  }
  return randomString;
};

/* This function will return true if it receives a string parameter, and 
 * which complies with the OB UUID format (that is, its a
 * hexadecimal number of length 32 or numeric numbers of length less than or equal to 10)
 */
OB.Utilities.isUUID = function (object) {
  if (typeof object !== 'string') {
    return false;
  }
  if (object.length > 10 && object.length !== 32) {
    return false;
  }
  if (object.length === 32) {
    return (/[A-Fa-f0-9]{32,32}/).test(object);
  } else if (object.length <= 10) {
    //return true if uuid contains only numbers
    return (/^\d+$/).test(object);
  }
};

//** {{{ OB.Utilities.clientClassSplitProps }}} **
//
// Auxiliary function to split a string containing the clientClass and its properties
// Returns as an array the clientClass (first element) and its attributes (second element)
OB.Utilities.clientClassSplitProps = function (clientClass) {
  var clientClassPropsStartPosition, clientClassProps, ret;
  if (!clientClass) {
    clientClass = '';
  }
  clientClassPropsStartPosition = clientClass.indexOf('{');
  if (clientClassPropsStartPosition > 0) {
    clientClassProps = clientClass.substring(clientClassPropsStartPosition, clientClass.length);
    try {
      clientClassProps = JSON.parse(clientClassProps);
    } catch (e) {
      clientClassProps = {};
    }
    clientClass = clientClass.substring(0, clientClassPropsStartPosition);
  } else {
    clientClassProps = {};
  }
  clientClass = clientClass.replace(/\s+/g, '');
  ret = [clientClass, clientClassProps];
  return ret;
};


//** {{{ OB.Utilities.getRGBAStringFromOBColor }}} **
//
// Returns a string like "rgba(*RedValue*, *GreenValue*, *BlueValue*, *OpacityValue*)" from an OBColor value
// Parameters:
//  * {{{color}}} OBColor value
OB.Utilities.getRGBAStringFromOBColor = function (color) {
  var rgbaColor = 'rgba(',
      colorArray, i;
  if (!color) {
    return;
  }
  colorArray = color.split('-');
  for (i = 0; i < colorArray.length; i++) {
    if (i < 3) {
      rgbaColor += parseInt(colorArray[i], 10);
      rgbaColor += ',';
    } else {
      rgbaColor += parseInt(colorArray[i], 10) / 100;
    }
  }
  rgbaColor += ')';
  return rgbaColor;
};

//** {{{ OB.Utilities.getBrightFromOBColor }}} **
//
// Returns the bright value (from 0 to 255) from an OBColor value
// Parameters:
//  * {{{color}}} OBColor value
OB.Utilities.getBrightFromOBColor = function (color) {
  var bright = 0,
      colorArray;
  if (!color) {
    return;
  }
  colorArray = color.split('-');
  bright = bright + parseInt(colorArray[0], 10) * 299;
  bright = bright + parseInt(colorArray[1], 10) * 587;
  bright = bright + parseInt(colorArray[2], 10) * 114;
  bright = bright / 1000;
  bright = parseInt(bright, 10);
  return bright;
};

//** {{{ OB.Utilities.generateOBColor }}} **
//
// Returns a string with an OBColor
// Parameters:
//  * {{{r}}} Red component. From 0 to 255. If not set, a random one will be generated
//  * {{{g}}} Green component. From 0 to 255. If not set, a random one will be generated
//  * {{{b}}} Blue component. From 0 to 255. If not set, a random one will be generated
//  * {{{a}}} Alpha channel (opacity) component. From 0 to 100. If not set, a random one will be generated
//  * {{{seed}}} Optional seed for the random color generation
OB.Utilities.generateOBColor = function (r, g, b, a, seed) {
  var getRandomInt, randomInt, getChannel, obcolor = '';
  getRandomInt = function (seed) {
    if (seed === null || typeof seed === 'undefined') {
      seed = (new Date()).getTime();
    }
    seed = seed.toString();
    seed = seed.replace(/[&\/\\#,+()$~%.'":*?<>{}]/g, '0');
    seed = seed.replace(/[a-j]/g, '1').replace(/[j-t]/g, '2').replace(/[u-z]/g, '3');
    seed = seed.replace(/[A-J]/g, '4').replace(/[J-T]/g, '4').replace(/[U-Z]/g, '6');
    seed = seed + seed.length.toString();
    seed = parseInt(seed, 10);

    return {
      next: function (min, max) {
        var randomNum;
        seed *= 1234;
        seed += 56;
        seed *= 7890;
        randomNum = seed % 10000000000000 / 100000;
        randomNum = randomNum - Math.floor(randomNum);
        randomNum = Math.floor(randomNum * (max - min + 1)) + min;
        return randomNum;
      }
    };
  };
  randomInt = getRandomInt(seed);
  getChannel = function (channel, min, max) {
    var randomValueInt = randomInt.next(min, max);
    if (channel) {
      channel = parseInt(channel.toString(), 10);
    } else {
      channel = randomValueInt;
    }
    if (channel < min) {
      channel = min;
    }
    if (channel > max) {
      channel = max;
    }
    channel = channel.toString();
    if (channel.length === 2) {
      channel = '0' + channel;
    } else if (channel.length === 1) {
      channel = '00' + channel;
    }
    return channel;
  };
  r = getChannel(r, 0, 255);
  obcolor += r;
  obcolor += '-';
  g = getChannel(g, 0, 255);
  obcolor += g;
  obcolor += '-';
  b = getChannel(b, 0, 255);
  obcolor += b;
  obcolor += '-';
  a = getChannel(a, 0, 100);
  obcolor += a;

  return obcolor;
};

//** {{{ OB.Utilities.getProcessTabBarPosition }}} **
//
// Returns the position of a process window in the main tab bar
// Parameters:
//  * {{{processView}}} The process view
OB.Utilities.getProcessTabBarPosition = function (processView) {
  var len = OB.MainView.TabSet.paneContainer.members.length,
      i;
  for (i = 0; i < len; i++) {
    if (processView.ID === OB.MainView.TabSet.paneContainer.members[i].ID) {
      return i;
    }
  }
  return -1;

};

OB.Utilities.yesNoSortNormalizer = function (item, field, context) {
  var value = item[field];
  if (value === true) {
    return 1;
  } else if (value === false) {
    return 2;
  } else {
    return 3;
  }
};

OB.Utilities.enumSortNormalizer = function (item, field, context) {
  var value = item[field],
      undef;
  if (value === null || value === undef) {
    return '-'; // hack to sort nulls last
  }
  return ' ' + value;
};
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2012-2013 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */

OB = window.OB || {};
OB.Utilities = window.OB.Utilities || {};

// = Openbravo Action Utilities =
// Defines utility methods to execute functions based in a Json argument.
OB.Utilities.Action = {
  _list: [],
  _pausedThreads: [],
  _cancelledThreads: [],

  // ** {{{ pauseThread(/*String*/ threadId) }}} **
  // Pauses the thread with id passed as "threadId" argument
  // Parameters:
  // * {{{threadId}}}: the id of the thread to pause
  // * {{{delay}}}: delay in ms to pause the thread
  pauseThread: function (threadId, delay) {
    var position = this._pausedThreads.length,
        i;

    if (delay && Object.prototype.toString.apply(delay) === '[object Number]') {
      setTimeout(function () {
        OB.Utilities.Action.pauseThread(threadId);
      }, delay);
      return true;
    }
    for (i = 0; i < position; i++) {
      if (this._pausedThreads[i] === threadId) {
        position = i;
        break;
      }
    }
    this._pausedThreads[position] = threadId;
    return true;
  },

  // ** {{{ resumeThread(/*String*/ threadId) }}} **
  // Resumes the thread with id passed as "threadId" argument
  // Parameters:
  // * {{{threadId}}}: the id of the thread to resume
  // * {{{delay}}}: delay in ms to resume the thread
  resumeThread: function (threadId, delay) {
    var position = null,
        i;

    if (delay && Object.prototype.toString.apply(delay) === '[object Number]') {
      setTimeout(function () {
        OB.Utilities.Action.resumeThread(threadId);
      }, delay);
      return true;
    }
    for (i = 0; i < this._pausedThreads.length; i++) {
      if (this._pausedThreads[i] === threadId) {
        position = i;
        break;
      }
    }
    if (position !== null) {
      this._pausedThreads.splice(position, 1);
      return true;
    } else {
      return false;
    }
  },

  // ** {{{ isThreadPaused(/*String*/ threadId) }}} **
  // Returns true if the thread with id passed as "threadId" argument is paused.
  // Else it returns false.
  // Parameters:
  // * {{{threadId}}}: the id of the thread to check
  isThreadPaused: function (threadId) {
    var position = this._pausedThreads.length,
        i;

    for (i = 0; i < position; i++) {
      if (this._pausedThreads[i] === threadId) {
        return true;
      }
    }
    return false;
  },

  // ** {{{ cancelThread(/*String*/ threadId) }}} **
  // Cancels the thread with id passed as "threadId" argument
  // Parameters:
  // * {{{threadId}}}: the id of the thread to cancel
  // * {{{delay}}}: delay in ms to cancel the thread
  cancelThread: function (threadId, delay) {
    var position = this._cancelledThreads.length,
        i;

    if (delay && Object.prototype.toString.apply(delay) === '[object Number]') {
      setTimeout(function () {
        OB.Utilities.Action.cancelThread(threadId);
      }, delay);
      return true;
    }
    this._cancelledThreads[position] = threadId;
    if (this.isThreadPaused(threadId)) {
      this.resumeThread(threadId);
    }
    return true;
  },

  // ** {{{ isThreadCancelled(/*String*/ threadId) }}} **
  // Returns true if the thread with id passed as "threadId" argument is cancelled.
  // Else it returns false.
  // Parameters:
  // * {{{threadId}}}: the id of the thread to check
  isThreadCancelled: function (threadId) {
    var position = this._cancelledThreads.length,
        i;

    for (i = 0; i < position; i++) {
      if (this._cancelledThreads[i] === threadId) {
        return true;
      }
    }
    return false;
  },

  // ** {{{ set(/*String*/ name, /*Function*/ action) }}} **
  // Registers a new function. After it, it will be available to access it using execute/executeJSON
  // The action (/*Function*/) only should accept one argument, and it should be a JSON object
  // Parameters:
  // * {{{name}}}: name of the function
  // * {{{action}}}: function associated to "name"
  set: function (name, action) {
    var position = this._list.length,
        i;

    for (i = 0; i < position; i++) {
      if (this._list[i].name === name) {
        position = i;
        break;
      }
    }
    this._list[position] = {};
    this._list[position].name = name;
    this._list[position].action = action;
    return true;
  },

  // ** {{{ remove(/*String*/ name) }}} **
  // Removes a new function. After it, it won't be avallable anymore to access it using execute/executeJSON
  // Parameters:
  // * {{{name}}}: name of the function
  remove: function (name) {
    var position = null,
        i;

    for (i = 0; i < this._list.length; i++) {
      if (this._list[i].name === name) {
        position = i;
        break;
      }
    }
    if (position !== null) {
      this._list.splice(position, 1);
      return true;
    } else {
      return false;
    }
  },

  // ** {{{ execute(/*String*/ name, /*Object*/ paramObj) }}} **
  // Executes the defined function with given "name" (if it is set/defined) and passing as argument the "paramObj" object
  // Parameters:
  // * {{{name}}}: name of the function
  // * {{{paramObj}}}: object passed as parameter to the function
  // * {{{delay}}}: delay in ms to start the action execution
  execute: function (name, paramObj, delay) {
    var length = this._list.length,
        i;

    if (delay && Object.prototype.toString.apply(delay) === '[object Number]') {
      setTimeout(function () {
        OB.Utilities.Action.execute(name, paramObj);
      }, delay);
      return true;
    }
    for (i = 0; i < length; i++) {
      if (this._list[i].name === name && this._list[i].action !== null && typeof this._list[i].action === 'function') {
        return this._list[i].action(paramObj);
      }
    }
    return false;
  },

  // ** {{{ execute(/*Object*/ or /*Array*/ jsonArray, /*String*/ threadId) }}} **
  // It executes a sequence of functions determined by the "jsonArray"
  // "jsonArray" could be a standalone object or an array of objects.
  // The object should have this structure
  //   { functionName : { attributeA: valueA, attributeB: valueB, .. } }
  // And for each object something like that will be executed sequentially:
  //   this.execute(functionName, { attributeA: valueA, attributeB: valueB, .. })
  // Parameters:
  // * {{{jsonArray}}}: object or array of objects to the passed
  // * {{{threadId}}}: the Id of the execution thread. If empty, a random one will be generated
  // * {{{delay}}}: delay in ms to start the action execution
  // * {{{processView}}}: view of the process that invoked the execution
  executeJSON: function (jsonArray, threadId, delay, processView) {
    var length = jsonArray.length,
        i, object, member, paramObj;

    if (delay && Object.prototype.toString.apply(delay) === '[object Number]') {
      setTimeout(function () {
        OB.Utilities.Action.executeJSON(jsonArray, threadId, null, processView);
      }, delay);
      return true;
    }
    if (Object.prototype.toString.apply(jsonArray) === '[object Object]') {
      jsonArray = [jsonArray];
    }
    if (Object.prototype.toString.apply(jsonArray) !== '[object Array]') {
      return false;
    }
    if (this.isThreadCancelled(threadId)) {
      return false;
    } else if (!threadId) {
      threadId = OB.Utilities.generateRandomString(8, true, true, true, false);
    } else if (this.isThreadPaused(threadId)) {
      this.executeJSON(jsonArray, threadId, 100, processView); //Call this action again with a 100ms delay
      return true;
    }

    object = jsonArray[0];
    if (Object.prototype.toString.apply(object) === '[object Object]') {
      for (member in object) {
        if (object.hasOwnProperty(member)) {
          if (Object.prototype.toString.apply(object[member]) === '[object Object]') {
            object[member].threadId = threadId;
            paramObj = object[member];
            if (paramObj) {
              paramObj._processView = processView;
            }
            this.execute(member, paramObj);
          }
        }
      }
    }
    if (length > 1) {
      jsonArray.splice(0, 1);
      return this.executeJSON(jsonArray, threadId, null, processView);
    } else {
      return true;
    }
  }
};
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2012 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */

// ** {{{ custom }}} **
// It executes a custom action. Only for testing purposes.
// Parameters:
// * {{{func}}}: The function to be executed. It can be defined in several ways. Examples:
//    OB.Utilities.Action.execute('custom', { func: "alert('Test')" });
//    OB.Utilities.Action.execute('custom', { func: "(function (){alert('Test')})()" });
//    OB.Utilities.Action.execute('custom', { func: function() { alert('Test'); }});
//    OB.Utilities.Action.execute('custom', { func: function(paramObj) { alert(paramObj.text) }, text: 'Test' });
//    OB.Utilities.Action.executeJSON( { custom: { func: function(paramObj) { alert(paramObj.text) }, text: 'Test' } });
OB.Utilities.Action.set('custom', function (paramObj) {
  if (Object.prototype.toString.apply(paramObj.func) === '[object Function]') {
    paramObj.func(paramObj);
  } else if (Object.prototype.toString.apply(paramObj.func) === '[object String]') {
    var execFunction = new Function(paramObj.func);
    execFunction();
  }
});

// ** {{{ showMsgInView }}} **
// It shows a message in the current active view. In the end, it calls to messageBar.setMessage of the current active view
// Parameters:
// * {{{msgType}}}: The message type. It can be 'success', 'error', 'info' or 'warning'
// * {{{msgTitle}}}: The title of the message.
// * {{{msgText}}}: The text of the message.
OB.Utilities.Action.set('showMsgInView', function (paramObj) {
  var view = OB.MainView.TabSet.getSelectedTab().pane.activeView;
  if (view && view.messageBar) {
    view.messageBar.setMessage(paramObj.msgType, paramObj.msgTitle, paramObj.msgText);
  }
});

//** {{{ showMsgInProcessView }}} **
// It shows a message in the view that invoked the process.
//Parameters:
//* {{{msgType}}}: The message type. It can be 'success', 'error', 'info' or 'warning'
//* {{{msgTitle}}}: The title of the message.
//* {{{msgText}}}: The text of the message.
OB.Utilities.Action.set('showMsgInProcessView', function (paramObj) {
  var processView = paramObj._processView;
  if (processView.popup && processView.buttonOwnerView && processView.buttonOwnerView.messageBar) {
    processView.buttonOwnerView.messageBar.setMessage(paramObj.msgType, paramObj.msgTitle, paramObj.msgText);
  } else if (processView.messageBar) {
    processView.messageBar.setMessage(paramObj.msgType, paramObj.msgTitle, paramObj.msgText);
  }
});

// ** {{{ openDirectTab }}} **
// Open a view using a tab id and record id. The tab can be a child tab. If the record id
// is not set then the tab is opened in grid mode. If command is not set then default is
// used. In the end, it calls to OB.Utilities.openDirectTab
// Parameters:
// * {{{tabId}}}: The tab id of the view to be opened
// * {{{recordId}}}: The record id of the view to be opened
// * {{{command}}}: The command with which the view to be opened
// * {{{wait}}}: If true, the thread in which this action was called (if there is any) will be paused until the view be opened.
OB.Utilities.Action.set('openDirectTab', function (paramObj) {
  var processIndex;
  if (!paramObj.newTabPosition) {
    processIndex = OB.Utilities.getProcessTabBarPosition(paramObj._processView);
    if (processIndex === -1) {
      // If the process is not found in the main tab bar, add the new window in the last position
      paramObj.newTabPosition = OB.MainView.TabSet.paneContainer.members.length;
    } else {
      // If the process is foudn in the main tab bar, add the new window in its next position
      paramObj.newTabPosition = processIndex + 1;
    }
  }
  if (!paramObj.isOpening) {
    OB.Utilities.openDirectTab(paramObj.tabId, paramObj.recordId, paramObj.command, paramObj.newTabPosition, paramObj.criteria);
  }
  if ((paramObj.wait === true || paramObj.wait === 'true') && paramObj.threadId) {
    if (!OB.MainView.TabSet.getTabObject(paramObj.newTabPosition) || OB.MainView.TabSet.getTabObject(paramObj.newTabPosition).pane.isLoadingTab === true) {
      OB.Utilities.Action.pauseThread(paramObj.threadId);
      paramObj.isOpening = true;
      OB.Utilities.Action.execute('openDirectTab', paramObj, 100); //Call this action again with a 100ms delay
    } else {
      OB.Utilities.Action.resumeThread(paramObj.threadId, 1500); //Call this action again with a 1000ms delay
    }
  }
});
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2009-2013 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */

OB = window.OB || {};
OB.Utilities = window.OB.Utilities || {};

// = Openbravo Date Utilities =
// Defines utility methods related to handling date, incl. formatting.
OB.Utilities.Date = {};
// ** {{{ OB.Utilities.Date.centuryReference }}} **
// For a two-digit year display format, it establishes where is the frontier
// between the 20th and the 21st century
// The range is taken between 1900+centuryReference and 2100-centuryReference-1
OB.Utilities.Date.centuryReference = 50; // Notice that change this value
// implies that also the QUnit test
// case should be changed
// ** {{{ OB.Utilities.Date.normalizeDisplayFormat }}} **
// Repairs the displayFormat definition (passed in as a parameter) to a value
// expected by the rest of the system. For example mm is replaced by MM,
// dd is replacecd by DD, YYYY to %Y.
//
// Parameters:
// * {{{displayFormat}}}: the string displayFormat definition to repair.
OB.Utilities.Date.normalizeDisplayFormat = function (displayFormat) {
  var newFormat = '';
  displayFormat = displayFormat.replace('mm', 'MM').replace('dd', 'DD').replace('yyyy', 'YYYY').replace('yy', 'YY');
  displayFormat = displayFormat.replace('%D', '%d').replace('%M', '%m');
  if (displayFormat !== null && displayFormat !== '') {
    newFormat = displayFormat;
    newFormat = newFormat.replace('YYYY', '%Y');
    newFormat = newFormat.replace('YY', '%y');
    newFormat = newFormat.replace('MM', '%m');
    newFormat = newFormat.replace('DD', '%d');
    newFormat = newFormat.substring(0, 8);
  }
  displayFormat = displayFormat.replace('hh', 'HH').replace('HH24', 'HH').replace('mi', 'MI').replace('ss', 'SS');
  displayFormat = displayFormat.replace('%H', 'HH').replace('HH:%m', 'HH:MI').replace('HH.%m', 'HH.MI').replace('%S', 'SS');
  displayFormat = displayFormat.replace('HH:mm', 'HH:MI').replace('HH.mm', 'HH.MI');
  displayFormat = displayFormat.replace('HH:MM', 'HH:MI').replace('HH.MM', 'HH.MI');
  if (displayFormat.indexOf(' HH:MI:SS') !== -1) {
    newFormat += ' %H:%M:%S';
  } else if (displayFormat.indexOf(' HH:MI') !== -1) {
    newFormat += ' %H:%M';
  } else if (displayFormat.indexOf(' HH.MI.SS') !== -1) {
    newFormat += ' %H.%M.%S';
  } else if (displayFormat.indexOf(' HH.MI') !== -1) {
    newFormat += ' %H.%M';
  }
  return newFormat;
};

// ** {{{ OB.Utilities.Date.OBToJS }}} **
//
// Converts a String to a Date object.
//
// Parameters:
// * {{{OBDate}}}: the date string to convert
// * {{{dateFormat}}}: the dateFormat pattern to use
// Return:
// * a Date object or null if conversion was not possible.
OB.Utilities.Date.OBToJS = function (OBDate, dateFormat) {
  if (!OBDate) {
    return null;
  }

  // if already a date then return true
  var isADate = Object.prototype.toString.call(OBDate) === '[object Date]';
  if (isADate) {
    return OBDate;
  }

  dateFormat = OB.Utilities.Date.normalizeDisplayFormat(dateFormat);
  var dateSeparator = dateFormat.substring(2, 3);
  var timeSeparator = dateFormat.substring(11, 12);
  var isFullYear = (dateFormat.indexOf('%Y') !== -1);

  if ((isFullYear ? OBDate.length - 2 : OBDate.length) !== dateFormat.length) {
    return null;
  }
  if (isFullYear) {
    dateFormat = dateFormat.replace('%Y', '%YYY');
  }

  if (dateFormat.indexOf('-') !== -1 && OBDate.indexOf('-') === -1) {
    return null;
  } else if (dateFormat.indexOf('/') !== -1 && OBDate.indexOf('/') === -1) {
    return null;
  } else if (dateFormat.indexOf(':') !== -1 && OBDate.indexOf(':') === -1) {
    return null;
  } else if (dateFormat.indexOf('.') !== -1 && OBDate.indexOf('.') === -1) {
    return null;
  }

  var year = dateFormat.indexOf('%y') !== -1 ? OBDate.substring(dateFormat.indexOf('%y'), dateFormat.indexOf('%y') + 2) : 0;
  var fullYear = dateFormat.indexOf('%Y') !== -1 ? OBDate.substring(dateFormat.indexOf('%Y'), dateFormat.indexOf('%Y') + 4) : 0;
  var month = dateFormat.indexOf('%m') !== -1 ? OBDate.substring(dateFormat.indexOf('%m'), dateFormat.indexOf('%m') + 2) : 0;
  var day = dateFormat.indexOf('%d') !== -1 ? OBDate.substring(dateFormat.indexOf('%d'), dateFormat.indexOf('%d') + 2) : 0;
  var hours = dateFormat.indexOf('%H') !== -1 ? OBDate.substring(dateFormat.indexOf('%H'), dateFormat.indexOf('%H') + 2) : 0;
  var minutes = dateFormat.indexOf('%M') !== -1 ? OBDate.substring(dateFormat.indexOf('%M'), dateFormat.indexOf('%M') + 2) : 0;
  var seconds = dateFormat.indexOf('%S') !== -1 ? OBDate.substring(dateFormat.indexOf('%S'), dateFormat.indexOf('%S') + 2) : 0;

  // Check that really all date parts (if they are present) are numbers
  var digitRegExp = ['^\\d+$', 'gm'];
  if ((year && !(new RegExp(digitRegExp[0], digitRegExp[1]).test(year))) || (fullYear && !(new RegExp(digitRegExp[0], digitRegExp[1]).test(fullYear))) || (month && !(new RegExp(digitRegExp[0], digitRegExp[1]).test(month))) || (day && !(new RegExp(digitRegExp[0], digitRegExp[1]).test(day))) || (hours && !(new RegExp(digitRegExp[0], digitRegExp[1]).test(hours))) || (minutes && !(new RegExp(digitRegExp[0], digitRegExp[1]).test(minutes))) || (seconds && !(new RegExp(digitRegExp[0], digitRegExp[1]).test(seconds)))) {
    return null;
  }

  month = parseInt(month, 10);
  day = parseInt(day, 10);
  hours = parseInt(hours, 10);
  minutes = parseInt(minutes, 10);
  seconds = parseInt(seconds, 10);

  if (day < 1 || day > 31 || month < 1 || month > 12 || year > 99 || fullYear > 9999) {
    return null;
  }

  if (hours > 23 || minutes > 59 || seconds > 59) {
    return null;
  }

  // alert('year: ' + year + '\n' + 'fullYear: ' + fullYear + '\n' + 'month: ' +
  // month + '\n' + 'day: ' + day + '\n' + 'hours: ' + hours + '\n' + 'minutes:
  // ' + minutes + '\n' + 'seconds: ' + seconds);
  // var JSDate = isc.Date.create(); /**It doesn't work in IE**/
  var JSDate = new Date();
  var centuryReference = OB.Utilities.Date.centuryReference;
  if (!isFullYear) {
    if (parseInt(year, 10) < centuryReference) {
      fullYear = '20' + year;
    } else {
      fullYear = '19' + year;
    }
  }

  fullYear = parseInt(fullYear, 10);
  JSDate.setFullYear(fullYear, month - 1, day);

  //  https://issues.openbravo.com/view.php?id=22505
  if (day !== JSDate.getDate()) {
    return null;
  }

  JSDate.setHours(hours);
  JSDate.setMinutes(minutes);
  JSDate.setSeconds(seconds);
  JSDate.setMilliseconds(0);
  if (JSDate.toString() === 'Invalid Date' || JSDate.toString() === 'NaN') {
    return null;
  } else {
    return JSDate;
  }
};

// ** {{{ OB.Utilities.Date.JSToOB }}} **
//
// Converts a Date to a String
//
// Parameters:
// * {{{JSDate}}}: the javascript Date object
// * {{{dateFormat}}}: the dateFormat pattern to use
// Return:
// * a String or null if the JSDate is not a date.
OB.Utilities.Date.JSToOB = function (JSDate, dateFormat) {
  dateFormat = OB.Utilities.Date.normalizeDisplayFormat(dateFormat);

  var isADate = Object.prototype.toString.call(JSDate) === '[object Date]';
  if (!isADate) {
    return null;
  }

  var year = JSDate.getYear().toString();
  var fullYear = JSDate.getFullYear().toString();
  var month = (JSDate.getMonth() + 1).toString();
  var day = JSDate.getDate().toString();
  var hours = JSDate.getHours().toString();
  var minutes = JSDate.getMinutes().toString();
  var seconds = JSDate.getSeconds().toString();

  var centuryReference = OB.Utilities.Date.centuryReference;
  if (dateFormat.indexOf('%y') !== -1) {
    if (parseInt(fullYear, 10) >= 1900 + centuryReference && parseInt(fullYear, 10) < 2100 - centuryReference) {
      if (parseInt(year, 10) >= 100) {
        year = parseInt(year, 10) - 100;
        year = year.toString();
      }
    } else {
      return null;
    }
  }

  while (year.length < 2) {
    year = '0' + year;
  }
  while (fullYear.length < 4) {
    fullYear = '0' + fullYear;
  }
  while (month.length < 2) {
    month = '0' + month;
  }
  while (day.length < 2) {
    day = '0' + day;
  }
  while (hours.length < 2) {
    hours = '0' + hours;
  }
  while (minutes.length < 2) {
    minutes = '0' + minutes;
  }
  while (seconds.length < 2) {
    seconds = '0' + seconds;
  }
  var OBDate = dateFormat;
  OBDate = OBDate.replace('%y', year);
  OBDate = OBDate.replace('%Y', fullYear);
  OBDate = OBDate.replace('%m', month);
  OBDate = OBDate.replace('%d', day);
  OBDate = OBDate.replace('%H', hours);
  OBDate = OBDate.replace('%M', minutes);
  OBDate = OBDate.replace('%S', seconds);

  return OBDate;
};

//** {{{ OB.Utilities.Date.getTimeFields }}} **
//
// Returns an array with the names of the time fields.
//
// Parameters:
// * {{{allFields}}}: complete list of fields
// Return:
// * an array with the names of the time fields contained in allFields.
OB.Utilities.Date.getTimeFields = function (allFields) {
  var i, field, timeFields = [],
      length = allFields.length;
  for (i = 0; i < length; i++) {
    field = allFields[i];
    if (field.type === '_id_24') {
      timeFields.push(field);
    }
  }
  return timeFields;
};

//** {{{ OB.Utilities.Date.convertUTCTimeToLocalTime }}} **
//
// Converts the value of time fields from UTC to local time
//
// Parameters:
// * {{{newData}}}: records to be converted
// * {{{allFields}}}: array with the fields of the records
// Return:
// * Nothing. newData, after converting its time fields from UTC timezone the the client side timezone
OB.Utilities.Date.convertUTCTimeToLocalTime = function (newData, allFields) {
  var textField, fieldToDate, i, j, UTCOffsetInMiliseconds = OB.Utilities.Date.getUTCOffsetInMiliseconds(),
      timeFields = OB.Utilities.Date.getTimeFields(allFields),
      timeFieldsLength = timeFields.length,
      convertedData = isc.clone(newData),
      convertedDataLength = convertedData.length;
  for (i = 0; i < timeFieldsLength; i++) {
    for (j = 0; j < convertedDataLength; j++) {
      textField = convertedData[j][timeFields[i].name];
      if (!textField) {
        continue;
      }
      if (isc.isA.String(textField)) {
        fieldToDate = isc.Time.parseInput(textField);
      } else if (isc.isA.Date(textField)) {
        fieldToDate = textField;
      }
      fieldToDate.setTime(fieldToDate.getTime() + UTCOffsetInMiliseconds);
      convertedData[j][timeFields[i].name] = fieldToDate.getHours() + ':' + fieldToDate.getMinutes() + ':' + fieldToDate.getSeconds();
    }
  }
  return convertedData;
};

//** {{{ OB.Utilities.Date.getUTCOffsetInMiliseconds }}} **
//
// Return the offset with UTC measured in miliseconds
OB.Utilities.Date.getUTCOffsetInMiliseconds = function () {
  var UTCHourOffset = isc.Time.getUTCHoursDisplayOffset(new Date()),
      UTCMinuteOffset = isc.Time.getUTCMinutesDisplayOffset(new Date());
  return (UTCHourOffset * 60 * 60 * 1000) + (UTCMinuteOffset * 60 * 1000);
};

//** {{{ OB.Utilities.Date.roundToNextQuarter }}} **
//
// Round any date to the next quarter
OB.Utilities.Date.roundToNextQuarter = function (date) {
  var newDate = new Date(date),
      minutes = newDate.getMinutes(),
      timeBreak = 15;
  if (newDate.getMilliseconds() === 0 && newDate.getSeconds() === 0 && minutes % timeBreak === 0) {
    return newDate;
  }
  var roundedMinutes = (parseInt((minutes + timeBreak) / timeBreak, 10) * timeBreak) % 60;
  newDate.setMilliseconds(0);
  newDate.setSeconds(0);
  newDate.setMinutes(roundedMinutes);
  if (roundedMinutes === 0) {
    newDate.setHours(newDate.getHours() + 1);
  }
  return newDate;
};

//** {{{ OB.Utilities.Date.roundToNextHalfHour }}} **
//
// Round any date to the next half hour
OB.Utilities.Date.roundToNextHalfHour = function (date) {
  var newDate = new Date(date),
      minutes = newDate.getMinutes(),
      timeBreak = 30;
  if (newDate.getMilliseconds() === 0 && newDate.getSeconds() === 0 && minutes % timeBreak === 0) {
    return newDate;
  }
  var roundedMinutes = (parseInt((minutes + timeBreak) / timeBreak, 10) * timeBreak) % 60;
  newDate.setMilliseconds(0);
  newDate.setSeconds(0);
  newDate.setMinutes(roundedMinutes);
  if (roundedMinutes === 0) {
    newDate.setHours(newDate.getHours() + 1);
  }
  return newDate;
};
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2011-2012 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */

OB = window.OB || {};
OB.Utilities = window.OB.Utilities || {};

// = Openbravo Number Utilities =
// Defines utility methods related to handling numbers on the client, for 
// example formatting. 
OB.Utilities.Number = {};

// ** {{{ OB.Utilities.Number.roundJSNumber }}} **
//
// Function that rounds a JS number to a given decimal number
//
// Parameters:
// * {{{num}}}: the JS number
// * {{{dec}}}: the JS number of decimals
// Return:
// * The rounded JS number
OB.Utilities.Number.roundJSNumber = function (num, dec) {
  var result = Math.round(num * Math.pow(10, dec)) / Math.pow(10, dec);
  return result;
};

// ** {{{ OB.Utilities.Number.OBMaskedToOBPlain }}} **
//
// Function that returns a plain OB number just with the decimal Separator
//
// Parameters:
// * {{{number}}}: the formatted OB number
// * {{{decSeparator}}}: the decimal separator of the OB number
// * {{{groupSeparator}}}: the group separator of the OB number
// Return:
// * The plain OB number
OB.Utilities.Number.OBMaskedToOBPlain = function (number, decSeparator, groupSeparator) {
  number = number.toString();
  var plainNumber = number;

  // Remove group separators
  if (groupSeparator) {
    var groupRegExp = new RegExp('\\' + groupSeparator, 'g');
    plainNumber = plainNumber.replace(groupRegExp, '');
  }

  // Catch sign
  var numberSign = '';
  if (plainNumber.substring(0, 1) === '+') {
    numberSign = '';
    plainNumber = plainNumber.substring(1, number.length);
  } else if (plainNumber.substring(0, 1) === '-') {
    numberSign = '-';
    plainNumber = plainNumber.substring(1, number.length);
  }

  // Remove ending decimal '0'
  if (plainNumber.indexOf(decSeparator) !== -1) {
    while (plainNumber.substring(plainNumber.length - 1, plainNumber.length) === '0') {
      plainNumber = plainNumber.substring(0, plainNumber.length - 1);
    }
  }

  // Remove starting integer '0'
  while (plainNumber.substring(0, 1) === '0' && plainNumber.substring(1, 2) !== decSeparator && plainNumber.length > 1) {
    plainNumber = plainNumber.substring(1, plainNumber.length);
  }

  // Remove decimal separator if is the last character
  if (plainNumber.substring(plainNumber.length - 1, plainNumber.length) === decSeparator) {
    plainNumber = plainNumber.substring(0, plainNumber.length - 1);
  }

  // Re-set sign
  if (plainNumber !== '0') {
    plainNumber = numberSign + plainNumber;
  }

  // Return plain number
  return plainNumber;
};

// ** {{{ OB.Utilities.Number.OBPlainToOBMasked }}} **
//
// Function that transform a OB plain number into a OB formatted one (by
// applying a mask).
//
// Parameters:
// * {{{number}}}: The OB plain number
// * {{{maskNumeric}}}: The numeric mask of the OB number
// * {{{decSeparator}}}: The decimal separator of the OB number
// * {{{groupSeparator}}}: The group separator of the OB number
// * {{{groupInterval}}}: The group interval of the OB number
// Return:
// * The OB formatted number.
OB.Utilities.Number.OBPlainToOBMasked = function (number, maskNumeric, decSeparator, groupSeparator, groupInterval) {
  if (number === '' || number === null || number === undefined) {
    return number;
  }

  // Management of the mask
  if (maskNumeric.indexOf('+') === 0 || maskNumeric.indexOf('-') === 0) {
    maskNumeric = maskNumeric.substring(1, maskNumeric.length);
  }
  if (groupSeparator && maskNumeric.indexOf(groupSeparator) !== -1 && maskNumeric.indexOf(decSeparator) !== -1 && maskNumeric.indexOf(groupSeparator) > maskNumeric.indexOf(decSeparator)) {
    var fixRegExp = new RegExp('\\' + groupSeparator, 'g');
    maskNumeric = maskNumeric.replace(fixRegExp, '');
  }
  var maskLength = maskNumeric.length;
  var decMaskPosition = maskNumeric.indexOf(decSeparator);
  if (decMaskPosition === -1) {
    decMaskPosition = maskLength;
  }
  var intMask = maskNumeric.substring(0, decMaskPosition);
  var decMask = maskNumeric.substring(decMaskPosition + 1, maskLength);

  if ((groupSeparator && decMask.indexOf(groupSeparator) !== -1) || decMask.indexOf(decSeparator) !== -1) {
    if (groupSeparator) {
      var fixRegExp_1 = new RegExp('\\' + groupSeparator, 'g');
      decMask = decMask.replace(fixRegExp_1, '');
    }
    var fixRegExp_2 = new RegExp('\\' + decSeparator, 'g');
    decMask = decMask.replace(fixRegExp_2, '');
  }

  // Management of the number
  number = number.toString();
  number = OB.Utilities.Number.OBMaskedToOBPlain(number, decSeparator, groupSeparator);
  var numberSign = '';
  if (number.substring(0, 1) === '+') {
    numberSign = '';
    number = number.substring(1, number.length);
  } else if (number.substring(0, 1) === '-') {
    numberSign = '-';
    number = number.substring(1, number.length);
  }

  // //Splitting the number
  var formattedNumber = '';
  var numberLength = number.length;
  var decPosition = number.indexOf(decSeparator);
  if (decPosition === -1) {
    decPosition = numberLength;
  }
  var intNumber = number.substring(0, decPosition);
  var decNumber = number.substring(decPosition + 1, numberLength);

  // //Management of the decimal part
  if (decNumber.length > decMask.length) {
    decNumber = '0.' + decNumber;
    decNumber = OB.Utilities.Number.roundJSNumber(decNumber, decMask.length);
    decNumber = decNumber.toString();
    if (decNumber.substring(0, 1) === '1') {
      intNumber = parseFloat(intNumber);
      intNumber = intNumber + 1;
      intNumber = intNumber.toString();
    }
    decNumber = decNumber.substring(2, decNumber.length);
  }

  if (decNumber.length < decMask.length) {
    var decNumber_temp = '',
        decMaskLength = decMask.length,
        i;
    for (i = 0; i < decMaskLength; i++) {
      if (decMask.substring(i, i + 1) === '#') {
        if (decNumber.substring(i, i + 1) !== '') {
          decNumber_temp = decNumber_temp + decNumber.substring(i, i + 1);
        }
      } else if (decMask.substring(i, i + 1) === '0') {
        if (decNumber.substring(i, i + 1) !== '') {
          decNumber_temp = decNumber_temp + decNumber.substring(i, i + 1);
        } else {
          decNumber_temp = decNumber_temp + '0';
        }
      }
    }
    decNumber = decNumber_temp;
  }

  // Management of the integer part
  var isGroup = false;

  if (groupSeparator) {
    if (intMask.indexOf(groupSeparator) !== -1) {
      isGroup = true;
    }

    var groupRegExp = new RegExp('\\' + groupSeparator, 'g');
    intMask = intMask.replace(groupRegExp, '');
  }

  var intNumber_temp;
  if (intNumber.length < intMask.length) {
    intNumber_temp = '';
    var diff = intMask.length - intNumber.length,
        j;
    for (j = intMask.length; j > 0; j--) {
      if (intMask.substring(j - 1, j) === '#') {
        if (intNumber.substring(j - 1 - diff, j - diff) !== '') {
          intNumber_temp = intNumber.substring(j - 1 - diff, j - diff) + intNumber_temp;
        }
      } else if (intMask.substring(j - 1, j) === '0') {
        if (intNumber.substring(j - 1 - diff, j - diff) !== '') {
          intNumber_temp = intNumber.substring(j - 1 - diff, j - diff) + intNumber_temp;
        } else {
          intNumber_temp = '0' + intNumber_temp;
        }
      }
    }
    intNumber = intNumber_temp;
  }

  if (isGroup === true) {
    intNumber_temp = '';
    var groupCounter = 0,
        k;
    for (k = intNumber.length; k > 0; k--) {
      intNumber_temp = intNumber.substring(k - 1, k) + intNumber_temp;
      groupCounter++;
      if (groupCounter.toString() === groupInterval.toString() && k !== 1) {
        groupCounter = 0;
        intNumber_temp = groupSeparator + intNumber_temp;
      }
    }
    intNumber = intNumber_temp;
  }

  // Building the final number
  if (intNumber === '' && decNumber !== '') {
    intNumber = '0';
  }

  formattedNumber = numberSign + intNumber;
  if (decNumber !== '') {
    formattedNumber += decSeparator + decNumber;
  }
  return formattedNumber;
};

// ** {{{ OB.Utilities.Number.OBMaskedToJS }}} **
//
// Function that returns a JS number just with the decimal separator which
// always is '.'. It is used for math operations
//
// Parameters:
// * {{{number}}}: The OB formatted (or plain) number
// * {{{decSeparator}}}: The decimal separator of the OB number
// * {{{groupSeparator}}}: The group separator of the OB number
// Return:
// * The JS number.
OB.Utilities.Number.OBMaskedToJS = function (numberStr, decSeparator, groupSeparator) {
  if (!numberStr || numberStr.trim() === '') {
    return null;
  }
  var calcNumber = OB.Utilities.Number.OBMaskedToOBPlain(numberStr, decSeparator, groupSeparator);
  calcNumber = calcNumber.replace(decSeparator, '.');
  var numberResult = parseFloat(calcNumber);
  if (isNaN(numberResult)) {
    return numberStr;
  }
  return numberResult;
};

// ** {{{ OB.Utilities.Number.JSToOBMasked }}} **
//
// Function that returns a OB formatted number given as input a JS number just
// with the decimal separator which always is '.'
//
// Parameters:
// * {{{number}}}: The JS number
// * {{{maskNumeric}}}: The numeric mask of the OB number
// * {{{decSeparator}}}: The decimal separator of the OB number
// * {{{groupSeparator}}}: The group separator of the OB number
// * {{{groupInterval}}}: The group interval of the OB number
// Return:
// * The OB formatted number.
OB.Utilities.Number.JSToOBMasked = function (number, maskNumeric, decSeparator, groupSeparator, groupInterval) {
  var isANumber = Object.prototype.toString.call(number) === '[object Number]';
  if (!isANumber) {
    return number;
  }
  var formattedNumber = number;
  formattedNumber = formattedNumber.toString();
  formattedNumber = formattedNumber.replace('.', decSeparator);
  formattedNumber = OB.Utilities.Number.OBPlainToOBMasked(formattedNumber, maskNumeric, decSeparator, groupSeparator, groupInterval);
  return formattedNumber;
};

OB.Utilities.Number.IsValidValueString = function (type, numberStr) {
  var maskNumeric = type.maskNumeric;
  // note 0 is also okay to return true
  if (!numberStr) {
    return true;
  }

  var bolNegative = true;
  if (maskNumeric.indexOf('+') === 0) {
    bolNegative = false;
    maskNumeric = maskNumeric.substring(1, maskNumeric.length);
  }

  var bolDecimal = true;
  if (maskNumeric.indexOf(type.decSeparator) === -1) {
    bolDecimal = false;
  }
  var checkPattern = '';
  checkPattern += '^';
  if (bolNegative) {
    checkPattern += '([+]|[-])?';
  }
  checkPattern += '(\\d+)?((\\' + type.groupSeparator + '\\d{' + OB.Format.defaultGroupingSize + '})?)+';
  if (bolDecimal) {
    checkPattern += '(\\' + type.decSeparator + '\\d+)?';
  }
  checkPattern += '$';
  var checkRegExp = new RegExp(checkPattern);
  if (numberStr.match(checkRegExp) && numberStr.substring(0, 1) !== type.groupSeparator) {
    return true;
  }
  return false;
};

OB.Utilities.Number.Grouping = {
  getGroupingModes: function () {
    return this.groupingModes;
  },
  groupingModes: {
    byDecimal10: OB.I18N.getLabel('OBUIAPP_GroupByDecimal10'),
    by1: OB.I18N.getLabel('OBUIAPP_GroupBy1'),
    by10: OB.I18N.getLabel('OBUIAPP_GroupBy10'),
    by100: OB.I18N.getLabel('OBUIAPP_GroupBy100'),
    by1000: OB.I18N.getLabel('OBUIAPP_GroupBy1000'),
    by10000: OB.I18N.getLabel('OBUIAPP_GroupBy10000'),
    by100000: OB.I18N.getLabel('OBUIAPP_GroupBy100000')
  },
  defaultGroupingMode: 'by10',
  //default grouping mode
  groupingMode: 'by10',
  getGroupingMultiplier: function (groupingMode) {
    switch (groupingMode) {
    case 'byDecimal10':
      return 0.1;
    case 'by1':
      return 1;
    case 'by10':
      return 10;
    case 'by100':
      return 100;
    case 'by1000':
      return 1000;
    case 'by10000':
      return 10000;
    case 'by100000':
      return 100000;
    }
    // default
    return 10;
  },
  getGroupValue: function (value, record, field, fieldName, grid) {
    var returnValue, groupingMode = (field.groupingMode || OB.Utilities.Number.Grouping.defaultGroupingMode),
        multiplier = this.getGroupingMultiplier(groupingMode);

    if (!isc.isA.Number(value) || !groupingMode) {
      return value;
    }
    returnValue = value / multiplier;
    // round down
    returnValue = Math.round(returnValue - 0.49);
    returnValue = returnValue * multiplier;
    return returnValue;
  },
  getGroupTitle: function (value, record, field, fieldName, grid) {
    var groupValue = this.getGroupValue(value, record, field, fieldName, grid),
        groupingMode = (field.groupingMode || OB.Utilities.Number.Grouping.defaultGroupingMode),
        multiplier = this.getGroupingMultiplier(groupingMode);
    return groupValue + ' - ' + (groupValue + multiplier);
  }
};
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2012 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */

OB = window.OB || {};
OB.Utilities = window.OB.Utilities || {};

// = Openbravo Style Utilities =
// Defines utility methods related to Styles.
OB.Utilities.Style = {};


// ** {{{ OB.Utilities.Style.getSheet }}} **
//
// Gets a CSS spreadsheet
//
// Parameters:
// * {{{position}}}: {Integer} position
// Return:
// * The CSS spreadsheet
OB.Utilities.Style.getSheet = function (position, type) {
  var stylesheet, i;
  if (position) {
    stylesheet = document.styleSheets[position];
  } else {
    if (!type) {
      for (i = 0; i < document.styleSheets.length; i++) {
        if (document.styleSheets[i].href) {
          stylesheet = document.styleSheets[i];
        }
      }
    } else if (type) {
      for (i = 0; i < document.styleSheets.length; i++) {
        if (document.styleSheets[i].href && document.styleSheets[i].href.indexOf(type) === -1) {
          stylesheet = document.styleSheets[i];
        }
      }
    }
  }
  return stylesheet;
};
// ** {{{ OB.Utilities.Style.addRule }}} **
//
// Adds a style definition to the CSS in last position
//
// Parameters:
// * {{{selector}}}: {String} the selector name to be added
// * {{{declaration}}}: {String} the properties of this selector
OB.Utilities.Style.addRule = function (selector, declaration) {
  var stylesheet = OB.Utilities.Style.getSheet();
  if (typeof stylesheet === 'object') {
    if (navigator.userAgent.toUpperCase().indexOf('MSIE') !== -1) {
      stylesheet.addRule(selector, declaration);
    } else {
      stylesheet.insertRule(selector + ' { ' + declaration + ' }', stylesheet.cssRules.length);
    }
  }
};

// ** {{{ OB.Utilities.Style.removeRule }}} **
//
// Removes a style definition at given position
//
// Parameters:
// * {{{selectorIndex}}}: {Integer} the position of the selector to remove
OB.Utilities.Style.removeRule = function (selectorIndex) {
  var stylesheet = OB.Utilities.Style.getSheet();

  if (typeof stylesheet === 'object') {
    if (navigator.userAgent.toUpperCase().indexOf('MSIE') !== -1) {
      stylesheet.removeRule(selectorIndex);
    } else {
      stylesheet.deleteRule(selectorIndex);
    }
  }
};

// ** {{{ OB.Utilities.Style.getRulePosition }}} **
//
// Removes a style definition at given position
//
// Parameters:
// * {{{selector}}}: {String} the name of the selector to obtain position
// Return:
// * The selector position
OB.Utilities.Style.getRulePosition = function (selector) {
  var stylesheet = OB.Utilities.Style.getSheet(),
      position = [],
      i;

  if (typeof stylesheet === 'object') {
    if (navigator.userAgent.toUpperCase().indexOf('MSIE') !== -1) {
      for (i = 0; i < stylesheet.rules.length; i++) {
        if (stylesheet.rules[i].selectorText.toLowerCase() === selector.toLowerCase()) {
          position.push(i);
        }
      }
    } else {
      for (i = 0; i < stylesheet.cssRules.length; i++) {
        if (typeof stylesheet.cssRules[i].selectorText !== 'undefined' && stylesheet.cssRules[i].selectorText.toLowerCase() === selector.toLowerCase()) {
          position.push(i);
        }
      }
    }
  }
  return position;
};
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2010-2013 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */

isc.ClassFactory.defineClass('OBPopup', isc.Window);

// = OBPopup =
//
// The OBPopup is the Openbravo popup implementator.
//
isc.OBPopup.addProperties({
  title: '',
  autoSize: true,
  autoCenter: true,
  canDragReposition: true,
  canDragResize: true,
  keepInParentRect: true,
  showFooter: false,
  isModal: true,
  showModalMask: true,
  dismissOnEscape: true,
  animateMinimize: false,
  showHeader: true,
  showHeaderIcon: true,
  showMinimizeButton: true,
  showMaximizeButton: true,
  showCloseButton: true,
  autoDraw: false,
  dragAppearance: 'target',
  closeClick: function () {
    this.Super('closeClick', arguments);
    if (this.destroyOnClose !== false) {
      this.Super('destroy', arguments);
    }
  }
});

isc.OBPopup.changeDefaults('headerLabelDefaults', {
  wrap: false,
  width: '100%',
  inherentWidth: true
});

isc.OBPopup.changeDefaults('restoreButtonDefaults', {
  showRollOver: true,
  showDisabled: true,
  showFocused: true,
  showDown: true,
  showFocusedAsOver: false
});

isc.OBPopup.changeDefaults('closeButtonDefaults', {
  showRollOver: true,
  showDisabled: true,
  showFocused: true,
  showDown: true,
  showFocusedAsOver: false
});

isc.OBPopup.changeDefaults('maximizeButtonDefaults', {
  showRollOver: true,
  showDisabled: true,
  showFocused: true,
  showDown: true,
  showFocusedAsOver: false
});

isc.OBPopup.changeDefaults('minimizeButtonDefaults', {
  showRollOver: true,
  showDisabled: true,
  showFocused: true,
  showDown: true,
  showFocusedAsOver: false
});

isc.OBPopup.changeDefaults('toolbarDefaults', {
  buttonConstructor: 'IButton'
});

isc.ClassFactory.defineClass('OBPopupHTMLFlow', isc.HTMLFlow);

// = OBPopupHTMLFlow =
//
// The OBPopupHTMLFlow is the iframe container to open classic OB popups with
// the new implementation
//
isc.OBPopupHTMLFlow.addProperties({
  showEdges: false,
  width: '100%',
  height: '100%',
  contentsType: 'page'
});
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use. this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2011-2012 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */

// == OBFormButton ==
// The default form button.
isc.ClassFactory.defineClass('OBFormButton', isc.Button);

isc.OBFormButton.addProperties({
  autoFit: true,
  baseStyle: 'OBFormButton',
  titleStyle: 'OBFormButtonTitle'
});


// == OBFocusButton ==
// Invisible button. It changes the focus location when it gets the focus.
isc.ClassFactory.defineClass('OBFocusButton', isc.Button);

isc.OBFocusButton.addProperties({
  title: '',
  width: 1,
  height: 1,
  border: '0px solid',
  getFocusTarget: null,
  focusChanged: function (hasFocus) {
    if (hasFocus && typeof this.getFocusTarget === 'function' && typeof this.getFocusTarget().focus === 'function') {
      this.getFocusTarget().focus();
    }
  }
});
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use. this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2011-2013 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */

// == OBClientClassCanvasItem ==
// Extends CanvasItem, support usage of Canvas in a grid/form editor
// and in the grid itself
isc.ClassFactory.defineClass('OBClientClassCanvasItem', isc.CanvasItem);

isc.OBClientClassCanvasItem.addProperties({
  autoDestroy: true,

  // if the canvas is used somewhere else (in the statusbar) then
  // don't do placeCanvas.
  placeCanvas: function () {
    if (this.canvas && !this.canvas.inStatusBar) {
      this.Super('placeCanvas', arguments);
    }
  },

  showValue: function (displayValue, dataValue, form, item) {
    if (this.canvas && this.canvas.showValue) {
      this.canvas.showValue(displayValue, dataValue, form, item);
    }
  },

  createCanvas: function () {
    var canvas, clientClassArray, clientClass, clientClassProps;

    clientClassArray = OB.Utilities.clientClassSplitProps(this.clientClass);
    clientClass = clientClassArray[0];
    clientClassProps = clientClassArray[1];

    canvas = isc.ClassFactory.newInstance(clientClass, {
      canvasItem: this
    }, clientClassProps);

    if (!canvas) {
      return isc.Label.create({
        contents: 'Invalid Type ' + clientClass,
        width: 1,
        height: 1,
        overflow: 'visible',
        autoDraw: false
      });
    }

    if (canvas.noTitle) {
      this.showTitle = false;
    }

    if (this.form.itemChanged && canvas.onItemChanged) {
      canvas.observe(this.form, 'itemChanged', 'observer.onItemChanged(observed)');
    }

    return canvas;
  },

  destroy: function () {
    if (this.canvas && this.form) {
      this.canvas.ignore(this.form, 'itemChanged');
    }
    return this.Super('destroy', arguments);
  },

  redrawing: function () {
    if (this.canvas.redrawingItem) {
      this.canvas.redrawingItem();
    }
    this.Super('redrawing', arguments);
  }
});

// == OBGridFormLabel ==
// Base component to add label fields in the grid. For styling purposes.
isc.defineClass('OBGridFormLabel', isc.Label);

isc.defineClass('OBTruncAddMinusDisplay', isc.OBGridFormLabel);

isc.OBTruncAddMinusDisplay.addProperties({
  height: 1,
  width: 1,
  overflow: 'visible',

  setRecord: function (record) {
    var val = record[this.field.name];
    if (this.field && this.field.type && isc.SimpleType.getType(this.field.type).normalDisplayFormatter) {
      this.showValue(isc.SimpleType.getType(this.field.type).normalDisplayFormatter(val), val);
    } else {
      this.showValue(String(record[this.field.name]));
    }
  },

  showValue: function (displayValue, dataValue, form, item) {
    if (!dataValue || displayValue === '0') {
      this.setContents(displayValue);
    } else if (!displayValue) {
      this.setContents('');
    } else if (displayValue.startsWith('-')) {
      this.setContents(displayValue.substring(1));
    } else {
      this.setContents('-' + displayValue);
    }
  }
});

isc.defineClass('OBAddPercentageSign', isc.OBGridFormLabel);

isc.OBAddPercentageSign.addProperties({
  height: 1,
  width: 1,
  overflow: 'visible',

  setRecord: function (record) {
    var val = record[this.field.name];
    if (this.field && this.field.type && isc.SimpleType.getType(this.field.type).normalDisplayFormatter) {
      this.showValue(isc.SimpleType.getType(this.field.type).normalDisplayFormatter(val), val);
    } else {
      this.showValue(String(record[this.field.name]));
    }
  },

  showValue: function (displayValue, dataValue, form, item) {
    if (!displayValue) {
      this.setContents('0 %');
    } else {
      this.setContents(displayValue + ' %');
    }
    if (this.grid && this.grid.body) {
      this.grid.body.markForRedraw();
    }
  }
});
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use. this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2011-2012 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */

// == OBCheckboxItem ==
// Item used for Openbravo yes/no fields.
isc.ClassFactory.defineClass('OBCheckboxItem', isc.CheckboxItem);

isc.OBCheckboxItem.addProperties({
  operator: 'equals',
  changed: function (form, item, value) {
    this.Super('changed', arguments);
    //A change on a checkbox item should be handled  on the changed event, not on blur 
    if (this._hasChanged && this.form && this.form.handleItemChange) {
      this.form.handleItemChange(this);
    }
  }
});
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use. this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2011-2012 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */

// == OBDateChooser ==
// OBDateChooser inherits from SmartClient DateChooser
// extends standard DateChooser implementation to be used in OBDateItem
isc.ClassFactory.defineClass('OBDateChooser', isc.DateChooser);

isc.OBDateChooser.addProperties({
  firstDayOfWeek: 1,
  autoHide: true,
  showCancelButton: true,
  todayButtonTitle: OB.I18N.getLabel('OBUISC_DateChooser.todayButtonTitle'),
  cancelButtonTitle: OB.I18N.getLabel('OBUISC_DateChooser.cancelButtonTitle'),

  initWidget: function () {
    this.Super('initWidget', arguments);

    // Force associated date text box to have the same enable status as the picker has
    if (this.callingFormItem) {
      this.callingFormItem.disabled = this.disabled;
    }
  }
});

if (isc.OBDateChooser) { // To force SC to load OBDateChooser instead of DateChooser
  isc.DateChooser.getSharedDateChooser = function (properties) {
    return isc.OBDateChooser.create(properties);
  };
}
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use. this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2011-2013 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */

// == OBDateItem ==
// OBDateItem inherits from SmartClient DateItem
// adds autocomplete and formatting based on the Openbravo date pattern
isc.ClassFactory.defineClass('OBDateItem', isc.DateItem);

// done like this because the props are re-used in the minidaterange
OB.DateItemProperties = {
  operator: 'equals',
  // ** {{{ pickerConstructor }}} **
  // Picker constructor class
  pickerConstructor: 'OBDateChooser',
  useSharedPicker: true,

  // ** {{{ useTextField }}} **
  // use text field for date entry
  useTextField: true,

  // ** {{{ changeOnKeypress }}} **
  // Fire change event on key press.
  changeOnKeypress: false,

  // is done by the blur event defined here
  validateOnExit: false,
  validateOnChange: false,
  stopOnError: false,

  setDateParams: function () {
    var i, dateFormatUpper, index = 0,
        length, currentTime;

    this.dateFormat = OB.Format.date;
    this.dateParts = [];

    dateFormatUpper = this.dateFormat.toUpperCase();
    length = dateFormatUpper.length;
    this.dateSeparator = this.dateFormat.toUpperCase().replace(/D/g, '').replace(/M/g, '').replace(/Y/g, '').substr(0, 1);

    for (i = 0; i < length; i++) {
      if (this.isSeparator(dateFormatUpper, i)) {
        index++;
      } else {
        this.dateParts[index] = dateFormatUpper.charAt(i);
      }
    }
    currentTime = new Date();
    this.currentMonth = String(currentTime.getMonth() + 1);
    if (this.currentMonth.length === 1) {
      this.currentMonth = '0' + this.currentMonth;
    }
    this.currentDay = String(currentTime.getDate());
    if (this.currentDay.length === 1) {
      this.currentDay = '0' + this.currentDay;
    }
    this.currentYear = String(currentTime.getFullYear());
  },

  doInit: function () {
    this.setDateParams();

    this.Super('init', arguments);

    if (this.textField) {
      if (this.length) {
        this.textField.length = this.length;
      }
      this.textField.changed = function () {
        // when the textfield of the date is updated, the date
        // field should be flagged as changed
        // see issue 20071 (https://issues.openbravo.com/view.php?id=20071)
        this._textChanged = true;
        this.parentItem._hasChanged = true;
        // There is a mechanism to prevent infinite looping in number fields 
        // (see issue https://issues.openbravo.com/view.php?id=17290) that
        // interferes with the correct behaviour of the date fields 
        // The infinite looping described in the issue does not apply to date fields, 
        // so it is safe to delete the saveFocusItemChanged flag when a date is modified
        if (this.parentItem.form && this.parentItem.form.view && this.parentItem.form.view.viewForm) {
          delete this.parentItem.form.view.viewForm.saveFocusItemChanged;
        }
      };
      // This is needed for the unit tests to be able to enter the dates using the setValue method
      this.dateTextField.setValue = function (newValue) {
        var oldValue = this.getValue();
        this.Super('setValue', newValue);
        // only flag the date as changed if it had a value, and it
        // has been actually changed
        if (!newValue || !oldValue || (oldValue === newValue)) {
          return;
        }
        this.parentItem.textField._textChanged = true;
        this.parentItem._hasChanged = true;
        if (this.parentItem.form && this.parentItem.form.view && this.parentItem.form.view.viewForm) {
          delete this.parentItem.form.view.viewForm.saveFocusItemChanged;
        }
      };
    }

    if (this.showDisabled === false) {
      this.textField.showDisabled = false;
    }
  },

  // compare while ignoring milli difference
  compareValues: function (value1, value2) {
    return (0 === isc.Date.compareLogicalDates(value1, value2));
  },

  parseValue: function () {
    var i, str = this.blurValue(),
        length, parts = ['', '', ''],
        partIndex = 0,
        result;

    if (!str || isc.isA.Date(str) || str.replace(/0/g, '') === '') {
      return str;
    }
    length = str.length;
    for (i = 0; i < length; i++) {
      if (this.isNumber(str, i)) {
        if (this.reachedLength(parts[partIndex], partIndex)) {
          partIndex++;
        }
        if (partIndex === 3) {
          break;
        }
        parts[partIndex] = parts[partIndex] + str.charAt(i);
      } else if (this.isSeparator(str, i)) {
        partIndex++;
      } else {
        // invalid date
        return str;
      }
      if (partIndex === 3) {
        break;
      }
    }

    if (partIndex === 0 && parts[partIndex] !== '') {
      // Only one or two digits have been entered, they represent the number of days
      if (this.dateParts[1] === 'D') {
        parts[1] = parts[0];
        parts[0] = '';
      } else if (this.dateParts[2] === 'D') {
        parts[2] = parts[0];
        parts[0] = '';
      }
    }

    for (i = 0; i < 3; i++) {
      if ((parts[i] === '0' || parts[i] === '00') && (this.dateParts[i] === 'D' || this.dateParts[i] === 'M')) {
        return str;
      } else {
        parts[i] = this.expandPart(parts[i], i);
      }
    }
    return parts[0] + this.dateSeparator + parts[1] + this.dateSeparator + parts[2];
  },

  expandPart: function (part, index) {
    var year;
    if (this.reachedLength(part, index)) {
      return part;
    }
    if (part === '') {
      if (this.dateParts[index] === 'D') {
        return this.currentDay;
      } else if (this.dateParts[index] === 'M') {
        return this.currentMonth;
      } else {
        return this.currentYear;
      }
    } else if (this.dateParts[index] === 'Y') {
      year = parseInt(part, 10);
      if (year <= 50) {
        return String(2000 + year);
      } else if (year < 100) {
        return String(1900 + year);
      } else {
        return '2' + part;
      }
    } else if (part.length === 1) {
      return '0' + part;
    }
    return part;
  },

  reachedLength: function (part, index) {
    var maxLength;
    if (this.dateParts[index] === 'D' || this.dateParts[index] === 'M') {
      maxLength = 2;
    } else {
      maxLength = 4;
    }
    return part.length >= maxLength;
  },

  isNumber: function (str, position) {
    return str.charAt(position) >= '0' && str.charAt(position) <= '9';
  },

  isSeparator: function (str, position) {
    return str.charAt(position) === '-' || str.charAt(position) === '\\' || str.charAt(position) === '/';
  },

  pickerDataChanged: function (picker) {
    this.isAPickerDataChange = true;
    this.Super('pickerDataChanged', arguments);
    this.isAPickerDataChange = false;
    // update the date field after picking a new date 
    this.textField._textChanged = true;
    this.updateValue();
    if (this.form.focusInNextItem) {
      if (this.form.handleItemChange) {
        this._hasChanged = true;
        this.form.handleItemChange(this);
      }

      this.form.focusInNextItem(this.name);
    }
  }
};

isc.OBDateItem.addProperties(OB.DateItemProperties, {
  validateOnExit: true,

  startDate: Date.createLogicalDate(1951, 0, 1),
  endDate: Date.createLogicalDate(2050, 11, 31),

  init: function () {
    // this call super.init
    this.doInit();
  },

  getDateWithNewTime: function (date, time) {
    var newDate, newTime, ret = date;
    if (time === '24:00:00') {
      time = '00:00:00';
    }
    if (time) {
      newTime = isc.Time.parseInput(time);
    }
    if (date && isc.isA.Date(date) && newTime && isc.isA.Date(newTime)) {
      date.setHours(newTime.getHours(), newTime.getMinutes(), newTime.getSeconds());
      ret = date;
    }
    return ret;
  },

  setValue: function (value) {
    var ret, dateText, newArguments = arguments;
    if (this.fixedTime && newArguments[0] && isc.isA.Date(newArguments[0])) {
      newArguments[0] = this.getDateWithNewTime(newArguments[0], this.fixedTime);
    }

    //Setting the value to the textual value in case text field is changed. Fixes Issue https://issues.openbravo.com/view.php?id=22381
    if (this.textField._textChanged && this.textField.getValue() && (this.textField.getValue() !== value)) {
      value = OB.Utilities.Date.OBToJS(this.textField.getValue(), (this.showTime ? OB.Format.dateTime : OB.Format.date));
    }

    ret = this.Super('setValue', newArguments);

    // If fixed time (if exists) is '24:00:00', here is the logic to show in the input the day before of the real value of the component.
    // This logic applies only in the case the time is not shown.
    if (!this.showTime && this.fixedTime && this.fixedTime === '24:00:00' && newArguments[0] && isc.isA.Date(newArguments[0])) {
      newArguments[0].setDate(newArguments[0].getDate() - 1);
      dateText = OB.Utilities.Date.JSToOB(newArguments[0], (this.showTime ? OB.Format.dateTime : OB.Format.date));
      newArguments[0].setDate(newArguments[0].getDate() + 1);
      this.dateTextField.setValue(dateText);
    }

    return ret;
  },

  expandValue: function () {
    var newValue = this.parseValue(),
        oldValue = this.blurValue();

    if (oldValue !== newValue) {
      this.dateTextField.setValue(newValue);
    }
  },

  // update the value in update value as this is called from cellEditEnd in the
  // grid, after losing the focus on the form and when autosaving
  updateValue: function () {
    var savingWithShortcut, value;
    if (this.grid && this.grid.view && this.grid.view.savingWithShortcut) {
      savingWithShortcut = this.grid.view.savingWithShortcut;
    } else {
      savingWithShortcut = false;
    }
    if (this.grid && this.grid._preventDateParsing && !this.grid._autoSaving && !savingWithShortcut && !this.grid._leavingCell) {
      return;
    }
    if (this.textField._textChanged) {
      this.expandValue();
      this.Super('updateValue', arguments);
      value = this.getValue();
      if (this.fixedTime && value && isc.isA.Date(value)) {
        if (this.fixedTime === '24:00:00' && (!this.showTime || !this.isAPickerDataChange)) {
          // If fixed time (if exists) is '24:00:00', we need to add a day to the entered date, since we really want the 00:00:00 of the next day
          // Later, the setValue function will manage the proper displayed value by substracting a day again
          value.setDate(value.getDate() + 1);
        }
        this.setValue(value); // To force change the time with the fixed time (if exists) after expandValue
      }
      //  when the date field has a callout and all the mandatory fields have been entered, 
      //  the grid does not save the value before making the FIC call, so the value has to 
      //  be saved explicitly
      //  See issue 19694 (https://issues.openbravo.com/view.php?id=19694)
      if (this.grid && this.grid.isEditing && this.grid.isEditing()) {
        this.grid.setEditValue(this.grid.getEditRow(), this.name, this.getValue(), true, true);
      }
      this.textField._textChanged = false;
    }
  },

  getPickerData: function () {
    var date = this.getValue();
    // If fixed time (if exists) is '24:00:00', we need to substract a day to the real date value,
    // to view in the date-picker the same date as in the input
    if (this.fixedTime === '24:00:00' && date !== null) {
      if (!isc.isA.Date(date)) {
        date = new Date(date);
      }
      if (isc.isA.Date(date) && !isNaN(date.getTime())) {
        date.setDate(date.getDate() - 1);
        return date;
      }
    } else {
      return this.Super('getPickerData', arguments);
    }
  },

  blur: function () {
    // force the update of the date when its field loses the focus
    // it has to be done before the call to the super because the
    // date should be updated before calling handleItemChange, 
    // which is called in the super blur  
    this.updateValue();
    this.Super('blur', arguments);
  },

  blurValue: function () {
    return this.dateTextField.getElementValue();
  },

  validateOBDateItem: function (value) {
    var dateValue = OB.Utilities.Date.OBToJS(value, this.dateFormat);
    var isValid = true;
    if (this.getValue() && dateValue === null) {
      isValid = false;
    }
    var isRequired = this.required;
    if (isValid === false) {
      return false;
    } else if (isRequired === true && value === null) {
      return false;
    }
    return true;
  },

  formSaved: function (request, response, data) {
    if (this.textField) {
      delete this.textField._textChanged;
    }
  },

  validators: [{
    type: 'custom',
    condition: function (item, validator, value) {
      return item.validateOBDateItem(value);
    }
  }]
});

OB.I18N.getLabel('OBUIAPP_InvalidValue', null, isc.OBDateItem, 'invalidValueLabel');
OB.I18N.getLabel('OBUISC_Validator.requiredField', null, isc.OBDateItem, 'requiredValueLabel');
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use. this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2011-2013 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */

// = OBDateTimeItem =
// Contains the widget for editing Date Time, it works differently than the OBDateItem
// in that it auto-completes while typing. A TODO: make this widget work the same as the 
// OBDateItem, autocomplete when blurring.
isc.ClassFactory.defineClass('OBDateTimeItem', isc.OBDateItem);

isc.OBDateTimeItem.addClassProperties({

  // ** {{{ autoCompleteData }}} **
  //
  // Autocomplets the date entered.
  // Parameters:
  // * {{{dateFormat}}}: the dateFormat in OB format
  // * {{{value}}}: the current entered value
  autoCompleteDate: function (dateFormat, value, item) {
    var fmt;

    // if (!isTabPressed) {
    if (value === null) {
      return value;
    }
    fmt = OB.Utilities.Date.normalizeDisplayFormat(dateFormat);
    try {
      if (item.getSelectionRange() && item.getSelectionRange()[0] !== value.length) {
        // If we are inserting in a position different from  the last one, we don't autocomplete
        return value;
      }
    } catch (ignored) {}
    var strDate = value;
    var b = fmt.match(/%./g);
    var i = 0,
        j = -1;
    var text = '';
    var length = 0;
    var pos = fmt.indexOf(b[0]) + b[0].length;
    var separator = fmt.substring(pos, pos + 1);
    var separatorH = '';
    pos = fmt.indexOf('%H');
    if (pos !== -1) {
      separatorH = fmt.substring(pos + 2, pos + 3);
    }
    while (strDate.charAt(i)) {
      if (strDate.charAt(i) === separator || strDate.charAt(i) === separatorH || strDate.charAt(i) === ' ') {
        i++;
        continue;
      }
      if (length <= 0) {
        j++;
        if (j > 0) {
          if (b[j] === '%H') {
            text += ' ';
          } else if (b[j] === '%M' || b[j] === '%S') {
            text += separatorH;
          } else {
            text += separator;
          }
        }
        switch (b[j]) {
        case '%d':
        case '%e':
          text += strDate.charAt(i);
          length = 2;
          break;
        case '%m':
          text += strDate.charAt(i);
          length = 2;
          break;
        case '%Y':
          text += strDate.charAt(i);
          length = 4;
          break;
        case '%y':
          text += strDate.charAt(i);
          length = 2;
          break;
        case '%H':
        case '%I':
        case '%k':
        case '%l':
          text += strDate.charAt(i);
          length = 2;
          break;
        case '%M':
          text += strDate.charAt(i);
          length = 2;
          break;
        case '%S':
          text += strDate.charAt(i);
          length = 2;
          break;
        }
      } else {
        text += strDate.charAt(i);
      }
      length--;
      i++;
    }
    return text;
    // IE doesn't detect the onchange event if text value is modified
    // programatically, so it's here called
    // if (i > 7 && (typeof (field.onchange)!='undefined'))
    // field.onchange();
    // }
  }
});

// == OBDateItem properties ==
isc.OBDateTimeItem.addProperties({
  showTime: true,
  fixedTime: null,

  blurValue: function () {
    if (this.showTime) {
      var value = OB.Utilities.Date.OBToJS(this.dateTextField.getElementValue(), OB.Format.dateTime);
      this.setValue(value);
      return value;
    } else {
      return this.Super('blurValue', arguments);
    }
  },

  parseValue: function () {
    if (this.showTime) {
      return this.dateTextField.getElementValue();
    } else {
      return this.Super('parseValue', arguments);
    }
  },

  // ** {{{ change }}} **
  // Called when changing a value.
  change: function (form, item, value, oldValue) { /* transformInput */
    var isADate = value !== null && Object.prototype.toString.call(value) === '[object Date]';
    if (isADate) {
      return;
    }
    // prevent change events from happening
    if (!this.fixedTime || !this.getValue()) {
      //FIXME: autoCompleteDate works wrong if partial time has been set
      var completedDate = isc.OBDateTimeItem.autoCompleteDate(item.dateFormat, value, this);
      if (completedDate !== oldValue) {
        item.setValue(completedDate);
      }
    } else if (this.showTime && this.fixedTime) {
      this.setValue(this.getValue()); // To force change the time with the fixed time (if exists)
    }
  },

  showPicker: function () {
    // keep previously selected date
    this.previousValue = this.getValue();
    this.Super('showPicker', arguments);
  },

  pickerDataChanged: function (picker) {
    var date, time;
    this.Super('pickerDataChanged', arguments);

    // SC sets time to local 0:00 to date in pickerDataChanged method
    // setting now time if there was one previously selected, or current time if not 
    date = this.getValue();
    if (this.previousValue) {
      time = this.previousValue;
      delete this.previousValue;
    } else {
      time = new Date();
    }
    date.setHours(time.getHours(), time.getMinutes(), time.getSeconds());

    this.setValue(date);
  },

  compareValues: function (value1, value2) {
    return (0 === isc.Date.compareDates(value1, value2));
  }
});


// == OBDateTimeFromDateItem ==
// OBDateTimeFromDateItem inherits from OBDateTimeItem
// It has the value of the current selected date at 00:00:00
isc.ClassFactory.defineClass('OBDateTimeFromDateItem', isc.OBDateTimeItem);

// == OBDateItem properties ==
isc.OBDateTimeFromDateItem.addProperties({
  showTime: false,
  fixedTime: '00:00:00'
});

// == OBDateTimeToDateItem ==
// OBDateTimeToDateItem inherits from OBDateTimeItem
// It has the value of the next day of the selected date at 00:00:00
isc.ClassFactory.defineClass('OBDateTimeToDateItem', isc.OBDateTimeItem);

// == OBDateItem properties ==
isc.OBDateTimeToDateItem.addProperties({
  showTime: false,
  fixedTime: '00:00:00'
});
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use. this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2011-2012 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */
// == OBEncryptedItem ==
// The type used for encrypted items.
isc.ClassFactory.defineClass('OBEncryptedItem', isc.PasswordItem);

// add specific properties here
isc.OBEncryptedItem.addProperties({
  operator: 'iContains',
  changed: function (form, item, value) {
    this.Super('changed', arguments);
    this.form.setValue(item.name + '_cleartext', value);
    if (this.grid.isEditing()) {
      this.grid.setEditValue(this.grid.getEditRow(), item.name + '_cleartext', value, true, true);
    }
  }
});
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use. this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2011-2012 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */

// == OBLinkTitleItem ==
// Item used for creating a link button in the title. Note part of the logic
// is implemented in the OBViewForm.getTitleHTML.
isc.ClassFactory.defineInterface('OBLinkTitleItem');

isc.OBLinkTitleItem.addInterfaceProperties({
  operator: 'iContains',
  showLinkIcon: true,

  linkButtonClick: function () {
    var sourceWindow = this.form.view.standardWindow.windowId;
    OB.Utilities.openDirectView(sourceWindow, this.refColumnName, this.targetEntity, this.getValue());
  }
});
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use. this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2011-2012 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */


// == OBTextItem ==
// Input for normal strings
isc.ClassFactory.defineClass('OBTextItem', isc.TextItem);

isc.OBTextItem.addProperties({
  operator: 'iContains',
  validateOnExit: true,
  maskSaveLiterals: true,

  validateAgainstMask: true,

  init: function () {

    if (this.mask && this.validateAgainstMask) {
      this.resetMaskValidator(true);
    }

    this.Super('init', arguments);
  },

  resetMaskValidator: function (createNew) {
    if (this.maskValidator && this.validators) {
      this.validators.remove(this.maskValidator);
      delete this.maskValidator;
    }
    if (createNew && this.mask && this.validateAgainstMask) {
      this.maskValidator = isc.clone(isc.Validator.getValidatorDefinition('mask'));
      this.maskValidator.mask = this.createRegExpFromMask(this.mask);
      this.validators = this.validators || [];
      this.validators.push(this.maskValidator);
    }
  },

  createRegExpFromMask: function (mask) {
    var split, i, regexp = '',
        escaped = false;
    if (!mask) {
      return null;
    }
    //when ranges are already present, return the same
    if (mask.indexOf('[') !== -1) {
      return mask;
    }
    split = mask.split('');
    for (i = 0; i < split.length; i++) {
      if (escaped) {
        regexp = regexp + '\\' + split[i];
        escaped = false;
        continue;
      }
      if (split[i] === '\\') {
        escaped = true;
        continue;
      } else if (split[i] === '<' || split[i] === '>') {
        // ignore
        continue;
      } else if (split[i] === '0') {
        regexp = regexp + '[0-9-+]';
      } else if (split[i] === '9') {
        regexp = regexp + '[0-9\\s]';
      } else if (split[i] === '#') {
        regexp = regexp + '[\\d]';
      } else if (split[i] === 'L') {
        regexp = regexp + '[A-Za-z]';
      } else if (split[i] === '?') {
        regexp = regexp + '[A-Za-z\\s]';
      } else if (split[i] === 'A') {
        regexp = regexp + '[A-Za-z0-9]';
      } else if (split[i] === 'a') {
        regexp = regexp + '[A-Za-z0-9]';
      } else if (split[i] === 'C') {
        regexp = regexp + '[A-Za-z0-9\\s]';
      } else {
        regexp = regexp + split[i];
      }
    }
    return regexp;
  },

  itemHoverHTML: function (item, form) {
    if (this.isDisabled()) {
      return this.getValue();
    } else if (this.mask) {
      return this.mask;
    }
  },

  setMask: function (mask) {
    this.Super('setMask', arguments);
    this.resetMaskValidator(mask);
  }

});

isc.ClassFactory.defineClass('OBTextFilterItem', isc.OBTextItem);

isc.OBTextFilterItem.addProperties({
  allowExpressions: true,
  validateAgainstMask: false,

  init: function () {
    var field = this.grid.getField(this.name);
    if (field && field.gridProps && field.gridProps.filterOnChange === false) {
      this.actOnKeypress = false;
    }
    this.Super('init', arguments);
  },

  blur: function () {
    if (this.actOnKeypress === false) {
      this.form.grid.performAction();
    }
    return this.Super('blur', arguments);
  },

  // solve a small bug in the value expressions
  buildValueExpressions: function () {
    var ret = this.Super('buildValueExpressions', arguments);
    if (isc.isA.String(ret) && ret.contains('undefined')) {
      return ret.replace('undefined', '');
    }
    return ret;
  }
});
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use. this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2011-2012 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */

//== OBLinkItem ==
//Input for normal strings (links) with an added icon to navigate to the link  
isc.ClassFactory.defineClass('OBLinkItem', isc.TextItem);

isc.OBLinkItem.addProperties({
  validateOnExit: true,
  init: function () {
    this.icons = [{
      src: this.pickerIconSrc,
      width: this.pickerIconWidth,
      height: this.pickerIconHeight,
      hspace: this.pickerIconHspace,
      click: function (form, item) {
        var url = item.getValue();
        if (!url) {
          return;
        }
        if (url.indexOf('://') === -1) {
          url = 'http://' + url;
        }
        window.open(url);
      }
    }];
    return this.Super('init', arguments);
  },
  validate: function () {
    var url = this.getValue();
    if (!url) {
      return true;
    }
    return OB.Utilities.isValidURL(url);
  }
});
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use. this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2011-2012 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */

//== OBLinkButtonItem ==
//Button to emulate a standard html link.
isc.ClassFactory.defineClass('OBLinkButtonItem', isc.Button);
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use. this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2011-2013 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */

// == OBListItem ==
// Combo box for list references, note is extended by OBFKItem again.
isc.ClassFactory.defineClass('OBListItem', isc.ComboBoxItem);

isc.OBListItem.addProperties({
  operator: 'equals',
  hasPickList: true,
  showPickListOnKeypress: true,
  cachePickListResults: false,
  completeOnTab: true,
  validateOnExit: true,

  selectOnFocus: true,
  // still do select on focus initially
  doInitialSelectOnFocus: true,

  // textMatchStyle is used for the client-side picklist
  textMatchStyle: 'substring',

  pickListProperties: {
    showHeaderContextMenu: false
  },

  // NOTE: Setting this property to false fixes the issue when using the mouse
  // to pick a value
  // FIXME: Sometimes the field label gets a red color (a blink)
  // if set to false then the picklist is shown at focus:
  // https://issues.openbravo.com/view.php?id=18075
  // addUnknownValues: true,
  // changeOnKeypress should not be set to false together 
  // with addUnknownValues (to false) as this will 
  // cause the picklist not to show
  // changeOnKeypress: false,
  moveFocusOnPickValue: true,

  hidePickListOnBlur: function () {

    // when the form gets redrawn the the focus may not be in
    // the item but it is still the item which gets the focus
    // after redrawing
    if (this.form && this.form._isRedrawing && this.form.getFocusItem() === this) {
      return;
    }

    this.Super('hidePickListOnBlur', arguments);
  },

  // is overridden to keep track that a value has been explicitly picked
  pickValue: function (value) {
    var i, referenceType;
    this._pickedValue = true;
    // force the update of the list
    // if the user has entered with the keyboard the exact content of a list option,
    // its callout would not be called because the change would not be detected
    // see issue https://issues.openbravo.com/view.php?id=21491
    this._value = (this.value) ? this._value.concat(Math.random()) : Math.random();
    //in case the reference is a foreign key reference,
    //adding double equals to filter the exact value and not all matching sub strings.
    //Refer issue https://issues.openbravo.com/view.php?id=24574.
    referenceType = isc.SimpleType.getType(this.type).editorType;
    if (value && isc.isA.Array(value) && referenceType !== 'OBListItem') {
      // value is an array when picking in a FK selector drop down
      // add '==' if needed
      for (i = 0; i < value.length; i++) {
        //do not append when composite identifiers are present.
        if (value[i].indexOf(' - ') === -1) {
          value[i] = '==' + value[i];
        }
      }
    }
    this.Super('pickValue', arguments);
    delete this._pickedValue;
    if (this.moveFocusOnPickValue && this.form.focusInNextItem) {
      // update the display before moving the focus
      this.updateValueMap(true);
      // Only focus in the next item if the key that triggered the event is
      // not the tab key, so the focus is not moved twice
      // See issue https://issues.openbravo.com/view.php?id=21419
      if (isc.EH.getKeyName() !== 'Tab') {
        this.form.focusInNextItem(this.name);
      }
    }
  },

  changed: function (form, item, value) {
    this.Super('changed', arguments);
    // if not picking a value then don't do a fic call
    // otherwise every keypress would result in a fic call
    if (!this._pickedValue) {
      return;
    }
    if (this._hasChanged && this.form && this.form.handleItemChange) {
      this.form.handleItemChange(this);
    }
  },

  // to solve: https://issues.openbravo.com/view.php?id=17800
  // in chrome the order of the valueMap object is not retained
  // the solution is to keep a separate entries array with the
  // records in the correct order, see also the setEntries/setEntry
  // methods
  getClientPickListData: function () {
    if (this.entries) {
      return this.entries;
    }
    return this.Super('getClientPickListData', arguments);
  },

  setEntries: function (entries) {
    var length = entries.length,
        i, id, identifier, valueField = this.getValueFieldName(),
        valueMap = {};
    this.entries = [];
    for (i = 0; i < length; i++) {
      id = entries[i][OB.Constants.ID] || '';
      identifier = entries[i][OB.Constants.IDENTIFIER] || '';
      valueMap[id] = identifier;
      this.entries[i] = {};
      this.entries[i][valueField] = id;
    }
    this.setValueMap(valueMap);
  },

  setEntry: function (id, identifier) {
    var i, entries = this.entries || [],
        entry = {},
        valueField = this.getValueFieldName(),
        length = entries.length;
    for (i = 0; i < length; i++) {
      if (entries[i][valueField] === id) {
        return;
      }
    }

    // not found add/create a new one
    entry[valueField] = id;
    entries.push(entry);

    this.setEntries(entries);
  },

  // prevent ids from showing up
  mapValueToDisplay: function (value) {
    var i, ret = this.Super('mapValueToDisplay', arguments),
        result;

    // the datasource should handle it
    if (this.optionDataSource) {
      return ret;
    }

    if (this.valueMap) {
      // handle multi-select
      if (isc.isA.Array(value)) {
        this.lastSelectedValue = value;
        for (i = 0; i < value.length; i++) {
          if (i > 0) {
            result += this.multipleValueSeparator;
          }
          // encode or and and
          result += OB.Utilities.encodeSearchOperator(this.Super('mapValueToDisplay', value[i]));
        }
      } else if (this.valueMap[value]) {
        this.lastSelectedValue = value;
        return this.valueMap[value];
      }
    }

    if (ret === value && this.isDisabled()) {
      return '';
    }

    // don't update the valuemap if the value is null or undefined
    if (ret === value && value) {
      if (!this.valueMap) {
        this.valueMap = {};
        this.valueMap[value] = '';
        return '';
      } //there may be cases if the value is an number within 10 digits, it is identified as an UUID. In that case check is done to confirm whether it is indeed UUID by checking if it is available in the valueMap.
      else if (!this.valueMap[value] && OB.Utilities.isUUID(value) && this.valueMap.hasOwnProperty(value)) {
        return '';
      }
    }
    return ret;
  },

  isUnknownValue: function (value) {
    var i, array;
    if (!value || !this.multiple || !value.contains(this.multipleValueSeparator)) {
      return this.Super('isUnknownValue', arguments);
    }
    // handle multi-select
    array = value.split(this.multipleValueSeparator);
    for (i = 0; i < array.length; i++) {
      if (this.isUnknownValue(array[i])) {
        return true;
      }
    }
    return false;
  },

  mapDisplayToValue: function (display) {
    var i, array, result;

    if (display === '') {
      return null;
    }
    if (this.lastSelectedValue && display === this.mapValueToDisplay(this.lastSelectedValue)) {
      // Prevents mapDisplayToValue from failing when there are several
      // entries in the valuemap with the same value
      // See issue https://issues.openbravo.com/view.php?id=21553
      return this.lastSelectedValue;
    } else if (!display || !this.multiple || !display.contains(this.multipleValueSeparator)) {
      return this.Super('mapDisplayToValue', arguments);
    } else {
      array = display.split(this.multipleValueSeparator);
      result = [];
      for (i = 0; i < array.length; i++) {
        result.add(this.Super('mapDisplayToValue', [array[i]]));
      }
      return result;
    }
  }

});
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use. this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2011-2013 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */

//== OBListFilterItem ==
// Combo box for list references in filter editors.
isc.ClassFactory.defineClass('OBListFilterItem', isc.OBListItem);

isc.OBListFilterItem.addProperties({
  allowExpressions: false,
  moveFocusOnPickValue: false,
  operator: 'equals',
  validateOnExit: false,
  validateOnChange: false,
  filterOnKeypress: true,
  addUnknownValues: false,

  defaultToFirstOption: false,

  multiple: true,
  multipleAppearance: 'picklist',
  multipleValueSeparator: ' or ',

  // remove the width so that smartclient will autoflow the content
  // will make sure that the picklist is resized.
  // http://forums.smartclient.com/showthread.php?p=93868#post93868
  getPickListFields: function () {
    var ret = this.Super('getPickListFields', arguments);
    delete ret[0].width;
    return ret;
  },

  // overridden to prevent selection of first item
  selectDefaultItem: function () {},

  showPickList: function () {
    var ret = this.Super('showPickList', arguments),
        value, i;
    //remove double equals symbol used for filtering purposes, so that the appropriate item is selected.
    value = this.getValue();
    if (value && value.length > 0) {
      for (i = 0; i < value.length; i++) {
        if (value[i].indexOf("==") === 0) {
          value[i] = value[i].substring(2, value[i].length);
        }
      }
    }
    this.selectItemFromValue(value);
  },

  // note: can't override changed as it is used by the filter editor 
  // itself, see the RecordEditor source code and the changed event
  change: function (form, item, value, oldValue) {
    if (this._pickedValue || !value) {
      // filter with a delay to let the value be set
      isc.Page.setEvent(isc.EH.IDLE, this.form.grid, isc.Page.FIRE_ONCE, 'performAction');
    }
    this.Super('change', arguments);
  }
});
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use. this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2011-2012 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */

// == OBFKItem ==
// Extends OBListItem
isc.ClassFactory.defineClass('OBFKItem', isc.OBListItem);

isc.ClassFactory.mixInInterface('OBFKItem', 'OBLinkTitleItem');

isc.OBFKItem.addProperties({
  operator: 'iContains',

  // set the identifier field also, that's what gets displayed in the grid
  changed: function (form, item, value) {
    if (!this._pickedValue && value) {
      return;
    }

    var display = this.mapValueToDisplay(value),
        identifierFieldName = this.name + OB.Constants.FIELDSEPARATOR + OB.Constants.IDENTIFIER;
    form.setValue(identifierFieldName, display);
    // make sure that the grid does not display the old identifier
    if (form.grid) {
      form.grid.setEditValue(form.grid.getEditRow(), identifierFieldName, display);
    }
    return this.Super('changed', arguments);
  },

  setValue: function (val) {
    if (this._clearingValue) {
      this._editorEnterValue = null;
    }
    this.Super('setValue', arguments);
  }
});
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use. this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2011-2013 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */

//== OBFKFilterTextItem ==
//Input used for filtering on FK fields.
isc.ClassFactory.defineClass('OBFKFilterTextItem', isc.OBListFilterItem);

isc.OBFKFilterTextItem.addProperties({
  operator: 'iContains',
  overrideTextMatchStyle: 'substring',
  allowExpressions: false,
  showOptionsFromDataSource: true,
  selectOnFocus: false,
  validateOnExit: true,

  multiple: true,
  multipleAppearance: 'picklist',
  multipleValueSeparator: ' or ',

  // only show the drop down on demand
  // this because we want to support partial values
  // for filtering, also getting trouble because values get
  // completely selected
  showPickListOnKeypress: true,
  filterOnKeypress: false,
  changeOnKeypress: true,
  addUnknownValues: true,
  defaultToFirstOption: false,

  emptyPickListMessage: OB.I18N.getLabel('OBUISC_ListGrid.emptyMessage'),

  init: function () {
    var me = this,
        grid = this.form.grid.sourceWidget,
        gridField = grid.getField(this.name);

    // the textMatchStyle is sometimes overridden from the underlying
    // grid, this happens when used within the selector editor.
    // for foreign key fields we only support like/contains/substring
    // so force that
    this.textMatchStyle = this.overrideTextMatchStyle;

    // the data from the datasource will contain the id and the identifier
    // the value for the filter and the display are the same: the identifier
    this.displayField = this.criteriaDisplayField || OB.Constants.IDENTIFIER;
    this.valueField = this.criteriaDisplayField || OB.Constants.IDENTIFIER;

    this.pickListProperties = {

      // make sure that we send the same parameters as the grid
      onFetchData: function (criteria, requestProperties) {
        requestProperties = requestProperties || {};
        requestProperties.params = grid.getFetchRequestParams(requestProperties.params);
        delete me.forceReload;
      },

      fetchDelay: 400,
      // prevent aggressive local filtering by smartclient
      filterLocally: false,
      multipleValueSeparator: ' or ',
      dataProperties: {
        useClientFiltering: false
      },

      isSelected: function (record) {
        var i, values = this.formItem.getValue();
        if (values.length) {
          for (i = 0; i < values.length; i++) {
            if (record[me.displayField] === values[i]) {
              return true;
            }
          }
        }
        return record[me.displayField] === values;
      },

      // override data arrived to prevent the first entry from being
      // selected
      // this to handle the picklist in foreign key filter item. When a user
      // types a partial value maybe he/she wants to filter by this partial
      // value
      // auto-selecting the first value makes this impossible.
      // Therefore this option to prevent this.
      // There are maybe nicer points to do this overriding but this was the
      // place after the first item was selected.
      // This first selection happens in ScrollingMenu.dataChanged
      dataArrived: function (startRow, endRow) {
        var record, rowNum, i, values = this.formItem.getValue();
        this.Super('dataArrived', arguments);
        if (values) {
          if (!isc.isA.Array(values)) {
            values = [values];
          }
          for (rowNum = startRow; rowNum < (endRow + 1); rowNum++) {
            record = this.getRecord(rowNum);
            if (record && values.contains(record[me.displayField])) {
              this.selectRecord(record, true);
            }
          }
        }
      }
    };

    this.setOptionDataSource(OB.Datasource.create({
      dataURL: grid.getDataSource().dataURL,
      requestProperties: {
        params: {
          // distinct forces the distinct query on the server side
          _distinct: gridField.valueField || gridField.name
        }
      },
      fields: this.pickListFields
    }));

    this.Super('init', arguments);

    // don't validate for FK filtering, any value is allowed
    this.validators = [];

    // listen to data arrival in the grid
    // if data arrived we have to reload also
    this.observe(grid, "dataArrived", "observer.setForceReload()");

    this.multipleValueSeparator = ' or ';
  },

  destroy: function () {
    var grid = this.form && this.form.grid && this.form.grid.sourceWidget;
    if (grid) {
      this.ignore(grid, 'dataArrived');
    }
    return this.Super('destroy', arguments);
  },

  // note: can't override changed as it is used by the filter editor 
  // itself, see the RecordEditor source code and the changed event
  change: function (form, item, value, oldValue) {
    this._hasChanged = true;
    this.Super('change', arguments);
  },

  blur: function () {
    if (this._hasChanged) {
      this.form.grid.performAction();
    }
    delete this._hasChanged;
    this.Super('blur', arguments);
  },

  // overridden otherwise the picklist fields from the grid field
  // are being used
  getPickListFields: function () {
    return [{
      name: this.displayField
    }];
  },

  itemHoverHTML: function () {
    return this.getDisplayValue();
  },

  mapValueToDisplay: function (value) {
    var i, result = '';
    if (!isc.isAn.Array(value)) {
      return this.Super('mapValueToDisplay', arguments);
    }
    for (i = 0; i < value.length; i++) {
      if (i > 0) {
        result += this.multipleValueSeparator;
      }
      // encode or and and
      result += OB.Utilities.encodeSearchOperator(this.Super('mapValueToDisplay', value[i]));
    }
    return result;
  },

  // combine the value of the field with the overall grid
  // filter values
  getPickListFilterCriteria: function () {
    var pickListCriteria = this.getCriterion(),
        gridCriteria, i, criteriaFieldName = this.getCriteriaFieldName();

    if (this.form.grid.sourceWidget.lazyFiltering) {
      // Fetch the criteria from the current values of the filter editor
      gridCriteria = this.form.grid.getValues();
    } else {
      gridCriteria = this.form.grid.sourceWidget.getCriteria();
    }

    gridCriteria = gridCriteria || {
      _constructor: 'AdvandedCriteria',
      operator: 'and'
    };
    gridCriteria.criteria = gridCriteria.criteria || [];

    for (i = 0; i < gridCriteria.criteria.length; i++) {
      if (criteriaFieldName === gridCriteria.criteria[i].fieldName) {
        gridCriteria.criteria.removeAt(i);
        break;
      }
    }

    // when in refresh picklist the user is typing
    // a value, filter using that
    if (this.keyPressed && pickListCriteria) {
      gridCriteria.criteria.add(pickListCriteria);
      delete this.keyPressed;
    }

    // add a dummy criteria to force a fetch
    // smartclient will try to do smart and prevent fetches if
    // criteria have not changed
    // note the system can be made smarter by checking if something
    // got reloaded in the underlying grid
    if (this.forceReload) {
      gridCriteria.criteria.push(isc.OBRestDataSource.getDummyCriterion());
    }
    return gridCriteria;
  },

  setForceReload: function () {
    this.forceReload = true;
    if (this.form) {
      this.invalidateDisplayValueCache();
    }
  },

  canEditCriterion: function (criterion) {
    var firstCriteria;
    if (criterion.operator === 'and') {
      // and operator does not include the fieldName as a root property
      if (!criterion.criteria || criterion.criteria.length === 0) {
        return true;
      } else {
        // all criteria of the criterion are associated with the same name, pick the first
        firstCriteria = criterion.criteria[0];
        return (firstCriteria.fieldName === this.name || (this.criteriaField && (firstCriteria.fieldName === this.criteriaField)));
      }

    } else {
      return criterion && (criterion.fieldName === this.name || (this.criteriaField && (criterion.fieldName === this.criteriaField)));
    }
  },

  getCriterion: function (textMatchStyle) {
    var value = this.getCriteriaValue(),
        operator, fieldName, crit;

    if (value === null || isc.is.emptyString(value)) {
      return;
    }

    // the criteria parser expects an or expression
    if (isc.isAn.Array(value)) {
      value = this.mapValueToDisplay(value);
    }

    operator = this.getOperator(textMatchStyle, isc.isAn.Array(value));
    fieldName = this.getCriteriaFieldName();

    crit = this.parseValueExpressions(value, fieldName, operator);

    if (crit === null) {
      crit = {
        fieldName: fieldName,
        operator: operator,
        value: value
      };
    }

    if (this.operator && this.operator !== 'iContains') {
      // In this case we need to overwrite the operator assigned by the parseValueExpressions/parseOBValueExpressions logic
      crit = this.replaceCriterionOperator(crit, value, this.operator);
    }

    return crit;
  },

  replaceCriterionOperator: function (criterion, value, newOperator) {
    var newCriterion = criterion,
        i;
    if (newCriterion.criteria && newCriterion.criteria.length > 0) {
      // If there is a sub-criteria, go inside to process the childs
      for (i = 0; i < newCriterion.criteria.length; i++) {
        newCriterion.criteria[i] = this.replaceCriterionOperator(newCriterion.criteria[i], value, newOperator);
      }
    } else if ((criterion.operator === 'iContains' || criterion.operator === 'contains') && value.indexOf('~') !== 0 && value.indexOf('!~') !== 0) {
      // In case the criteria is 'iContains'/'contains', replace it by the desired one,
      // but only in the case there are no explicit 'iContains'/'contains' prefixes
      newCriterion.operator = newOperator;
    }
    // TODO: If there is a complex criteria with a 'iContains'/'contains' prefix, like "Cust or ~mplo", it won't work ok, since it will be
    //       translated to "^Cust or ^mplo" or "==Cust or ==mplo" (depending of the newOperator) instead of "^Cust or ~mplo" or "==Cust or ~mplo"
    return newCriterion;
  },

  setCriterion: function (criterion) {
    var i, value, values = [],
        operators, valueSet = false,
        criteria = criterion ? criterion.criteria : null;
    if (criteria && criteria.length && criterion.operator === 'or') {
      operators = isc.DataSource.getSearchOperators();
      for (i = 0; i < criteria.length; i++) {
        //handles case where column filter symbols are removed. Refer Issue https://issues.openbravo.com/view.php?id=23925
        if (criteria[i].operator !== "iContains" && criteria[i].operator !== "contains" && criteria[i].operator !== "regexp") {
          if (operators[criteria[i].operator] && (operators[criteria[i].operator].ID === criteria[i].operator) && operators[criteria[i].operator].symbol && criteria[i].value && (criteria[i].value.indexOf(operators[criteria[i].operator].symbol) === -1)) {
            values.push(operators[criteria[i].operator].symbol + criteria[i].value);
            valueSet = true;
          }
        }
        if (valueSet === false) {
          values.push(criteria[i].value);
        }
        valueSet = false;
      }
      this.setValue(values);
    } else {
      value = this.buildValueExpressions(criterion);
      this.setValue(value);
    }
  },

  // make sure that the correct field name is used to filter the main grid
  // if this is not here then the value will be removed by smartclient as it
  // sets the criterion back into the item
  // see also the setValuesAsCriteria in ob-grid-js which again translates
  // back
  getCriteriaFieldName: function () {
    return this.criteriaField || this.name + OB.Constants.FIELDSEPARATOR + OB.Constants.IDENTIFIER;
  },

  // solve a small bug in the value expressions
  buildValueExpressions: function () {
    var ret = this.Super('buildValueExpressions', arguments);
    if (isc.isA.String(ret) && ret.contains('undefined')) {
      return ret.replace('undefined', '');
    }
    return ret;
  },

  refreshPickList: function () {
    if (this.valueIsExpression()) {
      return;
    }

    // is called when the user enters values
    // filter using those values
    if (!this._pickedValue) {
      this.keyPressed = true;
    }

    return this.Super('refreshPickList', arguments);
  },

  valueIsExpression: function () {
    var prop, opDefs, val = this.getDisplayValue();
    // if someone starts typing and and or then do not filter
    // onkeypress either
    if (val.contains(' and')) {
      return true;
    }

    if (val.startsWith('=')) {
      return true;
    }

    // now check if the item element value is only
    // an operator, if so, go away
    opDefs = isc.DataSource.getSearchOperators();
    for (prop in opDefs) {
      if (opDefs.hasOwnProperty(prop)) {
        // let null and not null fall through
        // as they should be filtered
        if (prop === 'isNull' || prop === 'notNull') {
          continue;
        }

        same = opDefs[prop].symbol && val.startsWith(opDefs[prop].symbol);
        if (same) {
          return true;
        }
      }
    }
    return false;
  }
});
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use. this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2011-2012 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */

isc.RelativeDateItem.addProperties({
  showChooserIcon: false,
  timeUnitOptions: ['day', 'week', 'month', 'quarter', 'year'],
  todayTitle: OB.I18N.getLabel('OBUISC_DateChooser.todayButtonTitle'),

  millisecondsAgoTitle: OB.I18N.getLabel('OBUIAPP_milliseconds_ago'),
  secondsAgoTitle: OB.I18N.getLabel('OBUIAPP_seconds_ago'),
  minutesAgoTitle: OB.I18N.getLabel('OBUIAPP_minutes_ago'),
  hoursAgoTitle: OB.I18N.getLabel('OBUIAPP_hours_ago'),
  daysAgoTitle: OB.I18N.getLabel('OBUIAPP_days_ago'),
  weeksAgoTitle: OB.I18N.getLabel('OBUIAPP_weeks_ago'),
  monthsAgoTitle: OB.I18N.getLabel('OBUIAPP_months_ago'),
  quartersAgoTitle: OB.I18N.getLabel('OBUIAPP_quarters_ago'),
  yearsAgoTitle: OB.I18N.getLabel('OBUIAPP_years_ago'),

  millisecondsFromNowTitle: OB.I18N.getLabel('OBUIAPP_milliseconds_from_now'),
  secondsFromNowTitle: OB.I18N.getLabel('OBUIAPP_seconds_from_now'),
  minutesFromNowTitle: OB.I18N.getLabel('OBUIAPP_minutes_from_now'),
  hoursFromNowTitle: OB.I18N.getLabel('OBUIAPP_hours_from_now'),
  daysFromNowTitle: OB.I18N.getLabel('OBUIAPP_days_from_now'),
  weeksFromNowTitle: OB.I18N.getLabel('OBUIAPP_weeks_from_now'),
  monthsFromNowTitle: OB.I18N.getLabel('OBUIAPP_months_from_now'),
  quartersFromNowTitle: OB.I18N.getLabel('OBUIAPP_quarters_from_now'),
  yearsFromNowTitle: OB.I18N.getLabel('OBUIAPP_years_from_now'),

  startDate: Date.createLogicalDate(1951, 0, 1),
  endDate: Date.createLogicalDate(2050, 11, 31),

  presetOptions: {
    "$today": OB.I18N.getLabel('OBUISC_DateChooser.todayButtonTitle'),
    "$yesterday": OB.I18N.getLabel('OBUIAPP_Yesterday'),
    "$tomorrow": OB.I18N.getLabel('OBUIAPP_Tomorrow'),
    "-1w": OB.I18N.getLabel('OBUIAPP_Current_day_of_last_week'),
    "+1w": OB.I18N.getLabel('OBUIAPP_Current_day_of_next_week'),
    "-1m": OB.I18N.getLabel('OBUIAPP_Current_day_of_last_month'),
    "+1m": OB.I18N.getLabel('OBUIAPP_Current_day_of_next_month')
  },

  // Function to load just needed OB.DateItemProperties properties, since all of them can not be loaded
  // because there are some parameters like "init", "pickerDataChanged", ... that cannot be overwritten
  // because SmartClient also overwrites them while creating this isc.RelativeDateItem definition.
  // Fixes issue: https://issues.openbravo.com/view.php?id=21552
  addDateItemProperties: function () {
    this.setDateParams = OB.DateItemProperties.setDateParams;
    this.parseValue = OB.DateItemProperties.parseValue;
    this.expandPart = OB.DateItemProperties.expandPart;
    this.reachedLength = OB.DateItemProperties.reachedLength;
    this.isNumber = OB.DateItemProperties.isNumber;
    this.isSeparator = OB.DateItemProperties.isSeparator;
    this.setDateParams();
  },

  areDateItemPropertiesSet: false,

  blurValue: function () {
    if (this.editor && this.editor.items[0] && this.editor.items[0].getElementValue) {
      return this.editor.items[0].getElementValue();
    } else {
      return null;
    }
  },

  validateOnExit: true,
  showErrorIcon: false,

  validateRelativeDateItem: function (value) {
    var isADate = Object.prototype.toString.call(value) === '[object Date]';
    if (value === null || isADate) {
      this.editor.items[0].textBoxStyle = this.editor.items[0].textBoxStyleNormal;
      this.editor.items[0].redraw();
      return true;
    } else {
      this.editor.items[0].textBoxStyle = this.editor.items[0].textBoxStyleError;
      this.editor.items[0].redraw();
      return false;
    }
  },

  validators: [{
    type: 'custom',
    condition: function (item, validator, value) {
      return item.validateRelativeDateItem(value);
    }
  }],

  blur: function () {
    var blurValue = this.blurValue(),
        newBlurValue = '',
        jsValue, digitRegExp = new RegExp('^\\d+$', 'gm'),
        newValue, i;

    if (!this.areDateItemPropertiesSet) {
      this.addDateItemProperties();
      this.areDateItemPropertiesSet = true;
    }

    // Remove all kind of separators of the input value
    for (i = 0; i < blurValue.length; i++) {
      if (!this.isSeparator(blurValue, i)) {
        newBlurValue += blurValue[i];
      }
    }

    // If are only digits/numbers
    if (digitRegExp.test(newBlurValue)) {
      newValue = this.parseValue();
      if (newValue) {
        jsValue = OB.Utilities.Date.OBToJS(newValue, this.dateFormat);
        // if jsValue == null then this is an illegal date, will be 
        // caught later
        if (jsValue) {
          this.setValue(jsValue);
        }
      }
    }

    this.Super('blur', arguments);
  }
});

isc.RelativeDateItem.changeDefaults('quantityFieldDefaults', {
  // max 1000 days/months in the past/future
  max: 1000,
  alwaysTakeSpace: false,

  // after leaving the quantity field the next time the rangeitem is visited the 
  // focus should go to the value field again
  blur: function () {
    if (this.form && this.form._isRedrawing) {
      return;
    }

    this.Super('blur', arguments);
    this.form.setFocusItem(this.form.getItem('valueField'));
  }
});

isc.RelativeDateItem.changeDefaults('valueFieldDefaults', {
  keyPress: function (item, form, keyName, characterValue) {
    if (keyName === 'Enter' && !isc.EventHandler.ctrlKeyDown() && !isc.EventHandler.altKeyDown() && !isc.EventHandler.shiftKeyDown()) {
      // canvasItem is the rangeItem
      form.canvasItem.showPicker();
      return false;
    }
    return true;
  },

  init: function () {
    this.icons = [{
      width: this.calendarIconWidth,
      height: this.calendarIconHeight,
      hspace: this.calendarIconHspace,
      canFocus: false,
      showFocused: false,
      item: this,
      src: this.calendarIconSrc,
      click: function () {
        this.item.form.canvasItem.showPicker();
      }
    }];
    this.Super('init', arguments);
  }
});

// == OBMiniDateRangeItem ==
// OBMiniDateRangeItem inherits from SmartClient MiniDateRangeItem
// Is used for filtering dates in the grid. Contains the following classes:
// - OBDateRangeDialog: the popup
// - OBMiniDateRangeItem: the filter item itself
isc.ClassFactory.defineClass('OBDateRangeDialog', isc.DateRangeDialog);

isc.OBDateRangeDialog.addProperties({
  initWidget: function () {
    this.Super('initWidget', arguments);
    this.rangeForm.setFocusItem(this.rangeItem);

    var fromField = this.rangeForm.items[0].fromField,
        toField = this.rangeForm.items[0].toField;
    this.clearButton.click = function () {
      this.creator.clearValues();
      fromField.validate();
      toField.validate();
    };
  },

  show: function () {
    this.Super('show', arguments);
    var fromField = this.rangeForm.items[0].fromField,
        toField = this.rangeForm.items[0].toField;
    fromField.calculatedDateField.canFocus = false;
    fromField.validate();
    toField.calculatedDateField.canFocus = false;
    toField.validate();
    fromField.valueField.focusInItem();
    this.rangeForm.focus();
  },

  // trick: overridden to let the ok and clear button change places
  addAutoChild: function (name, props) {
    if (name === 'okButton') {
      return this.Super('addAutoChild', ['clearButton',
      {
        canFocus: true,
        title: this.clearButtonTitle
      }]);
    } else if (name === 'clearButton') {
      return this.Super('addAutoChild', ['okButton',
      {
        canFocus: true,
        title: this.okButtonTitle
      }]);
    } else {
      return this.Super('addAutoChild', arguments);
    }
  }

});


// == OBMinDateRangeItem ==
// Item used for filtering by dates in the grid. Replaces the normal Smartclient
// MiniDateRangeItem to make it editable.
isc.ClassFactory.defineClass('OBMiniDateRangeItem', isc.OBTextItem);

isc.OBMiniDateRangeItem.addProperties({}, OB.DateItemProperties, {
  validateOnExit: false,
  showPickerIcon: false,
  filterOnKeypress: false,
  operator: 'equals',
  // prevents date formatting using the simple type formatters
  applyStaticTypeFormat: true,

  // note this one needs to be set to let the formatDate be called below
  dateDisplayFormat: OB.Format.date,
  rangeDialogConstructor: isc.OBDateRangeDialog,

  textBoxStyle: 'textItem',
  shouldSaveValue: true,
  rangeDialogDefaults: {
    _constructor: 'DateRangeDialog',
    autoDraw: false,
    destroyOnClose: false,
    clear: function () {
      if (this.destroying) {
        return;
      }
      this.Super('clear', arguments);
    }
  },
  fromDateOnlyPrefix: OB.I18N.getLabel('OBUIAPP_fromDateOnlyPrefix'),
  toDateOnlyPrefix: OB.I18N.getLabel('OBUIAPP_toDateOnlyPrefix'),
  pickerIconPrompt: OB.I18N.getLabel('OBUIAPP_pickerIconPrompt'),
  iconVAlign: 'center',
  pickerIconDefaults: {
    name: 'showDateRange',
    src: '[SKIN]/DynamicForm/DatePicker_icon.gif',
    width: 16,
    height: 16,
    showOver: false,
    showFocused: false,
    showFocusedWithItem: false,
    hspace: 0,
    click: function (form, item, icon) {
      if (!item.disabled) {
        item.showRangeDialog();
      }
    }
  },

  allowRelativeDates: true,

  // if the user enters a date directly
  singleDateMode: false,
  singleDateValue: null,
  singleDateDisplayValue: null,

  init: function () {
    this.addAutoChild('rangeDialog', {
      fromDate: this.fromDate,
      toDate: this.toDate,
      rangeItemProperties: {
        allowRelativeDates: this.allowRelativeDates
      },
      dateDisplayFormat: this.dateDisplayFormat,
      callback: this.getID() + '.rangeDialogCallback(value)'
    });

    this.icons = [isc.addProperties({
      prompt: this.pickerIconPrompt
    }, this.pickerIconDefaults, this.pickerIconProperties)];

    this.rangeItem = this.rangeDialog.rangeItem;
    this.rangeItem.name = this.name;

    // this call super.init
    if (this.doInit) {
      this.doInit();
    }
  },

  blurValue: function () {
    return this.getElementValue();
  },

  expandSingleValue: function () {
    var newValue = this.parseValue(),
        oldValue = this.mapValueToDisplay(),
        dateValue, editRow;

    if (!this.singleDateMode) {
      return;
    }

    // Apply the empty filter if the date text has been deleted
    // See issue https://issues.openbravo.com/view.php?id=21697
    if (newValue === '') {
      return true;
    }

    if (newValue === oldValue) {
      return false;
    }

    if (this.singleDateMode) {
      dateValue = OB.Utilities.Date.OBToJS(newValue, this.dateFormat);
      if (isc.isA.Date(dateValue)) {
        dateValue.logicalDate = true;
        this.singleDateValue = dateValue;
        this.singleDateDisplayValue = newValue;
        this.singleDateMode = true;
        this.setElementValue(newValue, newValue);
      } else {
        this.singleDateValue = null;
        this.singleDateMode = false;
      }
      return true;
    }
    return false;
  },

  clearFilterValues: function () {
    this.singleDateValue = null;
    this.singleDateDisplayValue = '';
    this.singleDateMode = true;
    this.rangeItemValue = null;
    this.rangeItem.setValue(null);
    this.setElementValue('', '');
  },

  setSingleDateValue: function (value) {
    var displayValue = OB.Utilities.Date.JSToOB(value, this.dateFormat);
    this.singleDateValue = value;
    this.singleDateDisplayValue = displayValue;
    this.singleDateMode = true;
    this.setElementValue(displayValue, displayValue);
  },

  blur: function () {
    if (this.form && this.form._isRedrawing) {
      return;
    }

    if (this.expandSingleValue()) {
      this.form.grid.performAction();
    }
    return this.Super('blur', arguments);
  },

  showRangeDialog: function () {
    if (!this.rangeItemValue) {
      this.rangeDialog.clear();
      this.rangeItem.fromField.setValue(null);
      this.rangeItem.fromField.quantityField.hide();
      this.rangeItem.toField.setValue(null);
      this.rangeItem.toField.quantityField.hide();
    }
    this.rangeDialog.show();
  },

  rangeDialogCallback: function (value) {
    var data = value,
        illegalStart = data && data.start && !this.isCorrectRangeValue(data.start);
    var illegalEnd = data && data.end && !this.isCorrectRangeValue(data.end);
    if (illegalStart || illegalEnd) {
      return;
    }
    this.singleDateMode = false;
    this.singleDateValue = null;
    this.rangeItemValue = value;
    this.displayValue();
    this.form.grid.performAction();
  },

  hasAdvancedCriteria: function () {
    return this.singleDateMode || (this.rangeItem !== null && this.rangeItem.hasAdvancedCriteria());
  },

  setCriterion: function (criterion) {
    if (!criterion) {
      return;
    }

    if (criterion.operator === 'isNull') {
      this.setValue('#');
      return;
    }

    if (criterion.operator === 'notNull') {
      this.setValue('!#');
      return;
    }

    if (criterion.operator === 'equals') {
      this.setSingleDateValue(criterion.value);
      return;
    }

    if (this.rangeItem) {
      this.rangeItem.setCriterion(criterion);
      this.singleDateMode = false;
      this.singleDateValue = null;
      this.rangeItemValue = this.rangeItem.getValue();
      this.displayValue();
    }
  },

  getCriterion: function () {
    var value = this.blurValue();
    if (value === '#') {
      return {
        fieldName: this.name,
        operator: 'isNull'
      };
    }
    if (value === '!#') {
      return {
        fieldName: this.name,
        operator: 'notNull'
      };
    }
    if (value === '' || value === null) {
      return {};
    }
    if (this.singleDateValue) {
      return {
        fieldName: this.name,
        operator: 'equals',
        value: this.singleDateValue
      };
    }
    var criteria = this.rangeItem ? this.rangeItem.getCriterion() : null;
    criteria = this.makeLogicalDates(criteria);
    return criteria;
  },

  // Sets the logicalDate property to true to the date values contained in the criteria.
  // This way the dates will always be serialized as a Date, and not as a DateTime
  // See issue https://issues.openbravo.com/view.php?id=22885
  makeLogicalDates: function (criteria) {
    var criteriaCopy = isc.shallowClone(criteria),
        innerCriteria = criteriaCopy.criteria,
        i;
    if (innerCriteria && innerCriteria.length) {
      for (i = 0; i < innerCriteria.length; i++) {
        if (isc.isA.Date(innerCriteria[i].value)) {
          innerCriteria[i].value.logicalDate = true;
        }
      }
    }
    return criteriaCopy;
  },

  canEditCriterion: function (criterion) {

    if (criterion.fieldName === this.name && (criterion.operator === 'isNull' || criterion.operator === 'notNull')) {
      return true;
    }
    if (this.singleDateMode && criterion.fieldName === this.name) {
      return true;
    }
    return this.rangeItem ? this.rangeItem.canEditCriterion(criterion) : false;
  },

  itemHoverHTML: function (item, form) {
    return this.mapValueToDisplay();
  },

  updateStoredDates: function () {
    var value = this.rangeItemValue,
        i, newValue, length;

    if (value) {
      if (isc.DataSource.isAdvancedCriteria(value)) {
        // value has come back as an AdvancedCriteria!
        newValue = {};
        length = value.criteria.length;

        for (i = 0; i < length; i++) {
          var criterion = value.criteria[i];
          if (criterion.operator === 'greaterThan' || criterion.operator === 'greaterOrEqual') {
            newValue.start = criterion.value;
          } else if (criterion.operator === 'lessThan' || criterion.operator === 'lessOrEqual') {
            newValue.end = criterion.value;
          }
        }
        value = newValue;
      }

      this.fromDate = value.start;
      this.toDate = value.end;
    } else {
      this.fromDate = null;
      this.toDate = null;
    }
  },

  displayValue: function (value) {
    var displayValue = this.mapValueToDisplay(value) || '';
    this.setElementValue(displayValue, value);
  },

  setElementValue: function () {
    return this.Super('setElementValue', arguments);
  },

  mapDisplayToValue: function (display) {
    return display;
  },

  mapValueToDisplay: function (value) {
    if (this.singleDateMode) {
      if (this.singleDateDisplayValue) {
        return this.singleDateDisplayValue;
      }
    }
    if (!this.rangeItemValue) {
      if (!value) {
        return '';
      }
      return value;
    }
    value = this.rangeItemValue;
    var fromDate = value.start,
        toDate = value.end,
        RDI = isc.RelativeDateItem,
        start = (RDI.isRelativeDate(fromDate) ? RDI.getAbsoluteDate(fromDate.value, null, null, 'start') : fromDate),
        end = (RDI.isRelativeDate(toDate) ? RDI.getAbsoluteDate(toDate.value, null, null, 'end') : toDate);

    var prompt;
    if (start || end) {
      if (this.dateDisplayFormat) {
        if (start) {
          prompt = this.formatDate(start);
        }
        if (end) {
          if (prompt) {
            prompt += ' - ' + this.formatDate(end);
          } else {
            prompt = this.formatDate(end);
          }
        }
      } else {
        prompt = Date.getFormattedDateRangeString(start, end);
      }
      if (!start) {
        prompt = this.toDateOnlyPrefix + ' ' + prompt;
      } else if (!end) {
        prompt = this.fromDateOnlyPrefix + ' ' + prompt;
      }
    }
    this.prompt = prompt || '';
    return this.prompt;
  },

  getCriteriaValue: function () {
    return this.getCriterion();
  },

  isCorrectRangeValue: function (value) {
    if (!value) {
      return false;
    }
    if (isc.isA.Date(value)) {
      return true;
    }
    if (value._constructor && value._constructor === 'RelativeDate') {
      return true;
    }
    return false;
  },

  keyPress: function (item, form, keyName, characterValue) {
    if (keyName === 'Enter') {
      if (this.singleDateMode) {
        this.expandSingleValue();
        this.form.grid.performAction();
        return false;
      }
      this.showRangeDialog();
      return false;
    } else if (characterValue || keyName === 'Backspace' || keyName === 'Delete') {
      // only do this if something got really typed in
      this.fromDate = null;
      this.toDate = null;

      // typing, change to single date mode
      this.singleDateMode = true;
      this.singleDateValue = null;
      this.rangeItemValue = null;
      // typing a new value
      this.singleDateDisplayValue = null;
    }
    return true;
  },

  // Explicit destroy of the rangedialog as formitems don't have 
  // an auto delete of autochilds
  destroy: function () {
    this.destroying = true;
    if (this.rangeDialog) {
      this.rangeDialog.rangeForm.destroy();
      this.rangeDialog.mainLayout.destroy();
      this.rangeDialog.destroying = true;
      this.rangeDialog.destroy();
      this.rangeDialog.destroying = false;
    }
    this.Super('destroy', arguments);
    this.destroying = false;
  },

  clear: function () {
    if (this.destroying) {
      return;
    }
    this.Super('clear', arguments);
  },

  formatDate: function (dt) {
    return OB.Utilities.Date.JSToOB(dt, OB.Format.date);
  }
});
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use. this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2011-2013 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */

// = OBNumberIte =
// Contains the widgets for editing numeric values.
isc.ClassFactory.defineClass('OBNumberItem', isc.TextItem);

// = OBNumberItem =
// The Openbravo numeric form item.
isc.OBNumberItem.addProperties({
  operator: 'equals',
  typeInstance: null,

  keyPressFilterNumeric: '[0-9.,-=]',

  allowMath: true,

  validateOnExit: true,
  valueValidator: null,
  doBlurLogic: true,

  init: function () {
    this.setKeyPressFilter(this.keyPressFilterNumeric);
    this.typeInstance = isc.SimpleType.getType(this.type);
    return this.Super('init', arguments);
  },

  // after a change also store the textual value in the form
  // for precision, the textual value is sent to the server
  // which can be transferred to a bigdecimal there
  changed: function (form, item, value) {
    if (this.form.setTextualValue) {
      this.form.setTextualValue(this.name, this.getEnteredValue(), this.typeInstance);
      item.setValue(this.getEnteredValue());
    }
    this.Super('changed', arguments);
  },

  getMaskNumeric: function () {
    return this.typeInstance.maskNumeric;
  },

  getDecSeparator: function () {
    return this.typeInstance.decSeparator;
  },

  getGroupSeparator: function () {
    return this.typeInstance.groupSeparator;
  },

  getGlobalGroupInterval: function () {
    return OB.Format.defaultGroupingSize;
  },

  returnNewCaretPosition: function (numberStr, oldCaretPosition) {
    var newCaretPosition = oldCaretPosition,
        i;
    for (i = oldCaretPosition; i > 0; i--) {
      if (numberStr.substring(i - 1, i) === this.getGroupSeparator()) {
        newCaretPosition = newCaretPosition - 1;
      }
    }
    return newCaretPosition;
  },

  // focus changes the formatted value to one without grouping
  focusNumberInput: function () {
    var oldCaretPosition = 0;
    if (this.getSelectionRange()) {
      oldCaretPosition = this.getSelectionRange()[0];
    }
    // getElementValue returns the current value string, so not the typed value
    var newCaretPosition = this.returnNewCaretPosition(this.getElementValue(), oldCaretPosition);
    // update the value shown, mapValueToDisplay will call the editFormatter
    // get the edit value, without grouping symbol.
    var editValue = OB.Utilities.Number.OBMaskedToOBPlain(this.getElementValue(), this.getDecSeparator(), this.getGroupSeparator());

    if (oldCaretPosition !== newCaretPosition || editValue !== this.getElementValue()) {
      this.setElementValue(editValue);
      // in grid editing always the complete value is selected on focus
      if (this.form && this.form.grid && this.form.selectOnFocus) {
        this.selectValue();
      } else {
        this.setSelectionRange(newCaretPosition, newCaretPosition);
      }
    }
  },

  replaceAt: function (string, what, ini, end) {
    if (typeof end === 'undefined' || end === null || end === 'null' || end === '') {
      end = ini;
    }
    if (ini > end) {
      var temp = ini;
      ini = end;
      end = temp;
    }
    var newString = '';
    newString = string.substring(0, ini) + what + string.substring(end + 1, string.length);
    return newString;
  },

  // handles the decimal point of the numeric keyboard
  manageDecPoint: function (keyCode) {
    var decSeparator = this.getDecSeparator();

    if (decSeparator === '.') {
      return true;
    }

    var caretPosition = 0;
    if (this.getSelectionRange()) {
      caretPosition = this.getSelectionRange()[0];
    }
    /*
     * if(keyCode>=65 && keyCode<=90) { setTimeout(function() {obj.value =
     * replaceAt(obj.value, '', caretPosition); setCaretToPos(obj,
     * caretPosition);},5); }
     */
    var inpMaxlength = this.length;
    var inpLength = this.getElementValue().length;
    var isInpMaxLength = false;
    if (inpMaxlength === null) {
      isInpMaxLength = false;
    } else if (inpLength >= inpMaxlength) {
      isInpMaxLength = true;
    }

    if (navigator.userAgent.toUpperCase().indexOf('OPERA') !== -1 && keyCode === 78) {
      keyCode = 110;
    }

    var obj = this;
    if (keyCode === 110) {
      setTimeout(function () {
        var newValue = obj.replaceAt(obj.getElementValue(), decSeparator, caretPosition);
        obj.setElementValue(newValue);
        obj.setSelectionRange(caretPosition + 1, caretPosition + 1);
      }, 5);
    }
    return true;
  },

  manageEqualSymbol: function () {
    var obj = this;
    var caretPosition = 0;
    if (this.getSelectionRange()) {
      caretPosition = obj.getSelectionRange()[0];
    }
    setTimeout(function () {
      // can happen when a dynamic form has already been removed
      if (!obj.getElementValue()) {
        return;
      }
      var inputValue = obj.getElementValue().toString();
      var checkA = false; // Checks if there is a = in the beginning
      var checkB = false; // Checks if any undesired = is/has to be removed from the inputValue
      if (inputValue.indexOf('=') === 0) {
        checkA = true;
      }
      if (obj.allowMath) {
        while (inputValue.indexOf('=', 1) !== -1) {
          checkB = true;
          if (checkA) {
            inputValue = inputValue.substring(1, inputValue.length);
          }
          inputValue = inputValue.replace('=', '');
          if (checkA) {
            inputValue = '=' + inputValue;
          }
        }
      } else {
        while (inputValue.indexOf('=') !== -1) {
          checkB = true;
          inputValue = inputValue.replace('=', '');
        }
      }

      if (checkA && obj.allowMath) {
        obj.setKeyPressFilter('');
      } else {
        obj.setKeyPressFilter(obj.keyPressFilterNumeric);
      }

      if (checkB) {
        obj.setElementValue(inputValue);
        obj.setSelectionRange(caretPosition, caretPosition);
      }
    }, 5);
  },

  keyDown: function (item, form, keyName) {
    this.keyDownAction(item, form, keyName);
  },

  keyDownAction: function (item, form, keyName) {
    var keyCode = isc.EventHandler.lastEvent.nativeKeyCode;
    this.manageEqualSymbol();
    this.manageDecPoint(keyCode);
  },

  validateOBNumberItem: function () {
    var value = this.getElementValue();
    var isValid = this.valueValidator.condition(this, this.form, value);
    var isRequired = this.required;
    if (isValid === false) {
      this.form.setFieldErrors(this.name, isc.OBDateItem.invalidValueLabel, false);
      this.form.markForRedraw();
      return false;
    } else if (isRequired === true && (value === null || value === '' || typeof value === 'undefined')) {
      this.form.setFieldErrors(this.name, isc.OBDateItem.requiredValueLabel, false);
      this.form.markForRedraw();
      return false;
    } else {
      this.form.clearFieldErrors(this.name, false);
      this.form.markForRedraw();
    }
    return true;
  },

  focus: function (form, item) {
    if (!this.getErrors()) {
      // only do the focus/reformat if no errors
      this.focusNumberInput();
    }
    return this.Super('focus', arguments);
  },

  checkMathExpression: function (expression) {
    var jsExpression = expression;
    var dummy = 'xyxdummyxyx';

    function replaceAll(text, what, byWhat) {
      while (text.toString().indexOf(what) !== -1) {
        text = text.toString().replace(what, dummy);
      }
      while (text.toString().indexOf(dummy) !== -1) {
        text = text.toString().replace(dummy, byWhat);
      }
      return text;
    }
    jsExpression = jsExpression.substring(1, jsExpression.length);

    jsExpression = replaceAll(jsExpression, '.', '');
    jsExpression = replaceAll(jsExpression, ',', '');
    jsExpression = replaceAll(jsExpression, ';', '');
    jsExpression = replaceAll(jsExpression, '(', '');
    jsExpression = replaceAll(jsExpression, ')', '');
    jsExpression = replaceAll(jsExpression, ' ', '');

    jsExpression = replaceAll(jsExpression, '0', '');
    jsExpression = replaceAll(jsExpression, '1', '');
    jsExpression = replaceAll(jsExpression, '2', '');
    jsExpression = replaceAll(jsExpression, '3', '');
    jsExpression = replaceAll(jsExpression, '4', '');
    jsExpression = replaceAll(jsExpression, '5', '');
    jsExpression = replaceAll(jsExpression, '6', '');
    jsExpression = replaceAll(jsExpression, '7', '');
    jsExpression = replaceAll(jsExpression, '8', '');
    jsExpression = replaceAll(jsExpression, '9', '');

    jsExpression = replaceAll(jsExpression, '+', '');
    jsExpression = replaceAll(jsExpression, '-', '');
    jsExpression = replaceAll(jsExpression, '*', '');
    jsExpression = replaceAll(jsExpression, '/', '');
    jsExpression = replaceAll(jsExpression, '%', '');

    jsExpression = replaceAll(jsExpression, 'E', '');
    jsExpression = replaceAll(jsExpression, 'LN2', '');
    jsExpression = replaceAll(jsExpression, 'LN10', '');
    jsExpression = replaceAll(jsExpression, 'LOG2E', '');
    jsExpression = replaceAll(jsExpression, 'LOG10E', '');
    jsExpression = replaceAll(jsExpression, 'PI', '');
    jsExpression = replaceAll(jsExpression, 'SQRT1_2', '');
    jsExpression = replaceAll(jsExpression, 'SQRT2', '');

    jsExpression = replaceAll(jsExpression, 'abs', '');
    jsExpression = replaceAll(jsExpression, 'acos', '');
    jsExpression = replaceAll(jsExpression, 'asin', '');
    jsExpression = replaceAll(jsExpression, 'atan', '');
    jsExpression = replaceAll(jsExpression, 'atan2', '');
    jsExpression = replaceAll(jsExpression, 'ceil', '');
    jsExpression = replaceAll(jsExpression, 'cos', '');
    jsExpression = replaceAll(jsExpression, 'exp', '');
    jsExpression = replaceAll(jsExpression, 'floor', '');
    jsExpression = replaceAll(jsExpression, 'log', '');
    jsExpression = replaceAll(jsExpression, 'max', '');
    jsExpression = replaceAll(jsExpression, 'min', '');
    jsExpression = replaceAll(jsExpression, 'pow', '');
    jsExpression = replaceAll(jsExpression, 'random', '');
    jsExpression = replaceAll(jsExpression, 'round', '');
    jsExpression = replaceAll(jsExpression, 'sin', '');
    jsExpression = replaceAll(jsExpression, 'sqrt', '');
    jsExpression = replaceAll(jsExpression, 'tan', '');

    if (jsExpression === '') {
      return true;
    } else {
      return false;
    }
  },

  // ** {{{ evalMathExpression }}} **
  // evalMathExpression allows you to perform mathematical tasks.
  //
  // All operations can be done by using the symbol = at the beginning of the numeric input
  //
  // Syntax examples:
  // =PI // Returns 3.14159
  // =1+2+3 // Returns 6
  // =sqrt(16) // Returns 4
  //
  // Binary operations:
  // a + b             Add a and b
  // a - b             Subtract b from a
  // a * b             Multiply a by b
  // a / b             Divide a by b
  // a % b             Find the remainder of division of a by b
  //
  // Constants:
  // E                 Returns Euler's number (approx. 2.718)
  // LN2               Returns the natural logarithm of 2 (approx. 0.693)
  // LN10              Returns the natural logarithm of 10 (approx. 2.302)
  // LOG2E             Returns the base-2 logarithm of E (approx. 1.442)
  // LOG10E            Returns the base-10 logarithm of E (approx. 0.434)
  // PI                Returns PI (approx. 3.14159)
  // SQRT1_2           Returns the square root of 1/2 (approx. 0.707)
  // SQRT2             Returns the square root of 2 (approx. 1.414)
  //
  // Operator functions
  // abs(x)            Returns the absolute value of x
  // acos(x)           Returns the arccosine of x, in radians
  // asin(x)           Returns the arcsine of x, in radians
  // atan(x)           Returns the arctangent of x as a numeric value between -PI/2 and PI/2 radians
  // atan2(y;x)        Returns the arctangent of the quotient of its arguments
  // ceil(x)           Returns x, rounded upwards to the nearest integer
  // cos(x)            Returns the cosine of x (x is in radians)
  // exp(x)            Returns the value of Ex
  // floor(x)          Returns x, rounded downwards to the nearest integer
  // log(x)            Returns the natural logarithm (base E) of x
  // max(x;y;z;...;n)  Returns the number with the highest value
  // min(x;y;z;...;n)  Returns the number with the lowest value
  // pow(x;y)          Returns the value of x to the power of y
  // random()          Returns a random number between 0 and 1
  // round(x)          Rounds x to the nearest integer
  // sin(x)            Returns the sine of x (x is in radians)
  // sqrt(x)           Returns the square root of x
  // tan(x)            Returns the tangent of an angle
  evalMathExpression: function (expression) {
    if (!this.checkMathExpression(expression)) {
      return 'error';
    }
    var jsExpression = expression;
    var dummy = 'xyxdummyxyx';
    var result;
    var decSeparator = this.getDecSeparator();
    var groupSeparator = this.getGroupSeparator();

    function replaceAll(text, what, byWhat) {
      while (text.toString().indexOf(what) !== -1) {
        text = text.toString().replace(what, dummy);
      }
      while (text.toString().indexOf(dummy) !== -1) {
        text = text.toString().replace(dummy, byWhat);
      }
      return text;
    }
    jsExpression = jsExpression.substring(1, jsExpression.length);

    jsExpression = replaceAll(jsExpression, groupSeparator, '');
    jsExpression = replaceAll(jsExpression, decSeparator, '.');
    jsExpression = replaceAll(jsExpression, ';', ',');

    jsExpression = replaceAll(jsExpression, 'E', 'Math.E');
    jsExpression = replaceAll(jsExpression, 'LN2', 'Math.LN2');
    jsExpression = replaceAll(jsExpression, 'LN10', 'Math.LN10');
    jsExpression = replaceAll(jsExpression, 'LOG2E', 'Math.LOG2E');
    jsExpression = replaceAll(jsExpression, 'LOG10E', 'Math.LOG10E');
    jsExpression = replaceAll(jsExpression, 'PI', 'Math.PI');
    jsExpression = replaceAll(jsExpression, 'SQRT1_2', 'Math.SQRT1_2');
    jsExpression = replaceAll(jsExpression, 'SQRT2', 'Math.SQRT2');

    jsExpression = replaceAll(jsExpression, 'abs', 'Math.abs');
    jsExpression = replaceAll(jsExpression, 'acos', 'Math.acos');
    jsExpression = replaceAll(jsExpression, 'asin', 'Math.asin');
    jsExpression = replaceAll(jsExpression, 'atan', 'Math.atan');
    jsExpression = replaceAll(jsExpression, 'atan2', 'Math.atan2');
    jsExpression = replaceAll(jsExpression, 'ceil', 'Math.ceil');
    jsExpression = replaceAll(jsExpression, 'cos', 'Math.cos');
    jsExpression = replaceAll(jsExpression, 'exp', 'Math.exp');
    jsExpression = replaceAll(jsExpression, 'floor', 'Math.floor');
    jsExpression = replaceAll(jsExpression, 'log', 'Math.log');
    jsExpression = replaceAll(jsExpression, 'max', 'Math.max');
    jsExpression = replaceAll(jsExpression, 'min', 'Math.min');
    jsExpression = replaceAll(jsExpression, 'pow', 'Math.pow');
    jsExpression = replaceAll(jsExpression, 'random', 'Math.random');
    jsExpression = replaceAll(jsExpression, 'round', 'Math.round');
    jsExpression = replaceAll(jsExpression, 'sin', 'Math.sin');
    jsExpression = replaceAll(jsExpression, 'sqrt', 'Math.sqrt');
    jsExpression = replaceAll(jsExpression, 'tan', 'Math.tan');

    try {
      result = eval(jsExpression);
      if (isNaN(result)) {
        result = 'error';
      }
    } catch (e) {
      result = 'error';
    }

    //result = replaceAll(result, '.', decSeparator);
    return result;
  },

  blur: function () {
    var value, roundedValue, textRoundedValue;

    // Make sure the number is rounded using the number of decimal digits specified in the number typeInstance
    if (isc.isA.String(this.getValue())) {
      value = OB.Utilities.Number.OBPlainToOBMasked(this.getValue(), this.typeInstance.maskNumeric, this.typeInstance.decSeparator, this.typeInstance.groupSeparator);
      this.setValue(OB.Utilities.Number.OBMaskedToJS(value, this.typeInstance.decSeparator, this.typeInstance.groupSeparator));
      if (this.form.setTextualValue) {
        this.form.setTextualValue(this.name, value, this.typeInstance);
      }
    }

    if (this.grid && this.grid.isEditing && this.grid.isEditing()) {
      this.grid.setEditValue(this.grid.getEditRow(), this.name, this.getValue(), true, true);
    }

    if (this.form && this.form._isRedrawing) {
      return;
    }

    // prevent validation/blurhandling when we are showing the editor and moving
    // the focus around
    if (this.form && this.form.grid && this.form.grid._showingEditor) {
      return;
    }

    if (this.doBlurLogic) {
      this.validate();

      value = this.getValue();

      // first check if the number is valid
      if (!isc.isA.String(value)) {
        // format the value displayed
        this.setElementValue(this.mapValueToDisplay(value));
      }
    }
    return this.Super('blur', arguments);
  }
});

// Use our custom validator for float and integers
isc.OBNumberItem.validateCondition = function (item, validator, value) {
  var undef, ret, type;

  if (!item.typeInstance) {
    // this happens when data is validated which is returned from the system
    // and added to the grid
    return true;
  }

  if (value === null || value === undef) {
    return true;
  }

  if (item.allowMath && isc.isA.String(value) && value.indexOf('=') === 0) {
    value = String('') + item.evalMathExpression(value);
  }

  type = item.typeInstance;
  delete validator.resultingValue;

  // return a formatted value, if it was valid
  if (isc.isA.String(value)) {
    if (OB.Utilities.Number.IsValidValueString(type, value)) {
      validator.resultingValue = OB.Utilities.Number.OBMaskedToJS(value, type.decSeparator, type.groupSeparator);
      item.storeValue(validator.resultingValue);
      if (item.form && item.form.setTextualValue) {
        item.form.setTextualValue(item.name, value, item.typeInstance);
      }
      return true;
    } else {
      // don't loose illegal values
      validator.resultingValue = item.getElementValue();
      return false;
    }
  } else if (isc.isA.Number(value)) {
    validator.resultingValue = value;
    return true;
  }
  // don't loose illegal values
  validator.resultingValue = item.getElementValue();
  return false;
};

isc.Validator.addValidator('isFloat', isc.OBNumberItem.validateCondition);
isc.Validator.addValidator('isInteger', isc.OBNumberItem.validateCondition);

isc.ClassFactory.defineClass('OBNumberFilterItem', isc.OBNumberItem);

isc.OBNumberFilterItem.addProperties({
  allowExpressions: true,
  validateOnExit: false,
  validateOnChange: false,
  // allow any key to support =.name for example
  keyPressFilterNumeric: null,
  doBlurLogic: false,
  operator: 'equals',
  validOperators: ['equals', 'lessThan', 'greaterThan', 'notEqual', 'lessThan', 'lessOrEqual', 'greaterOrEqual', 'between', 'betweenInclusive', 'isNull', 'isNotNull', 'equalsField', 'notEqualField', 'greaterThanField', 'lessThanField', 'greaterOrEqualField', 'lessOrEqualField'],

  // prevent handling of equal symbol in filteritem
  keyDownAction: function (item, form, keyName) {
    var keyCode = isc.EventHandler.lastEvent.nativeKeyCode;
    this.manageDecPoint(keyCode);
  },

  parseValueExpressions: function (value, fieldName, operator) {
    var ret;

    if (isc.isA.String(value)) {
      value = value.trim();
    }

    ret = this.Super('parseValueExpressions', [value, fieldName, operator]);
    if (ret && ret.start) {
      ret.start = this.convertToTypedValue(ret.start);
    }

    if (ret && ret.end) {
      ret.end = this.convertToTypedValue(ret.end);
    }

    if (ret && ret.value) {
      ret.value = this.convertToTypedValue(ret.value);
    }

    return ret;
  },

  buildValueExpressions: function (criterion) {
    var i = 0,
        criteria, length;
    if (criterion && !criterion.criteria) {
      criterion = {
        criteria: [criterion]
      };
    }
    if (criterion.criteria) {
      criterion = isc.clone(criterion);
      length = criterion.criteria.length;
      for (i = 0; i < length; i++) {
        criteria = criterion.criteria[i];
        if (criteria.operator === 'iNotEqual') {
          criteria.operator = 'notEqual';
        }
        if (criteria.start) {
          criteria.start = this.convertToStringValue(criteria.start);
        }
        if (criteria.end) {
          criteria.end = this.convertToStringValue(criteria.end);
        }
        if (criteria.value) {
          criteria.value = this.convertToStringValue(criteria.value);
        }
      }
    }
    var ret = this.Super('buildValueExpressions', [criterion]);
    if (isc.isA.String(ret) && ret.contains('undefined')) {
      return ret.replace('undefined', '');
    }
    return ret;
  },

  // If the filter has not been applied yet, apply it when it loses the focus
  blur: function () {
    var undef;
    //do not apply the filter if the value is undefined. Can happen in cases where a record is opened directly and creates an additional datasource call.
    //Refer issue https://issues.openbravo.com/view.php?id=24692
    //if there was an existing value in filter and it is removed, the getValue() returns null, so the filter will be removed to show all values.
    if (this.getValue() !== undef) {
      this.form.grid.performAction();
    }
    return this.Super('blur', arguments);
  },

  convertToStringValue: function (value) {
    var type = this.typeInstance;
    if (isc.isA.String(value) && !isNaN(value)) {
      value = parseFloat(value);
    }
    if (!isc.isA.String(value)) {
      return OB.Utilities.Number.JSToOBMasked(value, type.maskNumeric, type.decSeparator, type.groupSeparator, OB.Format.defaultGroupingSize);
    }
    return value;
  },

  focusNumberInput: function () {},

  convertToTypedValue: function (value) {
    if (isc.isA.String(value)) {
      value = value.trim();
    }
    if (isc.isA.String(value) && OB.Utilities.Number.IsValidValueString(this.typeInstance, value)) {
      return OB.Utilities.Number.OBMaskedToJS(value, this.typeInstance.decSeparator, this.typeInstance.groupSeparator);
    }
    return value;
  }
});
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use. this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2011-2012 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */

// == OBSearchItem ==
// Item used for Openbravo search fields.
isc.ClassFactory.defineClass('OBSearchItem', isc.StaticTextItem);

isc.ClassFactory.mixInInterface('OBSearchItem', 'OBLinkTitleItem');

// a global function as it is called from classic windows
(function (w) {

  w.closeSearch = function (action, value, display, parameters, wait) {
    var length, i, hiddenInputName, targetFld = isc.OBSearchItem.openSearchItem,
        currentValue = targetFld.getValue();
    if (action === 'SAVE') {
      if (!targetFld.valueMap) {
        targetFld.valueMap = {};
      }

      targetFld.storeValue(value);
      if (!targetFld.valueMap) {
        targetFld.valueMap = {};
      }
      targetFld.valueMap[targetFld.getValue()] = display;
      if (targetFld.displayField) {
        targetFld.form.setValue(targetFld.displayField, display);
      }
      targetFld.updateValueMap(true);

      if (parameters && parameters.length > 0) {
        length = parameters.length;
        for (i = 0; i < length; i++) {
          hiddenInputName = ((parameters[i].esRef) ? targetFld.inpColumnName : '') + parameters[i].campo;
          // Revisit for grid editor, maybe setting the value in the form will set it
          // in the record to be kepped there 
          targetFld.form.hiddenInputs[hiddenInputName] = parameters[i].valor;
        }
      }
      targetFld._hasChanged = true;
      if (targetFld.form.handleItemChange) {
        targetFld.form.handleItemChange(targetFld);
      }
      // fire with a delay otherwise results in strange errors
      targetFld.fireOnPause('validate', targetFld.validate, null, targetFld);

      if (targetFld.form.focusInNextItem) {
        targetFld.form.focusInNextItem(targetFld.name);
      }
    }
    isc.OBSearchItem.openedWindow.close();
    isc.OBSearchItem.openSearchItem = null;
  };
}(this)); // window
isc.OBSearchItem.addProperties({
  operator: 'iContains',
  showPickerIcon: true,
  canFocus: true,
  showFocused: true,
  wrap: false,
  clipValue: true,
  validateOnChange: true,

  // NOTE: FormItem don't have initWidget but use init
  init: function () {
    this.instanceClearIcon = isc.shallowClone(this.clearIcon);
    this.instanceClearIcon.formItem = this;
    this.valueMap = {};

    this.instanceClearIcon.showIf = function (form, item) {
      if (item.disabled) {
        return false;
      }
      if (item.required) {
        return false;
      }
      if (form && form.view && form.view.readOnly) {
        return false;
      }
      if (item.getValue()) {
        return true;
      }
      return false;
    };

    this.instanceClearIcon.click = function () {
      var targetFld = this.formItem;

      this.formItem.setValue(null);

      targetFld._hasChanged = true;
      targetFld.form.handleItemChange(targetFld);
      // fire with a delay otherwise results in strange errors
      targetFld.fireOnPause('validate', targetFld.validate, null, targetFld);
    };

    this.icons = [this.instanceClearIcon];

    return this.Super('init', arguments);
  },

  // show the complete displayed value, handy when the display value got clipped
  itemHoverHTML: function (item, form) {
    return this.getDisplayValue(this.getValue());
  },

  click: function () {
    this.showPicker();
    return false;
  },

  keyPress: function (item, form, keyName, characterValue) {
    if (keyName === 'Enter') {
      this.showPicker();
      return false;
    }
    return true;
  },

  showPicker: function () {
    if (this.isDisabled()) {
      return;
    }
    var parameters = [],
        index = 0,
        i = 0,
        length, propDef, inpName, values;
    var form = this.form,
        view = form.view;
    if (this.isFocusable()) {
      this.focusInItem();
    }
    parameters[index++] = 'inpIDValue';
    if (this.getValue()) {
      parameters[index++] = this.getValue();
    } else {
      parameters[index++] = '';
    }
    parameters[index++] = 'WindowID';
    parameters[index++] = view.standardWindow.windowId;
    values = view.getContextInfo(false, true, true, true);
    length = this.inFields.length;
    for (i = 0; i < length; i++) {
      inpName = this.inFields[i].columnName;
      propDef = view.getPropertyDefinitionFromInpColumnName(inpName);
      if (propDef && values[inpName]) {
        parameters[index++] = this.inFields[i].parameterName;
        parameters[index++] = values[inpName];
        // and to be save also pass the value as the input name
        parameters[index++] = inpName;
        parameters[index++] = values[inpName];
      }
    }
    this.openSearchWindow(this.searchUrl, parameters, this.getValue());
  },

  openSearchWindow: function (url, parameters, strValueID) {
    var height, width, top, left;
    var complementsNS4 = '';
    var auxField = '';
    var hidden, i;
    var displayedValue = '';

    if (this.valueMap && this.valueMap[this.getValue()]) {
      displayedValue = this.valueMap[this.getValue()];
    }

    if (url.indexOf('Location') !== -1) {
      height = 300;
      width = 600;
    } else {
      height = (screen.height - 100);
      width = 900;
    }
    top = parseInt((screen.height - height) / 2, 10);
    left = parseInt((screen.width - width) / 2, 10);

    if (isc.OBSearchItem.openedWindow) {
      isc.OBSearchItem.openedWindow.close();
      this.clearUnloadEventHandling();
    }
    isc.OBSearchItem.openedWindow = null;

    if (strValueID) {
      auxField = 'inpNameValue=' + encodeURIComponent(displayedValue);
    }
    if (parameters) {
      var total = parameters.length;
      for (i = 0; i < total; i++) {
        if (auxField !== '') {
          auxField += '&';
        }
        // TODO: check this
        //        if (parameters[i] === 'isMultiLine' && parameters[i + 1] == 'Y') {
        //          gIsMultiLineSearch = true;
        //        }
        auxField += parameters[i] + '=' + ((parameters[i + 1] !== null) ? encodeURIComponent(parameters[i + 1]) : '');
        if (parameters[i] === 'Command') {
          hidden = true;
        }
        i++;
      }
    }

    if (navigator.appName.indexOf('Netscape')) {
      complementsNS4 = 'alwaysRaised=1, dependent=1, directories=0, hotkeys=0, menubar=0, ';
    }
    var complements = complementsNS4 + 'height=' + height + ', width=' + width + ', left=' + left + ', top=' + top + ', screenX=' + left + ', screenY=' + top + ', location=0, resizable=1, scrollbars=1, status=0, toolbar=0, titlebar=0, modal=\'yes\'';
    isc.OBSearchItem.openedWindow = window.open(OB.Utilities.applicationUrl(url) + ((auxField === '') ? '' : '?' + auxField), 'SELECTOR', complements);
    if (isc.OBSearchItem.openedWindow) {
      isc.OBSearchItem.openedWindow.focus();
      this.setUnloadEventHandling();
    }
    isc.OBSearchItem.openSearchItem = this;
  },

  setUnloadEventHandling: function () {
    var me = this;
    if (document.layers) {
      document.captureEvents(isc.Event.UNLOAD);
    }
    window.onunload = function () {
      if (isc.OBSearchItem.openedWindow) {
        isc.OBSearchItem.openedWindow.close();
      }
      isc.OBSearchItem.openedWindow = null;
      me.clearUnloadEventHandling();
    };
  },

  clearUnloadEventHandling: function () {
    if (document.layers) {
      window.releaseEvents(isc.Event.UNLOAD);
    }
    window.onunload = function () {};
  },

  mapValueToDisplay: function (value) {
    if (this.displayField) {
      return this.form.getValue(this.displayField);
    } else {
      return this.Super('mapValueToDisplay', arguments);
    }
  }

});
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use. this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2011-2012 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */

// = Search Attribute widget =
// A specific subclass of OBSearchItem for attribute fields.
isc.ClassFactory.defineClass('OBPAttributeSearchItem', isc.OBSearchItem);

isc.OBPAttributeSearchItem.addProperties({
  operator: 'iContains',

  showPicker: function () {
    if (this.isDisabled()) {
      return;
    }
    var parameters = [],
        index = 0,
        i = 0,
        length, propDef, inpName, values;
    var form = this.form,
        view = form.view;
    if (this.isFocusable()) {
      this.focusInItem();
    }
    parameters[index++] = 'inpKeyValue';
    if (this.getValue()) {
      parameters[index++] = this.getValue();
    } else {
      parameters[index++] = '';
    }
    values = view.getContextInfo(false, true, true, true);
    parameters[index++] = 'WindowID';
    parameters[index++] = view.standardWindow.windowId;
    parameters[index++] = 'inpwindowId';
    parameters[index++] = view.standardWindow.windowId;
    parameters[index++] = 'inpProduct';
    parameters[index++] = values.inpmProductId;
    if (values.inpmAttributesetId) {
      parameters[index++] = 'inpmAttributesetId';
      parameters[index++] = values.inpmAttributesetId;
    }
    this.openSearchWindow('/info/AttributeSetInstance.html', parameters, this.getValue());
  }
});
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use. this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2011-2012 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */

// == OBSectionItem ==
// Form sections, used for notes, more information, attachment etc.
isc.ClassFactory.defineClass('OBSectionItem', isc.SectionItem);

isc.OBSectionItem.addProperties({
  sectionExpanded: false,

  // revisit when/if we allow disabling of section items
  // visual state of disabled or non-disabled stays the same now
  showDisabled: false,

  // some defaults, note if this changes then also the 
  // field generation logic needs to be checked
  colSpan: 4,
  startRow: true,
  endRow: true,

  canTabToHeader: true,

  alwaysTakeSpace: false,

  click: function () {
    this.focusInItem();

    var ret = this.Super('click', arguments);
    return ret;
  },

  setSectionItemInContent: function (form) {
    var i = 0,
        length = this.itemIds.length;
    for (i = 0; i < length; i++) {
      if (form.getItem(this.itemIds[i])) {
        form.getItem(this.itemIds[i]).section = this;
      }
    }
  },

  // never disable a section item
  isDisabled: function () {
    return false;
  },

  // Update the property alwaysTakeSpace when collapsing/expanding a section
  // Note: The hidden fields are not updated, they always have alwaysTakeSpace to false
  updateAlwaysTakeSpace: function (flag) {
    var i, f = this.form,
        item, length = this.itemIds.length;

    for (i = 0; i < length; i++) {
      item = f.getItem(this.itemIds[i]);
      if (item) {
        // note different cases can occur, these properties may be set, maybe
        // undefined, false or true, undefined is not always false, as a field
        // is not always processed through all logic in the system which sets
        // these properties
        if (item.hiddenInForm) {
          continue;
        }
        if (item.displayed !== false) {
          item.alwaysTakeSpace = flag;
        }
      }
    }
  },

  collapseSection: function (preventFocusChange) {
    this.updateAlwaysTakeSpace(false);

    var ret = this.Super('collapseSection', arguments);
    return ret;
  },

  expandSection: function () {
    this.updateAlwaysTakeSpace(true);

    var ret = this.Super('expandSection', arguments);
    return ret;
  },

  showIf: function (item, value, form, values) {
    var i, field, length;

    if (!this.itemIds || item.hiddenInForm === true || item.displayed === false) {
      this.updateAlwaysTakeSpace(false); // To avoid an empty space if the section is not shown
      return false;
    }

    length = this.itemIds.length;

    for (i = 0; i < length; i++) {
      field = form.getItem(this.itemIds[i]);

      if (!field || field.displayed === false || field.hiddenInForm === true) {
        continue;
      }

      if (field.obShowIf) {
        if (field.obShowIf(field, value, form)) {
          return true;
        }
      } else {
        return true;
      }
    }

    this.updateAlwaysTakeSpace(false); // To avoid an empty space if the section is not shown
    return false;
  }
});
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use. this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2011-2012 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */

//== OBAuditSectionItem ==
isc.ClassFactory.defineClass('OBAuditSectionItem', isc.OBSectionItem);

isc.OBAuditSectionItem.addProperties({

  init: function () { /* tell the form who we are */
    this.form.auditSection = this;

    this.Super('init', arguments);
  },

  // this field group does not participate in formbuilding
  personalizable: false,

  itemIds: ['creationDate', 'createdBy', 'updated', 'updatedBy']
});
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use. this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2011-2012 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */

// == OBTextAreaItem and OBPopupTextArea ==
// Input for large strings, contains 2 widgets one for editing in the form
// and one for in the grid.
isc.ClassFactory.defineClass('OBTextAreaItem', isc.TextAreaItem);

isc.OBTextAreaItem.addProperties({
  operator: 'iContains',
  validateOnExit: true,

  selectOnFocus: false,
  rowSpan: 2,

  init: function () {
    if (this.initStyle) {
      this.initStyle();
    }
    this.Super('init', arguments);
  },

  isDisabled: function () {
    var ret = this.Super('isDisabled', arguments);
    if (ret && this.showDisabled) {
      this.readOnly = true;
      this.canEdit = false;
      if (this.cellStyle.indexOf('Disabled') === -1 || (this.cellStyle.indexOf('Disabled') !== -1 && this.cellStyle.lastIndexOf('Disabled') !== this.cellStyle.length - 8)) {
        this.cellStyle = this.cellStyle + 'Disabled';
      }
      if (this.titleStyle.indexOf('Disabled') === -1 || (this.titleStyle.indexOf('Disabled') !== -1 && this.titleStyle.lastIndexOf('Disabled') !== this.titleStyle.length - 8)) {
        this.titleStyle = this.titleStyle + 'Disabled';
      }
      if (this.textBoxStyle.indexOf('Disabled') === -1 || (this.textBoxStyle.indexOf('Disabled') !== -1 && this.textBoxStyle.lastIndexOf('Disabled') !== this.textBoxStyle.length - 8)) {
        this.textBoxStyle = this.textBoxStyle + 'Disabled';
      }
    } else {
      this.readOnly = false;
      this.canEdit = true;
      if (this.cellStyle.lastIndexOf('Disabled') === this.cellStyle.length - 8) {
        this.cellStyle = this.cellStyle.substring(0, this.cellStyle.length - 8);
      }
      if (this.titleStyle.lastIndexOf('Disabled') === this.titleStyle.length - 8) {
        this.titleStyle = this.titleStyle.substring(0, this.titleStyle.length - 8);
      }
      if (this.textBoxStyle.lastIndexOf('Disabled') === this.textBoxStyle.length - 8) {
        this.textBoxStyle = this.textBoxStyle.substring(0, this.textBoxStyle.length - 8);
      }
    }
    return false;
  },

  itemHoverHTML: function (item, form) {
    if (this.isDisabled()) {
      return this.getValue();
    }
  }
});

// used in the grid
isc.ClassFactory.defineClass('OBPopUpTextAreaItem', isc.PopUpTextAreaItem);

isc.OBPopUpTextAreaItem.addProperties({
  validateOnExit: true,
  canFocus: true,
  popUpOnEnter: true
});

// hack until this gets answered:
// http://forums.smartclient.com/showthread.php?p=61621#post61621
// to solve this: https://issues.openbravo.com/view.php?id=16327
if (isc.ListGrid.getPrototype()._popUpTextAreaEditorTypes) {
  // handle case when loading source code
  isc.ListGrid.getPrototype()._popUpTextAreaEditorTypes.OBPopUpTextAreaItem = true;
} else if (isc.ListGrid.getPrototype().$52x) {
  isc.ListGrid.getPrototype().$52x.OBPopUpTextAreaItem = true;
}
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use. this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2013 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */

// == OBTextAreaItem and OBPopupTextArea ==
// Input for large strings, contains 2 widgets one for editing in the form
// and one for in the grid.
isc.ClassFactory.defineClass('OBRichTextItem', isc.RichTextItem);
isc.ClassFactory.defineClass('OBRichTextEditor', isc.RichTextEditor);

isc.OBRichTextItem.addProperties({
  operator: 'iContains',
  validateOnExit: true,
  canvasConstructor: 'OBRichTextEditor',
  canvasProperties: {
    canFocus: true,
    editAreaBackgroundColor: 'transparent',

    // "fontControls", "formatControls", "styleControls" and "colorControls"
    initialControlGroups: ["fontControls", "styleControls", "formatControls"],
    controlGroups: ["fontControls", "styleControls", "formatControls"],

    keyDown: function (event, eventInfo) {
      var me = this;
      if (this.parentElement && typeof this.parentElement.handleItemChange === 'function' && (isc.EH.getKey() === 'Backspace' || isc.EH.getKey() === 'Delete') && !isc.EH.altKeyDown()) {
        var oldValue = this.getValue();
        setTimeout(function () {
          var newValue = me.getValue();
          if (oldValue !== newValue) {
            me._hasChanged = true;
            me.parentElement.handleItemChange(me);
          }
        }, 100);
      }
      var response = OB.KeyboardManager.Shortcuts.monitor('OBViewForm');
      if (response !== false) {
        response = this.Super('keyDown', arguments);
      }
      return response;
    },

    handleFocus: function (hasFocus) {
      if (hasFocus) {
        this.setStyleName(this.styleName + 'Focused');
      } else if (this.styleName.endsWith('Focused')) {
        this.setStyleName(this.styleName.substring(0, this.styleName.length - 'Focused'.length));
      }
      if (hasFocus && !this.hasFocus) {
        this.setFocus(true);
      }
    },

    setDisabled: function (disabled) {
      if (disabled) {
        this.previousStyleName = this.styleName;
        this.setStyleName(this.editorStyleName + 'Disabled');
        this.editArea.setStyleName(this.editAreaStyleName + 'Disabled');
        this.toolbar.hide();
      } else {
        this.setStyleName(this.previousStyleName || this.editorStyleName);
        delete this.previousStyleName;
        this.editArea.setStyleName(this.editAreaStyleName);
        this.toolbar.show();
      }
      this.Super('setDisabled', arguments);
    },

    // autochilds
    editAreaProperties: {
      canFocus: true,
      styleName: 'OBFormFieldStatic',

      keyDown: function (event, eventInfo) {
        var response = OB.KeyboardManager.Shortcuts.monitor('OBViewForm');
        if (response !== false) {
          response = this.Super('keyDown', arguments);
        }
        return response;
      },

      focusChanged: function (hasFocus) {
        this.parentElement.handleFocus(hasFocus);
      }
    },
    toolbarProperties: {
      canFocus: true,

      keyDown: function (event, eventInfo) {
        var response = OB.KeyboardManager.Shortcuts.monitor('OBViewForm');
        if (response !== false) {
          response = this.Super('keyDown', arguments);
        }
        return response;
      },

      focusChanged: function (hasFocus) {
        this.parentElement.handleFocus(hasFocus);
      },

      // autochild of the autochild
      buttonProperties: {
        keyDown: function (event, eventInfo) {
          var response = OB.KeyboardManager.Shortcuts.monitor('OBViewForm');
          if (response !== false) {
            response = this.Super('keyDown', arguments);
          }
          return response;
        },

        focusChanged: function (hasFocus) {
          this.parentElement.parentElement.handleFocus(hasFocus);
        }
      }
    }
  },
  selectOnFocus: false,
  showFocused: true,
  showTitle: true,
  rowSpan: 2,
  init: function () {
    if (this.initStyle) {
      this.initStyle();
    }
    this.Super('init', arguments);
  },

  itemHoverHTML: function (item, form) {
    if (this.isDisabled()) {
      return this.getValue();
    }
  }
});

isc.OBRichTextEditor.addProperties({
  fontPrompt: OB.I18N.getLabel('OBUIAPP_SetFont'),
  fontSizePrompt: OB.I18N.getLabel('OBUIAPP_SetFontSize'),
  linkUrlTitle: OB.I18N.getLabel('OBUIAPP_SetHyperlinkURL'),

  initWidget: function () {
    this.boldSelectionDefaults.prompt = OB.I18N.getLabel('OBUIAPP_MakeSelectionBold');

    this.italicSelectionDefaults.prompt = OB.I18N.getLabel('OBUIAPP_MakeSelectionItalic');
    this.underlineSelectionDefaults.prompt = OB.I18N.getLabel('OBUIAPP_MakeSelectionUnderlined');
    this.strikethroughSelectionDefaults.prompt = OB.I18N.getLabel('OBUIAPP_StrikeThroughSelection');

    this.Super('initWidget', arguments);
  }
});

// used in the grid
isc.ClassFactory.defineClass('OBPopUpRichTextItem', isc.PopUpTextAreaItem);
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use. this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2011-2014 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */

// == OBTimeItem ==
// For entering times.
isc.ClassFactory.defineClass('OBTimeItem', isc.TimeItem);

isc.OBTimeItem.addProperties({
  operator: 'equals',
  validateOnExit: true,
  showHint: false,
  timeFormatter: 'to24HourTime',
  displayFormat: 'to24HourTime',
  short24TimeFormat: 'HH:MM:SS',
  shortTimeFormat: 'HH:MM:SS',
  long24TimeFormat: 'HH:MM:SS',
  longTimeFormat: 'HH:MM:SS',

  // make sure that the undo/save buttons get enabled, needs to be done like
  // this because changeOnKeypress is false. Activating changeOnKeypress makes the
  // item not editable as it is reformatted on keyStroke, the same happens calling
  // from this method form.itemChangeActions
  keyPress: function (item, form, keyName, characterValue) {
    var i, f = this.form,
        toolBarButtons;

    if ((f && f.view && f.view.toolBar && f.view.messageBar && f.setHasChanged) && (characterValue || keyName === 'Backspace' || keyName === 'Delete')) {
      toolBarButtons = f.view.toolBar.leftMembers;
      f.setHasChanged(true);
      f.view.messageBar.hide();
      for (i = 0; i < toolBarButtons.length; i++) {
        if (toolBarButtons[i].updateState) {
          toolBarButtons[i].updateState();
        }
      }
    }
    this.Super('keyPress', arguments);
  },

  // SmartClient's TimeItem doesn't keep time zone. Preserve it in case the
  // string contains time zone. So time in this format is kept: 12:00+01:00
  setValue: function (value) {
    if (isc.isA.String(value) && (value.contains('+') || value.contains('-'))) {
      value = isc.Time.parseInput(value, null, null, true);
    }
    if (value && isc.isA.String(value)) {
      value = isc.Time.parseInput(value);
    }
    if (value && isc.isA.Date(value)) {
      this.setTodaysDate(value);
    }
    return this.Super('setValue', arguments);
  },

  getValue: function () {
    var value = this.Super('getValue', arguments);
    if (value && isc.isA.Date(value)) {
      this.setTodaysDate(value);
    }
    return value;
  },

  setTodaysDate: function (date) {
    var today = new Date();
    // Set the month initially to January to prevent error like this
    // provided date: 15/02/2014
    // today: 31/03/2014
    // date.setDate(today.getDate()) would result in Mon Mar 02 2014 18:00:00 GMT+0100 (CET), because february does not have 31 days 
    date.setMonth(0);
    date.setDate(today.getDate());
    date.setMonth(today.getMonth());
    date.setYear(today.getFullYear());
  },

  /* The following functions allow proper timeGrid operation */

  doShowTimeGrid: function (timeValue) {
    if (this.timeGrid && !this.timeGrid.isVisible()) {
      this.timeGrid.show();
      if (this.getValue()) {
        this.timeGrid.selectTimeInList(timeValue);
      }
    }
  },
  doHideTimeGrid: function (timeValue) {
    var me = this;
    if (this.timeGrid) {
      setTimeout(function () {
        me.timeGrid.hide();
      }, 100);
    }
  },

  init: function () {
    var oldShowHint, hint;
    this.Super('init', arguments);
    if (this.showTimeGrid && this.form && !this.timeGrid) {
      oldShowHint = this.showHint;
      this.showHint = true;
      hint = this.getHint();
      this.showHint = oldShowHint;
      this.timeGridProps = this.timeGridProps || {};
      this.timeGrid = isc.OBTimeItemGrid.create(isc.addProperties({
        formItem: this,
        timeFormat: hint
      }, this.timeGridProps));
      this.form.addChild(this.timeGrid); // Added grid in the form to avoid position problems
    }
  },
  keyDown: function () {
    if (this.timeGrid) {
      if (isc.EH.getKey() === 'Arrow_Up' && (!isc.EH.ctrlKeyDown() && !isc.EH.altKeyDown() && !isc.EH.shiftKeyDown()) && this.timeGrid.isVisible()) {
        this.timeGrid.selectPreviousRecord();
      } else if (isc.EH.getKey() === 'Arrow_Down' && (!isc.EH.ctrlKeyDown() && !isc.EH.altKeyDown() && !isc.EH.shiftKeyDown()) && this.timeGrid.isVisible()) {
        this.timeGrid.selectNextRecord();
      } else {
        this.timeGrid.hide();
      }
    }
    return this.Super('keyDown', arguments);
  },
  click: function () {
    this.doShowTimeGrid(isc.Time.parseInput(this.getEnteredValue()));
    return this.Super('click', arguments);
  },
  focus: function () {
    this.doShowTimeGrid(this.getValue());
    return this.Super('focus', arguments);
  },
  blur: function () {
    this.doHideTimeGrid();
    return this.Super('blur', arguments);
  },
  moved: function () {
    if (this.timeGrid) {
      this.timeGrid.updatePosition();
    }
    return this.Super('moved', arguments);
  },
  formSaved: function (request, response, data) {
    var UTCOffsetInMiliseconds;
    if (this.getValue() !== data[this.name]) {
      // it has not been converted to the local time yet, do it now
      if (data[this.name] && data[this.name].getFullYear() <= 1970) {
        UTCOffsetInMiliseconds = OB.Utilities.Date.getUTCOffsetInMiliseconds();
        data[this.name].setTime(data[this.name].getTime() + UTCOffsetInMiliseconds);
      }
      this.setValue(data[this.name]);
    }
  }
});


isc.ClassFactory.defineClass("OBTimeItemGrid", isc.ListGrid);

isc.OBTimeItemGrid.addProperties({
  formItem: null,
  timeFormat: null,
  data: null,
  showHeader: false,
  selectionType: 'single',
  visibility: 'hidden',
  precission: 'minute',
  // Possible values are 'hour', 'minute' and 'second'
  is24hTime: true,
  minTime: '00:00:00',
  maxTime: '23:59:59',
  // Be careful with setting it as '24:00:00' since it is considered as '00:00:00' of the following day
  timeGranularity: 1800,
  // In seconds
  timeReference: '00:00:00',
  showDiffText: null,
  timeLabels: null,
  maxTimeStringLength: 0,
  _avoidHideOnBlur: false,
  _waitingForReFocus: [],

  dateObjToTimeString: function (dateObj) {
    var lengthThreshold, tmpString, isPM = false,
        dateString = '';
    if (this.precission === 'hour' || this.precission === 'minute' || this.precission === 'second') {
      tmpString = dateObj.getHours();
      if (!this.is24hTime && tmpString - 12 >= 0) {
        tmpString = tmpString - 12;
        isPM = true;
      }
      if (!this.is24hTime && tmpString === 0) {
        tmpString = 12;
      }
      tmpString = tmpString.toString();
      if (tmpString.length < 2) {
        tmpString = '0' + tmpString;
      }
      dateString += tmpString;
    }
    if (this.precission === 'minute' || this.precission === 'second') {
      tmpString = dateObj.getMinutes();
      tmpString = tmpString.toString();
      if (tmpString.length < 2) {
        tmpString = '0' + tmpString;
      }
      dateString += ':' + tmpString;
    }
    if (this.precission === 'second') {
      tmpString = dateObj.getSeconds();
      tmpString = tmpString.toString();
      if (tmpString.length < 2) {
        tmpString = '0' + tmpString;
      }
      dateString += ':' + tmpString;
    }
    if (!this.is24hTime && isPM) {
      dateString += ' pm';
    } else if (!this.is24hTime && !isPM) {
      dateString += ' am';
    }

    return dateString;
  },
  timeStringToDateObj: function (stringTime) {
    var lengthThreshold;
    if (stringTime.length < 3) {
      stringTime = stringTime + ':00:00';
    } else if (stringTime.length < 6) {
      stringTime = stringTime + ':00';
    }

    if (typeof stringTime === 'string') {
      if (parseInt(stringTime.substring(0, stringTime.length - 6), 10) < 24) {
        stringTime = new Date(new Date(0).toDateString() + ' ' + stringTime);
      } else {
        stringTime = new Date(new Date(new Date(0).setDate(2)).setHours(0));
      }
    }
    return stringTime;
  },
  normalizeDateObj: function (dateObj) {
    var timeRefHrs, timeRefMins, timeRefSecs, newTimeRef;
    if (this.precission === 'hour' || this.precission === 'minute' || this.precission === 'second') {
      timeRefHrs = dateObj.getHours();
    } else {
      timeRefHrs = 0;
    }
    if (this.precission === 'minute' || this.precission === 'second') {
      timeRefMins = dateObj.getMinutes();
    } else {
      timeRefMins = 0;
    }
    if (this.precission === 'second') {
      timeRefSecs = dateObj.getSeconds();
    } else {
      timeRefSecs = 0;
    }
    newTimeRef = new Date(0);
    newTimeRef = new Date(newTimeRef.setHours(timeRefHrs));
    newTimeRef = new Date(newTimeRef.setMinutes(timeRefMins));
    newTimeRef = new Date(newTimeRef.setSeconds(timeRefSecs));
    newTimeRef = new Date(newTimeRef.setMilliseconds(0));
    return newTimeRef;
  },
  getDiffText: function (date, reference) {
    var diffMs = (date - reference),
        diffDays = (diffMs / 86400000),
        diffHrs = ((diffMs % 86400000) / 3600000),
        diffMins = (((diffMs % 86400000) % 3600000) / 60000),
        diffSecs = ((((diffMs % 86400000) % 3600000) % 60000) / 1000),
        diffText = '';

    if (diffDays >= 0) {
      diffDays = Math.floor(diffDays);
    } else {
      diffDays = Math.ceil(diffDays);
    }
    if (diffHrs >= 0) {
      diffHrs = Math.floor(diffHrs);
    } else {
      diffHrs = Math.ceil(diffHrs);
    }
    if (diffMins >= 0) {
      diffMins = Math.floor(diffMins);
    } else {
      diffMins = Math.ceil(diffMins);
    }
    if (diffSecs >= 0) {
      diffSecs = Math.floor(diffSecs);
    } else {
      diffSecs = Math.ceil(diffSecs);
    }

    if (diffHrs === 1 || diffHrs === -1) {
      diffText += diffHrs + ' ' + this.timeLabels[21];
    } else if (diffHrs || this.precission === 'hour') {
      diffText += diffHrs + ' ' + this.timeLabels[22];
    }

    if (diffText.length > 0 && diffMins) {
      diffText += ' ';
    }

    if (diffMins === 1 || diffMins === -1) {
      diffText += diffMins + ' ' + this.timeLabels[31];
    } else if (diffMins || (!diffHrs && this.precission === 'minute')) {
      diffText += diffMins + ' ' + this.timeLabels[32];
    }

    if (diffText.length > 0 && diffSecs) {
      diffText += ' ';
    }

    if (diffSecs === 1 || diffSecs === -1) {
      diffText += diffSecs + ' ' + this.timeLabels[41];
    } else if (diffSecs || (!diffHrs && !diffMins && this.precission === 'second')) {
      diffText += diffSecs + ' ' + this.timeLabels[42];
    }

    diffText = '(' + diffText + ')';

    if (this.maxTimeStringLength < diffText.length) {
      this.maxTimeStringLength = diffText.length;
    }

    return diffText;
  },
  convertTimes: function () {
    this.minTime = this.timeStringToDateObj(this.minTime);
    this.maxTime = this.timeStringToDateObj(this.maxTime);
    this.timeReference = this.timeStringToDateObj(this.timeReference);
  },
  selectTimeInList: function (time) {
    var rowNum, i;

    time = this.timeStringToDateObj(time);
    time = this.normalizeDateObj(time);

    for (i = 0; i < this.data.length; i++) {
      if (this.normalizeDateObj(this.data[i].jsTime) <= time) {
        rowNum = i;
      } else {
        break;
      }
    }
    this.scrollCellIntoView(rowNum, null, true, true);
    this.doSelectionUpdated = false;
    this.selectSingleRecord(rowNum);
    this.doSelectionUpdated = true;
  },
  doSelectionUpdated: true,
  selectionUpdated: function (record) {
    if (this.formItem && record && this.doSelectionUpdated) {
      this.formItem.setValue(record.jsTime);
    }
    return this.Super('selectionUpdated ', arguments);
  },

  show: function () {
    var timeRef, formItemWidth;
    if (this.isVisible()) {
      return;
    }
    if (this.formItem && this.formItem.relativeField) {
      this.formItem.eventParent.getValue(this.formItem.relativeField);
      timeRef = this.formItem.eventParent.getValue(this.formItem.relativeField);
      if (timeRef) {
        timeRef = this.normalizeDateObj(timeRef);
        this.timeReference = timeRef;
        if (this.formItem && !this.formItem.showNegativeTimes) {
          this.minTime = timeRef;
        }
        this.setData(this.generateData());
      }
    }

    if (this.precission === 'hour') {
      this.setWidth(3 * this.characterWidth + this.maxTimeStringLength * this.characterWidth + 18);
    } else if (this.precission === 'minute') {
      this.setWidth(6 * this.characterWidth + this.maxTimeStringLength * this.characterWidth + 18);
    } else if (this.precission === 'second') {
      this.setWidth(9 * this.characterWidth + this.maxTimeStringLength * this.characterWidth + 18);
    }
    if (this.formItem) {
      formItemWidth = this.formItem.getVisibleWidth();
      if (formItemWidth && formItemWidth - 2 > this.getWidth()) {
        this.setWidth(formItemWidth - 2);
      }
    }

    this.updatePosition();
    return this.Super('show', arguments);
  },
  scrolled: function () {
    var me = this;
    if (isc.Browser.isIE) {
      //To avoid a problem in IE that once the scroll is pressed, the formItem loses the focus
      this._avoidHideOnBlur = true;
      this._waitingForReFocus.push('dummy');
      setTimeout(function () {
        me.formItem.form.focus();
      }, 10);
      setTimeout(function () {
        me._waitingForReFocus.pop();
        if (me._waitingForReFocus.length === 0) {
          me._avoidHideOnBlur = false;
        }
      }, 150);
    }
    this.Super('scrolled', arguments);
  },
  hide: function () {
    if (!this._avoidHideOnBlur) {
      return this.Super('hide', arguments);
    }
  },
  generateData: function () {
    var dateObj, timeGranularityInMilliSeconds, timeRef, dateArray = [];
    this.convertTimes();
    this.maxTimeStringLength = 0;
    timeRef = this.timeReference;

    if (this.precission === 'second') {
      timeGranularityInMilliSeconds = this.timeGranularity * 1000;
    } else if (this.precission === 'minute') {
      timeGranularityInMilliSeconds = Math.ceil(this.timeGranularity / 60) * 1000 * 60;
    } else if (this.precission === 'hour') {
      timeGranularityInMilliSeconds = Math.ceil(this.timeGranularity / (60 * 60)) * 1000 * 60 * 60;
    }

    while (this.minTime <= timeRef) {
      dateObj = {
        time: this.dateObjToTimeString(timeRef) + (this.showDiffText ? ' ' + this.getDiffText(timeRef, this.timeReference) : ''),
        jsTime: timeRef
      };
      dateArray.unshift(dateObj);
      timeRef = new Date(timeRef.getTime() - timeGranularityInMilliSeconds);
    }
    timeRef = this.timeReference;
    while (timeRef <= this.maxTime) {
      dateObj = {
        time: this.dateObjToTimeString(timeRef) + (this.showDiffText ? ' ' + this.getDiffText(timeRef, this.timeReference) : ''),
        jsTime: timeRef
      };
      if (timeRef !== this.timeReference) {
        dateArray.push(dateObj);
      }
      timeRef = new Date(timeRef.getTime() + timeGranularityInMilliSeconds);
    }
    return dateArray;
  },
  selectPreviousRecord: function () {
    var selectedRecord = this.getSelectedRecord(),
        i;
    if (selectedRecord) {
      for (i = 0; i < this.data.length; i++) {
        if (this.data[i] === selectedRecord && i !== 0) {
          this.scrollCellIntoView(i - 1, null, true, true);
          this.selectSingleRecord(i - 1);
          break;
        }
      }
    } else {
      this.scrollCellIntoView(0, null, true, true);
      this.selectSingleRecord(0);
    }
  },
  selectNextRecord: function () {
    var selectedRecord = this.getSelectedRecord(),
        i;
    if (selectedRecord) {
      for (i = 0; i < this.data.length; i++) {
        if (this.data[i] === selectedRecord && i !== this.data.length - 1) {
          this.scrollCellIntoView(i + 1, null, true, true);
          this.selectSingleRecord(i + 1);
          break;
        }
      }
    } else {
      this.scrollCellIntoView(0, null, true, true);
      this.selectSingleRecord(0);
    }
  },
  updatePosition: function () {
    var me = this,
        interval;
    if (this.formItem) {
      this.placeNear(this.formItem.getPageLeft() + 2, this.formItem.getPageTop() + 26);
    }
  },
  initWidget: function () {
    var labels;
    if (this.timeFormat.indexOf('SS') !== -1) {
      this.precission = 'second';
    } else if (this.timeFormat.indexOf('MM') !== -1) {
      this.precission = 'minute';
    } else if (this.timeFormat.indexOf('HH') !== -1) {
      this.precission = 'hour';
    }

    if (this.timeFormat.toUpperCase().indexOf('AM') !== -1 || this.timeFormat.toUpperCase().indexOf('PM') !== -1) {
      this.is24hTime = false;
    }

    if (this.formItem && this.formItem.timeGranularity) {
      this.timeGranularity = this.formItem.timeGranularity;
    }

    if (this.formItem && this.formItem.relativeField && this.showDiffText !== false) {
      this.showDiffText = true;
    }

    labels = OB.I18N.getLabel('OBUIAPP_TimeUnits');
    if (labels) {
      this.timeLabels = labels.split(',');
    }

    this.setData(this.generateData());

    return this.Super('initWidget', arguments);
  },
  fields: [{
    name: 'time',
    title: 'Time'
  }, {
    name: 'jsTime',
    title: 'JS Time',
    showIf: 'false'
  }]
});
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use. this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2011-2012 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */

// == OBYesNoItem ==
// Extends ComboBoxItem with preset yes and no values.
isc.ClassFactory.defineClass('OBYesNoItem', isc.ComboBoxItem);

isc.OBYesNoItem.addProperties({
  operator: 'equals',
  addUnknownValues: false,

  // solves:
  // https://issues.openbravo.com/view.php?id=18592
  setValue: function (value) {
    if (value === 'true') {
      this.Super('setValue', [true]);
    } else if (value === 'false') {
      this.Super('setValue', [false]);
    } else {
      this.Super('setValue', arguments);
    }
  },

  // is needed because addUnknownValues is false
  isUnknownValue: function (enteredValue) {
    var i, vm = this.getValueMap();
    if (vm !== null) {
      for (i = 0; i < vm.length; i++) {
        if (enteredValue === this.mapValueToDisplay(vm[i])) {
          return false;
        }
      }
    }
    return this.Super('isUnknownValue', arguments);
  },

  mapValueToDisplay: function (value, a, b, c) {
    return OB.Utilities.getYesNoDisplayValue(value);
  },
  formatPickListValue: function (value, record, field, rowNum, colNum) {
    return OB.Utilities.getYesNoDisplayValue(value);
  },

  getCriterion: function () {
    var criterion = this.Super('getCriterion', arguments);
    if (criterion && criterion.value && criterion.value === OB.I18N.labels.OBUIAPP_Yes) {
      criterion.value = true;
    } else if (criterion && criterion.value && criterion.value === OB.I18N.labels.OBUIAPP_No) {
      criterion.value = false;
    }
    return criterion;
  }
});
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use. this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2011-2012 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */


// == OBSpinnerItem ==
// Input for spinner number
isc.ClassFactory.defineClass('OBSpinnerItem', isc.SpinnerItem);

isc.OBSpinnerItem.addProperties({
  operator: 'equals',
  validateOnExit: true,
  changeOnKeypress: true
});
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2013 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */

isc.ClassFactory.defineClass('OBCharacteristicsItem', isc.CanvasItem);

isc.OBCharacteristicsItem.addProperties({
  completeValue: null,
  showTitle: false,
  init: function () {
    this.canvas = isc.OBCharacteristicsLayout.create({

    });

    this.colSpan = 4;
    this.disabled = false;

    this.Super('init', arguments);
  },

  setValue: function (value) {
    var field, formFields = [],
        itemIds = [];

    this.completeValue = value;
    if (!value || !value.characteristics) {
      if (!value) {
        this.hide();
      }
      this.Super('setValue', arguments);
      return;
    }

    this.show();

    //Remove all members the widget might have
    //this.canvas.removeMembers(this.canvas.getMembers());
    //
    //clear existing values. Refer issue https://issues.openbravo.com/view.php?id=25113
    this.canvas.clearValues();

    if (value.characteristics) {
      for (field in value.characteristics) {
        if (value.characteristics.hasOwnProperty(field)) {
          formFields.push({
            width: '*',
            title: field,
            disabled: true,
            name: '__Characteristic__' + field,
            type: 'OBTextItem',
            value: value.characteristics[field]
          });
          itemIds.push('__Characteristic__' + field);
        }
      }
    }

    formFields.unshift({
      defaultValue: this.title,
      type: 'OBSectionItem',
      sectionExpanded: true,
      itemIds: itemIds
    });


    this.canvas.setFields(formFields);

    // actual value is the one in DB
    this.setValue(value.dbValue);
  },

  destroy: function () {
    this.canvas.destroy();
    this.canvas = null;
    this.Super('destroy', arguments);
  }
});

isc.ClassFactory.defineClass('OBCharacteristicsLayout', isc.DynamicForm);

isc.OBCharacteristicsLayout.addProperties({
  titleOrientation: 'top',
  width: '*',
  numCols: 4,
  colWidths: ['25%', '25%', '25%', '25%'],
  titlePrefix: '<b>',
  titleSuffix: '</b>'
});

isc.ClassFactory.defineClass('OBCharacteristicsFilterDialog', isc.OBPopup);

isc.OBCharacteristicsFilterDialog.addProperties({
  isModal: true,
  showModalMask: true,
  dismissOnEscape: true,
  autoCenter: true,
  autoSize: true,
  vertical: true,
  showMinimizeButton: false,
  destroyOnClose: false,
  width: 100,
  height: 200,

  mainLayoutDefaults: {
    _constructor: 'VLayout',
    width: 300,
    layoutMargin: 5
  },

  buttonLayoutDefaults: {
    _constructor: 'HLayout',
    width: '100%',
    height: 40,
    layoutAlign: 'right',
    align: 'center',
    membersMargin: 5,
    autoParent: 'mainLayout'
  },

  okButtonDefaults: {
    _constructor: 'OBFormButton',
    height: 22,
    width: 80,
    canFocus: true,
    autoParent: 'buttonLayout',
    click: function () {
      this.creator.accept();
    }
  },

  clearButtonDefaults: {
    _constructor: 'OBFormButton',
    height: 22,
    width: 80,
    canFocus: true,
    autoParent: 'buttonLayout',
    click: function () {
      this.creator.clearValues();
    }
  },

  cancelButtonDefaults: {
    _constructor: 'OBFormButton',
    height: 22,
    width: 80,
    canFocus: true,
    autoParent: 'buttonLayout',
    click: function () {
      this.creator.cancel();
    }
  },

  /**
   * Based on values selected in the tree, returns the ones that are
   * going to be used for visualization and/or filtering:
   *
   *   -Filtering: includes all selected leaf nodes
   *   -Visualization: includes the top in branch fully selected nodes
   */
  getValue: function () {
    var selection = this.tree.getSelection(),
        result = {},
        i, c, chars = {},
        values = {},
        completeParentNodes = [],
        node, currentChar, grandParent;

    for (i = 0; i < selection.length; i++) {
      node = selection[i];
      if (node.isCharacteristic) {
        continue;
      }

      if (!result[node.characteristic]) {
        result[node.characteristic] = {
          name: node.characteristic$_identifier,
          values: []
        };
      }

      currentChar = result[node.characteristic];

      if (node.children) {
        // parent node, include it only if fully selected
        if (!this.tree.isPartiallySelected(node)) {
          // this is a fully selected group value
          grandParent = false;
          for (c = 0; c < node.children.length; c++) {
            if (node.children[c].children) {
              grandParent = true;
              break;
            }
          }

          if (!grandParent) {
            completeParentNodes.push(node.id);
            currentChar.values.push({
              value: node._identifier,
              filter: false,
              visualize: true
            });
          }
        }
      } else {
        // leaf node: always filters, visualized if parent is not fully selected
        currentChar.values.push({
          value: node.id,
          shownValue: node._identifier,
          filter: true,
          visualize: completeParentNodes.indexOf(node.parentId) === -1
        });
      }
    }

    return result;
  },

  accept: function () {
    if (this.callback) {
      this.fireCallback(this.callback, 'value', [this.getValue()]);
    }
    this.hide();
  },

  clearValues: function () {
    this.tree.deselectAllRecords();
  },

  cancel: function () {
    this.hide();
  },

  initWidget: function () {
    var me = this,
        dataArrived, checkInitialNodes, getNodeByID;

    this.Super('initWidget', arguments);

    this.addAutoChild('mainLayout');

    this.selectionVisualization = isc.Label.create({
      contents: null
    });
    this.mainLayout.addMember(this.selectionVisualization);



    /**
     * Overrides dataArrived to initialize the tree initial selection
     * based on the filter initial criteria
     */
    dataArrived = function () {
      var internalValue, nodeList, i, j;
      this.Super('dataArrived', arguments);
      if (this.topElement && this.topElement.creator && this.topElement.creator.internalValue) {
        this.checkInitialNodes(this.topElement.creator.internalValue);
      }

    };

    /**
     * Marks the checkboxes of the nodes that
     * are present in the initial criteria
     */
    checkInitialNodes = function (internalValue) {
      var c, v, value, node, characteristic;
      for (c in internalValue) {
        if (internalValue.hasOwnProperty(c)) {
          characteristic = internalValue[c];
          for (v = 0; v < characteristic.values.length; v++) {
            value = characteristic.values[v];
            if (value.filter) {
              node = this.getNodeByID(value.value);
              if (node) {
                this.selectRecord(node);
              }
            }
          }
        }
      }
    };

    /**
     * Returns a tree node given its id
     */
    getNodeByID = function (nodeId) {
      var i, node, nodeList = this.data.getNodeList();
      for (i = 0; i < nodeList.length; i++) {
        node = nodeList[i];
        if (node.id === nodeId) {
          return node;
        }
      }
      return null;
    };

    this.tree = isc.TreeGrid.create({
      styleName: '',
      showHeader: false,
      autoFetchData: true,
      dataArrived: dataArrived,
      checkInitialNodes: checkInitialNodes,
      getNodeByID: getNodeByID,
      loadDataOnDemand: false,
      // loading the whole tree in a single request
      height: 200,
      showOpenIcons: false,
      showDropIcons: false,
      nodeIcon: null,
      folderIcon: null,
      openIconSuffix: 'open',
      selectionAppearance: 'checkbox',
      showSelectedStyle: false,
      showPartialSelection: true,
      cascadeSelection: true,
      selectionChanged: function () {
        me.fireOnPause('updateCharacteristicsText', function () {
          //fire on pause because selecting a node raises several time selectionChanged to select its parants
          me.selectionVisualization.setContents(isc.OBCharacteristicsFilterItem.getDisplayValue(me.getValue()));
        }, 100);
      }
    });

    OB.Datasource.get('BE2735798ECC4EF88D131F16F1C4EC72', this.tree, null, true);

    this.mainLayout.addMember(this.tree);
    this.addAutoChild('buttonLayout');
    this.addAutoChild('okButton', {
      canFocus: true,
      title: OB.I18N.getLabel('OBUISC_Dialog.OK_BUTTON_TITLE')
    });
    this.addAutoChild('clearButton', {
      canFocus: true,
      title: OB.I18N.getLabel('OBUIAPP_Clear')
    });
    this.addAutoChild('cancelButton', {
      canFocus: true,
      title: OB.I18N.getLabel('OBUISC_Dialog.CANCEL_BUTTON_TITLE')
    });
    this.addItem(this.mainLayout);
  }
});


isc.ClassFactory.defineClass('OBCharacteristicsFilterItem', isc.OBTextItem);

isc.OBCharacteristicsFilterItem.addClassProperties({
  getDisplayValue: function (displayValue) {
    var c, characteristic, v, value, hasAny = false,
        result = '';

    for (c in displayValue) {
      if (displayValue.hasOwnProperty(c)) {
        characteristic = displayValue[c];
        result += (hasAny ? '], ' : '') + characteristic.name + ':[';
        hasAny = true;

        for (v = 0; v < characteristic.values.length; v++) {
          value = characteristic.values[v];
          if (value.visualize) {
            result += (v > 0 ? ' - ' : '') + (value.shownValue || value.value);
          }
        }
      }
    }
    result += hasAny ? ']' : '';
    return result;
  }
});

isc.OBCharacteristicsFilterItem.addProperties({
  operator: 'exists',

  // Allow expressions so when multiple expressions (different characteristics
  // are selected) they are properly grouped and not stored in _extraAdvancedCriteria
  // in DynamicForm.setValuesAsCriteria method, being possible in this way to properly
  // clear filters. See issue #24739
  allowExpressions: true,
  canEdit: false,
  disableIconsOnReadOnly: false,
  hqlExists: 'exists (from ProductCharacteristicValue v where {productInEntity} = v.product and v.characteristicValue.id in ($value))',
  showPickerIcon: false,
  filterDialogConstructor: isc.OBCharacteristicsFilterDialog,
  pickerIconDefaults: {
    name: 'showDateRange',
    src: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/form/productCharacteristicsFilter_ico.png',
    width: 21,
    height: 21,
    showOver: false,
    showFocused: false,
    showFocusedWithItem: false,
    hspace: 0,
    click: function (form, item, icon) {
      if (!item.disabled) {
        item.showDialog();
      }
    }
  },


  setCriterion: function (criterion) {
    if (criterion && criterion.internalValue) {
      this.internalValue = criterion.internalValue;
    }
  },

  /**
   * Criterion obtained queries the text field with the concatenation of all characteristics.
   *
   * It might be changed to query actual table of characteristic values, but this would make it
   * not usable in other views than Product
   */
  getCriterion: function () {
    var c, characteristic, v, value, charCriteria, fieldName = this.getCriteriaFieldName(),
        inValues;
    if (!this.internalValue) {
      return;
    }

    var result;
    result = {
      _constructor: 'AdvancedCriteria',
      operator: 'and',
      internalValue: this.internalValue,
      criteria: []
    };

    for (c in this.internalValue) {
      if (this.internalValue.hasOwnProperty(c)) {
        characteristic = this.internalValue[c];

        inValues = [];
        for (v = 0; v < characteristic.values.length; v++) {
          value = characteristic.values[v];
          if (value.filter) {
            inValues.push(value.value);
          }
        }

        charCriteria = {
          operator: 'exists',
          fieldName: this.getCriteriaFieldName(),
          value: inValues
        };

        charCriteria.existsQuery = this.hqlExists;
        result.criteria.push(charCriteria);
      }
    }

    return result;
  },

  setValue: function (value) {
    this.Super('setValue', isc.OBCharacteristicsFilterItem.getDisplayValue(this.internalValue));
  },

  /**
   * Reusing same method as in OBMiniDateRangeItem. It is invoked when filter is removed
   * from grid.
   */
  clearFilterValues: function () {
    this.filterDialog.tree.deselectAllRecords();
    delete this.internalValue;
  },

  filterDialogCallback: function (value) {
    // Whenever filter is changed, new criteria must force a backend call, adaptive
    // filter cannot be used for characteristics as the information to do the matching
    // is not present in client. Cache of localData needs to be cleaned up to force it;
    // if not, this criteria can be considered to be more restrictive without even
    // executing compare criteria method in case the whole page was originally retrieved
    // without any criteria.
    // See issue #24750
    if (this.grid.parentElement.data) {
      this.grid.parentElement.data.localData = null;
      this.grid.parentElement.data.allRows = null;
    }

    this.internalValue = value;
    this.setElementValue(isc.OBCharacteristicsFilterItem.getDisplayValue(value));
    this.form.grid.performAction();
  },

  init: function () {
    var propertyPath, propertyName, i;

    // Getting the product property in the entity we are filtering it.
    // It is obtained based on fieldName, in case its path is compound (i.e.
    // product$characteristicDescription), path is included up to the element
    // previous to the last one
    propertyName = 'e'; // "e" is the base entity
    propertyPath = this.getFieldName().split(OB.Constants.FIELDSEPARATOR);
    for (i = 0; i < propertyPath.length - 1; i++) {
      propertyName += '.' + propertyPath[i];
    }
    this.hqlExists = this.hqlExists.replace('{productInEntity}', propertyName);

    this.addAutoChild('filterDialog', {
      title: this.title,
      callback: this.getID() + '.filterDialogCallback(value)'
    });

    this.icons = [isc.addProperties({
      prompt: this.pickerIconPrompt
    }, this.pickerIconDefaults, this.pickerIconProperties)];

    this.Super('init', arguments);
  },

  showDialog: function () {
    this.filterDialog.show();
  },

  destroy: function () {
    this.filterDialog.destroy();
    this.filterDialog = null;
    this.Super('destroy', arguments);

  }
});

// == OBCharacteristicsGridItem ==
// If the Form Item used when editing in grid characteristics, it is an OBTextItem
// but its value is not complete (js object with information about all characteristics)
// but just database value.
isc.ClassFactory.defineClass('OBCharacteristicsGridItem', isc.OBTextItem);

isc.OBCharacteristicsGridItem.addProperties({
  setValue: function (value) {
    // forget about complex object value and use just what is in DB
    if (!value || !value.characteristics || !value.dbValue) {
      this.Super('setValue', arguments);
      return;
    }

    this.setValue(value.dbValue);
  }
});
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2010-2013 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):   Sreedhar Sirigiri (TDS), Mallikarjun M (TDS)
 ************************************************************************
 */
isc.ClassFactory.defineClass('OBToolbar', isc.ToolStrip);

isc.OBToolbar.addClassProperties({
  TYPE_SAVE: 'save',
  TYPE_SAVECLOSE: 'saveclose',
  TYPE_NEW_ROW: 'newRow',
  TYPE_NEW_DOC: 'newDoc',
  TYPE_DELETE: 'eliminate',
  TYPE_UNDO: 'undo',
  TYPE_REFRESH: 'refresh',
  TYPE_EXPORT: 'export',
  TYPE_ATTACHMENTS: 'attach',
  TYPE_CLONE: 'clone',

  SAVE_BUTTON_PROPERTIES: {
    action: function () {
      this.view.savingWithShortcut = true;
      this.view.saveRow();
      delete this.view.savingWithShortcut;
    },
    disabled: true,
    buttonType: 'save',
    sortPosition: 30,
    prompt: OB.I18N.getLabel('OBUIAPP_SaveRow'),
    updateState: function () {
      var view = this.view,
          form = view.viewForm,
          hasErrors = false,
          editRow;
      if (view.isShowingForm) {
        this.setDisabled(!(form.isNew && form.allRequiredFieldsSet()) && (form.isSaving || form.readOnly || !view.hasValidState() || form.hasErrors() || !form.hasChanged || !form.allRequiredFieldsSet()));
      } else if (view.isEditingGrid) {
        form = view.viewGrid.getEditForm();
        editRow = view.viewGrid.getEditRow();
        hasErrors = view.viewGrid.rowHasErrors(editRow);
        this.setDisabled(!(form.isNew && form.allRequiredFieldsSet()) && !hasErrors && (form.isSaving || form.readOnly || !view.hasValidState() || form.hasErrors() || !form.hasChanged || !form.allRequiredFieldsSet()));
      } else {
        this.setDisabled(true);
      }
    },
    keyboardShortcutId: 'ToolBar_Save'
  },

  SAVECLOSE_BUTTON_PROPERTIES: {
    saveDisabled: true,
    action: function () {
      var actionObject = {
        target: this,
        method: this.saveAndClose,
        parameters: []
      };
      this.view.standardWindow.doActionAfterAutoSave(actionObject, false, true);
    },

    saveAndClose: function () {
      if (!this.saveDisabled && !this.view.viewForm.validateForm()) {
        return;
      }
      this.view.switchFormGridVisibility();
      this.view.messageBar.hide();
    },

    buttonType: 'savecloseX',
    sortPosition: 40,
    prompt: OB.I18N.getLabel('OBUIAPP_CLOSEBUTTON'),
    updateState: function () {
      var view = this.view,
          form = view.viewForm;
      if (view.isShowingForm) {
        this.setDisabled(false);
        var saveDisabled = !(form.isNew && form.allRequiredFieldsSet()) && (form.isSaving || form.readOnly || !view.hasValidState() || form.hasErrors() || !form.hasChanged || !form.allRequiredFieldsSet());
        if (saveDisabled) {
          this.buttonType = 'savecloseX';
          this.prompt = OB.I18N.getLabel('OBUIAPP_CLOSEBUTTON');
        } else {
          this.buttonType = 'saveclose';
          this.prompt = OB.I18N.getLabel('OBUIAPP_SaveClose');
        }
        this.saveDisabled = saveDisabled;
      } else {
        this.setDisabled(true);
      }
      this.resetBaseStyle();
    },
    keyboardShortcutId: 'ToolBar_SaveClose'
  },

  NEW_ROW_BUTTON_PROPERTIES: {
    action: function () {
      var view = this.view,
          grid = view.viewGrid;

      // In case of no record selected getRecordIndex(undefined) returns -1,
      // which is the top position, other case it adds bellow current selected row.
      if (grid.getSelectedRecord()) {
        view.newRow(grid.getRecordIndex(grid.getSelectedRecord()));
      } else {
        // pass in -1, as newrow will put the new row one further
        view.newRow();
      }
    },
    buttonType: 'newRow',
    sortPosition: 20,
    prompt: OB.I18N.getLabel('OBUIAPP_NewRow'),
    updateState: function () {
      var view = this.view,
          selectedRecords = view.viewGrid.getSelectedRecords();
      this.setDisabled(view.viewGrid.isGrouped || view.isShowingForm || view.readOnly || view.editOrDeleteOnly || view.singleRecord || !view.hasValidState() || (selectedRecords && selectedRecords.length > 1));
    },
    keyboardShortcutId: 'ToolBar_NewRow'
  },

  NEW_DOC_BUTTON_PROPERTIES: {
    action: function () {
      this.view.newDocument();
    },
    buttonType: 'newDoc',
    sortPosition: 10,
    prompt: OB.I18N.getLabel('OBUIAPP_NewDoc'),
    updateState: function () {
      var view = this.view,
          form = view.viewForm;
      if (view.isShowingForm) {
        this.setDisabled(form.isSaving || view.readOnly || view.singleRecord || !view.hasValidState() || view.editOrDeleteOnly);
      } else {
        this.setDisabled(view.readOnly || view.singleRecord || !view.hasValidState() || view.editOrDeleteOnly);
      }
    },
    keyboardShortcutId: 'ToolBar_NewDoc'
  },

  DELETE_BUTTON_PROPERTIES: {
    action: function () {
      this.view.deleteSelectedRows();
    },
    disabled: true,
    buttonType: 'eliminate',
    sortPosition: 60,
    prompt: OB.I18N.getLabel('OBUIAPP_DeleteRow'),
    updateState: function () {
      var view = this.view,
          form = view.viewForm,
          grid = view.viewGrid,
          selectedRecords = grid.getSelectedRecords(),
          length = selectedRecords.length,
          i;
      if (!this.view.isDeleteableTable) {
        this.setDisabled(true);
        return;
      }
      for (i = 0; i < length; i++) {
        if (!grid.isWritable(selectedRecords[i])) {
          this.setDisabled(true);
          return;
        }
        if (selectedRecords[i]._new) {
          this.setDisabled(true);
          return;
        }
      }
      if (view.isShowingForm) {
        this.setDisabled(form.isSaving || form.readOnly || view.singleRecord || !view.hasValidState() || form.isNew || (view.standardWindow.allowDelete === 'N'));
      } else {
        this.setDisabled(view.readOnly || view.singleRecord || !view.hasValidState() || !grid.getSelectedRecords() || grid.getSelectedRecords().length === 0 || (view.standardWindow.allowDelete === 'N'));
      }
    },
    keyboardShortcutId: 'ToolBar_Eliminate'
  },

  REFRESH_BUTTON_PROPERTIES: {
    action: function () {
      this.view.refresh();
    },
    disabled: false,
    buttonType: 'refresh',
    sortPosition: 70,
    prompt: OB.I18N.getLabel('OBUIAPP_RefreshData'),
    updateState: function () {
      this.setDisabled(!this.view.hasNotChanged());
    },
    keyboardShortcutId: 'ToolBar_Refresh'
  },

  UNDO_BUTTON_PROPERTIES: {
    action: function () {
      this.view.undo();
      if (!this.view.isShowingForm) {
        this.setDisabled(true);
      }
    },
    disabled: true,
    buttonType: 'undo',
    sortPosition: 50,
    prompt: OB.I18N.getLabel('OBUIAPP_CancelEdit'),
    updateState: function () {
      if (this.view.isShowingForm) {
        this.setDisabled(false);
      } else {
        // Only enabled when the grid is being edited or when
        // the selected records have errors
        this.setDisabled(!this.view.isEditingGrid && this.view.hasNotChanged());
      }
    },
    keyboardShortcutId: 'ToolBar_Undo'
  },

  EXPORT_BUTTON_PROPERTIES: {
    action: function () {
      var requestProperties = {
        exportAs: 'csv',
        exportDisplay: 'download',
        _extraProperties: this.view && this.view.dataSource && this.view.dataSource.requestProperties.params._extraProperties,
        params: {
          exportToFile: true
        },
        viewState: this.view.viewGrid.getViewState(),
        tab: this.view.tabId
      };
      this.view.viewGrid.exportData(requestProperties);
    },
    disabled: false,
    buttonType: 'export',
    sortPosition: 80,
    prompt: OB.I18N.getLabel('OBUIAPP_ExportGrid'),
    updateState: function () {
      this.setDisabled(this.view.isShowingForm || this.view.viewGrid.getTotalRows() === 0 || OB.PropertyStore.get("ExportToCsv", this.view.standardWindow.windowId) === 'N');
    },
    keyboardShortcutId: 'ToolBar_Export'
  },

  ATTACHMENTS_BUTTON_PROPERTIES: {
    action: function () {
      var selectedRows = this.view.viewGrid.getSelectedRecords(),
          attachmentExists = this.view.attachmentExists,
          attachmentSection = this.view.viewForm.getItem('_attachments_'),
          me = this,
          i;
      if (this.view.isShowingForm) {
        if (!attachmentSection.isExpanded()) {
          attachmentSection.expandSection();
        }
        attachmentSection.focusInItem();
        if (this.view.viewForm.parentElement) {
          // scroll after things have been expanded
          this.view.viewForm.parentElement.delayCall('scrollTo', [null, attachmentSection.getTop()], 100);
        }

        if (!attachmentExists) {
          attachmentSection.attachmentCanvasItem.canvas.getMember(0).getMember(0).click();
        }
        return;
      }
      if (selectedRows.size() === 1) {
        this.view.viewForm.setFocusItem(attachmentSection);
        this.view.viewForm.forceFocusedField = '_attachments_';
        this.view.viewForm.expandAttachments = true;
        this.view.editRecord(selectedRows[0]);

        // Move from grid view to form view could take a while.
        // Section needs to be expanded before the viewport adjustment.
        var expandedCount = 0,
            expandedInterval;
        expandedInterval = setInterval(function () {
          expandedCount += 1;
          if (attachmentSection.isExpanded()) {
            me.view.viewForm.parentElement.scrollTo(null, attachmentSection.getTop());
            clearInterval(expandedInterval);
          }
          if (expandedCount === 50) {
            clearInterval(expandedInterval);
          }
        }, 100);

        if (!attachmentExists) {
          if (attachmentSection.attachmentCanvasItem.canvas.getMember(0)) {
            attachmentSection.attachmentCanvasItem.canvas.getMember(0).getMember(0).click();
          } else {
            // The first time the form view is loaded, the section is not already built and it could take a while to be.
            // Section needs to be built before the click event.
            var clickCount = 0,
                clickInterval;
            clickInterval = setInterval(function () {
              clickCount += 1;
              if (attachmentSection.attachmentCanvasItem.canvas.getMember(0)) {
                attachmentSection.attachmentCanvasItem.canvas.getMember(0).getMember(0).click();
                clearInterval(clickInterval);
              }
              if (clickCount === 50) {
                clearInterval(clickInterval);
              }
            }, 100);
          }
        }
      } else {
        var recordIds = "";
        for (i = 0; i < selectedRows.size(); i++) {
          if (i > 0) {
            recordIds = recordIds + ",";
          }
          recordIds = recordIds + selectedRows[i].id;
        }
        var vTabId = this.view.tabId;
        var vbuttonId = this.ID;
        isc.confirm(OB.I18N.getLabel('OBUIAPP_ConfirmDownloadMultiple'), function (clickedOK) {
          if (clickedOK) {
            var d = {
              Command: 'GET_MULTIPLE_RECORDS_OB3',
              tabId: vTabId,
              buttonId: vbuttonId,
              recordIds: recordIds
            };
            OB.Utilities.postThroughHiddenForm('./businessUtility/TabAttachments_FS.html', d);
          }
        });
      }
    },
    callback: function () {
      if (this.oldForm) {
        this.oldForm.destroy();
      }
      this.view.attachmentExists = true;
      this.customState = '';
      this.updateState();
    },
    disabled: false,
    buttonType: 'attach',
    sortPosition: 90,
    updateState: function () {
      var selectedRows = this.view.viewGrid.getSelectedRecords();
      var attachmentExists = this.view.attachmentExists;
      if (attachmentExists) {
        if (selectedRows.size() === 1) {
          this.prompt = OB.I18N.getLabel('OBUIAPP_GoToAttachments');
        } else {
          this.prompt = OB.I18N.getLabel('OBUIAPP_DownloadAttachments');
        }
        this.buttonType = 'attachExists';
      } else {
        this.prompt = OB.I18N.getLabel('OBUIAPP_CreateAttachments');
        this.buttonType = 'attach';
      }
      if (!selectedRows || selectedRows.size() === 0) {
        // If there are now selected rows then attachments button will be disabled
        this.setDisabled(true);
      } else if (selectedRows.size() > 1 && !this.view.attachmentExists) {
        // If there are more than one rows selected, and no one has attachments,
        // then attachments button will be disabled
        this.setDisabled(true);
      } else {
        this.setDisabled(false);
      }
      this.resetBaseStyle();
      if (this.view.viewForm.readOnly && !this.view.attachmentExists) {
        this.setDisabled(true);
      }
      if (this.view.standardWindow.allowAttachment === 'N') {
        this.view.viewForm.enableAttachmentsSection(false);
        this.setDisabled(true);
      }
    },
    keyboardShortcutId: 'ToolBar_Attachments'
  },

  LINK_BUTTON_PROPERTIES: {
    action: function () {
      var url = this.view.getDirectLinkUrl();
      var form = isc.OBViewForm.create({
        width: 390,
        height: 1,
        numCols: 1,
        overflow: 'visible',
        fields: [{
          type: 'OBTextAreaItem',
          selectOnFocus: true,
          width: 390,
          height: 50,
          canFocus: true,
          showTitle: false,
          name: 'url',
          title: OB.I18N.getLabel('OBUIAPP_PasteLink'),
          value: url
        }, {
          type: 'CanvasItem',
          showTitle: false,
          width: '100%',
          height: 1,
          overFlow: 'visible',
          cellStyle: 'OBFormField',
          titleStyle: 'OBFormFieldLabel',
          textBoxStyle: 'OBFormFieldInput',
          name: 'url',
          canvas: isc.Label.create({
            width: 360,
            contents: OB.I18N.getLabel('OBUIAPP_DeepLinkNote'),
            height: 1,
            overflow: 'visible'
          })
        }],
        show: function () {
          var fld = this.getFields()[0];
          this.setFocusItem(fld);
          this.Super('show', arguments);
          // do the focus with a delay to give the popup time to draw
          this.fireOnPause('link_button_show', this.focus, 50, this);
        }
      });
      var dialog = OB.Utilities.createDialog(OB.I18N.getLabel('OBUIAPP_Document_Link'));
      dialog.setContent(form);
      dialog.show();
    },
    disabled: false,
    buttonType: 'link',
    sortPosition: 300,
    prompt: OB.I18N.getLabel('OBUIAPP_GetDirectLink'),
    updateState: function () {},
    keyboardShortcutId: 'ToolBar_Link'
  },
  // This offers a mechanism to add properties at runtime to buttons created through
  // templates and java
  BUTTON_PROPERTIES: {
    'audit': {
      updateState: function () {
        var view = this.view,
            form = view.viewForm,
            grid = view.viewGrid;
        var selectedRecords = grid.getSelectedRecords();
        var disabled = false;
        if (selectedRecords && selectedRecords.length > 1) {
          disabled = true;
        } else if (view.isShowingForm && form.isNew) {
          disabled = true;
        } else if (view.isEditingGrid && grid.getEditForm().isNew) {
          disabled = true;
        } else if ((selectedRecords && selectedRecords.length > 1) || (selectedRecords && selectedRecords.length === 1 && selectedRecords[0].updated && selectedRecords[0].creationDate && selectedRecords[0].updated.getTime() === selectedRecords[0].creationDate.getTime())) {
          disabled = true;
        }
        this.setDisabled(disabled);
      },
      keyboardShortcutId: 'ToolBar_Audit'
    },
    'print': {
      updateState: function () {
        var view = this.view,
            form = view.viewForm,
            grid = view.viewGrid;
        var selectedRecords = grid.getSelectedRecords();
        var disabled = false;
        if (selectedRecords.length === 0) {
          disabled = true;
        }
        if (this.view.viewGrid.getTotalRows() === 0) {
          disabled = true;
        }
        if (view.isShowingForm && form.isNew) {
          disabled = true;
        }
        /*
         * Fixes Issue 0023270. The Business partner print button provides statistics about the
         * business partner transactions in a pop up and so handling multiple records are not allowed.
         */
        if (view.tabId === '220' && selectedRecords.length > 1) {
          disabled = true;
        }
        this.setDisabled(disabled);
      },
      keyboardShortcutId: 'ToolBar_Print'
    },
    'email': {
      updateState: function () {
        var view = this.view,
            form = view.viewForm,
            grid = view.viewGrid;
        var selectedRecords = grid.getSelectedRecords();
        var disabled = false;
        if (selectedRecords.length === 0) {
          disabled = true;
        }
        if (this.view.viewGrid.getTotalRows() === 0) {
          disabled = true;
        }
        if (view.isShowingForm && form.isNew) {
          disabled = true;
        }
        this.setDisabled(disabled);
      },
      keyboardShortcutId: 'ToolBar_Email'
    },
    'tree': {
      updateState: function () {
        var view = this.view,
            grid = view.viewGrid;
        var selectedRecords = grid.getSelectedRecords();
        var disabled = false;
        if (selectedRecords && selectedRecords.length === 0) {
          disabled = true;
        }
        this.setDisabled(disabled);
      }
    }
  },

  CLONE_BUTTON_PROPERTIES: {
    action: function () {
      alert('This method must be overridden when registering the button');
    },
    disabled: false,
    buttonType: 'clone',
    sortPosition: 100,
    prompt: OB.I18N.getLabel('OBUIAPP_CloneData'),
    updateState: function () {
      var view = this.view,
          form = view.viewForm,
          grid = view.viewGrid,
          selectedRecords = grid.getSelectedRecords();

      if (selectedRecords && selectedRecords.length > 1) {
        this.setDisabled(true);
      } else if (view.isShowingForm && form.isNew) {
        this.setDisabled(true);
      } else if (view.isEditingGrid && grid.getEditForm().isNew) {
        this.setDisabled(true);
      } else if (form.hasChanged || (view.isEditingGrid && grid.getEditForm().hasChanged)) {
        this.setDisabled(true);
      } else {
        this.setDisabled(selectedRecords.length === 0);
      }
    },
    keyboardShortcutId: 'ToolBar_Clone'
  }
});

// = OBToolbar =
//
// The OBToolbar is the toolbar to perform common actions within a form.
//
isc.OBToolbar.addProperties({
  randomId: null,
  initWidget: function () {
    var newMembers = [],
        i = 0,
        j = 0,
        length;

    this.Super('initWidget', arguments);

    this.randomId = OB.Utilities.generateRandomString(8, true, true, true, false);

    this.members = null;

    if (!this.leftMembers || this.leftMembers.length === 0) {
      this.leftMembers = OB.ToolbarRegistry.getButtons(this.view.tabId);
    }

    newMembers[j] = isc.HLayout.create({
      width: this.leftMargin,
      height: 1
    });
    j++;

    if (this.leftMembers) {

      length = this.leftMembers.length;

      for (i = 0; i < length; i++) {

        newMembers[j] = this.leftMembers[i];

        if (newMembers[j].buttonType && isc.OBToolbar.BUTTON_PROPERTIES[newMembers[j].buttonType]) {

          isc.addProperties(newMembers[j], isc.OBToolbar.BUTTON_PROPERTIES[newMembers[j].buttonType]);

        }

        OB.TestRegistry.register('org.openbravo.client.application.toolbar.button.' + this.leftMembers[i].buttonType + '.' + this.view.tabId, this.leftMembers[i]);

        newMembers[j].toolBar = this;
        newMembers[j].view = this.view;
        j++;
        newMembers[j] = isc.HLayout.create({
          width: this.leftMembersMargin,
          height: 1
        });
        j++;
      }
    }

    newMembers[j] = isc.HLayout.create({
      width: '100%',
      height: 1
    });
    j++;
    newMembers[j] = isc.HLayout.create({
      width: 40,
      height: 1
    });
    j++;

    if (this.rightMembers) {

      length = this.rightMembers.length;

      for (i = 0; i < length; i++) {
        newMembers[j] = this.rightMembers[i];
        OB.TestRegistry.register('org.openbravo.client.application.toolbar.button.' + this.rightMembers[i].property + '.' + this.view.tabId, this.rightMembers[i]);
        newMembers[j].toolBar = this;
        newMembers[j].view = this.view;
        j++;
        newMembers[j] = isc.HLayout.create({
          width: this.rightMembersMargin,
          height: 1
        });
        j++;
      }
    }

    newMembers[j] = isc.HLayout.create({
      width: this.rightMargin,
      height: 1
    });
    j++;

    this.Super('addMembers', [newMembers]);
  },

  addMems: function (m) {
    this.Super('addMembers', m);
  },

  // ** {{{ updateButtonState }}} **
  //
  // Updates the visible and disabled state of buttons using the view's form and
  // grid information.
  // 
  // NOTE: new buttons should implement the updateState method.
  //
  updateButtonState: function (noSetSession, changeEvent, forceUpdate) {
    var me = this,
        isActiveTab = false;
    if (forceUpdate || (this.view && this.view.isActiveView && this.view.isActiveView())) {
      this.fireOnPause('updateButtonState', function () {
        me.pausedUpdateButtonState(noSetSession, changeEvent);
      });
    }
  },

  pausedUpdateButtonState: function (noSetSession, changeEvent) {
    var length = this.leftMembers.length,
        i, form = this.view.isEditingGrid ? this.view.viewGrid.getEditForm() : this.view.viewForm;

    for (i = 0; i < length; i++) {
      if (this.leftMembers[i].updateState) {
        this.leftMembers[i].updateState();
      }
    }

    // and refresh the process toolbar buttons
    if (!changeEvent) {
      this.refreshCustomButtons(noSetSession);
    } else if (this.rightMembers) {
      // determine if the buttons should be hidden or not      
      if (this.view.isEditingGrid || this.view.isShowingForm) {
        if (form.hasErrors() || !form.allRequiredFieldsSet()) {
          this.hideShowRightMembers(false, noSetSession);
        } else {
          this.hideShowRightMembers(true, noSetSession);
        }
      } else {
        this.hideShowRightMembers(true, noSetSession);
      }
    }
  },

  // ** {{{ getLeftMember(member) }}} **
  //
  // It works just for left side members.
  // Given a numerical index or a left member type, return a pointer to the appropriate left member.
  // If passed a left member Canvas, just returns it.
  // If not found, returns undefined
  //
  // Parameters:
  // * {{{member}}} type: String | Number | Canvas - identifier for the required left member.
  //
  // Returns:  type: Canvas - left member widget.
  getLeftMember: function (member) {
    var i = 0,
        length = this.leftMembers.length;
    if (typeof member === 'number') {
      if (member >= 0 && member < this.leftMembers.length) {
        return this.leftMembers[member];
      }
    } else if (typeof member === 'string') {
      for (i = 0; i < length; i++) {
        if (this.leftMembers[i].buttonType === member) {
          return this.leftMembers[i];
        }
      }
    } else if (typeof member === 'object') {
      for (i = 0; i < length; i++) {
        if (this.leftMembers[i] === member) {
          return this.leftMembers[i];
        }
      }
    }
    return;
  },

  // ** {{{ getLeftMembers() }}} **
  //
  // It works just for left side members.
  // Get the Array of left members.
  // NOTE: the returned array should not be modified.
  //
  // Returns: type: Array - the Array of left members.
  getLeftMembers: function () {
    return this.leftMembers;
  },

  // ** {{{ getLeftMember(attribute, value) }}} **
  //
  // It works just for left side members.
  // Given a attribute an its value, return an array of matching left members.
  // If no matches, returns an empty array.
  //
  // Parameters:
  // * {{{attribute}}} type: String - attribute for search.
  // * {{{value}}} type: String | Number | Canvas - desired value of the attribute.
  //
  // Returns: type: Array - the Array of matching left members.
  getLeftMembersByAttribute: function (attribute, value) {
    var members = [],
        i = 0,
        length = this.leftMembers.length;
    for (i = 0; i < length; i++) {
      if (this.leftMembers[i][attribute] === value) {
        members.push(this.leftMembers[i]);
      }
    }
    return members;
  },

  // ** {{{ getLeftMemberNumber(member) }}} **
  //
  // It works just for left side members.
  // Given a left member Canvas, return its position.
  // If no matches, returns -1.
  //
  // Parameters:
  // * {{{member}}} type: Canvas - left member Canvas to obtain its position.
  //
  // Returns: type: Number - the left member Canvas position (starting from 0).
  getLeftMemberNumber: function (member) {
    var i = 0,
        length = this.leftMembers.length;
    for (i = 0; i < length; i++) {
      if (this.leftMembers[i] === member) {
        return i;
      }
    }
    return -1;
  },

  // ** {{{ removeLeftMembers(members) }}} **
  //
  // It works just for left side members.
  // Removes the specified left members from the layout.
  //
  // Parameters:
  // * {{{members}}} type: Array | Canvas - array of left members to be removed, or reference to single left member.
  removeLeftMembers: function (members) {
    var oldMembersSorted = [],
        oldArray = [],
        position = 0,
        length, i = 0,
        sortFunc;

    sortFunc = function (a, b) {
      return (a - b);
    };

    if (!(typeof members.length === 'number' && !(members.propertyIsEnumerable('length')) && typeof members.splice === 'function')) {
      members = [members];
    }
    length = members.length;
    for (i = 0; i < length; i++) { /* Clean-up of the given input and sort */
      if (typeof members[i] !== 'number') {
        members[i] = this.getLeftMemberNumber(members[i]);
      }
      if (members[i] <= this.leftMembers.length && members[i] !== -1) {
        oldMembersSorted[oldMembersSorted.length] = members[i];
      }
      oldMembersSorted = oldMembersSorted.sort(sortFunc);
    }
    length = oldMembersSorted.length;
    for (i = 0; i < length; i++) { /* Generate an array to determine which elements visually will be removed */
      position = oldMembersSorted[i];
      position = position * 2;
      position = position + 1;
      oldArray.push(position, position + 1);
    }
    oldMembersSorted = oldMembersSorted.reverse();

    length = oldMembersSorted.length;
    for (i = 0; i < length; i++) { /* Update the 'leftMembers' array */
      this.leftMembers.splice(oldMembersSorted[i], 1);
    }
    this.destroyAndRemoveMembers(oldArray); /* Remove visually the desired elements */
  },

  // ** {{{ removeAllLeftMembers() }}} **
  //
  // It works just for left side members.
  // Removes all left members from the layout.
  //
  removeAllLeftMembers: function () {
    var membersNumArray = [],
        i = 0,
        length = this.leftMembers.length;
    for (i = 0; i < length; i++) {
      membersNumArray.push(i);
    }
    this.removeLeftMembers(membersNumArray);
  },

  // ** {{{ addLeftMembers(newMembers, position) }}} **
  //
  // It works just for left side members.
  // Add one or more canvases to the left side of the toolbar, optionally at specific position.
  //
  // Parameters:
  // * {{{newMembers}}} type: Array || Object - array of canvases to be added, or reference to single canvas.
  // * {{{position (optional)}}} type: Number - position to add newMembers; if omitted newMembers will be added at the last position.
  addLeftMembers: function (newMembers, position) {
    var i = 0,
        length;
    if (!(typeof newMembers.length === 'number' && !(newMembers.propertyIsEnumerable('length')) && typeof newMembers.splice === 'function')) {
      newMembers = [newMembers];
    }
    if (position > this.leftMembers.length || typeof position === 'undefined') {
      position = this.leftMembers.length;
    }
    length = newMembers.length;
    for (i = 0; i < length; i++) {
      this.leftMembers.splice(position + i, 0, newMembers[i]);
    }
    position = position * 2;
    position = position + 1;
    length = newMembers.length;
    for (i = 0; i < length; i++) {
      this.Super('addMembers', [newMembers[i], position]);
      position = position + 1;
      this.Super('addMembers', [isc.HLayout.create({
        width: this.leftMembersMargin,
        height: 1
      }), position]);
      position = position + 1;
    }
  },

  // ** {{{ setLeftMembers(newMembers, position) }}} **
  //
  // It works just for left side members.
  // Set/Display one or more canvases to the left side of the toolbar, optionally at specific position; if any exists, it will be deleted.
  //
  // Parameters:
  // * {{{newMembers}}} type: Array || Object - array of canvases to be displayed, or reference to single canvas.
  setLeftMembers: function (newMembers) {
    this.removeAllLeftMembers();
    this.addLeftMembers(newMembers);
  },

  // ** {{{ setLeftMemberDisabled(member, state) }}} **
  //
  // It works just for left side members.
  // Set the disabled state of this left member.
  //
  // Parameters:
  // * {{{member}}} type: String | Number | Canvas - identifier for the left member to perform the action.
  // * {{{state}}} type: Boolean - new disabled state of this object; pass true to disable the left member.
  setLeftMemberDisabled: function (member, state) {
    member = this.getLeftMember(member);
    if (member) {
      member.setDisabled(state);
    }
    return;
  },

  // ** {{{ setLeftMemberSelected(member, state) }}} **
  //
  // It works just for left side members.
  // Set the selected state of this left member.
  //
  // Parameters:
  // * {{{member}}} type: String | Number | Canvas - identifier for the left member to perform the action.
  // * {{{state}}} type: Boolean - new disabled state of this object; pass true to select the left member.
  setLeftMemberSelected: function (member, state) {
    member = this.getLeftMember(member);
    if (member) {
      member.setSelected(state);
    }
    return;
  },


  // ** {{{ getRightMember(member) }}} **
  //
  // It works just for right side members.
  // Given a numerical index or a right member ID, return a pointer to the appropriate right member.
  // If passed a right member Canvas, just returns it.
  // If not found, returns undefined.
  //
  // Parameters:
  // * {{{member}}} type: String | Number | Canvas - identifier for the required right member.
  //
  // Returns: type: Canvas - right member widget.
  getRightMember: function (member) {
    var i = 0,
        length = this.rightMembers.length;
    if (typeof member === 'number') {
      if (member >= 0 && member < this.rightMembers.length) {
        return this.rightMembers[member];
      }
    } else if (typeof member === 'string') {

      for (i = 0; i < length; i++) {
        if (this.rightMembers[i].ID === member) {
          return this.rightMembers[i];
        }
      }
    } else if (typeof member === 'object') {
      for (i = 0; i < length; i++) {
        if (this.rightMembers[i] === member) {
          return this.rightMembers[i];
        }
      }
    }
    return;
  },

  // ** {{{ getRightMembers() }}} **
  //
  // It works just for right side members.
  // Get the Array of right members.
  // NOTE: the returned array should not be modified.
  //
  // Returns: type: Array - the Array of right members.
  getRightMembers: function () {
    return this.rightMembers;
  },

  // ** {{{ getRightMembersByAttribute(attribute, value) }}} **
  //
  // It works just for right side members.
  // Given a attribute an its value, return an array of matching right members.
  // If no matches, returns an empty array.
  //
  // Parameters:
  // * {{{attribute}}} type: String - attribute for search.
  // * {{{value}}} type: String | Number | Canvas - desired value of the attribute.
  //
  // Returns: type: Array - the Array of matching right members.
  getRightMembersByAttribute: function (attribute, value) {
    var members = [],
        i = 0,
        length = this.rightMembers.length;
    for (i = 0; i < length; i++) {
      if (this.rightMembers[i][attribute] === value) {
        members.push(this.rightMembers[i]);
      }
    }
    return members;
  },

  // ** {{{ getRightMemberNumber(member) }}} **
  //
  // It works just for right side members.
  // Given a right member Canvas, return its position.
  // If no matches, returns -1.
  //
  // Parameters:
  // * {{{member}}} type: Canvas - right member Canvas to obtain its position.
  //
  // Returns: type: Number - the right member Canvas position (starting from 0).
  getRightMemberNumber: function (member) {
    var i = 0,
        length = this.rightMembers.length;
    for (i = 0; i < length; i++) {
      if (this.rightMembers[i] === member) {
        return i;
      }
    }
    return -1;
  },

  // ** {{{ removeRightMembers(members) }}} **
  //
  // It works just for right side members.
  // Removes the specified right members from the layout.
  //
  // Parameters:
  // * {{{members}}} type: Array | Canvas - array of right members to be removed, or reference to single right member.
  removeRightMembers: function (members) {
    var oldMembersSorted = [],
        length, oldArray = [],
        position = 0,
        i = 0,
        sortFunc;

    sortFunc = function (a, b) {
      return (a - b);
    };
    if (!(typeof members.length === 'number' && !(members.propertyIsEnumerable('length')) && typeof members.splice === 'function')) {
      members = [members];
    }
    length = members.length;
    for (i = 0; i < length; i++) { /* Clean-up of the given input and sort */
      if (typeof members[i] !== 'number') {
        members[i] = this.getRightMemberNumber(members[i]);
      }
      if (members[i] <= this.rightMembers.length && members[i] !== -1) {
        oldMembersSorted[oldMembersSorted.length] = members[i];
      }
      oldMembersSorted = oldMembersSorted.sort(sortFunc);
    }

    length = oldMembersSorted.length;
    for (i = 0; i < length; i++) { /* Generate an array to determine which elements visually will be removed */
      position = oldMembersSorted[i];
      position = position * 2;
      position = position + 3;
      position = position + this.leftMembers.length * 2;
      oldArray.push(position, position + 1);
    }
    oldMembersSorted = oldMembersSorted.reverse();
    length = oldMembersSorted.length;
    for (i = 0; i < length; i++) { /* Update the 'rightMembers' array */
      this.rightMembers.splice(oldMembersSorted[i], 1);
    }
    this.destroyAndRemoveMembers(oldArray); /* Remove visually the desired elements */
  },

  // ** {{{ removeAllRightMembers() }}} **
  //
  // It works just for right side members.
  // Removes all right members from the layout.
  //
  removeAllRightMembers: function () {
    var membersNumArray = [],
        i = 0,
        length = this.rightMembers.length;
    for (i = 0; i < length; i++) {
      membersNumArray.push(i);
    }
    this.removeRightMembers(membersNumArray);
  },

  // ** {{{ addRightMembers(newMembers, position) }}} **
  //
  // It works just for right side members.
  // Add one or more canvases to the right side of the toolbar, optionally at specific position.
  //
  // Parameters:
  // * {{{newMembers}}} type: Array || Object - array of canvases to be added, or reference to single canvas.
  // * {{{position (optional)}}} type: Number - position to add newMembers; if omitted newMembers will be added at the last position.
  addRightMembers: function (newMembers, position) {
    var i = 0,
        length;
    if (!(typeof newMembers.length === 'number' && !(newMembers.propertyIsEnumerable('length')) && typeof newMembers.splice === 'function')) {
      newMembers = [newMembers];
    }
    if (position > this.rightMembers.length || typeof position === 'undefined') {
      position = this.rightMembers.length;
    }

    length = newMembers.length;
    for (i = 0; i < length; i++) {
      this.rightMembers.splice(position + i, 0, newMembers[i]);
    }
    position = position * 2;
    position = position + 3;
    position = position + this.leftMembers.length * 2;

    length = newMembers.length;
    for (i = 0; i < length; i++) {
      this.Super('addMembers', [newMembers[i], position]);
      position = position + 1;
      this.Super('addMembers', [isc.HLayout.create({
        width: this.rightMembersMargin,
        height: 1
      }), position]);
      position = position + 1;
    }
  },

  // ** {{{ setRightMembers(newMembers, position) }}} **
  //
  // It works just for right side members.
  // Set/Display one or more canvases to the right side of the toolbar, optionally at specific position; if any exists, it will be deleted.
  //
  // Parameters:
  // * {{{newMembers}}} type: Array || Object - array of canvases to be displayed, or reference to single canvas.
  setRightMembers: function (newMembers) {
    this.removeAllRightMembers();
    this.addRightMembers(newMembers);
  },

  // ** {{{ setRightMemberDisabled(member, state) }}} **
  //
  // It works just for right side members.
  // Set the disabled state of this right member.
  //
  // Parameters:
  // * {{{member}}} type: String | Number | Canvas - identifier for the right member to perform the action.
  // * {{{state}}} type: Boolean - new disabled state of this object; pass true to disable the right member.
  setRightMemberDisabled: function (member, state) {
    member = this.getRightMember(member);
    if (member) {
      member.setDisabled(state);
    }
    return;
  },

  // ** {{{ setRightMemberSelected(member, state) }}} **
  //
  // It works just for right side members.
  // Set the selected state of this right member.
  //
  // Parameters:
  // * {{{member}}} type: String | Number | Canvas - identifier for the right member to perform the action.
  // * {{{state}}} type: Boolean - new disabled state of this object; pass true to select the right member.
  setRightMemberSelected: function (member, state) {
    member = this.getRightMember(member);
    if (member) {
      member.setSelected(state);
    }
    return;
  },

  // ** {{{ refreshCustomButtons }}} **
  //
  // Refreshes all the custom buttons in the toolbar based on current record selection
  //
  refreshCustomButtons: function (noSetSession) {
    var selectedRecords, multipleSelectedRowIds, allProperties, i;

    var currentTabCalled = false,
        me = this,
        requestParams;

    var buttons = this.getRightMembers(),
        buttonContexts = [],
        currentContext, buttonsByContext = [],
        length, iButtonContext, callbackHandler;

    function doRefresh(buttons, currentValues, hideAllButtons, noneOrMultipleRecordsSelected, me) {
      var i, length = me.rightMembers.length;
      for (i = 0; i < length; i++) { // To disable any button previous defined keyboard shortcut
        me.rightMembers[i].disableShortcut();
      }
      length = buttons.length;
      for (i = 0; i < length; i++) {
        if (buttons[i].updateState) {
          buttons[i].updateState(currentValues, hideAllButtons, null, !noneOrMultipleRecordsSelected);
        }
      }
      length = me.leftMembers.length;
      for (i = 0; i < length; i++) {
        if (me.leftMembers[i].updateState) {
          me.leftMembers[i].updateState();
        }
      }
      if (me.view.isActiveView()) {
        me.defineRightMembersShortcuts(); // To re-calculate the target key for keyboard shortcuts
        length = me.rightMembers.length;
        for (i = 0; i < length; i++) {
          me.rightMembers[i].enableShortcut(); // To enable each button keyboard shortcut
        }
      }
    }

    if (buttons.length === 0) {
      if (!noSetSession && this.view.viewGrid && this.view.viewGrid.getSelectedRecord()) {
        this.view.setContextInfo();
      }
    } else {
      length = buttons.length;
      for (i = 0; i < length; i++) {
        if (!currentContext || currentContext !== buttons[i].contextView) {
          // Adding new context
          currentContext = buttons[i].contextView;
          buttonContexts.push(currentContext);
          buttonsByContext[currentContext] = [];
        }
        buttonsByContext[currentContext].push(buttons[i]);
      }

      // This is needed to prevent JSLint complaining about "Don't make functions within a loop.
      callbackHandler = function (currentContext, me) {
        return function (response, data, request) {
          var noneOrMultipleRecordsSelected = currentContext.viewGrid.getSelectedRecords().length !== 1;
          var sessionAttributes = data.sessionAttributes,
              auxInputs = data.auxiliaryInputValues,
              attachmentExists = data.attachmentExists,
              prop;
          if (sessionAttributes) {
            currentContext.viewForm.sessionAttributes = sessionAttributes;
          }

          if (auxInputs) {
            this.auxInputs = {};
            for (prop in auxInputs) {
              if (auxInputs.hasOwnProperty(prop)) {
                currentContext.viewForm.setValue(prop, auxInputs[prop].value);
                currentContext.viewForm.auxInputs[prop] = auxInputs[prop].value;
              }
            }
          }
          currentContext.viewForm.view.attachmentExists = attachmentExists;
          doRefresh(buttonsByContext[currentContext], currentContext.getCurrentValues() || {}, noneOrMultipleRecordsSelected, noneOrMultipleRecordsSelected, me);
          //compute and apply tab display logic again after fetching auxilary inputs.
          currentContext.updateSubtabVisibility();
        };
      };


      length = buttonContexts.length;
      for (iButtonContext = 0; iButtonContext < length; iButtonContext++) {
        currentContext = buttonContexts[iButtonContext];

        selectedRecords = currentContext.viewGrid.getSelectedRecords() || [];
        var numOfSelRecords = 0,
            theForm = this.view.isEditingGrid ? this.view.viewGrid.getEditForm() : this.view.viewForm,
            isNew = currentContext.viewForm.isNew,
            hideAllButtons = selectedRecords.size() === 0 && !currentContext.isShowingForm,
            currentValues = currentContext.getCurrentValues(),
            gridVisibleProperties = [],
            len;

        if (!hideAllButtons && (this.view.isEditingGrid || this.view.isShowingForm)) {
          hideAllButtons = theForm.hasErrors() || !theForm.allRequiredFieldsSet();
        }
        if (hideAllButtons) {
          this.hideShowRightMembers(false, noSetSession);
        }

        if (currentContext.viewGrid.getSelectedRecords()) {
          numOfSelRecords = currentContext.viewGrid.getSelectedRecords().length;
        }

        var noneOrMultipleRecordsSelected = numOfSelRecords !== 1 && !isNew;

        if (currentValues && !noSetSession && !currentContext.isShowingForm && !isNew && !hideAllButtons && currentContext.ID === this.view.ID) {
          if (this.view.tabId === currentContext.tabId) {
            currentTabCalled = true;
          }
          // Call FIC to obtain possible session attributes and set them in form
          requestParams = {
            MODE: 'SETSESSION',
            PARENT_ID: currentContext.getParentId(),
            TAB_ID: currentContext.tabId,
            ROW_ID: currentValues.id
          };
          multipleSelectedRowIds = [];
          if (selectedRecords.size() > 1) {
            for (i = 0; i < selectedRecords.size(); i++) {
              multipleSelectedRowIds[i] = selectedRecords[i].id;
            }
            requestParams.MULTIPLE_ROW_IDS = multipleSelectedRowIds;
          }
          allProperties = currentContext.getContextInfo(false, true, false, true);
          if (currentContext.viewGrid && currentContext.viewGrid.fields) {
            len = currentContext.viewGrid.fields.length;
            for (i = 0; i < len; i++) {
              if (currentContext.viewGrid.fields[i].name[0] !== '_') {
                gridVisibleProperties.push(currentContext.viewGrid.fields[i].name);
              }
            }
            allProperties._gridVisibleProperties = gridVisibleProperties;
          }
          OB.RemoteCallManager.call('org.openbravo.client.application.window.FormInitializationComponent', allProperties, requestParams, callbackHandler(currentContext, me));
        } else {
          doRefresh(buttonsByContext[currentContext], currentValues || {}, hideAllButtons || noneOrMultipleRecordsSelected, numOfSelRecords !== 1, this);
        }
      }
    }
    if (!currentTabCalled && !noSetSession && !this.view.isShowingForm && !this.view.viewForm.isNew && this.view.viewGrid.getSelectedRecords().size() !== 0) {
      selectedRecords = this.view.viewGrid.getSelectedRecords();
      //The call to the FIC for the current tab was not done (probably because it doesn't have buttons, or the buttons do not depend on session vars/aux ins.
      //However, a call still needs to be done, to set the attachments information
      requestParams = {
        MODE: 'SETSESSION',
        PARENT_ID: this.view.getParentId(),
        TAB_ID: this.view.tabId
      };
      multipleSelectedRowIds = [];
      if (selectedRecords.size() >= 1) {
        for (i = 0; i < selectedRecords.size(); i++) {
          if (i === 0) {
            requestParams.ROW_ID = selectedRecords[i].id;
          }
          multipleSelectedRowIds[i] = selectedRecords[i].id;
        }
        if (selectedRecords.size() > 1) {
          requestParams.MULTIPLE_ROW_IDS = multipleSelectedRowIds;
        }
      }
      allProperties = this.view.getContextInfo(false, true, false, true);
      OB.RemoteCallManager.call('org.openbravo.client.application.window.FormInitializationComponent', allProperties, requestParams, function (response, data, request) {
        var attachmentExists = data.attachmentExists;
        me.view.attachmentExists = attachmentExists;
        //Call to refresh the buttons. As its called with noSetSession=true, it will not cause an infinite recursive loop
        me.updateButtonState(true);
      });
    }
  },

  hideShowRightMembers: function (show, noSetSession) {
    var i, button, context;
    // if showing make sure that they are not always shown
    if (show) {
      this.refreshCustomButtons(noSetSession);
    } else {
      for (i = 0; i < this.rightMembers.length; i++) {
        button = this.rightMembers[i];
        if (button.autosave) {
          button.hide();
        } else {
          // do not hide non autosave buttons, keep them in case display logic allows it
          context = button.contextView;
          button.updateState(context.getCurrentValues(), false, context.getContextInfo(false, true, true));
        }
      }
    }
  },

  // ** {{{ refreshCustomButtonsView }}} **
  //
  // Refreshes all the custom buttons in the toolbar having contextView === view
  // Used to update state of buttons dynamically on field change
  //
  refreshCustomButtonsView: function (view) {
    var i, context = view.getContextInfo(false, true, true),
        length;

    length = this.rightMembers.length;
    for (i = 0; i < length; i++) {
      if (this.rightMembers[i].contextView === view) {
        this.rightMembers[i].updateState(view.getCurrentValues(), false, context);
      }
    }
  },

  visibilityChanged: function (state) {
    if (state) {
      this.enableShortcuts();
    } else {
      this.disableShortcuts();
    }
  },

  draw: function () {
    this.Super('draw', arguments);
    this.defineRightMembersShortcuts();
    this.enableShortcuts();
  },

  rightMembersShortcuts: [],

  defineRightMembersShortcuts: function () {
    var i, j, k, id, character, position, length, titleLength;

    function isAssignedCharacter(character, me) {
      var n, length;
      if (character === ' ') {
        return true;
      }
      character = character.toString();
      character = character.toUpperCase();
      length = me.rightMembersShortcuts.length;
      for (n = 0; n < length; n++) {
        if (me.rightMembersShortcuts[n][0] === character) {
          return true;
        }
      }
      return false;
    }

    this.rightMembersShortcuts = [];
    length = this.rightMembers.length;
    for (i = 0; i < length; i++) {
      var title = this.rightMembers[i].realTitle,
          haveToContinue = true;
      this.rightMembersShortcuts[i] = [];
      if (haveToContinue) { // Check if free character and assign
        haveToContinue = true;
        titleLength = title.length;
        for (j = 0; j < titleLength; j++) {
          if (!isAssignedCharacter(title.substring(j, j + 1), this)) {
            this.rightMembersShortcuts[i][0] = title.substring(j, j + 1).toUpperCase();
            this.rightMembersShortcuts[i][1] = j + 1;
            haveToContinue = false;
            break;
          }
        }
      }
      if (haveToContinue) { // Check if free number and assign
        haveToContinue = true;
        for (k = 1; k < 10; k++) {
          if (!isAssignedCharacter(k, this)) {
            this.rightMembersShortcuts[i][0] = k;
            this.rightMembersShortcuts[i][1] = 'end';
            haveToContinue = false;
            break;
          }
        }
      }
      if (haveToContinue) {
        this.rightMembersShortcuts[i][0] = '';
        this.rightMembersShortcuts[i][1] = 0;
      }
      this.rightMembers[i].keyboardShortcutId = this.randomId + '_' + i;
      this.rightMembers[i].keyboardShortcutCharacter = this.rightMembersShortcuts[i][0];
      this.rightMembers[i].keyboardShortcutPosition = this.rightMembersShortcuts[i][1];
    }
  },

  enableShortcuts: function () {
    var length, i;
    if (this.leftMembers) {
      length = this.leftMembers.length;
      for (i = 0; i < length; i++) {
        if (this.leftMembers[i].enableShortcut) {
          this.leftMembers[i].enableShortcut();
        }
      }
    }
    if (this.rightMembers) {
      this.defineRightMembersShortcuts();
      length = this.rightMembers.length;
      for (i = 0; i < length; i++) {
        if (this.rightMembers[i].enableShortcut) {
          this.rightMembers[i].enableShortcut();
        }
      }
    }
  },

  disableShortcuts: function () {
    var length, i;
    if (this.leftMembers) {
      length = this.leftMembers.length;
      for (i = 0; i < length; i++) {
        if (this.leftMembers[i].disableShortcut) {
          this.leftMembers[i].disableShortcut();
        }
      }
    }
    if (this.rightMembers) {
      length = this.rightMembers.length;
      for (i = 0; i < length; i++) {
        if (this.rightMembers[i].disableShortcut) {
          this.rightMembers[i].disableShortcut();
        }
      }
    }
  },

  addMembers: 'null',

  leftMembers: [],
  rightMembers: [],

  styleName: 'OBToolbar',
  overflow: 'auto',
  membersMargin: 0
});


/** ----------------------------- **/


isc.ClassFactory.defineClass('OBToolbarIconButton', isc.MenuButton);

isc.OBToolbarIconButton.addProperties({
  showRollOver: true,
  showDisabled: true,
  showFocused: true,
  showDown: true,
  showFocusedAsOver: false,
  title: '.',
  showHover: true,
  customState: '',
  showMenuButtonImage: false,

  initWidget: function () {
    this.Super('initWidget', arguments);
    this.resetBaseStyle();
  },

  resetBaseStyle: function () {
    var isMenu = false,
        extraClass;
    if (this.menu !== null) {
      isMenu = true;
    }
    if (isMenu) {
      extraClass = ' OBToolbarIconButtonMenu ';
      this.iconWidth = 3;
      this.iconHeight = 3;
    } else {
      extraClass = ' ';
      this.iconWidth = 1;
      this.iconHeight = 1;
    }

    this.setBaseStyle('OBToolbarIconButton_icon_' + this.buttonType + this.customState + extraClass + 'OBToolbarIconButton');
  },

  keyboardShortcutId: null,
  enableShortcut: function () {
    if (this.keyboardShortcutId) {
      var me = this,
          ksAction;
      ksAction = function () {
        if (!me.disabled) {
          me.action();
        }
        return false; //To avoid keyboard shortcut propagation
      };
      OB.KeyboardManager.Shortcuts.set(this.keyboardShortcutId, 'Canvas', ksAction);
    }
  },
  disableShortcut: function () {
    if (this.keyboardShortcutId) {
      OB.KeyboardManager.Shortcuts.set(this.keyboardShortcutId, null, function () {
        return true;
      });
    }
  }
});

isc.ClassFactory.defineClass('OBToolbarTextButton', isc.Button);

isc.OBToolbarTextButton.addProperties({
  baseStyle: 'OBToolbarTextButton',
  showRollOver: true,
  showDisabled: true,
  showFocused: true,
  showDown: true,
  showFocusedAsOver: false,
  title: '',
  realTitle: '',
  // difference between title and realTitle is just the <u>xx</u> for keyboard shortcut notation.
  action: function () {
    alert(this.title);
  },
  initWidget: function () {
    this.Super('initWidget', arguments);
    this.realTitle = this.title;
  },

  keyboardShortcutId: null,
  keyboardShortcutCharacter: null,
  keyboardShortcutPosition: null,
  enableShortcut: function () {
    if (this.keyboardShortcutId) {
      var me = this,
          newTitle = this.realTitle,
          ksAction;

      ksAction = function () {
        if (!me.disabled && me.visible) {
          me.action();
        }
        return false; //To avoid keyboard shortcut propagation
      };

      if (this.keyboardShortcutPosition === 'end') {
        newTitle = newTitle + ' (<u>' + this.keyboardShortcutCharacter + '</u>)';
      } else {
        newTitle = newTitle.substring(0, this.keyboardShortcutPosition - 1) + '<u>' + newTitle.substring(this.keyboardShortcutPosition - 1, this.keyboardShortcutPosition) + '</u>' + newTitle.substring(this.keyboardShortcutPosition, newTitle.length);
      }
      this.setTitle(newTitle);
      if (this.keyboardShortcutPosition) { // If 'this.keyboardShortcutPosition' equals 0 means that there is no shortcut assigned
        OB.KeyboardManager.Shortcuts.set(this.keyboardShortcutId, 'Canvas', ksAction, null, {
          'ctrl': true,
          'alt': true,
          'shift': true,
          'key': this.keyboardShortcutCharacter
        });
      }
    }
  },
  disableShortcut: function () {
    if (this.keyboardShortcutId) {
      var newTitle = this.realTitle;
      this.setTitle(newTitle);
      OB.KeyboardManager.Shortcuts.set(this.keyboardShortcutId, null, function () {
        return true;
      }, '', {
        'ctrl': true,
        'alt': true,
        'shift': true,
        'key': 'xyz'
      });
    }
  }
});

OB.ToolbarUtils = {};

OB.ToolbarUtils.print = function (view, url, directPrint) {
  var selectedRecords = view.viewGrid.getSelectedRecords(),
      length = selectedRecords.length;

  if (length === 0) {
    view.messageBar.setMessage(isc.OBMessageBar.TYPE_WARNING, '', OB.I18N.getLabel('OBUIAPP_PrintNoRecordSelected'));
    return;
  }

  var popupParams = {},
      allProperties = view.getContextInfo(false, true, false, true),
      sessionProperties = view.getContextInfo(true, true, false, true),
      param, i, value, selectedIds = '';

  popupParams = {
    Command: 'DEFAULT',
    inppdfpath: url,
    inphiddenkey: view.standardProperties.inpKeyName,
    inpdirectprint: (directPrint ? 'Y' : 'N')
  };

  for (param in allProperties) {
    if (allProperties.hasOwnProperty(param)) {
      value = allProperties[param];

      if (typeof value === 'boolean') {
        value = value ? 'Y' : 'N';
      }

      popupParams[param] = value;
    }
  }

  selectedIds = '';
  for (i = 0; i < length; i++) {
    selectedIds += (i > 0 ? ',' : '') + selectedRecords[i].id;
  }

  popupParams.inphiddenvalue = selectedIds;

  view.setContextInfo(sessionProperties, function () {
    OB.Layout.ClassicOBCompatibility.Popup.open('print', 0, 0, OB.Application.contextUrl + 'businessUtility/PrinterReports.html', '', window, false, false, true, popupParams);
  });
};

OB.ToolbarUtils.showAuditTrail = function (view) {
  var selectedRecords = view.viewGrid.getSelectedRecords();

  if (selectedRecords.length > 1) {
    var setWarning = {
      set: function (label) {
        view.messageBar.setMessage(isc.OBMessageBar.TYPE_WARNING, '', label);
      }
    };
    OB.I18N.getLabel('JS28', null, setWarning, 'set');
    return;
  }

  var popupParams = 'Command=POPUP_HISTORY';
  popupParams += '&inpTabId=' + view.tabId;
  popupParams += '&inpTableId=' + view.standardProperties.inpTableId;

  if (view.viewGrid.getSelectedRecord()) {
    popupParams += '&inpRecordId=' + view.viewGrid.getSelectedRecord().id;
  }

  OB.Layout.ClassicOBCompatibility.Popup.open('audit', 900, 600, OB.Application.contextUrl + 'businessUtility/AuditTrail.html?' + popupParams, '', window, false, false, true);
};

OB.ToolbarUtils.showTree = function (view) {
  var tabId = view.tabId;

  function openPopupTree() {
    var popupParams = 'Command=DEFAULT';
    popupParams += '&inpTabId=' + tabId;
    popupParams += '&hideMenu=true&noprefs=true';

    if (OB.Utilities.isIE9Strict) { // Drag and drop tree is not well rendered with IE9 + HTML5, so it should be opened in an isolated popup
      OB.Utilities.openProcessPopup(OB.Application.contextUrl + 'utility/WindowTree.html?' + popupParams, true, null, 670, 750);
    } else {
      OB.Layout.ClassicOBCompatibility.Popup.open('tree', 750, 625, OB.Application.contextUrl + 'utility/WindowTree.html?' + popupParams, '', window, true, true, true, null, false);
    }
  }

  view.setContextInfo(view.getContextInfo(true, true, true, true), openPopupTree, true);
};


// ** {{{ OB.ToolbarUtils.createCloneButton(/*String*/ actionHandler, /*Object*/ requestParams, /*Array[String]*/ tabIds, /*String*/ askMsg, /*Integer*/ sortOrder, /*Boolean*/ editRecordAfterClone, /*String*/ buttonId, /*Boolean*/ overwriteIfExists, /*Array[String]*/ tabIdsToAvoid}}} **
// Automatically set up a clone button for the provided tabs
// Parameters:
// * {{{actionHandler}}}:  action handler which processes and returns the cloned record
// * {{{requestParams}}}: (Optional) aditional parameters to send to the action handler
// * {{{tabIds}}}: (Optional, all tabs will be included by default) array of tabIds where this button will be shown
// * {{{askMsg}}}: (Optional, 'OBUIAPP_WantToCloneRecord' by default) Text that will be displayed when the button be pressed.
// * {{{sortOrder}}}: (Optional, 'CLONE_BUTTON_PROPERTIES.sortPosition' by default) Position in the toolbar of the clone button.
// * {{{editRecordAfterClone}}}: (Optional, true by default) If the form edit view (of the cloned record) should be opened after clone it.
// * {{{buttonId}}}: (Optional, random by default) Don't set it unless you plan to do advanced coding with this button (as, for example, overwrite it later in another place).
// * {{{overwriteIfExists}}}: (Optional, false by default) To be able to overwrite a particular existing clone button. The buttonId should match with the overwritten one.
// * {{{tabIdsToAvoid}}}: (Optional, no tabs to avoid by default) array of tabIds where this button should not be shown
OB.ToolbarUtils.createCloneButton = function (actionHandler, requestParams, tabIds, askMsg, sortOrder, editRecordAfterClone, buttonId, overwriteIfExists, tabIdsToAvoid) {
  var cloneButtonProps = isc.addProperties({}, isc.OBToolbar.CLONE_BUTTON_PROPERTIES);

  if (!askMsg) {
    askMsg = OB.I18N.getLabel('OBUIAPP_WantToCloneRecord');
  }
  if (!sortOrder) {
    sortOrder = isc.OBToolbar.CLONE_BUTTON_PROPERTIES.sortPosition;
  }
  if (editRecordAfterClone !== false) {
    editRecordAfterClone = true;
  }
  if (!buttonId) {
    buttonId = cloneButtonProps.buttonType + '_' + OB.Utilities.generateRandomString(8);
  }
  if (overwriteIfExists !== true) {
    overwriteIfExists = false;
  }

  cloneButtonProps.action = function () {
    var view = this.view,
        callback;

    callback = function (ok) {
      if (!requestParams) {
        requestParams = {};
      }
      requestParams.recordId = view.viewGrid.getSelectedRecord().id;
      requestParams.tabId = view.tabId;
      requestParams.windowId = view.windowId;

      if (ok) {
        OB.RemoteCallManager.call(actionHandler, {}, requestParams, function (rpcResponse, data, rpcRequest) {
          var recordIndex = view.viewGrid.getRecordIndex(view.viewGrid.getSelectedRecord()) + 1,
              recordsData = view.viewGrid.getDataSource().recordsFromObjects(data)[0];
          view.viewGrid.addToCacheData(recordsData, recordIndex);
          view.viewGrid.scrollToRow(recordIndex);
          view.viewGrid.markForRedraw();
          if (view.viewGrid.getEditRow()) {
            view.viewGrid.endEditing();
          }
          view.viewGrid.doSelectSingleRecord(recordIndex);
          if (editRecordAfterClone) {
            view.editRecord(view.viewGrid.getRecord(recordIndex), false);
          }
        });
      }
    };
    isc.ask(askMsg, callback);
  };

  OB.ToolbarRegistry.registerButton(buttonId, isc.OBToolbarIconButton, cloneButtonProps, sortOrder, tabIds, tabIdsToAvoid, overwriteIfExists);
};

OB.ToolbarRegistry = {
  buttonDefinitions: [],

  // note tabIds is an array of strings, but maybe null/undefined
  registerButton: function (buttonId, clazz, properties, sortOrder, tabIds, tabIdsToAvoid, overwriteIfExists) {
    var length;

    if (tabIds && !isc.isA.Array(tabIds)) {
      tabIds = [tabIds];
    }

    if (tabIdsToAvoid && !isc.isA.Array(tabIdsToAvoid)) {
      tabIdsToAvoid = [tabIdsToAvoid];
    }

    // declare the vars and the object which will be stored
    var i, index = 0,
        buttonDef;

    buttonDef = {
      buttonId: buttonId,
      clazz: clazz,
      properties: properties,
      sortOrder: sortOrder,
      tabIds: tabIds,
      tabIdsToAvoid: tabIdsToAvoid
    };

    // already registered button handling
    length = this.buttonDefinitions.length;
    for (i = 0; i < length; i++) {
      if (this.buttonDefinitions[i].buttonId === buttonId) {
        if (overwriteIfExists) {
          this.buttonDefinitions.splice(i, 1);
          break;
        } else {
          return;
        }
      }
    }

    index = this.buttonDefinitions.length;
    for (i = 0; i < length; i++) {
      if (this.buttonDefinitions[i].sortOrder > sortOrder) {
        index = i;
        break;
      }
    }

    if (index === this.buttonDefinitions.length) {
      this.buttonDefinitions[index] = buttonDef;
    } else {
      this.buttonDefinitions.splice(index, 0, buttonDef);
    }
  },

  getButtons: function (tabId) {
    // get the buttons for the tabId, this includes all buttons with that tabId or with no tabId set
    // as the button defs are already stored by their sortorder we can just iterate over the array
    // and pick them up in the correct order
    // the return should be an array of button instances created by doing 
    //  btnDefinitionClass.create(btnDefinitionProperties);
    var result = [],
        j, resultIndex = 0,
        i, validTabId, tabIds, tabIdsToAvoid, length = this.buttonDefinitions.length,
        tabIdsLength, tabIdsToAvoidLength;
    for (i = 0; i < length; i++) {
      tabIds = this.buttonDefinitions[i].tabIds;
      tabIdsToAvoid = this.buttonDefinitions[i].tabIdsToAvoid;
      validTabId = !tabIds;
      if (tabIds) {
        tabIdsLength = tabIds.length;
        for (j = 0; j < tabIdsLength; j++) {
          if (tabIds[j] === tabId) {
            validTabId = true;
            break;
          }
        }
      }
      if (validTabId) {
        tabIdsToAvoidLength = (tabIdsToAvoid && isc.isA.Array(tabIdsToAvoid) && tabIdsToAvoid.length ? tabIdsToAvoid.length : 0);
        for (j = 0; j < tabIdsToAvoidLength; j++) {
          if (tabIdsToAvoid[j] === tabId) {
            validTabId = false;
            break;
          }
        }
      }
      if (validTabId) {
        result[resultIndex++] = this.buttonDefinitions[i].clazz.create(isc.clone(this.buttonDefinitions[i].properties));
      }
    }
    return result;
  }
};

//These are the icon toolbar buttons shown in all the tabs 
OB.ToolbarRegistry.registerButton(isc.OBToolbar.NEW_DOC_BUTTON_PROPERTIES.buttonType, isc.OBToolbarIconButton, isc.OBToolbar.NEW_DOC_BUTTON_PROPERTIES, isc.OBToolbar.NEW_DOC_BUTTON_PROPERTIES.sortPosition, null, null, false);
OB.ToolbarRegistry.registerButton(isc.OBToolbar.NEW_ROW_BUTTON_PROPERTIES.buttonType, isc.OBToolbarIconButton, isc.OBToolbar.NEW_ROW_BUTTON_PROPERTIES, isc.OBToolbar.NEW_ROW_BUTTON_PROPERTIES.sortPosition, null, null, false);
OB.ToolbarRegistry.registerButton(isc.OBToolbar.SAVE_BUTTON_PROPERTIES.buttonType, isc.OBToolbarIconButton, isc.OBToolbar.SAVE_BUTTON_PROPERTIES, isc.OBToolbar.SAVE_BUTTON_PROPERTIES.sortPosition, null, null, false);
OB.ToolbarRegistry.registerButton(isc.OBToolbar.SAVECLOSE_BUTTON_PROPERTIES.buttonType, isc.OBToolbarIconButton, isc.OBToolbar.SAVECLOSE_BUTTON_PROPERTIES, isc.OBToolbar.SAVECLOSE_BUTTON_PROPERTIES.sortPosition, null, null, false);
OB.ToolbarRegistry.registerButton(isc.OBToolbar.UNDO_BUTTON_PROPERTIES.buttonType, isc.OBToolbarIconButton, isc.OBToolbar.UNDO_BUTTON_PROPERTIES, isc.OBToolbar.UNDO_BUTTON_PROPERTIES.sortPosition, null, null, false);
OB.ToolbarRegistry.registerButton(isc.OBToolbar.DELETE_BUTTON_PROPERTIES.buttonType, isc.OBToolbarIconButton, isc.OBToolbar.DELETE_BUTTON_PROPERTIES, isc.OBToolbar.DELETE_BUTTON_PROPERTIES.sortPosition, null, null, false);
OB.ToolbarRegistry.registerButton(isc.OBToolbar.REFRESH_BUTTON_PROPERTIES.buttonType, isc.OBToolbarIconButton, isc.OBToolbar.REFRESH_BUTTON_PROPERTIES, isc.OBToolbar.REFRESH_BUTTON_PROPERTIES.sortPosition, null, null, false);
OB.ToolbarRegistry.registerButton(isc.OBToolbar.EXPORT_BUTTON_PROPERTIES.buttonType, isc.OBToolbarIconButton, isc.OBToolbar.EXPORT_BUTTON_PROPERTIES, isc.OBToolbar.EXPORT_BUTTON_PROPERTIES.sortPosition, null, null, false);
OB.ToolbarRegistry.registerButton(isc.OBToolbar.ATTACHMENTS_BUTTON_PROPERTIES.buttonType, isc.OBToolbarIconButton, isc.OBToolbar.ATTACHMENTS_BUTTON_PROPERTIES, isc.OBToolbar.ATTACHMENTS_BUTTON_PROPERTIES.sortPosition, null, null, false);

//and add the direct link at the end
OB.ToolbarRegistry.registerButton(isc.OBToolbar.LINK_BUTTON_PROPERTIES.buttonType, isc.OBToolbarIconButton, isc.OBToolbar.LINK_BUTTON_PROPERTIES, isc.OBToolbar.LINK_BUTTON_PROPERTIES.sortPosition, null, null, false);
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use. this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2011-2013 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */

//== OBImageItemSmallImage ==
//This class is used for the small image shown within the OBImageItemSmallImageContainer
isc.ClassFactory.defineClass('OBImageItemSmallImage', isc.Img);

//== OBImageItemSmallImageContainer ==
//This class is used for the small image container box
isc.ClassFactory.defineClass('OBImageItemSmallImageContainer', isc.HLayout);

isc.OBImageItemSmallImageContainer.addProperties({
  imageItem: null,
  initWidget: function () {
    if (this.initWidgetStyle) {
      this.initWidgetStyle();
    }
    this.Super('initWidget', arguments);
  },
  click: function () {
    var imageId = this.imageItem.getValue();
    if (!imageId) {
      return;
    }
    var d = {
      inpimageId: imageId,
      command: 'GETSIZE'
    };
    OB.RemoteCallManager.call('org.openbravo.client.application.window.ImagesActionHandler', {}, d, function (response, data, request) {
      var pageHeight = isc.Page.getHeight() - 100;
      var pageWidth = isc.Page.getWidth() - 100;
      var height;
      var width;
      var ratio = data.width / data.height;
      if (ratio > pageWidth / pageHeight) {
        width = data.width > pageWidth ? pageWidth : data.width;
        height = width / ratio;
      } else {
        height = data.height > pageHeight ? pageHeight : data.height;
        width = height * ratio;
      }
      var imagePopup = isc.OBPopup.create({
        height: height,
        width: width,
        showMinimizeButton: false,
        showMaximizeButton: false
      });
      var image = isc.OBImageItemBigImage.create({
        popupContainer: imagePopup,
        height: height,
        width: width,
        click: function () {
          this.popupContainer.closeClick();
        },
        src: "../utility/ShowImage?id=" + imageId + '&nocache=' + Math.random()
      });
      image.setImageType('stretch');
      imagePopup.addItem(image);
      imagePopup.show();
    });
  }
});

//== OBImageItemBigImage ==
//This class is used for the big image shown within the popup
isc.ClassFactory.defineClass('OBImageItemBigImage', isc.Img);

isc.OBImageItemBigImage.addProperties({
  initWidget: function () {
    this.setCursor('url("' + this.zoomOutCursorSrc + '"), pointer');
    return this.Super('initWidget', arguments);
  }
});

//== OBImageItemButton ==
//This class is used for the buttons shown in the OBImageItem
isc.ClassFactory.defineClass('OBImageItemButton', isc.ImgButton);

isc.OBImageItemButton.addProperties({
  initWidget: function () {
    this.initWidgetStyle();
    return this.Super('initWidget', arguments);
  }
});

//== OBImageCanvas ==
//This canvas contains the image shown in the OBImageItem, and the two buttons
//which are used to upload and delete images.
isc.ClassFactory.defineClass('OBImageCanvas', isc.HLayout);

isc.OBImageCanvas.addProperties({
  initWidget: function () {
    this.Super('initWidget', arguments);
    this.imageLayout = isc.OBImageItemSmallImageContainer.create({
      imageItem: this.creator
    });
    if (this.creator.required) {
      this.imageLayout.setStyleName(this.imageLayout.styleName + 'Required');
    }
    if (this.creator.disabled) {
      this.imageLayout.setStyleName(this.imageLayout.styleName + 'Disabled');
    }
    if (this.creator.readOnly) {
      this.imageLayout.setStyleName(this.imageLayout.styleName + 'Disabled');
    }
    this.addMember(this.imageLayout);
    this.image = isc.OBImageItemSmallImage.create({
      width: '100%'
    });
    this.imageLayout.addMember(this.image);
    this.image.setSrc(this.imageNotAvailableSrc);
    this.image.setHeight(this.imageNotAvailableHeight);
    this.image.setWidth(this.imageNotAvailableWidth);
    var buttonLayout = isc.VLayout.create({
      width: '1%'
    });
    var selectorButton = isc.OBImageItemButton.create({
      buttonType: 'upload',
      imageItem: this.creator,
      action: function () {
        var selector = isc.OBImageSelector.create({
          columnName: this.imageItem.columnName,
          form: this.imageItem.form,
          imageItem: this.imageItem
        });
        var title = OB.I18N.getLabel('OBUIAPP_ImageSelectorTitle'),
            height = selector.height,
            width = selector.width,
            showMinimizeButton = false,
            showMaximizeButton = false;
        if (this.imageItem && this.imageItem.form && this.imageItem.form.view && this.imageItem.form.view.standardWindow && this.imageItem.form.view.standardWindow.openPopupInTab) {
          this.imageItem.form.view.standardWindow.openPopupInTab(selector, title, width, height, showMaximizeButton, showMaximizeButton, true, true, this.imageItem.form);
        } else {
          var selectorContainer = isc.OBPopup.create({
            showMinimizeButton: showMinimizeButton,
            showMaximizeButton: showMaximizeButton,
            title: title,
            width: width,
            height: height,
            items: [selector]
          });
          selectorContainer.show();
        }
      },
      updateState: function (value) {
        if (value) {
          this.setDisabled(false);
        } else {
          this.setDisabled(true);
        }
      }
    });
    var deleteButton = isc.OBImageItemButton.create({
      buttonType: 'erase',
      imageItem: this.creator,
      deleteFunction: function () {
        var imageItem = this.imageItem;
        imageItem.refreshImage();
      },
      click: function (form, item) {
        this.deleteFunction();
      },
      updateState: function (value) {
        if (value) {
          this.setDisabled(false);
        } else {
          this.setDisabled(true);
        }
      }
    });

    if (this.parentItem.isPreviewFormItem) {
      selectorButton.showDisabled = false;
      selectorButton.showDisabledIcon = false;
    }

    this.deleteButton = deleteButton;
    this.selectorButton = selectorButton;
    buttonLayout.addMember(selectorButton);
    buttonLayout.addMember(deleteButton);
    this.addMember(buttonLayout);
  },
  setImage: function (url) {
    if (!url) {
      this.image.setSrc(this.imageNotAvailableSrc);
      this.image.setHeight(this.imageNotAvailableHeight);
      this.image.setWidth(this.imageNotAvailableWidth);
      this.image.setCursor('default');
      this.imageLayout.setCursor('default');
    } else {
      this.image.setSrc(url);
      this.image.setCursor('url("' + this.zoomInCursorSrc + '"), pointer');
      this.imageLayout.setCursor('url("' + this.zoomInCursorSrc + '"), pointer');
    }
  }
});

// == OBImageItem ==
// Item used for Openbravo ImageBLOB images.
isc.ClassFactory.defineClass('OBImageItem', isc.CanvasItem);

isc.OBImageItem.addProperties({
  shouldSaveValue: true,
  canvasConstructor: 'OBImageCanvas',
  init: function () {
    this.canvasProperties = this.canvasProperties || {};
    this.canvasProperties.parentItem = this;
    this.Super('init', arguments);
  },
  //This formitem will never be disabled, so even if the form is readonly, click events will still be triggered
  isDisabled: function () {
    return false;
  },
  setValue: function (newValue) {
    if (!newValue || newValue === '') {
      this.canvas.setImage('');
    } else {
      this.canvas.setImage("../utility/ShowImage?id=" + newValue + '&nocache=' + Math.random());
      var d = {
        inpimageId: newValue,
        command: 'GETSIZE'
      };
      var image = this.canvas.image;
      var imageLayout = this.canvas.imageLayout;
      OB.RemoteCallManager.call('org.openbravo.client.application.window.ImagesActionHandler', {}, d, function (response, data, request) {
        var maxHeight = imageLayout.getHeight() - 12;
        var maxWidth = imageLayout.getWidth() - 12;
        var maxRatio = maxWidth / maxHeight;

        var imgHeight = data.height;
        var imgWidth = data.width;
        var imgRatio = imgWidth / imgHeight;

        if (imgHeight < maxHeight && imgWidth < maxWidth) {
          image.setHeight(imgHeight);
          image.setWidth(imgWidth);
        } else if (imgRatio < maxRatio) {
          image.setHeight(maxHeight);
          image.setWidth(maxHeight * imgRatio);
        } else {
          image.setHeight(maxWidth / imgRatio);
          image.setWidth(maxWidth);
        }
      });
    }
    //Buttons will not be shown if the form is readonly
    this.canvas.deleteButton.updateState(newValue && (this.form && !this.form.readOnly) && !this.readOnly);
    this.canvas.selectorButton.updateState((this.form && !this.form.readOnly) && !this.readOnly);
    return this.Super('setValue', arguments);
  },
  refreshImage: function (imageId) {
    //If creating/replacing an image, the form is marked as modified
    //and the image id is set as the value of the item
    if (typeof imageId === 'undefined') {
      imageId = '';
    }
    this.setValue(imageId);
    this.form.itemChangeActions();
  }
});

//== OBImageSelector ==
//This class displays a selector in a popup which can be used to upload images
isc.defineClass('OBImageSelector', isc.VLayout);

isc.OBImageSelector.addProperties({
  submitButton: null,
  addForm: null,
  initWidget: function (args) {
    var imageId = this.imageItem.getValue();
    var view = args.form.view;
    var imageSizeAction = this.imageItem.imageSizeValuesAction;
    var imageWidthValue = this.imageItem.imageWidth;
    imageWidthValue = parseInt(imageWidthValue, 10);
    if (!imageWidthValue) {
      imageWidthValue = 0;
    }
    var imageHeightValue = this.imageItem.imageHeight;
    imageHeightValue = parseInt(imageHeightValue, 10);
    if (!imageHeightValue) {
      imageHeightValue = 0;
    }
    var form = isc.DynamicForm.create({
      autoFocus: true,
      fields: [{
        name: 'inpFile',
        title: OB.I18N.getLabel('OBUIAPP_ImageFile'),
        type: 'upload',
        canFocus: false,
        align: 'right'
      }, {
        name: 'Command',
        type: 'hidden',
        value: 'SAVE_OB3'
      }, {
        name: 'inpColumnName',
        type: 'hidden',
        value: args.columnName
      }, {
        name: 'inpTabId',
        type: 'hidden',
        value: view.tabId
      }, {
        name: 'inpadOrgId',
        type: 'hidden',
        value: args.form.values.organization
      }, {
        name: 'parentObjectId',
        type: 'hidden',
        value: args.form.values.id
      }, {
        name: 'imageId',
        type: 'hidden',
        value: imageId
      }, {
        name: 'imageSizeAction',
        type: 'hidden',
        value: imageSizeAction
      }, {
        name: 'imageWidthValue',
        type: 'hidden',
        value: imageWidthValue
      }, {
        name: 'imageHeightValue',
        type: 'hidden',
        value: imageHeightValue
      }, {
        name: 'inpSelectorId',
        type: 'hidden',
        value: this.ID
      }],
      height: '20px',
      encoding: 'multipart',
      action: 'utility/ImageInfoBLOB',
      target: "background_target",
      redraw: function () {}
    });
    this.formDeleteImage = isc.DynamicForm.create({
      fields: [{
        name: 'Command',
        type: 'hidden',
        value: 'DELETE_OB3'
      }, {
        name: 'inpTabId',
        type: 'hidden',
        value: view.tabId
      }, {
        name: 'imageId',
        type: 'hidden',
        value: imageId
      }],
      height: '1px',
      width: '1px',
      encoding: 'normal',
      action: 'utility/ImageInfoBLOB',
      target: "background_target",
      redraw: function () {}
    });

    var uploadbutton = isc.OBFormButton.create({
      title: OB.I18N.getLabel('OBUIAPP_Upload'),
      action: function () {
        var value = form.getItem('inpFile').getElement().value;
        if (!value) {
          return;
        }
        form.getField('Command').setValue('SAVE_OB3');
        form.submitForm();
      }
    });
    var messageBarText = this.getMessageText('Warn', imageSizeAction, imageWidthValue, imageHeightValue);

    var messageBar = isc.OBMessageBar.create({
      visibility: 'hidden'
    });
    messageBar.setType(isc.OBMessageBar.TYPE_WARNING);
    messageBar.setText(null, messageBarText);
    messageBar.hideCloseIcon();
    if (messageBarText && (imageWidthValue || imageHeightValue)) {
      messageBar.show();
    }

    this.addMembers([
    isc.HLayout.create({
      width: '100%',
      height: 1,
      align: 'center',
      members: [
      messageBar]
    }), isc.HLayout.create({
      width: '100%',
      height: 20,
      layoutTopMargin: this.hlayoutTopMargin,
      layoutBottomMargin: this.hlayoutBottomMargin,
      align: 'center',
      members: [
      form, uploadbutton, this.formDeleteImage]
    })]);
    this.Super('initWidget', arguments);
  },
  getMessageText: function (type, imageSizeAction, XXX, YYY, AAA, BBB) {
    var message = '';
    if (imageSizeAction === 'N') {
      return message;
    }
    if (imageSizeAction.indexOf('RESIZE') !== -1 && type === 'Confirm') {
      imageSizeAction = 'RESIZE';
    }
    if (!XXX) {
      XXX = 'ANY';
    }
    if (!YYY) {
      YYY = 'ANY';
    }
    if (!AAA) {
      AAA = 'ANY';
    }
    if (!BBB) {
      BBB = 'ANY';
    }
    message = OB.I18N.getLabel('OBUIAPP_Image_' + type + '_' + imageSizeAction);
    message = message.replace('XXX', XXX).replace('YYY', YYY).replace('AAA', AAA).replace('BBB', BBB);
    message = message.replace(/\n/g, '<br />');
    return message;
  },
  deleteTempImage: function (imageId) {
    if (imageId) {
      this.formDeleteImage.getField('imageId').setValue(imageId);
      this.formDeleteImage.submitForm();
    }
  },
  callback: function (imageId, imageSizeAction, oldWidth, oldHeight, newWidth, newHeight) {
    oldWidth = parseInt(oldWidth, 10);
    oldHeight = parseInt(oldHeight, 10);
    newWidth = parseInt(newWidth, 10);
    newHeight = parseInt(newHeight, 10);
    var selector = this;
    if (imageSizeAction === 'WRONGFORMAT') {
      isc.warn(this.getMessageText('Error', imageSizeAction), function () {
        return true;
      }, {
        icon: '[SKINIMG]Dialog/error.png',
        title: OB.I18N.getLabel('OBUIAPP_Error')
      });
    } else if (imageSizeAction === 'ALLOWED' && ((oldWidth !== 0 && oldWidth !== newWidth) || (oldHeight !== 0 && oldHeight !== newHeight))) {
      isc.warn(this.getMessageText('Error', imageSizeAction, oldWidth, oldHeight, newWidth, newHeight), function () {
        selector.deleteTempImage(imageId);
      }, {
        icon: '[SKINIMG]Dialog/error.png',
        title: OB.I18N.getLabel('OBUIAPP_Error')
      });
    } else if (imageSizeAction === 'ALLOWED_MINIMUM' && ((oldWidth !== 0 && oldWidth > newWidth) || (oldHeight !== 0 && oldHeight > newHeight))) {
      isc.warn(this.getMessageText('Error', imageSizeAction, oldWidth, oldHeight, newWidth, newHeight), function () {
        selector.deleteTempImage(imageId);
      }, {
        icon: '[SKINIMG]Dialog/error.png',
        title: OB.I18N.getLabel('OBUIAPP_Error')
      });
    } else if (imageSizeAction === 'ALLOWED_MAXIMUM' && ((oldWidth !== 0 && oldWidth < newWidth) || (oldHeight !== 0 && oldHeight < newHeight))) {
      isc.warn(this.getMessageText('Error', imageSizeAction, oldWidth, oldHeight, newWidth, newHeight), function () {
        selector.deleteTempImage(imageId);
      }, {
        icon: '[SKINIMG]Dialog/error.png',
        title: OB.I18N.getLabel('OBUIAPP_Error')
      });

    } else if (imageSizeAction === 'RECOMMENDED' && ((oldWidth !== 0 && oldWidth !== newWidth) || (oldHeight !== 0 && oldHeight !== newHeight))) {
      isc.confirm(this.getMessageText('Confirm', imageSizeAction, oldWidth, oldHeight, newWidth, newHeight), function (clickedOK) {
        if (clickedOK) {
          selector.refreshImage(imageId);
        } else {
          selector.deleteTempImage(imageId);
        }
      });
    } else if (imageSizeAction === 'RECOMMENDED_MINIMUM' && ((oldWidth !== 0 && oldWidth > newWidth) || (oldHeight !== 0 && oldHeight > newHeight))) {
      isc.confirm(this.getMessageText('Confirm', imageSizeAction, oldWidth, oldHeight, newWidth, newHeight), function (clickedOK) {
        if (clickedOK) {
          selector.refreshImage(imageId);
        } else {
          selector.deleteTempImage(imageId);
        }
      });
    } else if (imageSizeAction === 'RECOMMENDED_MAXIMUM' && ((oldWidth !== 0 && oldWidth < newWidth) || (oldHeight !== 0 && oldHeight < newHeight))) {
      isc.confirm(this.getMessageText('Confirm', imageSizeAction, oldWidth, oldHeight, newWidth, newHeight), function (clickedOK) {
        if (clickedOK) {
          selector.refreshImage(imageId);
        } else {
          selector.deleteTempImage(imageId);
        }
      });
    } else if (imageSizeAction.indexOf('RESIZE') !== -1 && (oldWidth !== newWidth || oldHeight !== newHeight)) {
      isc.confirm(this.getMessageText('Confirm', imageSizeAction, newWidth, newHeight, oldWidth, oldHeight), function (clickedOK) {
        if (clickedOK) {
          selector.refreshImage(imageId);
        } else {
          selector.deleteTempImage(imageId);
        }
      });
    } else {
      this.refreshImage(imageId);
    }
  },
  refreshImage: function (imageId) {
    this.imageItem.refreshImage(imageId);
    this.parentElement.parentElement.closeClick();
  }
});
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2011-2013 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */


isc.ClassFactory.defineClass('OBApplicationMenuTreeChild', isc.Menu);

isc.OBApplicationMenuTreeChild.addProperties({
  menuConstructor: isc.OBApplicationMenuTreeChild
});


isc.ClassFactory.defineClass('OBApplicationMenuTree', isc.Menu);

isc.OBApplicationMenuTree.addProperties({
  menuConstructor: isc.OBApplicationMenuTreeChild,

  // move the menu a few pixels down and a bit to the left
  placeNear: function (left, top) {
    var parentLeft = this.menuButton.parentElement.getPageLeft();
    if (isc.Page.isRTL()) {
      parentLeft = parentLeft - this.getVisibleWidth() + this.menuButton.getVisibleWidth() + 1;
    }
    return this.Super('placeNear', [parentLeft, top - 1]);
  },

  initWidget: function () {
    var theMenu = this;

    // make sure that the submenus also
    // use the custom getBaseStyle function
    this.submenuInheritanceMask.push('getBaseStyle');

    this.Super('initWidget', arguments);
  },

  draw: function () {
    if (this.drawStyle) {
      this.drawStyle();
    }
    this.Super('draw', arguments);
  },

  //getBaseStyle: function (record, rowNum, colNum) {
  //    // todo: implement a javascript trim method
  //    var superBaseStyle = this.Super('getBaseStyle', arguments).replace(/^\s\s*/, '').replace(/\s\s*$/, '');
  //    return superBaseStyle + colNum;
  //},
  // overridden to get reliable custom style name
  getBaseStyle: function (record, rowNum, colNum) {
    if (!this.getField(colNum)) {
      return '';
    }
    var name = this.getField(colNum).name;
    return this.baseStyle + name.substr(0, 1).toUpperCase() + name.substr(1) + 'Field';
  },

  autoDraw: false,
  autoFitData: 'both',
  canHover: false,
  showIcons: true,
  selectedHideLayout: null,

  showing: false,

  show: function () {
    this.showing = true;
    this.Super('show', arguments);
    if (this.showStyle) {
      this.showStyle();
    }

    // this code hides the horizontal line between the menu button and the menu
    var layoutContainer = this.menuButton.parentElement;
    if (!this.selectedHideLayout) {
      this.selectedHideLayout = isc.Layout.create({
        styleName: this.hideButtonLineStyle,
        height: 3,
        width: layoutContainer.getVisibleWidth() - 2,
        top: layoutContainer.getPageTop() + layoutContainer.getVisibleHeight() - 2,
        left: layoutContainer.getPageLeft() + 1,
        overflow: 'hidden'
      });
    }
    this.selectedHideLayout.show();
    this.selectedHideLayout.moveAbove(this);
  },

  hide: function () {
    this.showing = false;
    this.Super('hide', arguments);
    if (this.selectedHideLayout) {
      this.selectedHideLayout.hide();
      this.selectedHideLayout.destroy();
      this.selectedHideLayout = null;
    }
    if (this.hideStyle) {
      this.hideStyle();
    }

    if (typeof OB.MainView.TabSet.getSelectedTab().pane.tabSelected === 'function') {
      OB.MainView.TabSet.getSelectedTab().pane.tabSelected();
    }
  },

  itemClick: function (item, colNum) {
    var isClassicEnvironment = OB.Utilities.useClassicMode(item.windowId);
    var selectedView = isc.addProperties({}, item);
    if (item.tabId) {
      selectedView = OB.Utilities.openView(item.windowId, item.tabId, item.title, null, null, item.icon, item.readOnly, item.singleRecord, null, item.editOrDeleteOnly);
      selectedView.type = item.type;
      selectedView.icon = item.icon;
      if (selectedView) {
        OB.RecentUtilities.addRecent('UINAVBA_MenuRecentList', selectedView);
      }
      return;
    } else if (item.recentObject) {
      selectedView = item.recentObject;
      if (!selectedView.viewId) {
        selectedView.viewId = 'OBClassicWindow';
      }
    } else if (item.manualUrl) {
      if (item.manualProcessId) {
        selectedView = {
          viewId: 'OBClassicWindow',
          obManualURL: item.manualUrl,
          processId: item.manualProcessId,
          id: item.manualProcessId,
          command: 'DEFAULT',
          tabTitle: item.title
        };
      } else if (item.processId) {
        var viewName = item.modal ? 'OBClassicPopupModal' : 'OBPopupClassicWindow';
        selectedView = {
          viewId: viewName,
          obManualURL: item.manualUrl,
          processId: item.processId,
          id: item.processId,
          command: 'BUTTON' + item.processId,
          tabTitle: item.title,
          popup: true
        };
      } else if (item.formId) {
        selectedView = {
          viewId: 'OBClassicWindow',
          obManualURL: item.manualUrl,
          id: item.manualUrl,
          formId: item.formId,
          command: 'DEFAULT',
          tabTitle: item.title
        };
      } else {
        selectedView = {
          viewId: 'OBClassicWindow',
          obManualURL: item.manualUrl,
          id: item.manualUrl,
          command: 'DEFAULT',
          tabTitle: item.title
        };
      }
    } else if (item.externalUrl) {
      selectedView = {
        viewId: 'OBExternalPage',
        contentsURL: item.externalUrl,
        id: item.externalUrl,
        command: 'DEFAULT',
        tabTitle: item.title
      };
    } else if (!item.processDefinitionId) {
      // do nothing for param windows
      selectedView = {
        viewId: item.viewId,
        tabTitle: item.title
      };
    }

    selectedView.icon = item.icon;
    selectedView.type = item.type;

    selectedView = isc.addProperties({}, item, selectedView);

    OB.RecentUtilities.addRecent('UINAVBA_MenuRecentList', selectedView);
    OB.Layout.ViewManager.openView(selectedView.viewId, selectedView);
  }
});


isc.ClassFactory.defineClass('OBApplicationMenuButton', isc.MenuButton);

isc.OBApplicationMenuButton.addProperties({
  showInPortal: false,

  keyboardShortcutId: 'NavBar_MenuButton',

  draw: function () {
    var me = this,
        ksAction;

    ksAction = function () {
      if (!me.menu.showing) {
        isc.EH.clickMaskClick();
        setTimeout(function () {
          me.showMenu();
        }, 10); //setTimeout to avoid delayCall function that manages the focus
      } else {
        me.menu.hide();
      }
      return false; //To avoid keyboard shortcut propagation
    };
    OB.KeyboardManager.Shortcuts.set(this.keyboardShortcutId, 'Canvas', ksAction);
    this.Super('draw', arguments);
  },

  initWidget: function () {
    if (this.initWidgetStyle) {
      this.initWidgetStyle();
    }
    this.menu = isc.OBApplicationMenuTree.create({});
    // tell the menu who we are
    this.menu.menuButton = this;
    this.Super('initWidget', arguments);

    OB.TestRegistry.register('org.openbravo.client.application.navigationbarcomponents.ApplicationMenuButton', this);
    OB.TestRegistry.register('org.openbravo.client.application.navigationbarcomponents.ApplicationMenu', this.menu);
  },

  showMenu: function () {
    this.setMenuItems();

    this.menu.markForRedraw();

    if (this.showMenuStyle) {
      this.showMenuStyle();
    }

    this.Super('showMenu', arguments);
  },

  getNodeIcon: function (type) {
    var iconPath;
    if (type === 'window') {
      iconPath = this.nodeIcons.Window;
    } else if (type === 'process') {
      iconPath = this.nodeIcons.Process;
    } else if (type === 'processManual') {
      iconPath = this.nodeIcons.ProcessManual;
    } else if (type === 'report') {
      iconPath = this.nodeIcons.Report;
    } else if (type === 'task') {
      iconPath = this.nodeIcons.Task;
    } else if (type === 'form') {
      iconPath = this.nodeIcons.Form;
    } else if (type === 'external') {
      iconPath = this.nodeIcons.ExternalLink;
    } else if (type === 'view') {
      iconPath = this.nodeIcons.View;
    } else if (type === 'processDefinition') {
      iconPath = this.nodeIcons.Process;
    } else if (type === 'folder') {
      iconPath = this.nodeIcons.Folder;
    }
    return iconPath;
  },

  setNodeIcons: function (node) {
    if (node) {
      var i, length = node.length;
      for (i = 0; i < length; i++) {
        if (node[i].type) {
          node[i].icon = this.getNodeIcon(node[i].type);
          if (node[i].submenu) {
            this.setNodeIcons(node[i].submenu);
          }
        }
      }
    }
  },

  setMenuItems: function () {
    var recent = OB.RecentUtilities.getRecentValue('UINAVBA_MenuRecentList');
    var recentEntries = [],
        length;
    var completeMenuTree, recentIndex;
    if (recent && recent.length > 0) {
      length = recent.length;
      for (recentIndex = 0; recentIndex < length; recentIndex++) {
        var recentEntry = recent[recentIndex];
        if (recentEntry) {
          recentEntries[recentIndex] = {
            title: recentEntry.tabTitle,
            recentObject: recentEntry,
            type: recentEntry.type
          };
        }
      }
      recentEntries[recent.length] = {
        isSeparator: true
      };
    }
    completeMenuTree = recentEntries.concat(this.baseData);
    this.setNodeIcons(completeMenuTree);
    this.menu.setData(completeMenuTree);
  },

  // is used by selenium, creates a scLocator on the basis of a path passed in
  // as arguments, note that the function does not expect an array as this
  // did not seem to be supported by selenium
  getSCLocator: function () {
    var index = 0,
        path = [],
        length = arguments.length;
    for (; index < length; index++) {
      path[index] = arguments[index];
    }
    index = 0;
    var pathLength = path.getLength();
    var itemIndex = 0,
        itemsLength = 0,
        item = null;
    var currentMenu = this.menu;

    // make sure the data is set
    this.setMenuItems();

    var searchedItem = null;
    var searchedIndex = -1;
    var pathSegment;

    for (; index < pathLength; index++) {
      if (searchedItem) {
        if (currentMenu.hasSubmenu(searchedItem)) {
          currentMenu = currentMenu.getSubmenu(searchedItem);
          itemIndex = 0;
          searchedIndex = -1;
          searchedItem = null;
        }
      }

      if (!currentMenu.isDrawn() || !currentMenu.body) {
        // draw, but avoid the call to 'show()' since we don't want to focus on this widget
        currentMenu.setVisibility(isc.Canvas.HIDDEN);
        currentMenu.draw();
      }

      pathSegment = path[index];
      itemsLength = currentMenu.getItems().getLength();

      for (; itemIndex < itemsLength; itemIndex++) {
        item = currentMenu.getItems()[itemIndex];
        if (item.title === pathSegment) {
          searchedItem = item;
          searchedIndex = itemIndex;
          break;
        }
      }
    }

    return 'scLocator=//' + this.getClassName() + '[ID=\"' + currentMenu.ID + '\"]/body/row[' + searchedIndex + ']/col[1]';
    //return currentMenu.body.getTableElement(searchedIndex);
  }
});
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2010-2013 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */


isc.ClassFactory.defineClass('OBTabBarButton', isc.StretchImgButton);

isc.ClassFactory.defineClass('OBTabSet', isc.TabSet);

isc.ClassFactory.defineClass('OBTabBar', isc.TabBar);


isc.ClassFactory.defineClass('OBTabBarButtonMain', isc.OBTabBarButton);

isc.ClassFactory.defineClass('OBTabSetMain', isc.OBTabSet);

isc.OBTabSetMain.addProperties({
  destroyPanes: true,

  stateAsString: null,

  // note see the smartclient autochild concept for why tabBarProperties is valid
  tabBarProperties: isc.addProperties({
    buttonConstructor: isc.OBTabBarButtonMain,

    dblClickWaiting: false,

    itemClick: function (item, itemNum) {
      var me = this;
      me.dblClickWaiting = true;
      isc.Timer.setTimeout(function () {
        // if no double click happened then do the single click
        if (me.dblClickWaiting) {
          me.dblClickWaiting = false;
          if (me.tabSet.selectedTab === itemNum && item.pane.doHandleClick) {
            item.pane.doHandleClick();
          }
        }
      }, OB.Constants.DBL_CLICK_DELAY);

    },
    itemDoubleClick: function (item, itemNum) {
      this.dblClickWaiting = false;
      if (this.tabSet.selectedTab === itemNum && item.pane.doHandleDoubleClick) {
        item.pane.doHandleDoubleClick();
      }
    }
  }),

  tabSelected: function (tabNum, tabPane, ID, tab) {
    if (navigator.userAgent.indexOf('Trident/6.0') !== -1) {
      // To fix a problem with Internet Explorer 10 and classic OB windows: http://forums.smartclient.com/showthread.php?t=27389
      if (tabPane.viewId === 'OBClassicWindow' || tabPane.viewId === 'ClassicOBHelp') {
        tabPane.bringToFront();
      }
    }
    if (!tabPane.isLoadingTab) {
      OB.Layout.HistoryManager.updateHistory();
    }
    if (tabPane.tabSelected) { //Redirect if tabPane has its own tabSelected handler
      tabPane.tabSelected(tabNum, tabPane, ID, tab);
    }

    // update the document title
    document.title = OB.Constants.WINTITLE + ' - ' + tab.title;
  },

  tabDeselected: function (tabNum, tabPane, ID, tab, newTab) {
    if (navigator.userAgent.indexOf('Trident/6.0') !== -1) {
      // To fix a problem with Internet Explorer 10 and classic OB windows: http://forums.smartclient.com/showthread.php?t=27389
      if (tabPane.viewId === 'OBClassicWindow' || tabPane.viewId === 'ClassicOBHelp') {
        tabPane.sendToBack();
      }
    }
    if (tabPane.tabDeselected) { //Redirect if tabPane has its own tabDeselected handler
      tabPane.tabDeselected(tabNum, tabPane, ID, tab, newTab);
    }
  },

  closeClick: function (tab) {
    if (tab.pane && tab.pane.closeClick) {
      tab.pane.closeClick(tab, this);
    } else {
      this.doCloseClick(tab);
    }
  },

  doCloseClick: function (tab) {
    if (tab && tab.pane) {
      tab.pane.closing = true;
    }
    return this.Super('closeClick', arguments);
  },

  initWidget: function () {
    this.tabBarProperties.tabSet = this;
    this.Super('initWidget', arguments);
  },

  draw: function () {
    var me = this,
        ksAction_CloseSelectedTab, ksAction_SelectParentTab, ksAction_SelectChildTab, ksAction_SelectPreviousTab, ksAction_SelectNextTab, ksAction_SelectWorkspaceTab;
    ksAction_CloseSelectedTab = function () {
      me.closeSelectedTab();
      return false; //To avoid keyboard shortcut propagation
    };
    OB.KeyboardManager.Shortcuts.set('TabSet_CloseSelectedTab', 'Canvas', ksAction_CloseSelectedTab);
    ksAction_SelectParentTab = function () {
      me.selectParentTab();
      return false; //To avoid keyboard shortcut propagation
    };
    OB.KeyboardManager.Shortcuts.set('TabSet_SelectParentTab', 'Canvas', ksAction_SelectParentTab);
    OB.KeyboardManager.Shortcuts.set('TabSet_SelectParentTab_Alternative', 'Canvas', ksAction_SelectParentTab);
    ksAction_SelectChildTab = function () {
      me.selectChildTab();
      return false; //To avoid keyboard shortcut propagation
    };
    OB.KeyboardManager.Shortcuts.set('TabSet_SelectChildTab', 'Canvas', ksAction_SelectChildTab);
    OB.KeyboardManager.Shortcuts.set('TabSet_SelectChildTab_Alternative', 'Canvas', ksAction_SelectChildTab);
    ksAction_SelectPreviousTab = function () {
      if (!isc.Page.isRTL()) { // LTR mode
        me.selectPreviousTab();
      } else { // RTL mode
        me.selectNextTab();
      }
      return false; //To avoid keyboard shortcut propagation
    };
    OB.KeyboardManager.Shortcuts.set('TabSet_SelectPreviousTab', 'Canvas', ksAction_SelectPreviousTab);
    OB.KeyboardManager.Shortcuts.set('TabSet_SelectPreviousTab_Alternative', 'Canvas', ksAction_SelectPreviousTab);
    ksAction_SelectNextTab = function () {
      if (!isc.Page.isRTL()) { // LTR mode
        me.selectNextTab();
      } else { // RTL mode
        me.selectPreviousTab();
      }
      return false; //To avoid keyboard shortcut propagation
    };
    OB.KeyboardManager.Shortcuts.set('TabSet_SelectNextTab', 'Canvas', ksAction_SelectNextTab);
    OB.KeyboardManager.Shortcuts.set('TabSet_SelectNextTab_Alternative', 'Canvas', ksAction_SelectNextTab);
    ksAction_SelectWorkspaceTab = function () {
      me.selectTab(0);
      return false; //To avoid keyboard shortcut propagation
    };
    OB.KeyboardManager.Shortcuts.set('TabSet_SelectWorkspaceTab', 'Canvas', ksAction_SelectWorkspaceTab);
    this.Super('draw', arguments);
  },

  closeAllTabs: function () { // Except "Workspace" tab
    var tabCount, tabArray = [],
        i;
    for (i = 1; i > 0; i++) {
      if (typeof this.getTab(i) === 'undefined') {
        break;
      }
    }
    tabCount = i - 1;
    this.selectTab(0);
    for (i = 1; i <= tabCount; i++) {
      tabArray.push(i);
    }
    this.removeTabs(tabArray);
  },

  closeSelectedTab: function () { // Only if selected tab is closable
    var selectedTab = this.getSelectedTab();
    if (selectedTab.canClose) {
      this.removeTabs(selectedTab);
    }
  },

  selectParentTab: function () {
    var tabSet = this,
        tab = tabSet.getSelectedTab(),
        ID = tab.ID,
        tabNum = tabSet.getTabNumber(tab),
        tabPane = tabSet.getTabPane(tab);

    if (tabPane.selectParentTab) { //Redirect if tabPane has its own selectPreviousTab handler
      tabPane.selectParentTab(tabSet);
    }

    return true;
  },

  selectChildTab: function () {
    var tabSet = this,
        tab = tabSet.getSelectedTab(),
        ID = tab.ID,
        tabNum = tabSet.getTabNumber(tab),
        tabPane = tabSet.getTabPane(tab);

    if (tabPane.selectChildTab) { //Redirect if tabPane has its own selectPreviousTab handler
      tabPane.selectChildTab(tabSet);
    }

    return true;
  },

  selectPreviousTab: function (doDefaultAction) {
    var tabSet = this,
        tab = tabSet.getSelectedTab(),
        ID = tab.ID,
        tabNum = tabSet.getTabNumber(tab),
        tabPane = tabSet.getTabPane(tab);

    if (!doDefaultAction) {
      doDefaultAction = false;
    }

    if (!doDefaultAction && tabPane.selectPreviousTab) { //Redirect if tabPane has its own selectPreviousTab handler
      tabPane.selectPreviousTab(tabSet);
    } else {
      tabSet.selectTab(tabNum - 1);
    }

    return true;
  },

  selectNextTab: function (doDefaultAction) {
    var tabSet = this,
        tab = tabSet.getSelectedTab(),
        ID = tab.ID,
        tabNum = tabSet.getTabNumber(tab),
        tabPane = tabSet.getTabPane(tab);

    if (!doDefaultAction) {
      doDefaultAction = false;
    }

    if (!doDefaultAction && tabPane.selectNextTab) { //Redirect if tabPane has its own selectNextTab handler
      tabPane.selectNextTab(tabSet);
    } else {
      tabSet.selectTab(tabNum + 1);
    }

    return true;
  },

  // is used by selenium
  getTabFromTitle: function (title) {
    var index = 0,
        tab = null;
    for (; index < OB.MainView.TabSet.tabs.getLength(); index++) {
      tab = OB.MainView.TabSet.getTabObject(index);
      if (tab.title === title) {
        return tab;
      }
    }
    return null;
  },

  removeTabs: function (tabs, destroyPanes) {
    var i, tab, appFrame, tabsLength, toRemove = [],
        tabSet = OB.MainView.TabSet;

    if (!tabs) {
      return;
    }

    if (!isc.isAn.Array(tabs)) {
      tabs = [tabs];
    }

    // get the actual tab button object from whatever was passed in.
    // We can pass this to tabBar.removeTabs()
    tabs = this.map('getTab', tabs);

    tabsLength = tabs.length;

    for (i = 0; i < tabsLength; i++) {
      tab = tabSet.getTab(tabs[i].ID);
      if (tab.pane.Class === 'OBClassicWindow') {

        appFrame = tab.pane.appFrameWindow || tab.pane.getAppFrameWindow();

        if (appFrame && appFrame.isUserChanges) {
          if (appFrame.validate && !appFrame.validate()) {
            return false;
          }
          tab.pane.saveRecord(tabs[i].ID);
        } else {
          OB.Layout.ViewManager.views.removeTab(tabs[i].ID);
          toRemove.push(tabs[i].ID);
        }
      } else {
        OB.Layout.ViewManager.views.removeTab(tabs[i].ID);
        toRemove.push(tabs[i].ID);
      }
    }
    this.Super('removeTabs', [toRemove]);
    OB.Layout.HistoryManager.updateHistory();
    return true;
  },

  updateTab: function (tab, pane, refresh) {
    var previousPane = tab && this.getTabObject(tab).pane;

    this.Super('updateTab', arguments);

    // Note: updateTab doesn't remove the previous loading tab
    // http://www.smartclient.com/docs/8.1/a/b/c/go.html#method..TabSet.updateTab
    if (previousPane && previousPane.isLoadingTab) {
      previousPane.destroy();
    }

    if (refresh && pane.refresh) {
      this.fireOnPause('refreshRecordInView', {
        target: pane,
        methodName: 'refresh'
      }, 120);
    }
  }
});

isc.ClassFactory.defineClass('OBTabBarMain', isc.OBTabBar);

isc.OBTabBarMain.addProperties({
  initWidget: function () {
    this.Super('initWidget', arguments);
  },

  keyPress: function () {
    var ret;
    this.tabWithinToolbar = true;
    ret = this.Super('keyPress', arguments);
    this.tabWithinToolbar = false;
    return ret;
  }
});


isc.ClassFactory.defineClass('OBTabBarButtonChild', isc.OBTabBarButton);

isc.OBTabBarButtonChild.addProperties({
  // when a tab is drawn the first time it steals the focus 
  // from the active view, prevent this
  focus: function () {
    if (this.parentElement.tabSet.tabPicker) {
      this.pane.setAsActiveView();
    }
    if (this.pane.isActiveView && this.pane.isActiveView()) {
      this.Super('focus', arguments);
    }
  }
});

isc.ClassFactory.defineClass('OBTabSetChild', isc.OBTabSet);

isc.OBTabSetChild.addProperties({
  destroyPanes: true,

  stateAsString: null,

  tabBarProperties: isc.addProperties({
    buttonConstructor: isc.OBTabBarButtonChild,

    dblClickWaiting: false,

    click: function () {
      if (this.itemClicked) {
        delete this.itemClicked;
        return false;
      }
      this.tabSet.doHandleClick();
    },

    doubleClick: function () {
      if (this.itemClicked || this.itemDoubleClicked) {
        delete this.itemClicked;
        delete this.itemDoubleClicked;
        return false;
      }
      this.tabSet.doHandleDoubleClick();
    },

    canDrag: false,
    dragAppearance: 'none',
    dragStartDistance: 1,
    overflow: 'hidden',

    itemClick: function (item, itemNum) {
      var me = this,
          tab = item;
      this.itemClicked = true;
      if (this.tabSet.ignoreItemClick) {
        delete this.tabSet.ignoreItemClick;
        return false;
      }
      me.dblClickWaiting = true;
      isc.Timer.setTimeout(function () {
        // if no double click happened then do the single click
        if (me.dblClickWaiting) {
          me.dblClickWaiting = false;
          me.tabSet.doHandleClick();
        }
      }, OB.Constants.DBL_CLICK_DELAY);
      return false;
    },

    itemDoubleClick: function (item, itemNum) {
      this.dblClickWaiting = false;
      this.itemDoubleClicked = true;
      this.tabSet.doHandleDoubleClick();
    },

    dragStop: function () {
      // change the height to percentage based to handle resizing of browser:
      this.tabSet.parentContainer.convertToPercentageHeights();
      this.setCursor(isc.Canvas.ROW_RESIZE);
      return true;
    },

    mouseDown: function () {
      if (this.tabSet.state === isc.OBStandardView.STATE_IN_MID) {
        this.setCursor(isc.Canvas.MOVE);
      }
    },

    mouseUp: function () {
      if (this.tabSet.state === isc.OBStandardView.STATE_IN_MID) {
        this.setCursor(isc.Canvas.ROW_RESIZE);
      }
    },

    mouseOut: function () {
      if (this.tabSet.state === isc.OBStandardView.STATE_IN_MID) {
        this.setCursor(isc.Canvas.ROW_RESIZE);
      }
    },

    mouseOver: function () {
      if (this.tabSet.state === isc.OBStandardView.STATE_IN_MID) {
        this.setCursor(isc.Canvas.ROW_RESIZE);
      } else {
        this.setCursor(isc.Canvas.HAND);
      }
    },

    getCurrentCursor: function () {
      if (this.tabSet.state === isc.OBStandardView.STATE_IN_MID) {
        if (isc.EventHandler.leftButtonDown()) {
          return isc.Canvas.MOVE;
        }
        return isc.Canvas.ROW_RESIZE;
      }
      return this.Super('getCurrentCursor', arguments);
    },

    dragStart: function () {
      // -2 to prevent scrollbar
      this.tabSet.maxHeight = this.tabSet.parentContainer.getHeight() - 2;
      this.tabSet.minHeight = (this.getHeight() * 2) + 15;
      return true;
    },

    dragMove: function () {
      var offset = -1 * isc.EH.dragOffsetY;
      this.resizeTarget(this.tabSet, true, true, offset, -1 * this.getHeight(), null, true);
      this.tabSet.draggedHeight = this.tabSet.getHeight();
      // if (this.tabSet.getHeight() === this.getHeight()) {
      // // set the parent to top-max
      // this.tabSet.parentTabSet.setState(isc.OBStandardView.STATE_TOP_MAX);
      // this.tabSet.draggedHeight = null;
      // }
      return true;
    }
  }),

  state: null,
  previousState: null,

  // keeps track of the previous dragged height, to restore it
  draggedHeight: null,

  setDraggable: function (draggable) {
    if (draggable) {
      this.tabBar.canDrag = true;
      this.tabBar.cursor = isc.Canvas.ROW_RESIZE;
    } else {
      this.tabBar.canDrag = false;
      this.tabBar.cursor = isc.Canvas.DEFAULT;
    }
  },

  doHandleClick: function () {
    if (this.state === isc.OBStandardView.STATE_MIN) {
      // we are minimized, there must be a parent then
      if (this.parentTabSet) {
        this.parentTabSet.setState(isc.OBStandardView.STATE_MID);
      } else {
        this.parentContainer.setHalfSplit();
      }
    } else if (this.state === isc.OBStandardView.STATE_BOTTOM_MAX) {
      this.setState(isc.OBStandardView.STATE_MID);
    } else if (this.state === isc.OBStandardView.STATE_MID) {
      if (this.parentTabSet) {
        this.parentTabSet.setState(isc.OBStandardView.STATE_MID);
      } else {
        this.parentContainer.setHalfSplit();
      }
    } else if (this.state === isc.OBStandardView.STATE_TOP_MAX) {
      this.doHandleDoubleClick();
    }
  },

  doHandleDoubleClick: function () {
    if (this.state === isc.OBStandardView.STATE_TOP_MAX) {
      // we are maximized go back to the previous state
      if (this.previousState && this.previousState !== this.state) {
        if (this.previousState === isc.OBStandardView.STATE_IN_MID) {
          this.parentContainer.setHalfSplit();
        } else if (this.previousState === isc.OBStandardView.STATE_MIN) {
          if (this.parentTabSet) {
            this.parentTabSet.setState(isc.OBStandardView.STATE_TOP_MAX);
          } else {
            this.parentContainer.setTopMaximum();
          }
        } else {
          this.setState(this.previousState);
        }
      } else {
        this.setState(isc.OBStandardView.STATE_BOTTOM_MAX);
      }
    } else {
      // first set to IN_MID, to prevent empty tab displays
      this.setState(isc.OBStandardView.STATE_IN_MID);
      this.setState(isc.OBStandardView.STATE_TOP_MAX);
    }
  },

  getState: function () {
    return this.state;
  },

  setState: function (newState) {
    // disabled this as sometimes states have
    // to be reset to recompute heights changed automatically
    // if (this.state === newState) {
    // return;
    // }
    var tab, i, pane;
    var tmpPreviousState = this.state;
    var length = this.tabs.length;

    // is corrected below for one state
    this.setDraggable(false);

    if (newState === isc.OBStandardView.STATE_TOP_MAX) {
      this.state = newState;

      // minimize the ancestors
      if (this.parentTabSet) {
        this.parentTabSet.setState(isc.OBStandardView.STATE_BOTTOM_MAX);
      } else if (this.parentContainer) {
        this.parentContainer.setBottomMaximum();
      }

      // note this for loop must be done before the parent's are
      // done otherwise the content is not drawn
      // the top member in each tab is maximized
      // the bottom member in each tab is set to the tabbar height
      for (i = 0; i < length; i++) {
        tab = this.tabs[i];
        this.makeTabVisible(tab);
        pane = this.getTabPane(tab);
        pane.setTopMaximum();
      }

    } else if (newState === isc.OBStandardView.STATE_MIN) {
      for (i = 0; i < this.tabs.length; i++) {
        tab = this.tabs[i];
        this.getTabPane(tab).hide();
      }

      // the height is set to the height of the tabbar
      this.setHeight(this.tabBar.getHeight());

      this.state = newState;
    } else if (newState === isc.OBStandardView.STATE_BOTTOM_MAX) {
      // the top part in each layout is set to 0%, and the bottom to max
      this.state = newState;
      if (this.parentTabSet) {
        this.parentTabSet.setState(isc.OBStandardView.STATE_BOTTOM_MAX);
      } else if (this.parentContainer) {
        this.parentContainer.setBottomMaximum();
      }
      for (i = 0; i < length; i++) {
        tab = this.tabs[i];
        this.makeTabVisible(tab);
        pane = this.getTabPane(tab);
        pane.setBottomMaximum();
      }
    } else if (newState === isc.OBStandardView.STATE_IN_MID) {
      this.state = newState;
      this.setDraggable(true);
      // minimize the third level
      for (i = 0; i < length; i++) {
        tab = this.tabs[i];
        pane = this.getTabPane(tab);
        pane.setHeight('100%');
        this.makeTabVisible(tab);
        if (pane.members[1]) {
          pane.members[1].setState(isc.OBStandardView.STATE_MIN);
        } else {
          pane.members[0].setHeight('100%');
        }
      }
    } else if (newState === isc.OBStandardView.STATE_MID) {
      if (this.parentTabSet) {
        this.parentTabSet.setState(isc.OBStandardView.STATE_BOTTOM_MAX);
      } else if (this.parentContainer) {
        this.parentContainer.setBottomMaximum();
      }
      // the content of the tabs is split in 2
      this.state = newState;
      for (i = 0; i < length; i++) {
        tab = this.tabs[i];
        pane = this.getTabPane(tab);
        this.makeTabVisible(tab);
        pane.setHalfSplit();
      }
    }

    this.previousState = tmpPreviousState;

    for (i = 0; i < length; i++) {
      tab = this.tabs[i];
      tab.pane.setMaximizeRestoreButtonState();
    }
  },

  makeTabVisible: function (tab) {
    var pane;

    if (tab === this.getSelectedTab()) {
      pane = this.getTabPane(tab);
      pane.show();
      if (pane.refreshContents) {
        pane.doRefreshContents(true, true);
      }
      if (pane.members[0]) {
        pane.members[0].show();
      }
      if (pane.members[1]) {
        pane.members[1].show();
      }
      //      this.selectTab(tab);
    }
  },

  tabSelected: function (tabNum, tabPane, ID, tab) {
    var event = isc.EventHandler.getLastEvent();
    if (tabPane.refreshContents) {
      tabPane.doRefreshContents(true, true);
    }
    // if the event is a mouse event then let the item click not do max/min
    // tabselected events are also fired when drawing
    if (this.isDrawn() && event && isc.EventHandler.isMouseEvent(event.eventType) && tabPane.parentView && tabPane.parentView.state !== isc.OBStandardView.STATE_TOP_MAX && tabPane.parentView.state !== isc.OBStandardView.STATE_MID) {
      this.ignoreItemClick = true;
    }
  },

  initWidget: function () {
    this.tabBarProperties.tabSet = this;
    this.Super('initWidget', arguments);
  }
});

isc.ClassFactory.defineClass('OBTabBarChild', isc.OBTabBar);

isc.OBTabBarChild.addProperties({
  initWidget: function () {
    this.Super('initWidget', arguments);
  }
});
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use. this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2013 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */


// == OBCalendar_EventDialogBridge ==
// Hack to allow the OBCalendar open its own full customizable EventDialog (OBEventEditor)
isc.ClassFactory.defineClass('OBCalendar_EventDialogBridge', isc.Window);

isc.OBCalendar_EventDialogBridge.addProperties({
  show: function () {
    this.Super('show', arguments);

    var calendar = this.creator,
        currentStart = this.currentStart,
        currentEnd = this.currentEnd,
        event = this.event;

    if (calendar.OBEventEditor) {
      calendar.OBEventEditor.setProperties({
        calendar: calendar,
        currentStart: currentStart,
        currentEnd: currentEnd,
        event: event
      });
      calendar.OBEventEditor.initComponents();
      calendar.OBEventEditor.show();
      this.closeClick();
    }
  }
});

// == OBCalendar_EventDialogBridge ==
// Hack to allow calendar TabSet style personalization
isc.ClassFactory.defineClass('OBCalendarTabSet', isc.TabSet);

// == OBClientClassCanvasItem ==
// Extends Calendar, with some customizations (most of them styling related)
isc.ClassFactory.defineClass('OBCalendar', isc.Calendar);


isc.OBCalendar.addProperties({
  autoFetchData: true,
  initWidget: function () {
    var calendar = this,
        multiCalendar = this.multiCalendar;

    this.eventWindowStyle = OB.Styles.OBCalendar.eventWindowStyle;

    if (!this.eventIdField) {
      this.eventIdField = 'eventId';
    }
    if (typeof this.showAddEventControl === 'undefined') {
      this.showAddEventControl = true;
    }
    if (typeof this.showDatePickerControl === 'undefined') {
      this.showDatePickerControl = true;
    }
    if (this.OBEventEditorClass) {
      this.OBEventEditor = isc[this.OBEventEditorClass].create({});
    }

    this.dataSource = OB.Datasource.create({
      dataURL: this.dataSourceProps.dataURL,
      fields: [{
        name: this.eventIdField,
        primaryKey: true
      }, {
        name: this.nameField
      }, {
        name: this.descriptionField
      }, {
        name: this.startDateField,
        type: "datetime"
      }, {
        name: this.endDateField,
        type: "datetime"
      }],

      // these are read extra from the server with the events
      additionalProperties: this.dataSourceProps.additionalProperties,

      dataSourceProps: this.dataSourceProps,

      transformRequest: function (dsRequest) {
        dsRequest.params = dsRequest.params || {};
        dsRequest.params._extraProperties = this.additionalProperties;
        dsRequest.willHandleError = true;

        return this.Super('transformRequest', arguments);
      },
      transformResponse: function (dsResponse, dsRequest, data) {
        var showDSAlert, records = data && data.response && data.response.data,
            i, j;

        showDSAlert = function (text) {
          if (calendar.OBEventEditor && calendar.OBEventEditor.messageBar) {
            // Display message in event editor
            calendar.OBEventEditor.messageBar.setMessage(isc.OBMessageBar.TYPE_ERROR, OB.I18N.getLabel('OBUIAPP_Error'), text);
          } else {
            // there is no message bar in editor, showing a popup warn
            isc.warn(text, function () {
              return true;
            }, {
              icon: '[SKINIMG]Dialog/error.png',
              title: OB.I18N.getLabel('OBUIAPP_Error')
            });
          }
          if (calendar.OBEventEditor) {
            // needs to keep the popup open once, because data is refreshed
            calendar.OBEventEditor.keepOpen = true;
          }
        };

        // handle error
        if (data && data.response && data.response.error) {
          showDSAlert(data.response.error.message);
          calendar.filterData();
        } else if (data && data.response && data.response.errors) {
          showDSAlert(JSON.stringify(data.response.errors));
          calendar.filterData();
        } else {
          if (records) {
            for (i = 0; i < records.getLength(); i++) {
              if (typeof records[i][calendar.nameField] === 'undefined') {
                //To avoid the event displays 'undefined' when no name has been set
                records[i][calendar.nameField] = '';
              }
              if (typeof records[i][calendar.descriptionField] === 'undefined') {
                records[i][calendar.descriptionField] = '';
              }
              if (multiCalendar && multiCalendar.showCustomEventsBgColor) {
                records[i].eventWindowStyle = multiCalendar.eventStyles[records[i][calendar.legendIdField]] + ' ' + OB.Styles.OBCalendar.eventWindowStyle;
              }
              if (typeof calendar.customTransformResponse === 'function') {
                records[i] = calendar.customTransformResponse(records[i], calendar);
              }
              if (multiCalendar && multiCalendar.calendarData.hasCustomFilters) {
                for (j = 0; j < multiCalendar.calendarData.customFilters.length; j++) {
                  if (typeof multiCalendar.calendarData.customFilters[j].handler.transformResponse === 'function') {
                    records[i] = multiCalendar.calendarData.customFilters[j].handler.transformResponse(records[i], calendar, multiCalendar.calendarData.customFilters[j]);
                  }
                }
              }
            }
          }
          if (typeof calendar.OBEventEditor.closeClick === 'function') {
            // close editor popup on success
            calendar.OBEventEditor.closeClick();
          }
        }
        return this.Super('transformResponse', arguments);
      },

      // override the addData, updateData and removeData to wrap
      // the calendar callback to prevent adding events in cased
      // of errors
      addData: function (newRecord, callback, requestProperties) {
        var dataSourceProps = this.dataSourceProps,
            newCallBack = function (dsResponse, data, dsRequest) {
            // don't call if there is an error
            if (dsResponse.status < 0) {
              return;
            }
            callback(dsResponse, data, dsRequest);
            if (dataSourceProps.addEventCallback) {
              dataSourceProps.addEventCallback(newRecord, requestProperties);
            }
            };
        return this.Super('addData', [newRecord, newCallBack, requestProperties]);
      },
      updateData: function (updatedRecord, callback, requestProperties) {
        var dataSourceProps = this.dataSourceProps,
            newCallBack = function (dsResponse, data, dsRequest) {
            // don't call if there is an error
            if (dsResponse.status < 0) {
              return;
            }
            callback(dsResponse, data, dsRequest);
            if (dataSourceProps.updateEventCallback) {
              dataSourceProps.updateEventCallback(updatedRecord, requestProperties);
            }
            };
        return this.Super('updateData', [
        updatedRecord, newCallBack, requestProperties]);
      },
      removeData: function (recordKeys, callback, requestProperties) {
        var dataSourceProps = this.dataSourceProps,
            newCallBack = function (dsResponse, data, dsRequest) {
            // don't call if there is an error
            if (dsResponse.status < 0) {
              return;
            }
            callback(dsResponse, data, dsRequest);
            if (dataSourceProps.removeEventCallback) {
              dataSourceProps.removeEventCallback(recordKeys, requestProperties);
            }
            };
        return this.Super('removeData', [recordKeys, newCallBack, requestProperties]);
      }
    });
    this.Super('initWidget', arguments);
    this.controlsBar.reorderMember(4, 1); // Moves the 'next' button to the second position
    this.controlsBar.reorderMember(2, 4); // Moves the 'displayed date' to last position
    if (this.defaultViewName && ((this.showDayView !== false && this.showWeekView !== false) || (this.showDayView !== false && this.showMonthView !== false) || (this.showWeekView !== false && this.showMonthView !== false))) {
      this.setCurrentViewName(this.defaultViewName);
    }
    if (!this.showAddEventControl) {
      this.addEventButton.hide();
    }
    if (!this.showDatePickerControl) {
      this.datePickerButton.hide();
    }

    if (this.showDayView !== false) {
      this.dayView.baseStyle = OB.Styles.OBCalendar.dayView_baseStyle;
    }
    if (this.showWeekView !== false) {
      this.weekView.baseStyle = OB.Styles.OBCalendar.weekView_baseStyle;
      this.weekView.headerBaseStyle = OB.Styles.OBCalendar.weekView_headerBaseStyle;
    }
    if (this.showMonthView !== false) {
      this.monthView.baseStyle = OB.Styles.OBCalendar.monthView_baseStyle;
      this.monthView.headerBaseStyle = OB.Styles.OBCalendar.monthView_headerBaseStyle;
    }
  },

  directEventEdit: function (event, popupCallback) {
    var callback, openEventDialog, calendar = this;
    callback = function (dsResponse, data, dsRequest) {
      if (data && data[0]) {
        openEventDialog(data[0]);
      }
    };
    openEventDialog = function (event) {
      if (event) {
        if (calendar.OBEventEditor) {
          calendar.eventDialog.event = event;
          calendar.eventDialog.event.popupCallback = popupCallback;
          calendar.eventDialog.currentStart = event[calendar.startDateField];
          calendar.eventDialog.currentEnd = event[calendar.endDateField];
          calendar.eventDialog.calendar = calendar;
          try {
            //To avoid js error due to conflicts with Smartclient default EventDialog
            if (event.canEdit === false && event.canDelete === false) {
              isc.warn(OB.I18N.getLabel('OBUIAPP_CalendarCanNotUpdateEvent'), function () {
                return true;
              }, {
                icon: '[SKINIMG]Dialog/error.png',
                title: OB.I18N.getLabel('OBUIAPP_Error')
              });
            } else {
              calendar.eventDialog.show();
            }
          } catch (e) {}
        }
      }
    };

    if (typeof event === 'string') {
      this.dataSource.fetchRecord(event, callback);
    } else {
      openEventDialog(event);
    }
  },

  eventResized: function (newDate, event) {
    newDate.setSeconds(0);
    if (this.showEventDialogOnEventResize) {
      this.eventDialog.event = event;
      this.eventDialog.currentStart = event[this.startDateField];
      this.eventDialog.currentEnd = newDate;
      this.eventDialog.calendar = this;
      try {
        //To avoid js error due to conflicts with Smartclient default EventDialog
        this.eventDialog.show();
      } catch (e) {}
    } else {
      return this.Super('eventResized', arguments);
    }
  },
  eventMoved: function (newDate, event) {
    newDate.setSeconds(0);
    if (this.showEventDialogOnEventMove) {
      //Event duration
      var dateDiff = event[this.endDateField] - event[this.startDateField],
          newEndDate = newDate.getTime() + dateDiff; //Add the event duration to the new startDate
      newEndDate = new Date(newEndDate);
      this.eventDialog.event = event;
      this.eventDialog.currentStart = newDate;
      this.eventDialog.currentEnd = newEndDate;
      this.eventDialog.calendar = this;
      try {
        //To avoid js error due to conflicts with Smartclient default EventDialog
        this.eventDialog.show();
      } catch (e) {}
    } else {
      return this.Super('eventMoved', arguments);
    }
  },
  eventRemoveClick: function (event) {
    if (this.showEventDialogOnEventDelete) {
      this.eventDialog.event = event;
      this.eventDialog.currentStart = event[this.startDateField];
      this.eventDialog.currentEnd = event[this.endDateField];
      this.eventDialog.calendar = this;
      try {
        //To avoid js error due to conflicts with Smartclient default EventDialog
        this.eventDialog.show();
      } catch (e) {}
      return false;
    } else {
      return this.Super('eventRemoveClick', arguments);
    }
  },
  showOBEventDialog: function () {
    var dialog = isc.OBPopup.create({});
    dialog.show();
  },

  getCriteria: function (criteria) {
    var startTime, endTime, legend, i, startDateCriteria, middleDateCriteria, endDateCriteria, dateCriteriaOrPart, orPart = {
      operator: 'or',
      criteria: []
    };

    if (!criteria || !criteria.operator) {
      criteria = {
        _constructor: "AdvancedCriteria",
        operator: "and"
      };
    }
    criteria.criteria = criteria.criteria || [];

    if (this.month === 0) {
      startTime = new Date(this.year - 1, 11, 23, 0, 0, 0);
    } else {
      startTime = new Date(this.year, this.month - 1, 23, 0, 0, 0);
    }

    // add the date criteria
    if (this.month === 11) {
      endTime = new Date(this.year + 1, 0, 7, 0, 0, 0);
    } else {
      endTime = new Date(this.year, this.month + 1, 7, 0, 0, 0);
    }

    // To set an 'OR' logic for the following three cases. If at least one of them match, the event will be shown.
    dateCriteriaOrPart = {
      operator: 'or',
      criteria: []
    };

    // To show events that starts in the current month
    startDateCriteria = {
      operator: "and",
      criteria: []
    };
    startDateCriteria.criteria.push({
      fieldName: this.startDateField,
      operator: 'greaterOrEqual',
      value: startTime
    });
    startDateCriteria.criteria.push({
      fieldName: this.startDateField,
      operator: 'lessThan',
      value: endTime
    });
    dateCriteriaOrPart.criteria.push(startDateCriteria);

    // To show events that starts before current month and ends after current month
    middleDateCriteria = {
      operator: "and",
      criteria: []
    };
    middleDateCriteria.criteria.push({
      fieldName: this.startDateField,
      operator: 'lessThan',
      value: startTime
    });
    middleDateCriteria.criteria.push({
      fieldName: this.endDateField,
      operator: 'greaterThan',
      value: endTime
    });
    dateCriteriaOrPart.criteria.push(middleDateCriteria);

    // To show events that ends in the current month
    endDateCriteria = {
      operator: "and",
      criteria: []
    };
    endDateCriteria.criteria.push({
      fieldName: this.endDateField,
      operator: 'greaterThan',
      value: startTime
    });
    endDateCriteria.criteria.push({
      fieldName: this.endDateField,
      operator: 'lessOrEqual',
      value: endTime
    });
    dateCriteriaOrPart.criteria.push(endDateCriteria);

    criteria.criteria.push(dateCriteriaOrPart);

    if (this.multiCalendar) {
      legend = this.multiCalendar.leftControls.getLegendValueMap();
      for (i = 0; i < legend.getLength(); i++) {
        if (legend[i].checked) {
          orPart.criteria.push({
            fieldName: this.legendIdField,
            operator: 'equals',
            value: legend[i].id
          });
        }
      }
      // some dummy value to force an empty resultset
      if (orPart.criteria.getLength() === 0) {
        orPart.criteria.push({
          fieldName: this.legendIdField,
          operator: 'equals',
          value: new Date().getTime().toString()
        });
      }
    } else if (this.legendId) {
      orPart.criteria.push({
        fieldName: this.legendIdField,
        operator: 'equals',
        value: this.legendId
      });
    }

    if (orPart.criteria.getLength() > 0) {
      criteria.criteria.push(orPart);
    }

    if (this.multiCalendar && this.multiCalendar.calendarData.hasCustomFilters) {
      for (i = 0; i < this.multiCalendar.calendarData.customFilters.length; i++) {
        if (typeof this.multiCalendar.calendarData.customFilters[i].handler.filterCriteria === 'function') {
          criteria.criteria.push(this.multiCalendar.calendarData.customFilters[i].handler.filterCriteria(this, this.multiCalendar.calendarData.customFilters[i]));
        }
      }
    }

    if (typeof this.getCustomCriteria === 'function') {
      criteria.criteria.push(this.getCustomCriteria(this));
    }

    // always force a reload
    criteria.criteria.push(isc.OBRestDataSource.getDummyCriterion());

    return criteria;
  },

  // This is needed, because the first time (and only the first time) we switch to week view (if we load the day view),
  // or the other way around, we need to set also the initialScroll to this other view.
  isInitialScrollAlreadyBeenSet: false,

  draw: function () {
    var ret, _originalTabSelected = this.mainView.tabSelected,
        calendar = this;
    ret = this.Super('draw', arguments);

    // If change filter/legend parameters in day/week view and you switch to the other one,
    // data needs to be refreshed in order to show changes
    if (this.multiCalendar && this.mainView && typeof this.mainView.selectTab === 'function') {
      this.mainView.tabSelected = function (tabNum) {
        var actionObject, mvret;
        actionObject = {
          target: this,
          method: _originalTabSelected,
          parameters: arguments
        };
        mvret = OB.Utilities.callAction(actionObject);
        calendar.refreshSelectedView();
        if (!calendar.isInitialScrollAlreadyBeenSet && tabNum <= 1) {
          calendar.isInitialScrollAlreadyBeenSet = true;
          // Timeout to allow new selected tab grid be fully loaded
          if (calendar.initialScrollTime) {
            setTimeout(function () {
              try {
                calendar.scrollToTime(calendar.initialScrollTime);
              } catch (e) {}
            }, 100);
          }
        }
        return mvret;
      };
    }
    // Timeout to allow the tab grid be fully loaded
    if (calendar.initialScrollTime) {
      setTimeout(function () {
        try {
          calendar.scrollToTime(calendar.initialScrollTime);
        } catch (e) {}
      }, 100);
    }
    return ret;
  },

  fetchData: function (criteria, callback, request) {
    return this.Super('fetchData', [this.getCriteria(criteria), callback, request]);
  },

  filterData: function (criteria) {
    var newCriteria, ret;
    newCriteria = this.getCriteria(criteria);
    ret = this.Super('filterData', [newCriteria]);
    if (this.doPreFilterData) {
      this.doPreFilterData(newCriteria);
    }
    return ret;
  },

  // read the dates for the current month
  dateChanged: function () {
    if (this.multiCalendar) {
      this.multiCalendar.leftControls.dateChooser.setData(this.chosenDate);
    }

    // no change
    if (this.month === this.prevMonth) {
      return;
    }

    this.prevMonth = this.month;
    this.filterData();
  },

  addEvent: function (startDate, endDate, name, description, otherFields, ignoreDataChanged) {
    otherFields = otherFields || {};

    // solve bug that otherwise time fields are not passed in
    startDate.logicalDate = false;
    endDate.logicalDate = false;

    return this.Super('addEvent', [startDate, endDate, name, description, otherFields, ignoreDataChanged]);
  },

  addEventWithDialog: function (startDate, endDate) {
    if (!startDate) {
      startDate = new Date();
    }
    if (!endDate) {
      endDate = new Date();
    }
    this.eventDialog.event = null;
    this.eventDialog.currentStart = startDate;
    this.eventDialog.currentEnd = endDate;
    this.eventDialog.currentLane = null;
    this.eventDialog.calendar = this;
    try {
      //To avoid js error due to conflicts with Smartclient default EventDialog
      this.eventDialog.show();
    } catch (e) {}
  }

});


isc.OBCalendar.changeDefaults('mainViewDefaults', {
  _constructor: isc.OBCalendarTabSet
});

isc.OBCalendar.changeDefaults('eventDialogDefaults', {
  _constructor: isc.OBCalendar_EventDialogBridge
});
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use. this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2013 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */

isc.ClassFactory.defineClass('OBMultiCalendar', isc.HLayout);

isc.ClassFactory.defineClass('OBMultiCalendarLeftControls', isc.VLayout);

isc.ClassFactory.defineClass('OBMultiCalendarCalendar', isc.OBCalendar);

isc.ClassFactory.defineClass('OBMultiCalendarLegend', isc.VLayout);

isc.ClassFactory.defineClass('OBMultiCalendarLegendGroupElement', isc.HLayout);

isc.ClassFactory.defineClass('OBMultiCalendarLegendElement', isc.HLayout);

isc.OBMultiCalendarLegendGroupElement.addProperties({
  height: 20,
  width: 162,
  color: null,
  name: null,
  id: null,
  checked: true,
  overflow: 'hidden',
  nodes: [],
  show: function () {
    this.Super('show', arguments);
    this.updateCheckboxValue();
    this.updateChildsVisibility();
  },
  updateChildsVisibility: function () {
    var i;
    for (i = 0; i < this.nodes.length; i++) {
      if (this.checked) {
        this.nodes[i].show();
      } else {
        this.nodes[i].hide();
      }
    }
  },
  // Change action of tree button (opened/closed state)
  changedTree: function (value) {
    var calendarData = this.multiCalendar.calendarData,
        i;
    for (i = 0; i < calendarData.calendarGroups.length; i++) {
      if (calendarData.calendarGroups[i].id === this.id) {
        this.checked = value;
        calendarData.calendarGroups[i].checked = value;
      }
    }
    this.updateChildsVisibility();
  },
  // Refresh the checkbox state based on nodes state
  updateCheckboxValue: function () {
    var status = '',
        i; // true, all nodes are true -- false, all nodes are false -- null, are mixed nodes states -- '' is the starting point
    for (i = 0; i < this.nodes.length; i++) {
      if (this.nodes[i].checked) {
        if (status === '') {
          status = true;
        } else if (status === false) {
          status = null;
        }
      } else {
        if (status === '') {
          status = false;
        } else if (status === true) {
          status = null;
        }
      }
    }
    if (status !== '') {
      this.setCheckboxValue(status, true, false, false);
    }
  },
  // Programatically set the checkbox value
  setCheckboxValue: function (value, updateParent, refreshCalendar, updateNodes) {
    this.members[1].items[0].setValue(value);
    this.doAfterCheckboxChange(updateParent, refreshCalendar, updateNodes);
  },
  doAfterCheckboxChange: function (updateParent, refreshCalendar, updateNodes) {
    var value = this.members[1].items[0].getValue(),
        i;
    if (updateNodes) {
      for (i = 0; i < this.nodes.length; i++) {
        this.nodes[i].setCheckboxValue(value, false, false);
      }
    }
    if (updateParent && this.parentNode) {
      this.parentNode.updateCheckboxValue();
    }
    if (refreshCalendar) {
      this.multiCalendar.refreshCalendar();
    }
  },
  // Checkbox for all/none nodes selected
  changed: function (form, item, value) {
    if (value === null) {
      // To avoid a "null" state if the user clicks in a "false" state checkbox. It jumps directly to the "true" state
      item.setValue(true);
      item.changed(form, item, true);
      return;
    }
    this.Super('changed', [form, item, value]);
    form.parentElement.doAfterCheckboxChange(true, true, true);
  },
  initWidget: function () {
    var buttonTree, checkboxGroup, name, me = this;
    this.Super('initWidget', arguments);
    if (this.checked === 'true') {
      this.checked = true;
    }
    if (this.checked === 'false') {
      this.checked = false;
    }
    if (this.color) {
      OB.Utilities.Style.addRule('.bgColor_' + this.color, 'background-color: ' + OB.Utilities.getRGBAStringFromOBColor(this.color) + ';' + 'color: ' + (OB.Utilities.getBrightFromOBColor(this.color) > 125 ? 'black' : 'white'));
    }
    buttonTree = isc.Layout.create({
      width: 15,
      height: 18,
      styleName: 'OBMultiCalendarLegendGroupElementTreeOpened',
      value: null,
      initWidget: function () {
        this.value = me.checked;
        this.updateIcon();
        this.Super('initWidget', arguments);
      },
      updateIcon: function () {
        if (this.value) {
          this.setStyleName('OBMultiCalendarLegendGroupElementTreeOpened');
        } else {
          this.setStyleName('OBMultiCalendarLegendGroupElementTreeClosed');
        }
      },
      click: function () {
        if (this.value) {
          this.value = false;
        } else {
          this.value = true;
        }
        this.updateIcon();
        this.parentElement.changedTree(this.value);
      }
    });
    checkboxGroup = isc.DynamicForm.create({
      width: 20,
      checked: this.checked,
      fields: [{
        height: 16,
        width: 20,
        allowEmptyValue: true,
        showUnsetImage: true,
        showTitle: false,
        value: this.checked,
        init: function () {
          this.unsetImage = this.partialSelectedImage;
        },
        changed: this.changed,
        type: 'checkbox'
      }]
    });
    name = isc.Label.create({
      height: 10,
      width: 118,
      styleName: 'OBMultiCalendarLegendElementName',
      contents: this.name
    });
    this.addMembers([buttonTree]);
    this.addMembers([checkboxGroup]);
    this.addMembers([name]);
  }
});

isc.OBMultiCalendarLegendElement.addProperties({
  height: 20,
  width: 162,
  color: null,
  name: null,
  id: null,
  checked: true,
  overflow: 'hidden',
  // Programatically set the checkbox value
  setCheckboxValue: function (value, updateParent, refreshCalendar) {
    value = !! value;
    this.members[2].items[0].setValue(value);
    this.doAfterCheckboxChange(updateParent, refreshCalendar);
  },
  doAfterCheckboxChange: function (updateParent, refreshCalendar) {
    var value = this.members[2].items[0].getValue(),
        calendarData = this.multiCalendar.calendarData,
        i;
    for (i = 0; i < calendarData.calendars.length; i++) {
      if (calendarData.calendars[i].id === this.id) {
        this.checked = value;
        calendarData.calendars[i].checked = value;
      }
    }
    if (updateParent && this.parentNode) {
      this.parentNode.updateCheckboxValue();
    }
    if (refreshCalendar) {
      this.multiCalendar.refreshCalendar();
    }
  },
  changed: function (form, item, value) {
    this.Super('changed', arguments);
    form.parentElement.doAfterCheckboxChange(true, true);
  },
  initWidget: function () {
    var leftMargin, checkbox, color, name, me = this;
    this.Super('initWidget', arguments);
    if (this.checked === 'true') {
      this.checked = true;
    }
    if (this.checked === 'false') {
      this.checked = false;
    }
    if (this.color) {
      OB.Utilities.Style.addRule('.bgColor_' + this.color, 'background-color: ' + OB.Utilities.getRGBAStringFromOBColor(this.color) + ';' + 'color: ' + (OB.Utilities.getBrightFromOBColor(this.color) > 125 ? 'black' : 'white'));
    }
    leftMargin = isc.Layout.create({
      width: (me.parentNode ? 20 : 0),
      height: 1
    });
    checkbox = isc.DynamicForm.create({
      width: 20,
      checked: this.checked,
      fields: [{
        height: 16,
        width: 20,
        showTitle: false,
        value: this.checked,
        changed: this.changed,
        type: 'checkbox'
      }]
    });
    color = isc.Layout.create({
      width: 15,
      height: 18,
      styleName: 'OBMultiCalendarLegendElementColor',
      backgroundColor: OB.Utilities.getRGBAStringFromOBColor(this.color)
    });
    name = isc.Label.create({
      height: 10,
      width: 118,
      styleName: 'OBMultiCalendarLegendElementName',
      contents: this.name
    });
    this.addMembers([leftMargin]);
    if (this.color) {
      this.addMembers([color]);
    }
    this.addMembers([checkbox]);
    this.addMembers([name]);
  }
});

isc.OBMultiCalendarLegend.addProperties({
  // height: '*',
  overflow: 'auto',
  membersMargin: 5,

  initWidget: function () {
    this.multiCalendar.OBMultiCalendarLegend = this;
    this.Super('initWidget', arguments);
  },

  updateMembers: function (newMembers) {
    var calendarGroups = [],
        getNextCalendarGroupFromPosition, getCalendarGroupPosition, i, j, me = this;
    if (this.members) {
      for (i = this.members.length - 1; i > -1; i--) {
        this.members[i].destroy();
      }
    }
    this.multiCalendar.eventStyles = {};

    getNextCalendarGroupFromPosition = function (position) {
      var i;
      for (i = position; i < me.members.length; i++) {
        if (me.members[i].Class === 'OBMultiCalendarLegendGroupElement') {
          return me.members[i].id;
        }
      }
    };

    getCalendarGroupPosition = function (id) {
      var i;
      for (i = 0; i < me.members.length; i++) {
        if (me.members[i].id === id) {
          return i;
        }
      }
    };

    // Create calendar groups
    for (i = 0; i < this.multiCalendar.calendarData.calendarGroups.length; i++) {
      calendarGroups.push(isc.OBMultiCalendarLegendGroupElement.create({
        multiCalendar: this.multiCalendar,
        name: this.multiCalendar.calendarData.calendarGroups[i].name,
        id: this.multiCalendar.calendarData.calendarGroups[i].id,
        checked: this.multiCalendar.calendarData.calendarGroups[i].checked,
        nodes: []
      }));
    }

    // Add nodes to groups
    for (i = 0; i < newMembers.length; i++) {
      if (newMembers[i].calendarGroupId) {
        for (j = 0; j < this.multiCalendar.calendarData.calendarGroups.length; j++) {
          if (newMembers[i].calendarGroupId === this.multiCalendar.calendarData.calendarGroups[j].id) {
            calendarGroups[j].nodes.push(isc.OBMultiCalendarLegendElement.create({
              multiCalendar: this.multiCalendar,
              color: newMembers[i].color,
              name: newMembers[i].name,
              id: newMembers[i].id,
              //calendarGroupId: newMembers[i].calendarGroupId,
              parentNode: calendarGroups[j],
              checked: newMembers[i].checked
            }));
          }
        }
      }
    }

    // Add orphan members
    for (i = 0; i < newMembers.length; i++) {
      if (!newMembers[i].calendarGroupId) {
        this.addMember(isc.OBMultiCalendarLegendElement.create({
          multiCalendar: this.multiCalendar,
          color: newMembers[i].color,
          name: newMembers[i].name,
          id: newMembers[i].id,
          calendarGroupId: newMembers[i].calendarGroupId,
          checked: newMembers[i].checked
        }));
      }
    }

    // Add calendar groups (if they have nodes) and its nodes
    for (i = 0; i < calendarGroups.length; i++) {
      if (calendarGroups[i].nodes.length > 0) {
        this.addMember(calendarGroups[i]);
        for (j = 0; j < calendarGroups[i].nodes.length; j++) {
          this.addMember(calendarGroups[i].nodes[j]);
        }
      }
    }

    // Save the colors
    for (i = 0; i < newMembers.length; i++) {
      this.multiCalendar.eventStyles[newMembers[i].id] = 'bgColor_' + newMembers[i].color;
    }

    if (this.multiCalendar.leftControls) {
      // initialized so refresh
      this.multiCalendar.refreshCalendar();
    }
  }
});

isc.OBMultiCalendarLeftControls.addProperties({
  width: '200',
  height: '100%',
  layoutLeftMargin: 10,
  layoutRightMargin: 10,
  layoutTopMargin: 10,
  membersMargin: 5,
  defaultLayoutAlign: 'center',
  filter: null,
  dateChooser: null,
  legend: null,
  getFilterValueMap: function () {
    var filterObj = {},
        calendarData = this.multiCalendar.calendarData,
        i;
    for (i = 0; i < calendarData.filters.length; i++) {
      filterObj[calendarData.filters[i].id] = calendarData.filters[i].name;
    }
    return filterObj;
  },
  getLegendValueMap: function () {
    var calendarData = this.multiCalendar.calendarData,
        legendArray = [],
        i;
    for (i = 0; i < calendarData.calendars.length; i++) {
      if (calendarData.hasFilter === false || calendarData.calendars[i].filterId === this.filter.getValue('filter')) {
        legendArray.push(calendarData.calendars[i]);
      }
    }
    return legendArray;
  },
  initWidget: function () {
    var button, label, legend, customFilterObj, leftControls = this,
        currentFilter = null,
        i;
    this.Super('initWidget', arguments);
    if (this.multiCalendar.calendarData.hasFilter) {
      for (i = 0; i < leftControls.multiCalendar.calendarData.filters.length; i++) {
        if (leftControls.multiCalendar.calendarData.filters[i].checked) {
          currentFilter = leftControls.multiCalendar.calendarData.filters[i].id;
          break;
        }
      }
      this.filter = isc.DynamicForm.create({
        fields: [{
          name: 'filter',
          title: leftControls.multiCalendar.filterName,
          type: 'comboBox',
          valueMap: leftControls.getFilterValueMap(),
          value: currentFilter,
          width: 180,
          titleOrientation: 'top',
          required: true,
          changed: function (form, item, value) {
            this.Super('changed', arguments);
            for (i = 0; i < leftControls.multiCalendar.calendarData.filters.length; i++) {
              if (leftControls.multiCalendar.calendarData.filters[i].id === value) {
                leftControls.multiCalendar.calendarData.filters[i].checked = true;
              } else {
                leftControls.multiCalendar.calendarData.filters[i].checked = false;
              }
            }
            leftControls.legend.updateMembers(leftControls.getLegendValueMap());
          },

          cellStyle: OB.Styles.OBFormField.DefaultComboBox.cellStyle,
          titleStyle: OB.Styles.OBFormField.DefaultComboBox.titleStyle,
          textBoxStyle: OB.Styles.OBFormField.DefaultComboBox.textBoxStyle,
          pendingTextBoxStyle: OB.Styles.OBFormField.DefaultComboBox.pendingTextBoxStyle,
          controlStyle: OB.Styles.OBFormField.DefaultComboBox.controlStyle,
          pickListBaseStyle: OB.Styles.OBFormField.DefaultComboBox.pickListBaseStyle,
          pickListTallBaseStyle: OB.Styles.OBFormField.DefaultComboBox.pickListTallBaseStyle,
          pickerIconStyle: OB.Styles.OBFormField.DefaultComboBox.pickerIconStyle,
          pickerIconSrc: OB.Styles.OBFormField.DefaultComboBox.pickerIconSrc,
          height: OB.Styles.OBFormField.DefaultComboBox.height,
          pickerIconWidth: OB.Styles.OBFormField.DefaultComboBox.pickerIconWidth,
          // fixes issue https://issues.openbravo.com/view.php?id=15105
          pickListCellHeight: OB.Styles.OBFormField.DefaultComboBox.quickRunPickListCellHeight,
          recentPropertyName: this.recentPropertyName,
          pickListProperties: {
            textMatchStyle: 'substring',
            selectionType: 'single',
            bodyStyleName: OB.Styles.OBFormField.DefaultComboBox.pickListProperties.bodyStyleName
          },
          pickListHeaderHeight: 0
        }]
      });
    } else {
      this.filter = isc.VLayout.create({
        height: 8
      });
    }
    button = isc.OBFormButton.create({
      width: 180,
      title: this.multiCalendar.addEventButtonName,
      click: function () {
        var startDate = OB.Utilities.Date.roundToNextHalfHour(new Date()),
            endDate = new Date(startDate);
        endDate.setHours(endDate.getHours() + 1);
        leftControls.multiCalendar.calendar.addEventWithDialog(startDate, endDate);
      }
    });
    this.dateChooser = isc.OBDateChooser.create({
      autoHide: false,
      showCancelButton: false,
      firstDayOfWeek: this.multiCalendar.firstDayOfWeek,
      dataChanged: function (param) {
        this.parentElement.multiCalendar.calendar.setChosenDate(this.getData());
        this.parentElement.multiCalendar.calendar.setCurrentViewName('day');
      }
    });
    label = isc.Label.create({
      height: 10,
      contents: this.multiCalendar.legendName + ' :'
    });
    this.customFiltersContainer = isc.VLayout.create({
      width: 1,
      height: 1,
      initWidget: function () {
        var i;
        if (leftControls.multiCalendar.calendarData.hasCustomFilters) {
          for (i = 0; i < leftControls.multiCalendar.calendarData.customFilters.length; i++) {
            if (leftControls.multiCalendar.calendarData.customFilters[i].handler.constructor) {
              customFilterObj = leftControls.multiCalendar.calendarData.customFilters[i].handler.constructor.create({
                multiCalendar: leftControls.multiCalendar,
                checked: leftControls.multiCalendar.calendarData.customFilters[i].checked,
                customFilter: leftControls.multiCalendar.calendarData.customFilters[i]
              }, leftControls.multiCalendar.calendarData.customFilters[i].handler.constructorProps);
              this.addMembers([customFilterObj]);
            }
          }
        }
        this.Super('initWidget', arguments);
      }
    });
    this.legend = isc.OBMultiCalendarLegend.create({
      multiCalendar: this.multiCalendar
    });
    this.legend.updateMembers(leftControls.getLegendValueMap());
    this.addMembers([this.filter]);
    if (this.multiCalendar.canCreateEvents) {
      this.addMembers([button]);
    }
    this.addMembers([this.dateChooser, this.customFiltersContainer, label, this.legend]);
  }
});

isc.OBMultiCalendar.addProperties({
  width: '100%',
  height: '100%',
  filterName: OB.I18N.getLabel('OBUIAPP_CalWidget_Filter'),
  legendName: OB.I18N.getLabel('OBUIAPP_CalWidget_Legend'),
  addEventButtonName: OB.I18N.getLabel('OBUIAPP_CalWidget_AddEvent'),
  defaultViewName: null,
  calendarData: null,
  showLeftControls: true,
  showCustomEventsBgColor: true,

  parseCalendarData: function (calendarData) {
    var canCreateEvents, cPropAttr, i;
    if (calendarData.filters) {
      calendarData.hasFilter = true;
    } else {
      calendarData.hasFilter = false;
    }
    if (calendarData.customFilters) {
      calendarData.hasCustomFilters = true;
    } else {
      calendarData.hasCustomFilters = false;
    }
    for (i = 0; i < calendarData.calendarGroups.length; i++) {
      // calendarGroups.checked means if the tree is opened or not
      if (typeof calendarData.calendarGroups[i].checked === 'undefined') {
        calendarData.calendarGroups[i].checked = false;
      }
    }
    for (i = 0; i < calendarData.calendars.length; i++) {
      if (typeof calendarData.calendars[i].checked === 'undefined') {
        calendarData.calendars[i].checked = true;
      }
      if (typeof calendarData.calendars[i].color === 'undefined') {
        calendarData.calendars[i].color = OB.Utilities.generateOBColor(
        null, null, null, 100, calendarData.calendars[i].id);
      }
      if (i === 0 && typeof calendarData.calendars[i].canCreateEvents !== 'undefined') {
        canCreateEvents = false;
      }
      if (typeof calendarData.calendars[i].canCreateEvents !== 'undefined' && canCreateEvents === false && calendarData.calendars[i].canCreateEvents === true) {
        canCreateEvents = true;
      }
      if (canCreateEvents === false && i === calendarData.calendars.length - 1) {
        this.canCreateEvents = false;
        this.calendarProps.canCreateEvents = false;
      }
    }
    if (calendarData.hasFilter) {
      for (i = 0; i < calendarData.filters.length; i++) {
        if (typeof calendarData.filters[i].checked === 'undefined') {
          calendarData.filters[i].checked = false;
        }
      }
    }
    if (calendarData.hasCustomFilters) {
      for (i = 0; i < calendarData.customFilters.length; i++) {
        if (typeof calendarData.customFilters[i].checked === 'undefined') {
          calendarData.customFilters[i].checked = false;
        }
        if (typeof calendarData.customFilters[i].handler === 'string' && this.calendarProps[calendarData.customFilters[i].handler]) {
          calendarData.customFilters[i].handler = this.calendarProps[calendarData.customFilters[i].handler];
        }
        if (typeof calendarData.customFilters[i].handler.constructor === 'string') {
          calendarData.customFilters[i].handler.constructor = new Function('return ' + calendarData.customFilters[i].handler.constructor)();
        }
      }
    }
    if (calendarData.calendarProps && this.calendarProps) {
      for (cPropAttr in calendarData.calendarProps) {
        if (calendarData.calendarProps.hasOwnProperty(cPropAttr)) {
          this.calendarProps[cPropAttr] = calendarData.calendarProps[cPropAttr];
        }
      }
    }
    if (typeof this.calendarProps.customParseCalendarData === 'function') {
      calendarData = this.calendarProps.customParseCalendarData(calendarData);
    }

    return calendarData;
  },
  setLoading: function (value) {
    if (value !== false) {
      if (this.members[1]) {
        this.members[1].hide();
      }
      if (this.members[2]) {
        this.members[2].hide();
      }
      if (this.members[0]) {
        this.members[0].show();
      }
    } else {
      if (this.members[0]) {
        this.members[0].hide();
      }
      if (this.members[1]) {
        this.members[1].show();
      }
      if (this.members[2]) {
        this.members[2].show();
      }
    }
  },
  initComponents: function () {
    var callback, i, me = this;
    for (i = this.members.length - 1; i > -1; i--) {
      this.members[i].destroy();
    }
    if (this.calendarProps.firstDayOfWeek) {
      this.firstDayOfWeek = this.calendarProps.firstDayOfWeek;
    } else {
      this.firstDayOfWeek = 1;
    }
    if (this.calendarProps.filterName) {
      this.filterName = this.calendarProps.filterName;
    }
    if (this.calendarProps.legendName) {
      this.legendName = this.calendarProps.legendName;
    }
    if (this.calendarProps.addEventButtonName) {
      this.addEventButtonName = this.calendarProps.addEventButtonName;
    }
    if (typeof this.calendarProps.showLeftControls !== 'undefined') {
      this.showLeftControls = this.calendarProps.showLeftControls;
    }
    if (typeof this.calendarProps.showCustomEventsBgColor !== 'undefined') {
      this.showCustomEventsBgColor = this.calendarProps.showCustomEventsBgColor;
    }
    if (typeof this.calendarProps.canCreateEvents !== 'undefined') {
      this.canCreateEvents = this.calendarProps.canCreateEvents;
    }
    this.addMembers([OB.Utilities.createLoadingLayout()]);
    callback = function (rpcResponse, data, rpcRequest) {
      if (data.message) {
        isc.warn(data.message.text, function () {
          return true;
        }, {
          icon: '[SKINIMG]Dialog/error.png',
          title: OB.I18N.getLabel('OBUIAPP_Error')
        });
      }
      me.calendarData = me.parseCalendarData(data);
      me.drawComponents();
    };
    OB.RemoteCallManager.call(this.calendarProps.calendarDataActionHandler, {
      action: this.calendarProps.calendarDataActionHandler_Action
    }, {}, callback);
  },

  initWidget: function () {
    this.initComponents();
    this.Super('initWidget', arguments);
  },
  drawComponents: function () {
    if (this.canCreateEvents) {
      this.showCustomEventsBgColor = true;
    }

    this.leftControls = isc.OBMultiCalendarLeftControls.create({
      multiCalendar: this
    });
    this.calendar = isc.OBMultiCalendarCalendar.create(isc.addProperties(this.calendarProps, {
      multiCalendar: this
    }));
    this.setLoading(false);
    if (this.showLeftControls) {
      this.addMembers([this.leftControls]);
    }
    this.addMembers([isc.VLayout.create({
      members: [this.calendar]
    })]);
    this.refreshCalendar();
  },

  refreshCalendar: function () {
    if (this.calendar) {
      this.calendar.filterData();
    }
  }
});
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2010-2013 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */
isc.ClassFactory.defineClass('OBGrid', isc.ListGrid);

// = OBGrid =
// The OBGrid combines common grid functionality usefull for different 
// grid implementations.
isc.OBGrid.addProperties({

  reverseRTLAlign: true,
  dragTrackerMode: 'none',
  // recycle gives better performance but also results
  // in strange results that not all record components are
  // drawn when scrolling very fast
  recordComponentPoolingMode: 'viewport',

  showRecordComponentsByCell: true,
  recordComponentPosition: 'within',
  poolComponentsPerColumn: true,
  showRecordComponents: true,
  escapeHTML: true,
  bodyProperties: {
    canSelectText: true,

    // the redraw on change should not only redraw the current item
    // but the whole edit row, make sure that happens asynchronously
    redrawFormItem: function (item, reason) {
      var lg = this.grid,
          row = lg.getEditRow(),
          col = lg.getColNum(item.getFieldName());

      // If the user has edited the cell, or setValue() has been called on the item
      // we don't want a call to redraw() on the item to drop that value
      if (lg.getEditCol() === col) {
        lg.storeUpdatedEditorValue();
      }

      if (row === 0 || row > 0) {
        lg.fireOnPause('refreshEditRow', function () {
          lg.refreshRow(row);
        });
      }
    }
  },

  //prevent multi-line content to show strangely
  //https://issues.openbravo.com/view.php?id=17531, https://issues.openbravo.com/view.php?id=24878
  formatDisplayValue: function (value, record, rowNum, colNum) {
    var fld = this.getFields()[colNum],
        index;

    if (this.inCellHoverHTML || !isc.isA.String(value)) {
      return value;
    }

    index = value.indexOf('\n');
    if (index !== -1) {
      return value.substring(0, index) + '...';
    }

    return value;
  },

  cellHoverHTML: function (record, rowNum, colNum) {

    var ret, field = this.getField(colNum),
        cellErrors, msg = '',
        prefix = '',
        i, func = this.getGridSummaryFunction(field),
        isGroupOrSummary = record && (record[this.groupSummaryRecordProperty] || record[this.gridSummaryRecordProperty]);

    if (!record) {
      return;
    }

    if (func && (isGroupOrSummary)) {
      if (func === 'sum') {
        prefix = OB.I18N.getLabel('OBUIAPP_SummaryFunctionSum');
      }
      if (func === 'min') {
        prefix = OB.I18N.getLabel('OBUIAPP_SummaryFunctionMin');
      }
      if (func === 'max') {
        prefix = OB.I18N.getLabel('OBUIAPP_SummaryFunctionMax');
      }
      if (func === 'count') {
        prefix = OB.I18N.getLabel('OBUIAPP_SummaryFunctionCount');
      }
      if (func === 'avg') {
        prefix = OB.I18N.getLabel('OBUIAPP_SummaryFunctionAvg');
      }
      if (prefix) {
        prefix = prefix + ' ';
      }
    }

    if (this.isCheckboxField(field)) {
      return OB.I18N.getLabel('OBUIAPP_GridSelectColumnPrompt');
    }

    if (this.cellHasErrors(rowNum, colNum)) {
      cellErrors = this.getCellErrors(rowNum, colNum);
      // note cellErrors can be a string or array
      // accidentally both have the length property
      if (cellErrors && cellErrors.length > 0) {
        return OB.Utilities.getPromptString(cellErrors);
      }
    }
    if (record && record[isc.OBViewGrid.ERROR_MESSAGE_PROP]) {
      return record[isc.OBViewGrid.ERROR_MESSAGE_PROP];
    }

    this.inCellHoverHTML = true;
    ret = this.Super('cellHoverHTML', arguments);
    delete this.inCellHoverHTML;
    return prefix + (ret ? ret : '');
  },

  enableShortcuts: function () {
    var ksAction_FocusFilter, ksAction_FocusGrid, ksAction_ClearFilter, ksAction_SelectAll, ksAction_UnselectAll;

    ksAction_FocusFilter = function (caller) {
      caller.focusInFirstFilterEditor();
      return false; //To avoid keyboard shortcut propagation
    };
    OB.KeyboardManager.Shortcuts.set('Grid_FocusFilter', ['OBGrid.body', 'OBGrid.editForm'], ksAction_FocusFilter);

    ksAction_FocusGrid = function (caller) {
      if (caller.getPrototype().Class !== 'OBViewGrid' || caller.data.localData[0]) { // In OBViewGrid case, only execute action if there are at least one row in the grid
        caller.focus();
        if (!caller.getSelectedRecord()) { // If there are no rows already selected in the grid, select the first one
          caller.selectSingleRecord(0);
        }
      }
      return false; //To avoid keyboard shortcut propagation
    };
    OB.KeyboardManager.Shortcuts.set('Grid_FocusGrid', 'OBGrid.filter', ksAction_FocusGrid);

    ksAction_ClearFilter = function (caller) {
      caller.clearFilter(true);
      return false; //To avoid keyboard shortcut propagation
    };
    OB.KeyboardManager.Shortcuts.set('Grid_ClearFilter', ['OBGrid.body', 'OBGrid.filter', 'OBGrid.editForm'], ksAction_ClearFilter);

    ksAction_SelectAll = function (caller) {
      caller.selectAllRecords();
      return false; //To avoid keyboard shortcut propagation
    };
    OB.KeyboardManager.Shortcuts.set('Grid_SelectAll', 'OBGrid.body', ksAction_SelectAll);

    ksAction_UnselectAll = function (caller) {
      if (caller.getSelectedRecords().length > 1) {
        caller.deselectAllRecords();
      }
      return false; //To avoid keyboard shortcut propagation
    };
    OB.KeyboardManager.Shortcuts.set('Grid_UnselectAll', 'OBGrid.body', ksAction_UnselectAll);
  },

  draw: function () {
    this.enableShortcuts();
    this.Super('draw', arguments);
  },

  bodyKeyPress: function (event, eventInfo) {
    if (eventInfo && this.lastSelectedRecord && ((eventInfo.keyName === isc.OBViewGrid.ARROW_UP_KEY_NAME && this.data.localData[0].id === this.lastSelectedRecord.id) || (eventInfo.keyName === isc.OBViewGrid.ARROW_DOWN_KEY_NAME && this.data.localData[this.data.localData.length - 1] && this.data.localData[this.data.localData.length - 1].id === this.lastSelectedRecord.id))) {
      return true;
    }
    var response = OB.KeyboardManager.Shortcuts.monitor('OBGrid.body', this);
    if (response !== false) {
      response = this.Super('bodyKeyPress', arguments);
    }
    return response;
  },

  editFormKeyDown: function () {
    // Custom method. Only works if the form is an OBViewForm
    var response = OB.KeyboardManager.Shortcuts.monitor('OBGrid.editForm', this);
    if (response !== false) {
      response = this.Super('editFormKeyDown', arguments);
    }
    return response;
  },

  filterFieldsKeyDown: function (item, form, keyName) {
    // To fix issue https://issues.openbravo.com/view.php?id=21786
    var isEscape = isc.EH.getKey() === 'Escape' && !isc.EH.ctrlKeyDown() && !isc.EH.altKeyDown() && !isc.EH.shiftKeyDown(),
        response;
    if (isEscape && item && Object.prototype.toString.call(item.isPickListShown) === '[object Function]' && item.isPickListShown()) {
      return true; // Then the event will bubble to ComboBoxItem.keyDown
    }

    response = OB.KeyboardManager.Shortcuts.monitor('OBGrid.filter', this.grid.fieldSourceGrid);
    if (response !== false) {
      if (item.keyDownAction) {
        return item.keyDownAction(item, form, keyName);
      }
    }
    return response;
  },

  isEditing: function () {
    return this.getEditForm();
  },

  focusInFirstFilterEditor: function () {
    if (this.getFilterEditor() && this.getFilterEditor().getEditForm()) { // there is a filter editor
      var object = this.getFilterEditor().getEditForm(),
          items, item, i, length;

      // compute a focusable item
      items = object.getItems();
      length = items.length;
      for (i = 0; i < length; i++) {
        item = items[i];
        // The first filterable item (editorType!=='StaticTextItem') should be focused
        if (item.getCanFocus() && !item.isDisabled() && item.editorType !== 'StaticTextItem') {
          this.focusInFilterEditor(item);
          return true;
        }
      }
    }
    return false;
  },

  createRecordComponent: function (record, colNum) {
    var field = this.getField(colNum),
        rowNum = this.getRecordIndex(record),
        isSummary = record && (record[this.groupSummaryRecordProperty] || record[this.gridSummaryRecordProperty]),
        isEditRecord = rowNum === this.getEditRow(),
        canvas, clientClassArray, clientClass, clientClassProps, clientClassIsShownInGridEdit;

    if (isSummary) {
      return null;
    }

    if (field.isLink && !field.clientClass && record[field.name]) {
      // To keep compatibility with < 3.0MP20 versions that didn't implement 'clientClass' and only have 'isLink' property
      field.clientClass = 'OBGridLinkCellClick';
    }

    if (field.clientClass) {
      clientClassArray = OB.Utilities.clientClassSplitProps(field.clientClass);
      clientClass = clientClassArray[0];
      clientClassProps = clientClassArray[1];

      clientClassIsShownInGridEdit = new Function('return ' + clientClass + '.getInstanceProperty("isShownInGridEdit")')();

      if (!isEditRecord || clientClassIsShownInGridEdit) {
        canvas = isc.ClassFactory.newInstance(clientClass, {
          grid: this,
          align: this.getCellAlign(record, rowNum, colNum),
          field: field,
          record: record,
          rowNum: rowNum,
          colNum: colNum
        }, clientClassProps);
        if (canvas) {
          if (canvas.setRecord) {
            canvas.setRecord(record);
          }
          return canvas;
        }
      }
    }
    return null;
  },

  updateRecordComponent: function (record, colNum, component, recordChanged) {
    var field = this.getField(colNum),
        isSummary = record && (record[this.groupSummaryRecordProperty] || record[this.gridSummaryRecordProperty]),
        rowNum = this.getRecordIndex(record);

    if (isSummary) {
      return null;
    }

    if (field.clientClass) {
      component.align = this.getCellAlign(record, rowNum, colNum);
      component.field = field;
      component.record = record;
      component.rowNum = rowNum;
      component.colNum = colNum;
      if (component.setRecord) {
        component.setRecord(record);
      }
      return component;
    }
    return null;
  },

  // recompute RecordComponents
  recomputeCanvasComponents: function (rowNum) {
    var i, fld, length = this.getFields().length;

    // remove client record components in edit mode
    for (i = 0; i < length; i++) {
      fld = this.getFields()[i];
      if (fld.clientClass) {
        this.refreshRecordComponent(rowNum, i);
      }
    }
  },

  startEditing: function (rowNum, colNum, suppressFocus, eCe, suppressWarning) {
    var ret = this.Super('startEditing', arguments);
    this.recomputeCanvasComponents(rowNum);
    return ret;
  },

  startEditingNew: function (rowNum) {
    var ret = this.Super('startEditingNew', arguments);
    this.recomputeCanvasComponents(rowNum + 1);
    return ret;
  },

  formatLinkValue: function (record, field, colNum, rowNum, value) {
    if (typeof value === 'undefined' || value === null) {
      return '';
    }
    var simpleType = isc.SimpleType.getType(field.type, this.dataSource);
    // note: originalFormatCellValue is set in the initWidget below
    if (field && field.originalFormatCellValue) {
      return field.originalFormatCellValue(value, record, rowNum, colNum, this);
    } else if (simpleType.shortDisplayFormatter) {
      return simpleType.shortDisplayFormatter(value, field, this, record, rowNum, colNum);
    }
    return value;
  },

  filterEditorProperties: {

    // http://forums.smartclient.com/showthread.php?p=73107
    // https://issues.openbravo.com/view.php?id=18557
    showAllColumns: true,

    setEditValue: function (rowNum, colNum, newValue, suppressDisplay, suppressChange) {
      // prevent any setting of non fields in the filter editor
      // this prevents a specific issue that smartclient will set a value
      // in the {field.name} + OB.Constants.FIELDSEPARATOR + OB.Constants.IDENTIFIER (for example warehouse + OB.Constants.FIELDSEPARATOR + OB.Constants.IDENTIFIER)
      // because it thinks that the field does not have its own datasource
      if (isc.isA.String(colNum) && !this.getField(colNum)) {
        return;
      }
      return this.Super('setEditValue', arguments);
    },

    getValuesAsCriteria: function (advanced, textMatchStyle, returnNulls) {
      return this.Super('getValuesAsCriteria', [true, textMatchStyle, returnNulls]);
    },

    // is needed to display information in the checkbox field 
    // header in the filter editor row
    isCheckboxField: function () {
      return false;
    },

    // overridden for:
    // https://issues.openbravo.com/view.php?id=18509
    editorChanged: function (item) {
      var prop, same, opDefs, val = item.getElementValue(),
          actOnKeypress = item.actOnKeypress === true ? item.actOnKeypress : this.actOnKeypress,
          grid = this.parentElement;

      if (this.sourceWidget.allowFilterExpressions && val && actOnKeypress) {

        // if someone starts typing and and or then do not filter
        // onkeypress either
        if (val.contains(' and') || val.contains(' or ')) {
          this.preventPerformFilterFiring();
          return;
        }

        if (val.startsWith('=')) {
          this.preventPerformFilterFiring();
          return;
        }

        // now check if the item element value is only
        // an operator, if so, go away
        opDefs = isc.DataSource.getSearchOperators();
        for (prop in opDefs) {
          if (opDefs.hasOwnProperty(prop)) {

            // let null and not null fall through
            // as they should be filtered
            if (prop === 'isNull' || prop === 'notNull') {
              continue;
            }

            same = opDefs[prop].symbol && val.startsWith(opDefs[prop].symbol);
            if (same) {
              this.preventPerformFilterFiring();
              return;
            }
          }
        }
      }

      if (item.thresholdToFilter && item.thresholdToFilter > grid.fetchDelay) {
        this.currentThresholdToFilter = item.thresholdToFilter;
      } else {
        delete this.currentThresholdToFilter;
      }

      if (grid && grid.lazyFiltering) {
        grid.filterHasChanged = true;
        grid.sorter.enable();
      }
      return this.Super('editorChanged', arguments);
    },


    // function called to clear any pending performFilter calls
    // earlier type actions can already have pending filter actions
    // this deletes them
    preventPerformFilterFiring: function () {
      this.fireOnPause('performFilter', {}, this.fetchDelay);
    },

    // If the criteria contains an 'or' operator due to the changes made for solving
    // issue 20722 (https://issues.openbravo.com/view.php?id=20722), remove the criteria
    // that makes reference to a specific id and return the original one
    removeSpecificIdFilter: function (criteria) {
      var i, length;
      if (!criteria) {
        return criteria;
      }
      if (criteria.operator !== 'or') {
        return criteria;
      }
      if (criteria.criteria && criteria.criteria.length < 2) {
        return criteria;
      }
      // The original criteria is in the position 0, the rest are specific ids
      length = criteria.criteria.length;
      for (i = 1; i < length; i++) {
        if (criteria.criteria.get(i).fieldName !== 'id') {
          return criteria;
        }
      }
      return criteria.criteria.get(0);
    },

    // repair that filter criteria on fk fields can be 
    // on the identifier instead of the field itself.
    // after applying the filter the grid will set the criteria
    // back in the filtereditor effectively clearing
    // the filter field. The code here repairs/prevents this.
    setValuesAsCriteria: function (criteria, refresh) {
      // create an edit form right away
      if (!this.getEditForm()) {
        this.makeEditForm();
      }
      var prop, fullPropName;
      // make a copy so that we don't change the object
      // which is maybe used somewhere else
      criteria = criteria ? isc.clone(criteria) : {};
      // If a criterion has been added to include the selected record, remove it
      // See issue https://issues.openbravo.com/view.php?id=20722
      criteria = this.removeSpecificIdFilter(criteria);
      var internCriteria = criteria.criteria;
      if (internCriteria && this.getEditForm()) {
        // now remove anything which is not a field
        // otherwise smartclient will keep track of them and send them again
        var fields = this.getEditForm().getFields(),
            length = fields.length,
            i;
        for (i = internCriteria.length - 1; i >= 0; i--) {
          prop = internCriteria[i].fieldName;
          // happens when the internCriteria[i], is again an advanced criteria
          if (!prop) {
            continue;
          }
          fullPropName = prop;
          if (prop.endsWith(OB.Constants.FIELDSEPARATOR + OB.Constants.IDENTIFIER)) {
            var index = prop.lastIndexOf(OB.Constants.FIELDSEPARATOR);
            prop = prop.substring(0, index);
          }
          var fnd = false,
              j;
          for (j = 0; j < length; j++) {
            if (fields[j].displayField === fullPropName || fields[j].criteriaField === fullPropName) {
              fnd = true;
              break;
            }
            if (fields[j].name === prop) {
              internCriteria[i].fieldName = prop;
              fnd = true;
              break;
            }
            if (fields[j].name === fullPropName) {
              fnd = true;
              break;
            }
          }
          if (!fnd) {
            internCriteria.removeAt(i);
          }
        }
      }
      return this.Super('setValuesAsCriteria', [criteria, refresh]);
    },

    // the filtereditor will assign the grids datasource to a field
    // if it has a display field and no datasource
    // prevent this as we get the datasource later it is not 
    // yet set
    getEditorProperties: function (field) {
      var noDataSource = !field.optionDataSource,
          ret = this.Super('getEditorProperties', arguments);
      if (ret.optionDataSource && noDataSource) {
        delete ret.optionDataSource;
      }
      return ret;
    },

    actionButtonProperties: {
      baseStyle: 'OBGridFilterFunnelIcon',
      visibility: 'hidden',
      showFocused: false,
      showDisabled: false,
      prompt: OB.I18N.getLabel('OBUIAPP_GridFilterIconToolTip'),
      initWidget: function () {
        this.recordEditor.sourceWidget.filterImage = this;
        this.recordEditor.filterImage = this;
        if (this.recordEditor.sourceWidget.filterClause || this.recordEditor.sourceWidget.sqlFilterClause) {
          this.prompt = OB.I18N.getLabel('OBUIAPP_GridFilterImplicitToolTip');
          this.visibility = 'inherit';
        }
        this.Super('initWidget', arguments);
      },
      click: function () {
        this.recordEditor.sourceWidget.clearFilter();
      }
    }
  },

  initWidget: function () {
    // prevent the value to be displayed in case of a clientClass
    var i, length, field, formatCellValueFunction;

    formatCellValueFunction = function (value, record, rowNum, colNum, grid) {
      return '';
    };

    if (this.fields) {
      length = this.fields.length;
      for (i = 0; i < length; i++) {
        field = this.fields[i];

        if (!field.filterEditorProperties) {
          field.filterEditorProperties = {};
        }

        field.filterEditorProperties.keyDown = this.filterFieldsKeyDown;

        if (field.criteriaField) {
          field.filterEditorProperties.criteriaField = field.criteriaField;
        }

        if (field.clientClass) {
          // store the originalFormatCellValue if not already set
          if (field.formatCellValue && !field.formatCellValueFunctionReplaced) {
            field.originalFormatCellValue = field.formatCellValue;
          }
          field.formatCellValueFunctionReplaced = true;
          field.formatCellValue = formatCellValueFunction;
        }
      }
    }

    if (this.lazyFiltering) {
      this.showSortArrow = isc.ListGrid.BOTH;
      this.sorterDefaults = {
        click: function () {
          var grid = this.parentElement;
          if (!this._iconEnabled) {
            return;
          }
          if (grid.filterHasChanged) {
            // Do not change the sorting after receiving the data from the datasource
            grid._filteringAndSortingManually = true;
            grid.filterEditor.performFilter(true, true);
            delete grid.filterHasChanged;
            delete grid.sortingHasChanged;
            delete grid._filteringAndSortingManually;
          } else if (!isc.isA.ResultSet(grid.data)) {
            // The initial data has not been loaded yet, refreshGrid
            // refreshGrid applies also the current sorting
            grid.refreshGrid();
            delete grid.sortingHasChanged;
          } else if (grid.sortingHasChanged) {
            grid.setSort(grid.savedSortSpecifiers, true);
            delete grid.sortingHasChanged;
          }
          if (grid && grid.sorter) {
            grid.sorter.disable();
          }
        },
        disable: function () {
          this.setIcon(OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/grid/applyPendingChanges_Disabled.png');
          this._iconEnabled = false;
        },
        enable: function () {
          this.setIcon(OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/grid/applyPendingChanges.png');
          this._iconEnabled = true;
        },
        align: 'center',
        prompt: OB.I18N.getLabel('OBUIAPP_ApplyFilters'),
        iconWidth: 10,
        iconHeight: 10,
        icon: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/grid/applyPendingChanges.png',
        _iconEnabled: true
      };
    }

    this.Super('initWidget', arguments);
  },

  clearFilter: function (keepFilterClause, noPerformAction) {
    var i = 0,
        fld, length, groupState, forceRefresh;
    if (this.lazyFiltering) {
      noPerformAction = true;
      if (this.sorter) {
        this.filterHasChanged = true;
        this.sorter.enable();
      }
    }
    if (!keepFilterClause) {
      // forcing fetch from server in case default filters are removed, in other
      // cases adaptive filtering can be used if possible
      if (this.data) {
        forceRefresh = this.filterClause || this.sqlFilterClause;

        groupState = this.getGroupState();
        if (forceRefresh && groupState && groupState.groupByFields) {
          // in case of field grouping and filter clause, remove filter grouping
          // because when filter clause is removed data could be bigger than the
          // amount allowed by grouping
          this.setGroupState(null);
        }

        this.data.forceRefresh = forceRefresh;
        if (this.data.context && this.data.context.params) {
          delete this.data.context.params._where;
        }
      }

      delete this.filterClause;
      delete this.sqlFilterClause;
    }

    if (this.filterEditor) {
      if (this.filterEditor.getEditForm()) {
        this.filterEditor.getEditForm().clearValues();

        // clear the date values in a different way
        length = this.filterEditor.getEditForm().getFields().length;

        for (i = 0; i < length; i++) {
          fld = this.filterEditor.getEditForm().getFields()[i];
          if (fld.clearFilterValues) {
            fld.clearFilterValues();
          }
        }
      } else {
        this.filterEditor.setValuesAsCriteria(null);
      }
    }
    if (!noPerformAction) {
      this.filterEditor.performAction();
    }
    if (this.view && this.view.directNavigation) {
      delete this.view.directNavigation;
    }
  },

  showSummaryRow: function () {
    var i, fld, fldsLength, newFields = [];
    var ret = this.Super('showSummaryRow', arguments);
    if (this.summaryRow && !this.summaryRowFieldRepaired) {
      // the summaryrow shares the same field instances as the 
      // original grid, this must be repaired as the grid and
      // and the summary row need different behavior.
      // copy the fields and repair specific parts
      // don't support links in the summaryrow
      fldsLength = this.summaryRow.fields.length;
      for (i = 0; i < fldsLength; i++) {
        fld = isc.addProperties({}, this.summaryRow.fields[i]);
        newFields[i] = fld;
        fld.isLink = false;
        if (fld.originalFormatCellValue) {
          fld.formatCellValue = fld.originalFormatCellValue;
          fld.originalFormatCellValue = null;
        } else {
          fld.formatCellValue = null;
        }
      }
      this.summaryRow.isSummaryRow = true;
      this.summaryRowFieldRepaired = true;
      this.summaryRow.setFields(newFields);
    }
    return ret;
  },

  // show or hide the filter button
  filterEditorSubmit: function (criteria) {
    this.checkShowFilterFunnelIcon(criteria);
  },

  setSingleRecordFilterMessage: function () {
    var showMessageProperty, showMessage;

    if (!this.isOpenDirectModeLeaf && !this.view.isShowingForm && (this.view.messageBar && !this.view.messageBar.isVisible())) {
      showMessageProperty = OB.PropertyStore.get('OBUIAPP_ShowSingleRecordFilterMsg');
      showMessage = showMessageProperty !== 'N' && showMessageProperty !== '"N"';
      if (showMessage) {
        this.view.messageBar.setMessage(isc.OBMessageBar.TYPE_INFO, '<div><div style="float: left;">' + OB.I18N.getLabel('OBUIAPP_SingleRecordFilterMsg') + '<br/>' + OB.I18N.getLabel('OBUIAPP_ClearFilters') + '</div><div style="float: right; padding-top: 15px;"><a href="#" style="font-weight:normal; color:inherit;" onclick="' + 'window[\'' + this.view.messageBar.ID + '\'].hide(); OB.PropertyStore.set(\'OBUIAPP_ShowSingleRecordFilterMsg\', \'N\');">' + OB.I18N.getLabel('OBUIAPP_NeverShowMessageAgain') + '</a></div></div>', ' ');
        this.view.messageBar.hasFilterMessage = true;
      }
    } else if (this.isOpenDirectModeLeaf && this.view.messageBar.hasFilterMessage) {
      // remove grid message if it was set previously when in direct open
      this.view.messageBar.hasFilterMessage = false;
      this.view.messageBar.hide();
    }
  },

  checkShowFilterFunnelIcon: function (criteria) {
    if (!this.filterImage) {
      return;
    }
    var gridIsFiltered = this.isGridFiltered(criteria);
    var noParentOrParentSelected = !this.view || !this.view.parentView || (this.view.parentView.viewGrid.getSelectedRecords() && this.view.parentView.viewGrid.getSelectedRecords().length > 0);

    if (this.view && this.view.directNavigation) {
      this.filterImage.prompt = OB.I18N.getLabel('OBUIAPP_GridFilterSingleRecord');
      this.filterImage.show(true);
      this.setSingleRecordFilterMessage();
      return;
    } else if (this.filterClause && gridIsFiltered) {
      this.filterImage.prompt = OB.I18N.getLabel('OBUIAPP_GridFilterBothToolTip');
      this.filterImage.show(true);
    } else if (this.filterClause) {
      this.filterImage.prompt = OB.I18N.getLabel('OBUIAPP_GridFilterImplicitToolTip');
      this.filterImage.show(true);
    } else if (gridIsFiltered) {
      this.filterImage.prompt = OB.I18N.getLabel('OBUIAPP_GridFilterExplicitToolTip');
      this.filterImage.show(true);
    } else {
      this.filterImage.prompt = OB.I18N.getLabel('OBUIAPP_GridFilterIconToolTip');
      if (this.view && this.view.messageBar && this.view.messageBar.hasFilterMessage) {
        this.view.messageBar.hide();
      }
      this.filterImage.hide();
    }

    if (this.filterClause && !this.view.isShowingForm && (this.view.messageBar && !this.view.messageBar.isVisible())) {
      var showMessageProperty = OB.PropertyStore.get('OBUIAPP_ShowImplicitFilterMsg'),
          showMessage = (showMessageProperty !== 'N' && showMessageProperty !== '"N"' && noParentOrParentSelected);
      if (showMessage) {
        this.view.messageBar.setMessage(isc.OBMessageBar.TYPE_INFO, '<div><div class="' + OB.Styles.MessageBar.leftMsgContainerStyle + '">' + this.filterName + '<br/>' + OB.I18N.getLabel('OBUIAPP_ClearFilters') + '</div><div class="' + OB.Styles.MessageBar.rightMsgContainerStyle + '"><a href="#" class="' + OB.Styles.MessageBar.rightMsgTextStyle + '" onclick="' + 'window[\'' + this.view.messageBar.ID + '\'].hide(); OB.PropertyStore.set(\'OBUIAPP_ShowImplicitFilterMsg\', \'N\');">' + OB.I18N.getLabel('OBUIAPP_NeverShowMessageAgain') + '</a></div></div>', ' ');
        this.view.messageBar.hasFilterMessage = true;
      }
    }
  },

  isGridFiltered: function (criteria) {
    if (!this.filterEditor) {
      return false;
    }
    if (this.filterClause) {
      return true;
    }
    if (!criteria) {
      return false;
    }
    return this.isGridFilteredWithCriteria(criteria.criteria);
  },

  isGridFilteredWithCriteria: function (criteria) {
    var i, length;
    if (!criteria) {
      return false;
    }
    length = criteria.length;
    for (i = 0; i < length; i++) {
      var criterion = criteria[i];
      var prop = criterion && criterion.fieldName;
      var fullPropName = prop;
      if (!prop) {
        if (this.isGridFilteredWithCriteria(criterion.criteria)) {
          return true;
        }
        continue;
      }
      var value = criterion.value;
      // see the description in setValuesAsCriteria above
      var separatorIndex = prop.lastIndexOf(OB.Constants.FIELDSEPARATOR);
      if (separatorIndex !== -1) {
        prop = prop.substring(0, separatorIndex);
      }
      var field = this.filterEditor.getField(prop);
      // criterion.operator is set in case of an and/or expression
      if (this.isValidFilterField(field) && (criterion.operator || value === false || value || value === 0)) {
        return true;
      }

      field = this.filterEditor.getField(fullPropName);
      // criterion.operator is set in case of an and/or expression
      if (this.isValidFilterField(field) && (criterion.operator || value === false || value || value === 0)) {
        return true;
      }
    }
    return false;
  },

  isValidFilterField: function (field) {
    if (!field) {
      return false;
    }
    return !field.name.startsWith('_') && field.canFilter;
  },

  // the valuemap is updated in the form item, make sure that the
  // grid field also has it
  getEditorValueMap: function (field, values) {
    var form, ret = this.Super('getEditorValueMap', arguments);
    if (!ret) {
      if (this.getEditForm()) {
        form = this.getEditForm();
        if (form.getItem(field.name) && form.getItem(field.name).valueMap) {
          return form.getItem(field.name).valueMap;
        }
      }
    }
    return ret;
  },

  // = exportData =
  // The exportData function exports the data of the grid to a file. The user will 
  // be presented with a save-as dialog.
  // Parameters:
  // * {{{exportProperties}}} defines different properties used for controlling the export, currently only the 
  // exportProperties.exportAs and exportProperties._extraProperties are supported (which is defaulted to csv).
  // * {{{data}}} the parameters to post to the server, in addition the filter criteria of the grid are posted.  
  exportData: function (exportProperties, data) {
    var d = data || {},
        expProp = exportProperties || {},
        dsURL = this.dataSource.dataURL;
    var sortCriteria;
    var lcriteria = this.getCriteria();
    var gdata = this.getData(),
        isExporting = true;
    if (gdata && gdata.dataSource) {
      lcriteria = gdata.dataSource.convertRelativeDates(lcriteria);
    }

    isc.addProperties(d, {
      _dataSource: this.dataSource.ID,
      _operationType: 'fetch',
      _noCount: true,
      // never do count for export
      exportAs: expProp.exportAs || 'csv',
      viewState: expProp.viewState,
      _extraProperties: expProp._extraProperties,
      tab: expProp.tab,
      exportToFile: true,
      _textMatchStyle: 'substring',
      _UTCOffsetMiliseconds: OB.Utilities.Date.getUTCOffsetInMiliseconds()
    }, lcriteria, this.getFetchRequestParams(null, isExporting));
    if (this.getSortField()) {
      sortCriteria = this.getSort();
      if (sortCriteria && sortCriteria.length > 0) {
        d._sortBy = sortCriteria[0].property;
        if (sortCriteria[0].direction === 'descending') {
          d._sortBy = '-' + d._sortBy;
        }
      }
    }
    OB.Utilities.postThroughHiddenForm(dsURL, d);
  },

  getFetchRequestParams: function (params) {
    return params;
  },

  editorKeyDown: function (item, keyName) {
    if (item) {
      if (typeof item.keyDownAction === 'function') {
        item.keyDownAction();
      }
    }
    return this.Super('editorKeyDown', arguments);
  },

  // Prevents empty message to be shown in frozen part
  // http://forums.smartclient.com/showthread.php?p=57581
  createBodies: function () {
    var ret = this.Super('createBodies', arguments);
    if (this.frozenBody) {
      this.frozenBody.showEmptyMessage = false;
    }
    return ret;
  },

  //= getErrorRows =
  // Returns all the rows that have errors.
  getErrorRows: function () {
    var editRows, errorRows = [],
        i, length;

    if (this.hasErrors()) {
      editRows = this.getAllEditRows(true);
      length = editRows.length;
      for (i = 0; i < length; i++) {
        if (this.rowHasErrors(editRows[i])) {
          errorRows.push(editRows[i]);
        }
      }
    }
    return errorRows;
  },


  // Does not apply if the grid is filtering lazily
  setSort: function (sortSpecifiers, forceSort) {
    if (!forceSort && this.lazyFiltering) {
      this.sortingHasChanged = true;
      if (this.sorter) {
        this.sorter.enable();
      }
      this.savedSortSpecifiers = isc.shallowClone(sortSpecifiers);
      // Refresh the header button titles
      this.refreshHeaderButtons();
    } else {
      this.Super('setSort', arguments);
    }
  },

  refreshHeaderButtons: function () {
    var i, headerButton;
    for (i = 0; i < this.fields.length; i++) {
      headerButton = this.getFieldHeaderButton(i);
      if (headerButton) {
        headerButton.setTitle(headerButton.getTitle());
      }
    }
  },

  getSortFieldCount: function () {
    if (this.lazyFiltering) {
      if (this.savedSortSpecifiers) {
        return this.savedSortSpecifiers.length;
      } else {
        return 0;
      }
    } else {
      return this.Super('getSortFieldCount', arguments);
    }
  },

  toggleSort: function (fieldName, direction) {
    var fullIdentifierName = fieldName + OB.Constants.FIELDSEPARATOR + OB.Constants.IDENTIFIER;
    if (this.lazyFiltering) {
      this.sortingHasChanged = true;
      // If the user clicks on a column that is already ordered, reverse the sort direction
      if (this.savedSortSpecifiers && this.savedSortSpecifiers.length > 0) {
        if (this.savedSortSpecifiers[0].property === fieldName || this.savedSortSpecifiers[0].property === fullIdentifierName) {
          if (this.savedSortSpecifiers[0].direction === 'ascending') {
            this.savedSortSpecifiers[0].direction = 'descending';
          } else {
            this.savedSortSpecifiers[0].direction = 'ascending';
          }
        }
        if (this.sorter) {
          this.sorter.enable();
        }
        this.refreshHeaderButtons();
      }
    } else {
      this.Super('toggleSort', arguments);
    }
  },

  getSort: function () {
    if (this.lazyFiltering) {
      return this.savedSortSpecifiers;
    } else {
      return this.Super('getSort', arguments);
    }
  },

  // If the grid is lazy filtering, a field will be considered ordered if it is saved in savedSortSpecifiers
  isSortField: function (fieldName) {
    var i, len, fullIdentifierName = fieldName + OB.Constants.FIELDSEPARATOR + OB.Constants.IDENTIFIER;
    if (this.lazyFiltering) {
      if (!this.savedSortSpecifiers) {
        return false;
      } else {
        //Search for the fieldName in the savedSortSpecifiers
        len = this.savedSortSpecifiers.length;
        for (i = 0; i < len; i++) {
          if (this.savedSortSpecifiers[i].property === fieldName || this.savedSortSpecifiers[0].property === fullIdentifierName) {
            return true;
          }
        }
        return false;
      }
    } else {
      return this.Super('isSortField', arguments);
    }
  },

  getSortArrowImage: function (fieldNum) {
    var sortDirection, field = this.getField(fieldNum),
        fullIdentifierName;

    if (this.lazyFiltering) {
      if (!field) {
        return isc.Canvas.spacerHTML(1, 1);
      }
      fullIdentifierName = field.name + OB.Constants.FIELDSEPARATOR + OB.Constants.IDENTIFIER;
      if (this.savedSortSpecifiers && this.savedSortSpecifiers.length > 0) {
        if (this.savedSortSpecifiers[0].property === field.name || this.savedSortSpecifiers[0].property === fullIdentifierName) {
          sortDirection = this.savedSortSpecifiers[0].direction;
        }
      }
      if (sortDirection) {
        return this.imgHTML(Array.shouldSortAscending(sortDirection) ? this.sortAscendingImage : this.sortDescendingImage, null, null, null, null, this.widgetImgDir);
      } else {
        return isc.Canvas.spacerHTML(1, 1);
      }
    } else {
      return this.Super('getSortArrowImage', arguments);
    }

  }
});

isc.ClassFactory.defineClass('OBGridSummary', isc.OBGrid);

isc.OBGridSummary.addProperties({
  getCellStyle: function (record, rowNum, colNum) {
    var field = this.parentElement.getField(colNum);
    if (field.summaryFunction && this['summaryRowStyle_' + field.summaryFunction]) {
      return this['summaryRowStyle_' + field.summaryFunction];
    } else {
      return this.summaryRowStyle;
    }
  }
});

isc.ClassFactory.defineClass('OBGridHeaderImgButton', isc.ImgButton);

isc.ClassFactory.defineClass('OBGridLinkItem', isc.HLayout);
isc.OBGridLinkItem.addProperties({
  overflow: 'clip-h',
  btn: null,
  height: 1,
  width: '100%',

  isShownInGridEdit: true,
  initWidget: function () {
    if (!this.btn) {
      this.btn = isc.OBGridLinkButton.create({});
    }
    this.setTitle(this.title);
    this.btn.owner = this;
    this.addMember(this.btn);
    this.Super('initWidget', arguments);
  },

  setTitle: function (title) {
    this.btn.setTitle(title);
  }
});

isc.ClassFactory.defineClass('OBGridLinkButton', isc.Button);

isc.OBGridLinkButton.addProperties({
  action: function () {
    this.owner.doAction();
  }
});

isc.ClassFactory.defineClass('OBGridFormButton', isc.OBFormButton);
isc.OBGridFormButton.addProperties({});


isc.defineClass('OBGridLinkCellClick', isc.OBGridLinkItem);

isc.OBGridLinkCellClick.addProperties({
  setRecord: function () {
    this.setTitle(this.grid.formatLinkValue(this.record, this.field, this.colNum, this.rowNum, this.record[this.field.name]));
  },

  doAction: function () {
    if (this.grid && this.grid.doCellClick) {
      this.grid.doCellClick(this.record, this.rowNum, this.colNum);
    } else if (this.grid && this.grid.cellClick) {
      this.grid.cellClick(this.record, this.rowNum, this.colNum);
    }
  }
});
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2010-2012 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */
isc.ClassFactory.defineClass('OBQuickRun', isc.ImgButton);

// = OBQuickRun =
// The OBQuickRun widget creates a button with a layout which is displayed below
// it
// when the button gets clicked. The layout is hidden again when a mouse click
// happens on another part of the window. This makes use of the Smartclient
// click mask concept.
// The OBQuickRun extends from the Smartclient Button.
isc.OBQuickRun.addClassProperties({

  // ** {{{ currentQuickRun }}} **
  // The current OBQuickRun widget which is expanded (or null if none is
  // expanded).
  currentQuickRun: null,

  // ** {{{ hide }}} **
  // Class method which hides the one visible quick run widget layout (if one is
  // expanded).
  hide: function () {
    if (isc.OBQuickRun.currentQuickRun && isc.OBQuickRun.currentQuickRun.showing) {
      var tempQuickRun = isc.OBQuickRun.currentQuickRun;
      this.currentQuickRun = null;
      tempQuickRun.doHide();
    }
  }
});

// = OBQuickRun Properties =
isc.OBQuickRun.addProperties({

  autoFit: true,
  imageType: 'center',
  showRollOver: false,
  showFocused: false,
  showDown: false,
  overflow: 'visible',

  // ** {{{ layout }}} **
  // The layout which is expanded down when clicking the quick run button.
  layout: null,

  // ** {{{ layoutProperties }}} **
  // Properties which are used to configure the layout
  layoutProperties: {},

  // ** {{{ members }}} **
  // The members of the layout.
  members: [],

  // ** {{{ showing }}} **
  // Is set to true when the layout is showing/visible.
  showing: false,

  selectedHideLayout: null,

  draw: function () {
    var me = this,
        ksAction;

    if (!this.keyboardShortcutId) {
      return this.Super('draw', arguments);
    }

    ksAction = function () {
      me.getLayoutContainer().setStyleName('OBNavBarComponentSelected');
      if (!me.showing) {
        isc.EH.clickMaskClick();
      }
      setTimeout(function () {
        me.click();
      }, 10); //setTimeout to avoid delayCall function that manages the focus
      return false; //To avoid keyboard shortcut propagation
    };

    OB.KeyboardManager.Shortcuts.set(this.keyboardShortcutId, 'Canvas', ksAction);
    this.Super('draw', arguments);
  },

  // ** {{{ initWidget }}} **
  // Creates the layout (invisible as a default).
  initWidget: function () {
    // Always call the superclass implementation when overriding initWidget
    this.Super('initWidget', arguments);

    this.computeSetContent();
  },

  computeSetContent: function () {
    // set some defaults
    var defaultLayoutProperties = {
      styleName: 'OBFlyoutLayout',
      showShadow: false,
      layoutMargin: 10,
      shadowDepth: 5,
      bodyBackgroundColor: null
    };

    // compute the height
    if (this.members) {
      defaultLayoutProperties.members = this.members;
      var computedHeight = 0,
          i, length = this.members.length;
      for (i = 0; i < length; i++) {
        if (this.members[i].height) {
          computedHeight = computedHeight + this.members[i].height;
        }
      }
      defaultLayoutProperties.height = computedHeight;
    }

    // set the properties which are used, override by user set properties
    var usedLayoutProperties = {};
    isc.addProperties(usedLayoutProperties, defaultLayoutProperties, this.layoutProperties);

    // create the layout
    if (!this.layout) {
      this.layout = isc.VLayout.create(usedLayoutProperties);
    }
    // this.overCanvas = this.layout;
    // this.showOverCanvas = true;
  },

  resetLayout: function () {
    if (this.layout) {
      this.layout.destroy();
      this.layout = null;
    }
  },

  // ** {{{ click }}} **
  // clicking the button shows or hides the layout.
  click: function () {
    if (this.showing) {
      this.doHide();
      return false;
    } else {
      this.doShow();
    }
  },

  // 16012: Double click and single click on nav bar flyouts are treated the same
  // https://issues.openbravo.com/view.php?id=16012
  doubleClick: function () {
    this.click();
  },

  // ** {{{ keyPress }}} **
  // handle the escape and enter keys, these should hide the layout.
  keyPress: function () {
    var key = isc.EventHandler.getKey();
    if (key === 'Escape' || key === 'Enter') {
      if (isc.OBQuickRun.currentQuickRun) {
        isc.OBQuickRun.currentQuickRun.doHide();
      }
    }
    return true;
  },

  // ** {{{ doShow }}} **
  // Called to actually show the layout.
  doShow: function () {
    // start with clean form values
    // if (this.layout) {
    // for (var i=0; i < this.layout.members.length; i++) {
    // if (this.layout.members[i].clearValues) {
    // this.layout.members[i].clearValues();
    // }
    // }
    // }
    this.focusOnHide = isc.EH.getFocusCanvas();

    var left = this.getLeftPosition();
    if (isc.Page.isRTL()) {
      left = left - this.layout.getVisibleWidth() + this.getVisibleWidth() + 1;
    }
    var top = this.getPageTop() + this.getVisibleHeight() - 1;

    this.beforeShow();

    this.layout.placeNear(left, top);

    isc.OBQuickRun.clickMask = this.showClickMask('isc.OBQuickRun.hide()', 'soft', [this, this.layout]);

    this.layout.show();

    isc.OBQuickRun.currentQuickRun = this;

    // this code hides the horizontal line between the menu button and the
    // menu
    var layoutContainer = this.getLayoutContainer();
    layoutContainer.setStyleName('OBNavBarComponentSelected');
    this.selectedHideLayout = isc.Layout.create({
      styleName: 'OBNavBarComponentHideLine',
      height: 3,
      width: layoutContainer.getVisibleWidth() - 2,
      top: layoutContainer.getPageTop() + layoutContainer.getVisibleHeight() - 1,
      left: this.getLeftPosition() + 1,
      overflow: 'hidden'
    });
    this.selectedHideLayout.show();
    this.selectedHideLayout.moveAbove(this.layout);

    this.showing = true;
  },

  getLayoutContainer: function () {
    return this.parentElement;
  },

  getLeftPosition: function () {
    return this.parentElement.getPageLeft();
  },

  // ** {{{ beforeShow }}} **
  // Intended to be overridden, is called just before the layout.show()
  // method
  // is called.
  beforeShow: function () {},

  // ** {{{ doHide }}} **
  // Hide the expanded layout.
  doHide: function () {
    this.hideClickMask();
    this.layout.hide();

    this.getLayoutContainer().setStyleName('OBNavBarComponent');

    if (this.selectedHideLayout) {
      this.selectedHideLayout.hide();
      this.selectedHideLayout.destroy();
      this.selectedHideLayout = null;
    }

    this.showing = false;
    if (isc.OBQuickRun.currentQuickRun === this) {
      isc.OBQuickRun.currentQuickRun = null;
    }

    if (isc.isA.Canvas(this.focusOnHide)) {
      this.focusOnHide.focus();
    }

    if (typeof OB.MainView.TabSet.getSelectedTab().pane.tabSelected === 'function') {
      OB.MainView.TabSet.getSelectedTab().pane.tabSelected();
    }
  }
});
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2010-2012 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */

// = Property Store =
//
// The Property Store maintains properties. A property can be anything from the width of a column to 
// the last menu selections of a user. If a component sets a property then the property is also set 
// on the server. All properties defined on the server are loaded when the application starts. So
// the property store has always a complete set of properties (read at page start and updated).
// If a component requests a certain property then the local cache (OB.Properties) is checked. 
// If no value can be found there then an undefined value is returned. 
//
(function (OB, isc) {

  if (!OB || !isc) {
    throw {
      name: 'ReferenceError',
      message: 'openbravo and isc objects are required'
    };
  }

  // cache object references locally
  var ISC = isc,
      pstore; // Local reference to RemoveCallManager instance

  function PropertyStore() {}

  PropertyStore.prototype = {

    // array of functions which are called when a property change
    // occurs
    listeners: [],

    // ** {{{ PropertyStore.get(propertyName) }}} **
    //
    // Retrieves the property from the local cache. If not found then null
    // is returned.
    //
    // Parameters:
    // * {{{propertyName}}}: the name of the property
    // * {{{windowId}}}: the system will first search for property on windowId level
    //
    get: function (propertyName, windowId) {
      if (windowId && OB.Properties[propertyName + '_' + windowId]) {
        return OB.Properties[propertyName + '_' + windowId];
      }
      if (!OB.Properties[propertyName]) {
        return null;
      }
      return OB.Properties[propertyName];
    },

    // ** {{{ PropertyStore.set(propertyName, value) }}} **
    //
    // Sets the property in the local cache. Also performs a server call to
    // persist the
    // property in the database.
    //
    // Parameters:
    // * {{{propertyName}}}: the name of the property
    // * {{{value}}}: the value of the property
    //
    set: function (propertyName, value, windowId, noSetInServer, setAsSystem) {
      var currentValue = OB.Properties[propertyName],
          localPropertyName = propertyName,
          i, length, data;

      data = {
        property: propertyName,
        system: setAsSystem ? true : false
      };

      if (windowId) {
        data.windowId = windowId;
        localPropertyName = propertyName + '_' + windowId;
      }

      // set it locally
      OB.Properties[localPropertyName] = value;

      if (!noSetInServer) {
        // and set it in the server also
        OB.RemoteCallManager.call('org.openbravo.client.application.StorePropertyActionHandler', value, data, function () {});
      }

      // call the listeners
      length = this.listeners.length;
      for (i = 0; i < length; i++) {
        this.listeners[i](localPropertyName, currentValue, value);
      }

    },

    // ** {{{addListener(listener) }}} **
    //
    // Register a new listener which will be called when a property change occurs.
    // The function is called after the property change.
    //
    // Parameters:
    // * {{{listener}}}: a function which is called when a new alert result is
    // received. The function will get three parameters: property name, old value, new value
    addListener: function (listener) {
      this.listeners[this.listeners.length] = listener;
    }
  };

  // Initialize PropertyStore object
  pstore = OB.PropertyStore = new PropertyStore();
}(OB, isc));
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License+
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2010-2012 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */
// = Test Registry =
//
// Global registry to facilitate testing. Components can register themselves in the 
// TestRegistry using a unique name, selenium tests can then easily retrieve components from the test registry
// using the unique name.
//
(function (OB, isc) {

  if (!OB || !isc) {
    throw {
      name: 'ReferenceError',
      message: 'openbravo and isc objects are required'
    };
  }

  var fullUrl = parent.document.URL;
  var queryString = fullUrl.substring(fullUrl.indexOf('?') + 1, fullUrl.length);
  var isTestEnvironment = queryString.indexOf('test=true') !== -1;
  if (isTestEnvironment || OB.Application.testEnvironment) {
    isc.Log.logDebug('Test Environment, registering test components enabled', 'OB');
  } else {
    isc.Log.logDebug('No Test Environment, registering test components disabled', 'OB');
  }

  function TestRegistry() {}

  TestRegistry.prototype = {

    registry: {},

    register: function (key, object) {
      if (isTestEnvironment || OB.Application.testEnvironment) {
        isc.Log.logDebug('Registering ' + key + ' in test registry ', 'OB');
        this.registry[key] = object;
      }
    }
  };

  OB.TestRegistry = new TestRegistry();
}(OB, isc));
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2010-2012 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */

// = Remote Call Manager =
//
// The Remote Call Manager provides support for calling java from the client
// and retrieving the result.
//
(function (OB, isc) {

  if (!OB || !isc) {
    throw {
      name: 'ReferenceError',
      message: 'openbravo and isc objects are required'
    };
  }

  // cache object references locally
  var ISC = isc,
      rcmgr; // Local reference to RemoveCallManager instance

  function RemoteCallManager() {}

  RemoteCallManager.prototype = {

    // ** {{{ RemoteCallManager.call(actionName, params, content, callBack)
    // }}} **
    //
    // Calls the remote action on the server. The response is processed by
    // calling the callBack function.
    // The callback function gets three parameters: rpcResponse,
    // data (the resulting content), rpcRequest.
    // See the Smartclient RPCCallback type for more information.
    //
    // Parameters:
    // * {{{actionName}}}: is the unique identifier of the action on the
    // server
    // * {{{data}}}: is an Object with the data passed to the action.
    // * {{{requestParams}}}: request parameters send to the action.
    // * {{{callback}}}: is the function which is called after receiving the
    // result.
    // * {{{callerContext}}}: a context object which is available
    // (as rpcRequest.clientContext) when the callback gets called
    //
    call: function (actionName, data, requestParams, callback, callerContext) {

      var requestParameters = {};
      ISC.addProperties(requestParameters, requestParams);
      requestParameters._action = actionName;
      var rpcRequest = {};

      // support overriding of the http method through a request param
      if (requestParameters.httpMethod) {
        rpcRequest.httpMethod = requestParameters.httpMethod;
      }

      rpcRequest.actionURL = OB.Application.contextUrl + 'org.openbravo.client.kernel';
      rpcRequest.callback = callback;
      if (data) {
        rpcRequest.data = ISC.JSON.encode(data);
        rpcRequest.httpMethod = 'POST';
      } else if (!rpcRequest.httpMethod) {
        rpcRequest.httpMethod = 'GET';
      }
      rpcRequest.contentType = 'application/json;charset=UTF-8';
      rpcRequest.useSimpleHttp = true;
      rpcRequest.evalResult = true;
      rpcRequest.params = requestParameters;
      rpcRequest.clientContext = callerContext;
      ISC.RPCManager.sendRequest(rpcRequest);
    }
  };

  // Initialize RemoteCallManager object
  rcmgr = OB.RemoteCallManager = new RemoteCallManager();
}(OB, isc));
$LAB.script('/openbravo/org.openbravo.client.kernel/OBUIAPP_MainLayout/Properties').wait(function(){var _exception; try{
$LAB.script('/openbravo/org.openbravo.client.kernel/OBUIAPP_MainLayout/WindowDefinitionComponent').wait(function(){var _exception; try{
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2010-2013 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */

// = OB Classic Window =
//
// Implements the view which shows a classic OB window in a Smartclient HTMLFlow component. The 
// classic OB window is shown in a tab in the multi-tab interface. 
//
isc.defineClass('OBClassicWindow', isc.HTMLPane).addProperties({
  showsItself: false,
  contentsType: 'page',
  windowId: '',
  tabId: '',
  recordId: '',
  // tab title is the title in the MDI tab, it is set in the view-manager
  // and updated below
  tabTitle: null,
  processId: null,
  formId: null,
  mappingName: null,
  command: 'DEFAULT',
  showEdges: false,
  styleName: 'obClassicWindow',
  appURL: OB.Application.contextUrl + 'security/Menu.html',
  obManualURL: '',
  padding: 0,
  margin: 0,
  height: '100%',
  width: '100%',
  // ignore the tab info update for one time, to prevent double history entries
  ignoreTabInfoUpdate: true,
  hasBeenDrawnOnce: false,
  appFrameWindow: null
});

isc.OBClassicWindow.addMethods({

  // ** {{{ updateTabInformation }}} **
  //
  // Is called to update the tab information of an opened classic window.
  updateTabInformation: function (windowId, tabId, recordId, command, obManualURL, title) {
    // ignore the first time
    if (this.ignoreTabInfoUpdate) {
      this.ignoreTabInfoUpdate = false;
      return;
    }

    this.windowId = windowId || '';

    this.tabId = tabId || '';

    this.recordId = recordId || '';

    this.command = (command ? command.toUpperCase() : '') || 'DEFAULT';

    this.obManualURL = obManualURL || '';

    this.tabTitle = null;

    OB.Layout.HistoryManager.updateHistory();
  },

  // ** {{{ refreshTab }}} **
  //
  // Is used to handle the refresh keyboard shortcut, clicks the refresh button
  // of a classic window.
  refreshTab: function () {
    if (this.getAppFrameWindow()) {
      this.getAppFrameWindow().document.getElementById('buttonRefresh').onclick();
    }
  },

  // ** {{{ tabSelected }}} **
  //
  // Is used to place the focus in a tab after one of the flyouts is closed.
  tabSelected: function () {
    var appFrameWindow = this.getAppFrameWindow();
    if (appFrameWindow && appFrameWindow.putFocusOnWindow && !appFrameWindow.OB_NoRefocusAfterTabSelection) {
      appFrameWindow.putFocusOnWindow();
    }
  },

  initWidget: function (args) {
    var urlCharacter = '?';
    if (this.appURL.indexOf('?') !== -1) {
      urlCharacter = '&';
    }
    if (this.keyParameter) {
      this.contentsURL = this.appURL + urlCharacter + 'url=' + this.mappingName + '&' + this.keyParameter + '=' + this.recordId + '&noprefs=true&Command=DIRECT&hideMenu=true';
    } else if (this.obManualURL && this.obManualURL !== '') {
      this.obManualURL = this.obManualURL.replace('?', '&');

      this.contentsURL = this.appURL + urlCharacter + 'url=' + this.obManualURL + '&noprefs=true&hideMenu=true';

      if (this.obManualURL.indexOf('Command=') === -1) {
        // Add command in case it is not already set in the obManualURL
        this.contentsURL = this.contentsURL + '&Command=' + this.command;
      }
    } else {
      this.contentsURL = this.appURL + urlCharacter + 'Command=' + this.command + '&noprefs=true';
      if (this.recordId !== '') {
        this.contentsURL = this.contentsURL + '&windowId=' + this.windowId;
      }
      this.contentsURL = this.contentsURL + '&tabId=' + this.tabId;
      if (this.recordId !== '') {
        this.contentsURL = this.contentsURL + '&recordId=' + this.recordId;
      }
      this.contentsURL = this.contentsURL + '&hideMenu=true';
    }

    this.Super('initWidget', args);
  },

  // ** {{{ getIframeWindow }}} **
  //
  // Returns the contentWindow object of the iframe implementing the classic
  // window.
  getIframeWindow: function () {
    var container, iframes;

    container = this.getHandle();

    if (container && container.getElementsByTagName) {
      iframes = container.getElementsByTagName('iframe');
      if (iframes.length > 0) {
        return (iframes[0].contentWindow ? iframes[0].contentWindow : null);
      }
    }
    return null;
  },

  // ** {{{ getAppFrameWindow }}} **
  //
  // Returns the appFrame object of the contentWindow of the iframe implementing
  // the classic window.
  getAppFrameWindow: function () {
    var iframe;
    if (this.appFrameWindow !== null) {
      return this.appFrameWindow;
    }
    iframe = this.getIframeWindow();
    try {
      this.appFrameWindow = (iframe && iframe.appFrame ? iframe.appFrame : null); // caching reference
    } catch (e) {
      //To avoid cross-domain JS error (in case it exists)
      this.appFrameWindow = null;
    }
    return this.appFrameWindow;
  },

  // The following methods are related to history management, i.e. that a
  // specific window is only opened once.
  getBookMarkParams: function () {
    var result = {};
    if (this.recordId) {
      result.recordId = this.recordId;
    }
    if (this.windowId) {
      result.windowId = this.windowId;
    }
    if (this.obManualURL) {
      result.obManualURL = this.obManualURL;
    }
    if (this.command) {
      result.command = this.command;
    }
    if (this.tabId) {
      result.tabId = this.tabId;
    }
    if (this.processId) {
      result.processId = this.processId;
    }
    if (this.formId) {
      result.formId = this.formId;
    }
    if (this.keyParameter) {
      result.keyParameter = this.keyParameter;
    }
    if (this.mappingName) {
      result.mappingName = this.mappingName;
    }
    return result;
  },

  isEqualParams: function (params) {
    if (params && (this.recordId || params.recordId) && params.recordId !== this.recordId) {
      return false;
    }

    if (params && (this.command || params.command) && params.command !== this.command) {
      return false;
    }

    if (params && (this.tabId || params.tabId) && params.tabId !== this.tabId) {
      return false;
    }

    if (params && (this.formId || params.formId) && params.formId !== this.formId) {
      return false;
    }

    if (params && (this.windowId || params.windowId) && params.windowId !== this.windowId) {
      return false;
    }

    if (params && (this.processId || params.processId) && params.processId !== this.processId) {
      return false;
    }

    return true;
  },

  isSameTab: function (viewName, params) {
    if (viewName !== 'OBClassicWindow') {
      return false;
    }
    if (params && (params.obManualURL || this.obManualURL) && params.obManualURL === this.obManualURL) {
      return true;
    }

    if (params && (this.windowId || params.windowId) && params.windowId === this.windowId) {
      return true;
    }

    if (params && (this.processId || params.processId) && params.processId === this.processId) {
      return true;
    }

    if (params && (this.formId || params.formId) && params.formId === this.formId) {
      return true;
    }

    if ((!params || params.tabId === '') && this.tabId === '') {
      return true;
    }

    return params.tabId === this.tabId;
  },

  // ** {{{ getHelpView }}} **
  //
  // Returns the view definition of the help window for this classic window.
  getHelpView: function () {
    if (this.windowId) {
      // tabTitle is set in the viewManager
      return {
        viewId: 'ClassicOBHelp',
        tabTitle: this.tabTitle + ' - ' + OB.I18N.getLabel('UINAVBA_Help'),
        windowId: this.windowId,
        windowType: 'W',
        windowName: this.tabTitle
      };
    }
    if (this.processId) {
      return {
        viewId: 'ClassicOBHelp',
        windowId: null,
        tabTitle: this.tabTitle + ' - ' + OB.I18N.getLabel('UINAVBA_Help'),
        windowType: 'R',
        windowName: this.processId
      };
    }
    if (this.formId) {
      return {
        viewId: 'ClassicOBHelp',
        windowId: null,
        tabTitle: this.tabTitle + ' - ' + OB.I18N.getLabel('UINAVBA_Help'),
        windowType: 'X',
        windowName: this.formId
      };
    }
    return null;
  },

  // ** {{{ saveRecord }}} **
  //
  // Is used for supporting autosave, saves the specific tab of the window.
  // Calls the server to do the actual save, the response calls the callback
  // method.
  saveRecord: function ( /* String */ tabID, /* Function */ callback) {
    var postData, reqObj, appFrame = this.appFrameWindow || this.getAppFrameWindow(),
        saveCallback = callback || this.ID + '.saveCallback(rpcResponse, data, rpcRequest)',
        tabid = tabID || '';

    postData = {};
    OB.Utilities.addFormInputsToCriteria(postData, appFrame);

    postData.Command = 'SAVE_XHR';
    postData.tabID = tabid;

    reqObj = {
      params: postData,
      callback: saveCallback,
      evalResult: false,
      httpMethod: 'POST',
      useSimpleHttp: true,
      actionURL: OB.Application.contextUrl + postData.mappingName
    };
    isc.RPCManager.sendRequest(reqObj);
  },

  // ** {{{ saveCallback }}} **
  //
  // If the save is successfull closes the tab.
  saveCallback: function (rpcResponse, data, rpcRequest) {
    var result = eval('(' + data + ')'),
        appFrame = this.appFrameWindow || this.getAppFrameWindow();
    if (result && result.oberror) {
      if (result.oberror.type === 'Success') {
        appFrame.isUserChanges = false;
        OB.MainView.TabSet.removeTab(OB.MainView.TabSet.getTab(result.tabid));
      } else {
        appFrame.location.href = result.redirect;
      }
    }
  }
});

// Maintained to support recent items which use the old name
// NOTE: can be removed when the user interface is released in production in Q1 2011
// at that time the recent items should have been cleaned up
isc.defineClass('ClassicOBWindow', isc.OBClassicWindow);
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2010-2012 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */

// = Classic OB Help =
//
// Implements the view which shows a help window for a classic OB window in a tab
// of the main layout. It is called from the OBHelpAbout widget displayed
// in the navigation bar.
//
isc.defineClass('ClassicOBHelp', isc.HTMLPane).addProperties({
  showsItself: false,
  contentsType: 'page',
  windowId: null,
  windowType: null,
  windowName: null,
  recordId: '',
  command: 'DEFAULT',
  showEdges: false,
  styleName: 'obClassicWindow',
  appURL: OB.Application.contextUrl + 'security/Menu.html',
  padding: 0,
  margin: 0,
  height: '100%',
  width: '100%'
});

// get the label and set it in the class
OB.I18N.getLabel('OBUIAPP_Loading', null, isc.ClassicOBHelp, 'loadingMessage');

isc.ClassicOBHelp.addMethods({
  initWidget: function (args) {
    this.contentsURL = this.appURL + '?url=/ad_help/DisplayHelp.html&hideMenu=true&noprefs=true';
    if (this.windowId) {
      this.contentsURL = this.contentsURL + '&inpwindowId=' + this.windowId;
    }
    if (this.windowType) {
      this.contentsURL = this.contentsURL + '&inpwindowType=' + this.windowType;
    }
    if (this.windowName) {
      this.contentsURL = this.contentsURL + '&inpwindowName=' + this.windowName;
    }
    this.Super('initWidget', args);
  },

  // The following methods are involved in making sure that a help tab for a 
  // certain window is only opened once.
  getBookMarkParams: function () {
    var result = {};
    if (this.windowId) {
      result.windowId = this.windowId;
    }
    if (this.windowType) {
      result.windowType = this.windowType;
    }
    if (this.windowName) {
      result.windowName = this.windowName;
    }
    result.viewId = 'ClassicOBHelp';
    return result;
  },

  isEqualParams: function (params) {
    if (!params || params.viewId !== 'ClassicOBHelp') {
      return false;
    }
    if ((this.windowId || params.windowId) && params.windowId !== this.windowId) {
      return false;
    }

    if ((this.windowType || params.windowType) && params.windowType !== this.windowType) {
      return false;
    }

    if ((this.windowName || params.windowName) && params.windowName !== this.windowName) {
      return false;
    }

    return true;
  },

  isSameTab: function (viewId, params) {
    if (viewId !== 'ClassicOBHelp') {
      return false;
    }

    if (this.isEqualParams(params)) {
      return true;
    }
    return false;
  }
});
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2010-2012 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */

// = Popup External Window =
//
// A view which displays an external url inside a tab of the main layout.
//
isc.defineClass('OBExternalPage', isc.HTMLFlow).addProperties({
  showsItself: false,
  contentsType: 'page',
  showEdges: false,
  styleName: 'obClassicWindow',
  padding: 0,
  margin: 0,
  height: '100%',
  width: '100%'
});

// get the label and set it in the class
OB.I18N.getLabel('OBUIAPP_Loading', null, isc.OBExternalPage, 'loadingMessage');

isc.OBExternalPage.addMethods({

  // the following methods are used to support history management
  getBookMarkParams: function () {
    var result = {};
    result.contentsURL = this.contentsURL;
    return result;
  },

  isSameTab: function (params) {
    return (params && (params.contentsURL || this.contentsURL) && params.contentsURL === this.contentsURL);
  }
});
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use this
 * file except in compliance with the License. You  may obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distribfuted  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2010-2013 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */
isc.ClassFactory.defineClass('OBStandardWindow', isc.VLayout);

isc.OBStandardWindow.addClassProperties({
  // tells the window to open the first tab in new mode
  COMMAND_NEW: 'NEW'
});

// = OBStandardWindow =
//
// Represents the root container for an Openbravo window consisting of a
// hierarchy of tabs. Each tab is represented with an instance of the
// OBStandardView.
//
// The standard window can be opened as a result of a click on a link
// in another tab. In this case the window should open all tabs from the
// target tab up to the root tab. The flow starts by opening the deepest tab.
// This tab then forces the ancestor tabs to read data (asynchronously in sequence). This is 
// controlled through the isOpenDirectMode flag which tells a tab that it 
// should open its grid using a target record id and use the parent property
// to define the parent id by which to filter (if the tab has a parent). 
// 
isc.OBStandardWindow.addProperties({
  toolBarLayout: null,
  view: null,

  viewProperties: null,

  activeView: null,

  views: [],

  stackZIndex: 'firstOnTop',
  align: 'center',
  defaultLayoutAlign: 'center',

  // is set when a form or grid editing results in dirty data
  // in the window
  dirtyEditForm: null,

  allowDelete: 'Y',

  allowAttachment: 'Y',

  initWidget: function () {
    var me = this,
        callback;

    this.views = [];

    this.windowLayout = isc.VLayout.create({
      width: '100%',
      // is set by its content
      height: '100%',
      overflow: 'visible'
    });

    this.toolBarLayout = isc.HLayout.create({
      mouseDownCancelParentPropagation: true,
      width: '100%',
      // is set by its content
      height: 1,
      overflow: 'visible'
    });

    if (this.targetTabId) {
      // is used as a flag so that we are in direct link mode
      // prevents extra fetch data actions
      this.directTabInfo = {};
    }

    this.addChild(this.windowLayout);
    this.windowLayout.addMember(this.toolBarLayout);

    this.viewProperties.standardWindow = this;
    this.viewProperties.isRootView = true;
    if (this.command === isc.OBStandardWindow.COMMAND_NEW) {
      this.viewProperties.allowDefaultEditMode = false;
    }

    if (OB.Utilities.checkProfessionalLicense(null, true)) {
      this.viewState = OB.PropertyStore.get('OBUIAPP_GridConfiguration', this.windowId);
    } else {
      this.viewState = null;
    }

    this.allowDelete = OB.PropertyStore.get("AllowDelete", this.windowId);
    this.allowAttachment = OB.PropertyStore.get("AllowAttachment", this.windowId);
    this.view = isc.OBStandardView.create(this.viewProperties);
    this.addView(this.view);
    this.windowLayout.addMember(this.view);

    this.Super('initWidget', arguments);

    // is set later after creation
    this.view.tabTitle = this.tabTitle;

    // retrieve user specific window settings from the server
    // they are stored at class level to only do the call once
    // note this if is not done inside the method as this 
    // method is also called explicitly from the personalization window
    if (!this.getClass().windowSettingsRead) {
      this.readWindowSettings();
    } else if (this.getClass().windowSettingsCached) {
      callback = function () {
        me.setWindowSettings(me.getClass().windowSettingsCached);
      };
      this.fireOnPause('setWindowSettings_' + this.ID, callback);

    } else if (this.getClass().personalization) {
      this.setPersonalization(this.getClass().personalization);
    }
  },

  openPopupInTab: function (element, title, width, height, showMinimizeControl, showMaximizeControl, showCloseControl, isModal) {
    var prevFocusedItem = isc.EH.getFocusCanvas();
    title = (title ? title : '');
    width = (width ? width : '85%');
    height = (height ? height : '85%');
    showMinimizeControl = (showMinimizeControl ? showMinimizeControl : false);
    showMaximizeControl = (showMaximizeControl ? showMaximizeControl : false);
    showCloseControl = (showCloseControl ? showCloseControl : true);
    isModal = (isModal !== false ? true : false);

    var dummyFirstField = isc.OBFocusButton.create({
      getFocusTarget: function () {
        return this.parentElement.children[2];
      }
    });

    var dummyMiddleField = isc.Button.create({
      title: '',
      width: 1,
      height: 1,
      border: '0px solid'
    });

    var dummyLastField = isc.OBFocusButton.create({
      getFocusTarget: function () {
        return this.parentElement.children[2];
      }
    });

    var thePopup = isc.OBPopup.create({
      width: width,
      height: height,
      title: title,
      showMinimizeButton: showMinimizeControl,
      showMaximizeButton: showMaximizeControl,
      showCloseButton: showCloseControl,
      autoSize: false,
      canDragReposition: true,
      canDragResize: true,
      keepInParentRect: true,
      itemCloseClick: function () {
        return true;
      },
      restore: function () {
        this.Super('restore', arguments);
        if (isc.Browser.isWebKit) { // To avoid strange effect in Chrome when restoring the maximized window (it only happens odd times)
          this.parentElement.parentElement.parentElement.setWidth('99%');
          this.parentElement.parentElement.parentElement.setWidth('100%');
        }
      },
      initWidget: function () {
        if (width.toString().indexOf('%') === -1) {
          // Smartclient to calculate the width takes into account the margin width
          this.setWidth(parseInt(width, 10) + this.edgeSize + this.edgeSize);
        }
        if (height.toString().indexOf('%') === -1) {
          // Smartclient to calculate the width takes into account the margin width
          this.setHeight(parseInt(height, 10) + this.edgeBottom + this.edgeTop);
        }
        if (this.items[0].closeClick) {
          this.itemCloseClick = function () {
            this.items[0].closeClick();
          };
        }
        this.closeClick = function () {
          this.itemCloseClick();
          this.Super('closeClick', arguments);
        };

        this.Super('initWidget', arguments);
      },
      items: [element]
    });

    if (isModal) {
      thePopup.closeClick = function () {
        thePopup.itemCloseClick();
        if (prevFocusedItem) {
          prevFocusedItem.focus();
        }
        if (this.parentElement) {
          this.parentElement.destroy();
        }
        return false;
      };
      var theModalMask = isc.Canvas.create({
        width: '100%',
        height: '100%',
        memberOverlap: '100%',
        draw: function () {
          var me = this;
          if (prevFocusedItem) {
            var myInterval;
            myInterval = setInterval(function () {
              if (me.children && prevFocusedItem === isc.EH.getFocusCanvas()) {
                if (me.children[3] && me.children[3].items[0] && me.children[3].items[0].firstFocusedItem) {
                  me.children[3].items[0].firstFocusedItem.focus();
                } else {
                  me.children[2].focus();
                }
              } else {
                clearInterval(myInterval);
              }
            }, 10);
          }
          this.Super('draw', arguments);
        },
        children: [
        isc.Canvas.create({
          width: '100%',
          height: '100%',
          styleName: 'OBPopupInTabModalMask'
        }), dummyFirstField, dummyMiddleField, thePopup, dummyLastField]
      });
      this.addChild(theModalMask);
    } else {
      this.addChild(thePopup);
    }
  },

  openProcess: function (params) {
    var parts = this.getPrototype().Class.split('_'),
        len = parts.length,
        className = '_',
        tabSet = OB.MainView.TabSet,
        vStack, manualJS, originalClassName, processClass, processOwnerView;

    if (params.uiPattern === 'M') { // Manual UI Pattern
      try {
        if (isc.isA.Function(params.actionHandler)) {
          params.actionHandler(params, this);
        }
      } catch (e) {
        // handling possible exceptions in manual code not to lock the application
        isc.warn(e.message);
      }
    } else {
      if (params.paramWindow) {
        className = className + params.processId;
        if (len === 3) {
          // keep original classname in case one with timestamp is not present
          originalClassName = className;

          // debug mode, we have added _timestamp
          className = className + '_' + parts[2];
        }

        processClass = isc[className] || isc[originalClassName];

        if (processClass) {
          processOwnerView = this.getProcessOwnerView(params.processId);
          this.selectedState = processOwnerView.viewGrid && processOwnerView.viewGrid.getSelectedState();
          this.runningProcess = processClass.create(isc.addProperties({}, params, {
            parentWindow: this,
            sourceView: this.activeView,
            buttonOwnerView: processOwnerView
          }));

          this.openPopupInTab(this.runningProcess, params.windowTitle, (this.runningProcess.popupWidth ? this.runningProcess.popupWidth : '90%'), (this.runningProcess.popupHeight ? this.runningProcess.popupHeight : '90%'), (this.runningProcess.showMinimizeButton ? this.runningProcess.showMinimizeButton : false), (this.runningProcess.showMaximizeButton ? this.runningProcess.showMaximizeButton : false), true, true);

        } else {
          isc.warn(OB.I18N.getLabel('OBUIAPP_ProcessClassNotFound', [params.processId]), function () {
            return true;
          }, {
            icon: '[SKINIMG]Dialog/error.png',
            title: OB.I18N.getLabel('OBUIAPP_Error')
          });
        }
      }
    }
  },

  refresh: function () {
    var currentView = this.activeView,
        afterRefresh;

    afterRefresh = function () {
      // Refresh context view
      //contextView.getTabMessage();
      currentView.toolBar.refreshCustomButtons();
      //
      //      if (contextView !== currentView && currentView.state === isc.OBStandardView.STATE_TOP_MAX) {
      //        // Executing an action defined in parent tab, current tab is maximized,
      //        // let's set half for each in order to see the message
      //        contextView.setHalfSplit();
      //      }
      // Refresh in order to show possible new records
      currentView.refresh(null, false);
    };

    if (!currentView) {
      return;
    }

    if (this.selectedState) {
      currentView.viewGrid.setSelectedState(this.selectedState);
      this.selectedState = null;
    }

    if (currentView.parentView) {
      currentView.parentView.setChildsToRefresh();
    } else {
      currentView.setChildsToRefresh();
    }

    if (currentView.viewGrid.getSelectedRecord()) {
      // There is a record selected, refresh it and its parent
      currentView.refreshCurrentRecord(afterRefresh);
    } else {
      // No record selected, refresh parent
      currentView.refreshParentRecord(afterRefresh);
    }
  },

  //  Refreshes the selected records of all the window views, provided:
  //  - They belong to the entity specified in the 'entity' parameter
  //  - They are not included in the 'excludedTabIds' list
  refreshViewsWithEntity: function (entity, excludedTabIds) {
    if (this.view) {
      this.view.refreshMeAndMyChildViewsWithEntity(entity, excludedTabIds);
    }
  },

  readWindowSettings: function () {
    var standardWindow = this;

    OB.RemoteCallManager.call('org.openbravo.client.application.WindowSettingsActionHandler', null, {
      windowId: this.windowId
    }, function (response, data, request) {
      standardWindow.setWindowSettings(data);
    });
  },

  // set window specific user settings, purposely set on class level
  setWindowSettings: function (data) {
    var i, defaultView, persDefaultValue, views, length, t, tab, view, field, button, st, stView, stBtns, stBtn, disabledFields, personalization, notAccessibleProcesses, alwaysReadOnly = function (view, record, context) {
        return true;
        };

    if (data) {
      this.getClass().autoSave = data.autoSave;
      this.getClass().windowSettingsRead = true;
      this.getClass().windowSettingsCached = data;
      this.getClass().uiPattern = data.uiPattern;
      this.getClass().showAutoSaveConfirmation = data.showAutoSaveConfirmation;
    }

    if (this.getClass().personalization) {
      // Don't overwrite personalization if it is already set in class
      personalization = this.getClass().personalization;
    } else if (data && data.personalization) {
      personalization = data.personalization;
    }

    if (personalization) {
      this.setPersonalization(personalization);
    }

    // set the views to readonly
    length = this.views.length;
    for (i = 0; i < length; i++) {
      this.views[i].setReadOnly(data.uiPattern[this.views[i].tabId] === isc.OBStandardView.UI_PATTERN_READONLY);
      this.views[i].setSingleRecord(data.uiPattern[this.views[i].tabId] === isc.OBStandardView.UI_PATTERN_SINGLERECORD);
      this.views[i].setEditOrDeleteOnly(data.uiPattern[this.views[i].tabId] === isc.OBStandardView.UI_PATTERN_EDITORDELETEONLY);
      this.views[i].toolBar.updateButtonState(true);
    }

    // set as readonly not accessible processes
    if (data && data.notAccessibleProcesses) {
      for (t = 0; t < data.notAccessibleProcesses.length; t++) {
        notAccessibleProcesses = data.notAccessibleProcesses[t];
        view = this.getView(notAccessibleProcesses.tabId);
        for (i = 0; i < view.toolBar.rightMembers.length; i++) {
          button = view.toolBar.rightMembers[i];
          if (notAccessibleProcesses.tabId === button.contextView.tabId && button.property && notAccessibleProcesses.processes.contains(button.property)) {
            button.readOnlyIf = alwaysReadOnly;
            // looking for this button in subtabs
            for (st = 0; st < this.views.length; st++) {
              stView = this.views[st];
              if (stView === view) {
                continue;
              }
              for (stBtns = 0; stBtns < stView.toolBar.rightMembers.length; stBtns++) {
                stBtn = stView.toolBar.rightMembers[stBtns];
                if (stBtn.contextView === button.contextView && stBtn.property && notAccessibleProcesses.processes.contains(stBtn.property)) {
                  stBtn.readOnlyIf = alwaysReadOnly;
                  break;
                }
              }
            }
          }
        }
      }
    }

    // Field level permissions
    if (data && data.tabs) {

      for (t = 0; t < data.tabs.length; t++) {
        tab = data.tabs[t];
        view = this.getView(tab.tabId);
        disabledFields = [];
        if (view !== null) {
          for (i = 0; i < view.viewForm.getFields().length; i++) {
            field = view.viewForm.getFields()[i];
            if (tab.fields[field.name] !== undefined) {
              field.updatable = tab.fields[field.name];
              field.disabled = !tab.fields[field.name];
              if (!tab.fields[field.name]) {
                disabledFields.push(field.name);
              }
            }
          }
          view.disabledFields = disabledFields;
          for (i = 0; i < view.viewGrid.getFields().length; i++) {
            field = view.viewGrid.getFields()[i];
            if (tab.fields[field.name] !== undefined) {
              field.editorProperties.updatable = tab.fields[field.name];
              field.editorProperties.disabled = !tab.fields[field.name];
            }
          }
          for (i = 0; i < view.toolBar.rightMembers.length; i++) {
            button = view.toolBar.rightMembers[i];
            if (tab.tabId === button.contextView.tabId && button.property && !tab.fields[button.property]) {
              button.readOnlyIf = alwaysReadOnly;
              // looking for this button in subtabs
              for (st = 0; st < this.views.length; st++) {
                stView = this.views[st];
                if (stView === view) {
                  continue;
                }
                for (stBtns = 0; stBtns < stView.toolBar.rightMembers.length; stBtns++) {
                  stBtn = stView.toolBar.rightMembers[stBtns];
                  if (stBtn.contextView === button.contextView && stBtn.property && !tab.fields[stBtn.property]) {
                    stBtn.readOnlyIf = alwaysReadOnly;
                    break;
                  }
                }
              }
            }
          }
        }
      }
    }
  },

  checkIfDefaultSavedView: function () {
    var persDefaultValue = OB.PropertyStore.get('OBUIAPP_DefaultSavedView', this.windowId);
    if (persDefaultValue && persDefaultValue !== 'dummyId' && OB.Utilities.checkProfessionalLicense(null, true)) {
      return true;
    } else {
      return false;
    }
  },

  setPersonalization: function (personalization) {
    var i, defaultView, persDefaultValue, views, length, me = this;

    // only personalize if there is a professional license
    if (!OB.Utilities.checkProfessionalLicense(null, true)) {
      return;
    }

    // cache the original view so that it can be restored
    if (!this.getClass().originalView) {
      this.getClass().originalView = {
        originalView: true
      };
      this.getClass().originalView.personalizationId = 'dummyId';
      this.getClass().originalView.viewDefinition = OB.Personalization.getViewDefinition(this, '', false);
      this.getClass().originalView.viewDefinition.name = OB.I18N.getLabel('OBUIAPP_StandardView');
      this.getClass().originalView.canDelete = false;

      // and clone the original view so that it can't get updated accidentally
      this.getClass().originalView = isc.clone(this.getClass().originalView);
    }

    this.getClass().personalization = personalization;

    persDefaultValue = OB.PropertyStore.get('OBUIAPP_DefaultSavedView', this.windowId);

    // find the default view, the personalizations are
    // returned in order of prio, then do sort by name
    if (this.getClass().personalization.views) {
      views = this.getClass().personalization.views;
      length = views.length;

      this.getClass().personalization.views.sort(function (v1, v2) {
        var t1 = v1.viewDefinition.name,
            t2 = v2.viewDefinition.name;
        if (t1 < t2) {
          return -1;
        } else if (t1 === t2) {
          return 0;
        }
        return 1;
      });

      if (persDefaultValue !== 'dummyId') {
        if (persDefaultValue) {
          for (i = 0; i < length; i++) {
            if (persDefaultValue === views[i].personalizationId) {
              defaultView = views[i];
              break;
            }
          }
        }
        if (!defaultView) {
          for (i = 0; i < length; i++) {
            if (views[i].viewDefinition && views[i].viewDefinition.isDefault) {
              defaultView = views[i];
              break;
            }
          }
        }

        // apply the default view
        // maybe do this in a separate thread
        if (defaultView) {
          OB.Personalization.applyViewDefinition(defaultView.personalizationId, defaultView.viewDefinition, this);
        } else {
          // only apply the default form/grid if there are no views
          // otherwise you get strange interference
          // check the default form and grid viewstates
          length = this.views.length;
          for (i = 0; i < length; i++) {
            if (personalization.forms && personalization.forms[this.views[i].tabId]) {
              this.lastViewApplied = true;
              OB.Personalization.personalizeForm(personalization.forms[this.views[i].tabId], this.views[i].viewForm);
            }
          }
        }
      }
    }

    // restore focus as the focusitem may have been hidden now
    // https://issues.openbravo.com/view.php?id=21249
    this.setFocusInView();
  },

  // reapplies partial states that couldn't be initially applied because
  // data in client was required
  reapplyViewStates: function () {
    var i, reapp;
    if (!this.requiredReapplyViewState || !this.gridsToReapply) {
      return;
    }
    for (i = 0; i < this.gridsToReapply.length; i++) {
      reapp = this.gridsToReapply[i];
      reapp.view.setViewState(reapp.state);
    }
    delete this.requiredReapplyViewState;
    delete this.gridsToReapply;
  },

  clearLastViewPersonalization: function () {
    var p, length, personalization = this.getClass().personalization;
    delete this.lastViewApplied;
    if (personalization.forms) {
      for (p in personalization.forms) {
        if (personalization.forms.hasOwnProperty(p) && personalization.forms[p].personalizationId) {
          OB.RemoteCallManager.call('org.openbravo.client.application.personalization.PersonalizationActionHandler', {}, {
            personalizationId: personalization.forms[p].personalizationId,
            action: 'delete'
          }, null);
        }
      }
      delete personalization.forms;
    }
    delete this.viewState;

    // remove the grid properties
    OB.PropertyStore.set('OBUIAPP_GridConfiguration', null, this.windowId);
  },

  getDefaultGridViewState: function (tabId) {
    var views, length, i, personalization = this.getClass().personalization,
        defaultView, persDefaultValue = OB.PropertyStore.get('OBUIAPP_DefaultSavedView', this.windowId);

    if (personalization && personalization.views) {
      views = personalization.views;
      length = views.length;
      if (persDefaultValue) {
        for (i = 0; i < length; i++) {
          if (persDefaultValue === views[i].personalizationId) {
            defaultView = views[i];
            break;
          }
        }
      }
      if (!defaultView) {
        for (i = 0; i < length; i++) {
          if (views[i].viewDefinition && views[i].viewDefinition.isDefault) {
            defaultView = views[i];
            break;
          }
        }
      }
    }

    if (defaultView && defaultView.viewDefinition && defaultView.viewDefinition[tabId]) {
      return defaultView.viewDefinition[tabId].grid;
    }

    if (this.viewState && this.viewState[tabId]) {
      return this.viewState[tabId];
    }

    return null;
  },

  // Update the personalization record which is stored 
  updateFormPersonalization: function (view, formPersonalization) {
    if (!this.getClass().personalization) {
      this.getClass().personalization = {};
    }
    if (!this.getClass().personalization.forms) {
      this.getClass().personalization.forms = [];
    }
    this.getClass().personalization.forms[view.tabId] = formPersonalization;
  },

  getFormPersonalization: function (view, checkSavedView) {
    var formPersonalization, i, persView;
    if (!this.getClass().personalization || !this.getClass().personalization.forms) {
      // no form personalization on form level
      // check window level
      if (checkSavedView && this.getClass().personalization && this.getClass().personalization.views && this.selectedPersonalizationId) {
        for (i = 0; i < this.getClass().personalization.views.length; i++) {
          persView = this.getClass().personalization.views[i];
          if (persView.viewDefinition && persView.viewDefinition[view.tabId] && persView.personalizationId === this.selectedPersonalizationId) {
            return persView.viewDefinition[view.tabId].form;
          }
        }
      }
      // nothing found go away
      return null;
    }
    formPersonalization = this.getClass().personalization.forms;
    return formPersonalization[view.tabId];
  },

  removeAllFormPersonalizations: function () {
    var i, updateButtons = false,
        length = this.views.length;
    if (!this.getClass().personalization) {
      return;
    }
    updateButtons = this.getClass().personalization.forms;
    if (updateButtons) {
      delete this.getClass().personalization.forms;
      for (i = 0; i < length; i++) {
        this.views[i].toolBar.updateButtonState(false);
      }
    }
  },

  isAutoSaveEnabled: function () {
    return this.getClass().autoSave;
  },

  getDirtyEditForm: function () {
    return this.dirtyEditForm;
  },

  setDirtyEditForm: function (editObject) {
    this.dirtyEditForm = editObject;
    if (!editObject) {
      this.cleanUpAutoSaveProperties();
    }
  },

  autoSave: function () {
    this.doActionAfterAutoSave(null, false);
  },

  doActionAfterAutoSave: function (action, forceDialogOnFailure, ignoreAutoSaveEnabled) {
    var me = this,
        saveCallback;

    saveCallback = function (ok) {
      if (!ok) {
        if (me.getDirtyEditForm()) {
          me.getDirtyEditForm().resetForm();
        }
        if (action) {
          OB.Utilities.callAction(action);
        }
        return;
      }

      // if not dirty or we know that the object has errors
      if (!me.getDirtyEditForm() || (me.getDirtyEditForm() && !me.getDirtyEditForm().validateForm())) {
        // clean up before calling the action, as the action
        // can set dirty form again
        me.cleanUpAutoSaveProperties();

        // nothing to do, execute immediately
        OB.Utilities.callAction(action);
        return;
      }

      if (action) {
        me.autoSaveAction = action;
      }

      // saving stuff already, go away
      if (me.isAutoSaving) {
        return;
      }

      if (!me.isAutoSaveEnabled() && !ignoreAutoSaveEnabled) {
        me.autoSaveConfirmAction();
        return;
      }

      me.isAutoSaving = true;
      me.forceDialogOnFailure = forceDialogOnFailure;
      me.getDirtyEditForm().autoSave();
    };

    if (this.getClass().autoSave && this.getClass().showAutoSaveConfirmation) {
      // Auto save confirmation required
      if (!this.getDirtyEditForm()) {
        // No changes in record, clean it up and continue
        this.cleanUpAutoSaveProperties();
        OB.Utilities.callAction(action);
        return;
      }
      isc.ask(OB.I18N.getLabel('OBUIAPP_AutosaveConfirm'), saveCallback);
    } else {
      // Auto save confirmation not required: continue as confirmation was accepted
      saveCallback(true);
    }
  },

  callAutoSaveAction: function () {
    var action = this.autoSaveAction;
    this.cleanUpAutoSaveProperties();
    if (!action) {
      return;
    }
    OB.Utilities.callAction(action);
  },

  cleanUpAutoSaveProperties: function () {
    delete this.dirtyEditForm;
    delete this.isAutoSaving;
    delete this.autoSaveAction;
    delete this.forceDialogOnFailure;
  },

  autoSaveDone: function (view, success) {
    if (!this.isAutoSaving) {
      this.cleanUpAutoSaveProperties();
      return;
    }

    if (success) {
      this.callAutoSaveAction();
    } else if (!view.isVisible() || this.forceDialogOnFailure) {
      isc.warn(OB.I18N.getLabel('OBUIAPP_AutoSaveError', [view.tabTitle]));
    } else if (!this.isAutoSaveEnabled()) {
      this.autoSaveConfirmAction();
    }
    this.cleanUpAutoSaveProperties();
  },

  autoSaveConfirmAction: function () {
    var action = this.autoSaveAction,
        me = this,
        callback;
    this.autoSaveAction = null;


    if (this.isAutoSaveEnabled()) {
      // clean up everything
      me.cleanUpAutoSaveProperties();
    }

    callback = function (ok) {
      delete me.inAutoSaveConfirmation;
      if (ok) {
        if (me.getDirtyEditForm()) {
          me.getDirtyEditForm().resetForm();
        }
        if (action) {
          OB.Utilities.callAction(action);
        }
      } else {
        // and focus to the first error field
        if (!me.getDirtyEditForm()) {
          me.view.setAsActiveView();
        } else {
          me.getDirtyEditForm().setFocusInErrorField(true);
          me.getDirtyEditForm().focus();
        }
      }
    };

    this.inAutoSaveConfirmation = true;
    isc.ask(OB.I18N.getLabel('OBUIAPP_AutoSaveNotPossibleExecuteAction'), callback);
  },

  addView: function (view) {
    view.standardWindow = this;
    this.views.push(view);
    this.toolBarLayout.addMember(view.toolBar);
    if (this.getClass().readOnlyTabDefinition) {
      view.setReadOnly(this.getClass().readOnlyTabDefinition[view.tabId]);
    }
  },

  // is called from the main app tabset. Redirects to custom viewSelected
  tabSelected: function (tabNum, tabPane, ID, tab) {
    if (this.activeView && this.activeView.setViewFocus) {
      this.activeView.setViewFocus();
    }
  },

  // is called from the main app tabset. Redirects to custom viewDeselected
  tabDeselected: function (tabNum, tabPane, ID, tab, newTab) {
    this.wasDeselected = true;
  },

  // ** {{{ selectParentTab }}} **
  //
  // Called from the main app tabset
  // Selects the parent tab of the current selected and active tab (independently of its level)
  selectParentTab: function (mainTabSet) {
    if (!this.activeView.parentView) {
      return false;
    }

    var parentTabSet = this.activeView.parentView.parentTabSet;

    if (!parentTabSet) { // If parentTabSet is null means that we are going to move to the top level
      parentTabSet = mainTabSet;
    }

    var parentTab = parentTabSet.getSelectedTab(),
        parentTabNum = parentTabSet.getTabNumber(parentTab),
        parentTabPane = parentTabSet.getTabPane(parentTab);

    parentTabSet.selectTab(parentTabNum);
    if (parentTabPane.setAsActiveView) {
      parentTabPane.setAsActiveView();
      isc.Timer.setTimeout(function () { // Inside a timeout like in itemClick case. Also to avoid a strange effect that child tab not deployed properly
        parentTabSet.doHandleClick();
      }, 0);
    } else if (parentTabPane.view.setAsActiveView) {
      parentTabPane.view.setAsActiveView();
      isc.Timer.setTimeout(function () { // Inside a timeout like in itemClick case. Also to avoid a strange effect that parent tab not deployed properly
        parentTabPane.view.doHandleClick();
      }, 0);
    }
  },

  // ** {{{ selectChildTab }}} **
  //
  // Called from the main app tabset
  // Selects the child tab of the current selected and active tab (independently of its level)
  selectChildTab: function (mainTabSet) {
    var childTabSet = this.activeView.childTabSet;

    // If all the subtabs are hidden due to its display logic, the child tabset will be hidden
    if (!childTabSet || childTabSet.visibility === 'hidden') {
      return false;
    }

    var childTab = childTabSet.getSelectedTab(),
        childTabNum = childTabSet.getTabNumber(childTab),
        childTabPane = childTabSet.getTabPane(childTab);

    childTabSet.selectTab(childTabNum);
    if (childTabPane.setAsActiveView) {
      childTabPane.setAsActiveView();
      isc.Timer.setTimeout(function () { // Inside a timeout like in itemClick case. Also to avoid a strange effect that child tab not deployed properly
        childTabSet.doHandleClick();
      }, 0);
    }
  },

  // ** {{{ selectPreviousTab }}} **
  //
  // Called from the main app tabset
  // Selects the previous tab of the current selected and active tab (independently of its level)
  selectPreviousTab: function (mainTabSet) {
    var activeTabSet = this.activeView.parentTabSet,
        previousTabVisible, previousTabIndex;
    if (!activeTabSet) { // If activeTabSet is null means that we are in the top level
      activeTabSet = mainTabSet;
    }
    var activeTab = activeTabSet.getSelectedTab(),
        activeTabNum = activeTabSet.getTabNumber(activeTab),
        activeTabPane = activeTabSet.getTabPane(activeTab);

    // Look for the next visible tab
    previousTabVisible = false;
    previousTabIndex = activeTabNum - 1;
    while (previousTabVisible === false && previousTabIndex >= 0) {
      if (!activeTabSet.tabs[previousTabIndex].pane.hidden) {
        previousTabVisible = true;
      } else {
        previousTabIndex--;
      }
    }

    if (!previousTabVisible) {
      return false;
    }

    activeTabSet.selectTab(previousTabIndex);

    // after select the new tab, activeTab related variables are updated
    activeTab = activeTabSet.getSelectedTab();
    activeTabNum = activeTabSet.getTabNumber(activeTab);
    activeTabPane = activeTabSet.getTabPane(activeTab);

    // and the new selected view is set as active
    if (activeTabPane.setAsActiveView) {
      activeTabPane.setAsActiveView();
    }
  },

  // ** {{{ selectNextTab }}} **
  //
  // Called from the main app tabset
  // Selects the next tab of the current selected and active tab (independently of its level)
  selectNextTab: function (mainTabSet) {
    var activeTabSet = this.activeView.parentTabSet,
        nextTabVisible, nextTabIndex;
    if (!activeTabSet) { // If activeTabSet is null means that we are in the top level
      activeTabSet = mainTabSet;
    }
    var activeTab = activeTabSet.getSelectedTab(),
        activeTabNum = activeTabSet.getTabNumber(activeTab),
        activeTabPane = activeTabSet.getTabPane(activeTab);

    // Look for the next visible tab
    nextTabVisible = false;
    nextTabIndex = activeTabNum + 1;
    while (nextTabVisible === false && nextTabIndex < activeTabSet.tabs.getLength()) {
      if (!activeTabSet.tabs[nextTabIndex].pane.hidden) {
        nextTabVisible = true;
      } else {
        nextTabIndex++;
      }
    }

    if (!nextTabVisible) {
      return false;
    }

    activeTabSet.selectTab(nextTabIndex);

    // after select the new tab, activeTab related variables are updated
    activeTab = activeTabSet.getSelectedTab();
    activeTabNum = activeTabSet.getTabNumber(activeTab);
    activeTabPane = activeTabSet.getTabPane(activeTab);

    // and the new selected view is set as active
    if (activeTabPane.setAsActiveView) {
      activeTabPane.setAsActiveView();
    }
  },

  closeClick: function (tab, tabSet) {
    if ((!this.activeView || !this.activeView.viewForm.hasChanged) && this.activeView.viewForm.isNew) {
      this.view.standardWindow.setDirtyEditForm(null);
    }

    var actionObject = {
      target: tabSet,
      method: tabSet.doCloseClick,
      parameters: [tab]
    };
    this.doActionAfterAutoSave(actionObject, false);
  },

  setActiveView: function (view) {
    if (!this.isDrawn()) {
      return;
    }
    if (this.activeView === view) {
      return;
    }

    var currentView = this.activeView;
    // note the new activeView must be set before disabling
    // the other one
    this.activeView = view;
    if (currentView) {
      currentView.setActiveViewProps(false);
    }
    view.setActiveViewProps(true);
  },

  setFocusInView: function (view) {
    var currentView = view || this.activeView || this.view;
    this.setActiveView(currentView);
  },

  show: function () {
    var ret = this.Super('show', arguments);
    this.setFocusInView();
    return ret;
  },

  draw: function () {
    var standardWindow = this,
        targetEntity, ret = this.Super('draw', arguments),
        i, length = this.views.length;
    if (this.targetTabId) {
      for (i = 0; i < length; i++) {
        if (this.views[i].tabId === this.targetTabId) {
          targetEntity = this.views[i].entity;
          this.views[i].viewGrid.targetRecordId = this.targetRecordId;
          this.views[i].openDirectTabView(true);
          this.views[i].viewGrid.refreshContents();
          this.setFocusInView(this.views[i]);
          break;
        }
      }
    } else if (this.command === isc.OBStandardWindow.COMMAND_NEW) {
      var currentView = this.activeView || this.view;
      currentView.editRecord();
      this.command = null;
    } else {
      this.setFocusInView(this.view);
    }

    return ret;
  },

  setViewTabId: function (viewTabId) {
    this.view.viewTabId = viewTabId;
    this.viewTabId = viewTabId;
  },

  doHandleClick: function () {
    // happens when we are getting selected
    // then don't change state
    if (this.wasDeselected) {
      this.wasDeselected = false;
      return;
    }
    this.setActiveView(this.view);
    this.view.doHandleClick();
  },

  doHandleDoubleClick: function () {
    // happens when we are getting selected
    // then don't change state
    if (this.wasDeselected) {
      this.wasDeselected = false;
      return;
    }
    this.setActiveView(this.view);
    this.view.doHandleDoubleClick();
  },

  // +++++++++++++ Methods for the main tab handling +++++++++++++++++++++
  getHelpView: function () {
    // tabTitle is set in the viewManager
    return {
      viewId: 'ClassicOBHelp',
      tabTitle: this.tabTitle + ' - ' + OB.I18N.getLabel('UINAVBA_Help'),
      windowId: this.windowId,
      windowType: 'W',
      windowName: this.tabTitle
    };
  },

  getBookMarkParams: function () {
    var result = {};
    result.windowId = this.windowId;
    result.viewId = this.getClassName();
    result.tabTitle = this.tabTitle;
    if (this.targetTabId) {
      result.targetTabId = this.targetTabId;
      result.targetRecordId = this.targetRecordId;
    }
    return result;
  },

  isEqualParams: function (params) {
    var equalTab = params.windowId && params.windowId === this.windowId;
    return equalTab;
  },

  isSameTab: function (viewName, params) {
    // always return false to force new tabs
    if (this.multiDocumentEnabled) {
      return false;
    }
    return this.isEqualParams(params) && viewName === this.getClassName();
  },

  setTargetInformation: function (tabId, recordId) {
    this.targetTabId = tabId;
    this.targetRecordId = recordId;
    OB.Layout.HistoryManager.updateHistory();
  },

  getView: function (tabId) {
    // find is a SC extension on arrays
    return this.views.find('tabId', tabId);
  },

  storeViewState: function () {
    var result = {},
        i, length = this.views.length;

    if (!OB.Utilities.checkProfessionalLicense(null, true)) {
      return;
    }

    for (i = 0; i < length; i++) {
      if (this.views[i].viewGrid) {
        result[this.views[i].tabId] = this.views[i].viewGrid.getViewState();
      }
    }
    this.viewState = result;
    OB.PropertyStore.set('OBUIAPP_GridConfiguration', result, this.windowId);
  },

  getProcessOwnerView: function (processId) {
    var ownerView, i, j, nActionButtons, nViews = this.views.length;
    for (i = 0; i < nViews; i++) {
      nActionButtons = this.views[i].actionToolbarButtons.length;
      for (j = 0; j < nActionButtons; j++) {
        if (processId === this.views[i].actionToolbarButtons[j].processId) {
          return this.views[i];
        }
      }
    }
    // If it is not found, return the header view
    return this.view;
  }
});
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distribfuted  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2011-2013 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */
// = OBViewDataSource =
//
// The datasource which is used within a view. It adds specific behavior
// by adding extra request parameters.
//
isc.ClassFactory.defineClass('OBViewDataSource', isc.OBRestDataSource);

isc.OBViewDataSource.addProperties({
  additionalProps: null,
  showProgressAfterDelay: false,

  showProgress: function (editedRecord) {
    var btn, btn2;

    if (!this.showProgressAfterDelay) {
      // don't show it, done too quickly
      return;
    }

    if (editedRecord) {
      if (editedRecord && editedRecord.editColumnLayout) {
        if (!this.view.isShowingForm) {
          editedRecord.editColumnLayout.toggleProgressIcon(true);
        }
      }
    }

    // Always show progress in save button and disable save and close one
    if (this.view.toolBar) {
      btn = this.view.toolBar.getLeftMember(isc.OBToolbar.TYPE_SAVE);
      btn.setDisabled(true);
      btn.customState = 'Progress';
      btn.resetBaseStyle();
      btn.markForRedraw();

      btn2 = this.view.toolBar.getLeftMember(isc.OBToolbar.TYPE_SAVECLOSE);
      if (btn2) {
        btn2.setDisabled(true);
        btn2.markForRedraw();
      }
    }
  },

  hideProgress: function (editedRecord) {
    var btn;
    this.showProgressAfterDelay = false;
    if (editedRecord && editedRecord.editColumnLayout) {
      editedRecord.editColumnLayout.toggleProgressIcon(false);
    }

    if (this.view.toolBar) {
      // always remove the progress style here anyway
      btn = this.view.toolBar.getLeftMember(isc.OBToolbar.TYPE_SAVE);
      btn.customState = '';
      btn.resetBaseStyle();
      btn.markForRedraw();
    }
  },

  performDSOperation: function (operationType, data, callback, requestProperties) {
    var currentRecord, isNewRecord;

    requestProperties = requestProperties || {};
    requestProperties.clientContext = requestProperties.clientContext || {};

    // only update the values of the record itself but not of any referenced 
    // entity
    if (operationType === 'update' || operationType === 'add') {
      var correctedData = {},
          prop;
      for (prop in data) {
        if (data.hasOwnProperty(prop) && !prop.contains(OB.Constants.FIELDSEPARATOR)) {
          correctedData[prop] = data[prop];
        }
      }
      data = correctedData;
      this.showProgressAfterDelay = true;
      currentRecord = this.view.viewGrid.getSelectedRecord();
      if (currentRecord) {
        // only show progress after 200ms delay
        // set the current selected record before the delay
        // keep the edited record in the client context
        requestProperties.clientContext.progressIndicatorSelectedRecord = currentRecord;
      }

      this.delayCall('showProgress', [requestProperties.clientContext.progressIndicatorSelectedRecord], 200);
    }

    // doing row editing
    if (this.view.viewGrid.getEditRow() || this.view.viewGrid.getEditRow() === 0) {
      if (!requestProperties.clientContext) {
        requestProperties.clientContext = {};
      }
      requestProperties.clientContext.editRow = this.view.viewGrid.getEditRow();
    }

    if (operationType === 'fetch' && this.view.viewGrid.lazyFiltering) {
      // Use the stored sort properties
      if (this.view.viewGrid.savedSortSpecifiers && this.view.viewGrid.savedSortSpecifiers.length > 0) {
        if (this.view.viewGrid.savedSortSpecifiers[0].direction === 'ascending') {
          requestProperties.sortBy = this.view.viewGrid.savedSortSpecifiers[0].property;
        } else {
          requestProperties.sortBy = '-' + this.view.viewGrid.savedSortSpecifiers[0].property;
        }
      } else {
        delete requestProperties.sortBy;
      }
    }

    var newRequestProperties = this.getTabInfoRequestProperties(this.view, requestProperties);
    // standard update is not sent with operationType
    var additionalPara = {
      _operationType: 'update',
      _noActiveFilter: true,
      sendOriginalIDBack: true,
      _extraProperties: this.getAdditionalProps()
    };
    isc.addProperties(newRequestProperties.params, additionalPara);
    if (!newRequestProperties.dataSource) {
      newRequestProperties.dataSource = this;
    }
    isNewRecord = false;
    if (this.view.isShowingForm) {
      isNewRecord = this.view.viewForm.isNew;
    } else {
      if (this.view.viewGrid.getEditForm()) {
        isNewRecord = this.view.viewGrid.getEditForm().isNew;
      } else {
        isNewRecord = false;
      }
    }
    // Do not save a new record if it is already being saved
    if (!this.view._savingNewRecord || !isNewRecord) {
      if (isNewRecord && (operationType === 'update' || operationType === 'add')) {
        this.view._savingNewRecord = true;
      }
      data = this.deleteNulls(data);
      this.Super('performDSOperation', [operationType, data, callback, newRequestProperties]);
    }
  },

  deleteNulls: function (data) {
    var column;
    for (column in data) {
      if (data.hasOwnProperty(column)) {
        if (!data[column] && data[column] !== false && data[column] !== 0 && !this.view.viewForm.getFieldFromFieldName(column)) {
          delete data[column];
        }
      }
    }
    return data;
  },

  getAdditionalProps: function () {
    var prop, length, i, fld;
    if (this.additionalProps !== null) {
      return this.additionalProps;
    }
    this.additionalProps = "";
    length = this.getFields().length;
    for (i = 0; i < length; i++) {
      fld = this.getFields()[i];
      if (fld.additional) {
        if (this.additionalProps.length > 0) {
          this.additionalProps += ",";
        }
        this.additionalProps += fld.name;
      }
    }
    return this.additionalProps;
  },

  // do special id-handling so that we can replace the old if with the new
  // id
  // in the correct way, see the ob-view-grid.js editComplete method
  validateJSONRecord: function (record) {
    record = this.Super('validateJSONRecord', arguments);
    if (record && record._originalId) {
      var newId = record.id;
      record.id = record._originalId;
      record._newId = newId;
    }
    return record;
  },

  transformResponse: function (dsResponse, dsRequest, jsonData) {

    if (dsRequest.clientContext) {
      this.hideProgress(dsRequest.clientContext.progressIndicatorSelectedRecord);
    }
    if (jsonData) {
      var errorStatus = !jsonData.response || jsonData.response.status === 'undefined' || jsonData.response.status !== isc.RPCResponse.STATUS_SUCCESS;
      if (errorStatus) {
        var handled = this.view.setErrorMessageFromResponse(dsResponse, jsonData, dsRequest);

        if (!handled && !dsRequest.willHandleError && jsonData.response && jsonData.response.error) {
          OB.KernelUtilities.handleSystemException(jsonData.response.error.message);
        }
      } else {
        // there are some cases where the jsonData is not passed, in case of
        // errors
        // make it available through the response object
        dsResponse.dataObject = jsonData;
      }
    }
    return this.Super('transformResponse', arguments);
  },

  // ** {{{ getTabInfoRequestProperties }}} **
  //
  // Adds tab and module information to the requestProperties.
  //
  // Parameters:
  // * {{{theView}}}: view to obtain tab and module info from.
  // * {{{requestProperties}}}: original requestProperties.
  // Return:
  // * Original requestProperties including the new module and tab
  // properties.
  getTabInfoRequestProperties: function (theView, requestProperties) {
    if (theView && theView.tabId) {
      requestProperties.params = requestProperties.params || {};
      isc.addProperties(requestProperties.params, {
        windowId: theView.standardWindow.windowId,
        tabId: theView.tabId,
        moduleId: theView.moduleId
      });
    }
    return requestProperties;
  }
});
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distribfuted  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2010-2014 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */


isc.ClassFactory.defineClass('OBFormContainerLayout', isc.VLayout);

isc.OBFormContainerLayout.addProperties({
  canFocus: true,
  width: '100%',
  height: '*',
  overflow: 'auto'
});


// = OBStandardView =
//
// An OBStandardView represents a single Openbravo tab. An OBStandardView consists
// of three parts:
// 1) a grid an instance of an OBViewGrid (property: viewGrid)
// 2) a form an instance of an OBViewForm (property: viewForm)
// 3) a tab set with child OBStandardView instances (property: childTabSet)
// 
// In addition an OBStandardView has components for a message bar and other visualization.
// 
// A standard view can be opened as a result of a direct link from another window/tab. See
// the description in ob-standard-window for the flow in that case.
//
isc.ClassFactory.defineClass('OBStandardView', isc.VLayout);

isc.OBStandardView.addClassProperties({
  // the part in the top is maximized, meaning
  STATE_TOP_MAX: 'TopMax',

  // that the tabset in the bottom is minimized
  // the tabset part is maximized, the
  STATE_BOTTOM_MAX: 'BottomMax',

  // the top has height 0
  // the view is split in the middle, the top part has
  STATE_MID: 'Mid',

  // 50%, the tabset also
  // state of the tabset which is shown in the middle,
  STATE_IN_MID: 'InMid',

  // the parent of the tabset has state
  // isc.OBStandardView.STATE_MID
  // minimized state, the parent has
  STATE_MIN: 'Min',

  // isc.OBStandardView.STATE_TOP_MAX or
  // isc.OBStandardView.STATE_IN_MID
  // the inactive state does not show an orange hat on the tab button
  MODE_INACTIVE: 'Inactive',

  UI_PATTERN_READONLY: 'RO',
  UI_PATTERN_SINGLERECORD: 'SR',
  UI_PATTERN_EDITORDELETEONLY: 'ED',
  UI_PATTERN_STANDARD: 'ST'
});

isc.OBStandardView.addProperties({

  // properties used by the ViewManager, only relevant in case this is the
  // top
  // view shown directly in the main tab
  showsItself: false,
  tabTitle: null,

  // ** {{{ windowId }}} **
  // The id of the window shown here, only set for the top view in the
  // hierarchy
  // and if this is a window/tab view.
  windowId: null,

  // ** {{{ tabId }}} **
  // The id of the tab shown here, set in case of a window/tab view.
  tabId: null,

  // ** {{{ processId }}} **
  // The id of the process shown here, set in case of a process view.
  processId: null,

  // ** {{{ formId }}} **
  // The id of the form shown here, set in case of a form view.
  formId: null,

  // ** {{{ parentView }}} **
  // The parentView if this view is a child in a parent child structure.
  parentView: null,

  // ** {{{ parentTabSet }}} **
  // The tabSet which shows this view. If the parentView is null then this
  // is the
  // top tabSet.
  parentTabSet: null,
  tab: null,

  // ** {{{ toolbar }}} **
  // The toolbar canvas.
  toolBar: null,

  messageBar: null,

  // ** {{{ formGridLayout }}} **
  // The layout which holds the form and grid.
  formGridLayout: null,

  // ** {{{ childTabSet }}} **
  // The tabSet holding the child tabs with the OBView instances.
  childTabSet: null,

  // ** {{{ hasChildTabs }}} **
  // Is set to true if there are child tabs.
  hasChildTabs: false,

  // ** {{{ dataSource }}} **
  // The dataSource used to fill the data in the grid/form.
  dataSource: null,

  // ** {{{ viewForm }}} **
  // The viewForm used to display single records
  viewForm: null,

  // ** {{{ viewGrid }}} **
  // The viewGrid used to display multiple records
  viewGrid: null,

  // ** {{{ parentProperty }}} **
  // The name of the property refering to the parent record, if any
  parentProperty: null,

  // ** {{{ targetRecordId }}} **
  // The id of the record to initially show.
  targetRecordId: null,

  // ** {{{ entity }}} **
  // The entity to show.
  entity: null,

  width: '100%',
  height: '100%',
  margin: 0,
  padding: 0,
  overflow: 'hidden',

  // set if one record has been selected
  lastRecordSelected: null,
  lastRecordSelectedCount: 0,
  fireOnPauseDelay: 200,

  // ** {{{ refreshContents }}} **
  // Should the contents listgrid/forms be refreshed when the tab
  // gets selected and shown to the user.
  refreshContents: true,

  state: isc.OBStandardView.STATE_MID,
  previousState: isc.OBStandardView.STATE_TOP_MAX,

  // last item in the filtergrid or the form which had focus
  // when the view is activated it will set focus here
  lastFocusedItem: null,

  // initially set to true, is set to false after the 
  // first time default edit mode is opened or a new parent 
  // is selected.
  // note that opening the edit view is done in the viewGrid.dataArrived
  // method
  allowDefaultEditMode: true,

  readOnly: false,
  singleRecord: false,
  editOrDeleteOnly: false,

  isShowingForm: false,
  isEditingGrid: false,

  propertyToColumns: [],

  initWidget: function (properties) {
    var length, rightMemberButtons = [],
        leftMemberButtons = [],
        i, actionButton;

    this.messageBar = isc.OBMessageBar.create({
      visibility: 'hidden',
      view: this
    });

    if (this.isRootView) {
      this.buildStructure();
    }

    OB.TestRegistry.register('org.openbravo.client.application.View_' + this.tabId, this);
    OB.TestRegistry.register('org.openbravo.client.application.ViewGrid_' + this.tabId, this.viewGrid);
    OB.TestRegistry.register('org.openbravo.client.application.ViewForm_' + this.tabId, this.viewForm);

    if (this.showTabIf && !this.originalShowTabIf) {
      this.originalShowTabIf = this.showTabIf;
      this.showTabIf = function (context) {
        var originalShowTabIfValue = false;

        try {
          if (isc.isA.Function(this.originalShowTabIf)) {
            originalShowTabIfValue = this.originalShowTabIf(context);
          } else {
            originalShowTabIfValue = isc.JSON.decode(this.originalShowTabIf);
          }
        } catch (_exception) {
          isc.warn(_exception + ' ' + _exception.message + ' ' + _exception.stack);
        }
        return originalShowTabIfValue;
      };
    }

    // If the tab comes with session attributes (preference attributes used in the display
    // logic of the tab, see issue https://issues.openbravo.com/view.php?id=5202), assign them
    // to the form, so they will be retrieved when getContextInfo() is called for the form
    if (this.sessionAttributes) {
      this.viewForm.sessionAttributes = this.sessionAttributes;
    }

    if (this.actionToolbarButtons) {
      length = this.actionToolbarButtons.length;
      for (i = 0; i < length; i++) {
        actionButton = isc.OBToolbarActionButton.create(this.actionToolbarButtons[i]);
        actionButton.contextView = this;
        rightMemberButtons.push(actionButton);
      }
    }

    // Look for specific toolbar buttons for this tab
    if (this.iconToolbarButtons) {
      length = this.iconToolbarButtons.length;
      for (i = 0; i < length; i++) {
        // note create a somewhat unique id by concatenating the tabid and the index
        OB.ToolbarRegistry.registerButton(this.tabId + '_' + i, isc.OBToolbarIconButton, this.iconToolbarButtons[i], 200 + (i * 10), this.tabId, null, false);
      }
    }

    this.toolBar = isc.OBToolbar.create({
      view: this,
      visibility: 'hidden',
      leftMembers: leftMemberButtons,
      rightMembers: rightMemberButtons
    });

    this.Super('initWidget', arguments);

    this.toolBar.updateButtonState(true, false, true);

    // Update the subtab visibility before the tabs are shown to the client
    this.updateSubtabVisibility();
  },

  show: function () {
    this.Super('show', arguments);
  },

  destroy: function () {
    // destroy the datasource
    if (this.dataSource) {
      this.dataSource.destroy();
      this.dataSource = null;
    }
    return this.Super('destroy', arguments);
  },

  buildStructure: function () {
    var length, i, fld, lazyFiltering;
    this.createMainParts();
    this.createViewStructure();
    if (this.childTabSet && this.childTabSet.tabs.length === 0) {
      this.hasChildTabs = false;
      this.activeGridFormMessageLayout.setHeight('100%');
    }
    this.dataSource.view = this;

    // In case of grid configuration, apply it now. In this way:
    //   -No extra fetch is done for root tab
    //   -Grid is not rendered twice (one for the standard confing and another
    //    one for the saved config)
    if (this.standardWindow && this.standardWindow.viewState && this.standardWindow.viewState[this.tabId]) {
      this.viewGrid.setViewState(this.standardWindow.viewState[this.tabId], true);
      // lastViewApplied is set because there are modifications in grid, so not
      // marking "Standard View" in view's menu
      this.standardWindow.lastViewApplied = true;
    }

    if (this.viewGrid) {
      lazyFiltering = this.viewGrid.lazyFiltering;
    }

    // directTabInfo is set when we are in direct link mode, i.e. directly opening
    // a specific tab with a record, the direct link logic will already take care
    // of fetching data
    if (this.isRootView && !this.standardWindow.directTabInfo) {
      if (!lazyFiltering) {
        if (!this.standardWindow.checkIfDefaultSavedView()) {
          this.viewGrid.fetchData(this.viewGrid.getCriteria());
        }
      }
      this.refreshContents = false;
    }

    if (this.viewForm) {
      // setDataSource executes setFields which replaces the current fields
      // We don't want to destroy the associated DataSource objects
      this.viewForm.destroyItemObjects = false;

      // is used to keep track of the original simple objects
      // used to create fields
      this.viewForm._originalFields = isc.clone(this.formFields);
      this.viewForm.fields = this.formFields;
      this.viewForm.firstFocusedField = this.firstFocusedField;

      this.viewForm.setDataSource(this.dataSource, this.formFields);
      this.viewForm.isViewForm = true;
      this.viewForm.destroyItemObjects = true;
    }

    if (this.isRootView) {
      if (this.childTabSet) {
        this.childTabSet.setState(isc.OBStandardView.STATE_IN_MID);
        this.childTabSet.selectTab(this.childTabSet.tabs[0]);
        OB.TestRegistry.register('org.openbravo.client.application.ChildTabSet_' + this.tabId, this.viewForm);
      }
    }

    if (this.defaultEditMode) {
      // prevent the grid from showing very shortly, so hide it right away
      this.viewGrid.hide();
    }

  },

  // handles different ways by which an error can be passed from the 
  // system, translates this to an object with a type, title and message
  setErrorMessageFromResponse: function (resp, data, req) {
    var errorCode, index1, index2;

    // only handle it once
    if (resp._errorMessageHandled) {
      return true;
    }
    var msg = '',
        title = null,
        type = isc.OBMessageBar.TYPE_ERROR,
        isLabel = false,
        params = null;
    var gridEditing = req.clientContext && (req.clientContext.editRow || req.clientContext.editRow === 0);
    if (isc.isA.String(data)) {
      msg = data;
    } else if (data && data.response) {
      if (data.response.errors) {
        // give it to the form
        if (this.isShowingForm) {
          this.viewForm.handleFieldErrors(data.response.errors);
        } else {
          this.viewGrid.setRecordFieldErrorMessages(req.clientContext.editRow, data.response.errors);
        }
        return true;
      } else if (data.response.error) {
        var error = data.response.error;
        if (error.type && error.type === 'user') {
          isLabel = true;
          msg = error.message;
          params = error.params;
        } else if (error.message) {
          type = error.messageType || type;
          params = error.params;
          // error.messageType can be Error
          type = type.toLowerCase();
          title = error.title || title;
          msg = error.message;
        } else {
          // hope that someone else will handle it
          return false;
        }
      } else {
        // hope that someone else will handle it
        return false;
      }
    } else if (data.data) {
      // try it with data.data
      return this.setErrorMessageFromResponse(resp, data.data, req);
    } else {
      // hope that someone else will handle it
      return false;
    }

    req.willHandleError = true;
    resp._errorMessageHandled = true;
    if (msg.indexOf('@') !== -1) {
      index1 = msg.indexOf('@');
      index2 = msg.indexOf('@', index1 + 1);
      if (index2 !== -1) {
        errorCode = msg.substring(index1 + 1, index2);
        if (gridEditing) {
          this.setLabelInRow(req.clientContext.editRow, errorCode, params);
        } else {
          this.messageBar.setLabel(type, title, errorCode, params);
        }
      }
    } else if (isLabel) {
      if (gridEditing) {
        this.setLabelInRow(req.clientContext.editRow, msg, params);
      } else {
        this.messageBar.setLabel(type, title, msg, params);
      }
    } else if (gridEditing) {
      this.viewGrid.setRecordErrorMessage(req.clientContext.editRow, msg);
    } else {
      this.messageBar.setMessage(type, title, msg);
    }
    return true;
  },

  setLabelInRow: function (rowNum, label, params) {
    var me = this;
    OB.I18N.getLabel(label, params, {
      setLabel: function (text) {
        me.viewGrid.setRecordErrorMessage(rowNum, text);
      }
    }, 'setLabel');
  },

  // ** {{{ createViewStructure }}} **
  // Is to be overridden, is called in initWidget.
  createViewStructure: function () {},

  // ** {{{ createMainParts }}} **
  // Creates the main layout components of this view.
  createMainParts: function () {
    var me = this,
        completeFieldsWithoutImages, fieldsWithoutImages;
    if (this.tabId && this.tabId.length > 0) {
      this.formGridLayout = isc.HLayout.create({
        canFocus: true,
        width: '100%',
        height: '*',
        overflow: 'visible',
        view: this
      });

      this.activeBar = isc.HLayout.create({
        height: '100%',
        canFocus: true,
        // to set active view when it gets clicked
        contents: '&nbsp;',
        width: OB.Styles.ActiveBar.width,
        styleName: OB.Styles.ActiveBar.inActiveStyleName,
        activeStyleName: OB.Styles.ActiveBar.activeStyleName,
        inActiveStyleName: OB.Styles.ActiveBar.inActiveStyleName,

        setActive: function (active) {
          if (active) {
            this.setStyleName(this.activeStyleName);
          } else {
            this.setStyleName(this.inActiveStyleName);
          }
        }
      });

      // the grid should not show the image fields
      // see issue 20049 (https://issues.openbravo.com/view.php?id=20049)
      completeFieldsWithoutImages = this.removeImageFields(this.viewGrid.completeFields);
      fieldsWithoutImages = this.removeImageFields(this.viewGrid.fields);

      this.viewGrid.setDataSource(this.dataSource, completeFieldsWithoutImages || fieldsWithoutImages);

      if (this.viewGrid) {
        this.viewGrid.setWidth('100%');
        this.viewGrid.setView(this);
        this.formGridLayout.addMember(this.viewGrid);
      }

      if (this.viewForm) {
        this.viewForm.setWidth('100%');
        this.formGridLayout.addMember(this.viewForm);
        this.viewForm.view = this;

        this.viewGrid.addFormProperties(this.viewForm.obFormProperties);
      }

      this.statusBar = isc.OBStatusBar.create({
        view: this.viewForm.view
      });

      // NOTE: when changing the layout structure and the scrollbar
      // location for these layouts check if the scrollTo method 
      // in ob-view-form-linked-items is still called on the correct
      // object 
      this.statusBarFormLayout = isc.VLayout.create({
        canFocus: true,
        width: '100%',
        height: '*',
        visibility: 'hidden',
        overflow: 'hidden'
      });

      // to make sure that the form gets the correct scrollbars
      this.formContainerLayout = isc.OBFormContainerLayout.create({});
      this.formContainerLayout.addMember(this.viewForm);

      this.statusBarFormLayout.addMember(this.statusBar);
      this.statusBarFormLayout.addMember(this.formContainerLayout);

      this.formGridLayout.addMember(this.statusBarFormLayout);

      // wrap the messagebar and the formgridlayout in a VLayout
      this.gridFormMessageLayout = isc.VLayout.create({
        canFocus: true,
        height: '100%',
        width: '100%',
        overflow: 'auto'
      });
      this.gridFormMessageLayout.addMember(this.messageBar);
      this.gridFormMessageLayout.addMember(this.formGridLayout);

      // and place the active bar to the left of the form/grid/messagebar
      this.activeGridFormMessageLayout = isc.HLayout.create({
        canFocus: true,
        height: (this.hasChildTabs ? '50%' : '100%'),
        width: '100%',
        overflow: 'hidden'
      });

      this.activeGridFormMessageLayout.addMember(this.activeBar);
      this.activeGridFormMessageLayout.addMember(this.gridFormMessageLayout);

      this.addMember(this.activeGridFormMessageLayout);
    }
    if (this.hasChildTabs) {
      this.childTabSet = isc.OBTabSetChild.create({
        height: '*',
        parentContainer: this,
        parentTabSet: this.parentTabSet
      });
      this.addMember(this.childTabSet);
    } else if (this.isRootView) {
      // disable the maximize button if this is the root without
      // children
      this.statusBar.maximizeButton.disable();
    }
  },

  // returns a copy of fields after deleting the image fields
  // see issue 20049 (https://issues.openbravo.com/view.php?id=20049)
  removeImageFields: function (fields) {
    var indexesToDelete, i, length, fieldsWithoutImages;
    indexesToDelete = [];
    if (fields) {
      fieldsWithoutImages = fields.duplicate();
      length = fieldsWithoutImages.length;
      // gets the index of the image fields
      for (i = 0; i < length; i++) {
        if (fieldsWithoutImages[i].targetEntity === 'ADImage') {
          indexesToDelete.push(i);
        }
      }
      // removes the image fields
      length = indexesToDelete.length;
      for (i = 0; i < length; i++) {
        fieldsWithoutImages.splice(indexesToDelete[i] - i, 1);
      }
    } else {
      fieldsWithoutImages = fields;
    }
    return fieldsWithoutImages;
  },

  getDirectLinkUrl: function () {
    var url = window.location.href,
        crit;
    var qIndex = url.indexOf('?');
    var dIndex = url.indexOf('#');
    var index = -1;
    if (dIndex !== -1 && qIndex !== -1) {
      if (dIndex < qIndex) {
        index = dIndex;
      } else {
        index = qIndex;
      }
    } else if (qIndex !== -1) {
      index = qIndex;
    } else if (dIndex !== -1) {
      index = dIndex;
    }
    if (index !== -1) {
      url = url.substring(0, index);
    }

    url = url + '?tabId=' + this.tabId;
    if (this.isShowingForm && this.viewForm.isNew && this.isRootView) {
      url = url + '&command=NEW';
    } else if ((this.isShowingForm || !this.isRootView) && this.viewGrid.getSelectedRecords() && this.viewGrid.getSelectedRecords().length === 1) {
      url = url + '&recordId=' + this.viewGrid.getSelectedRecord().id;
    } else if (!this.isShowingForm && this.isRootView) {
      crit = this.viewGrid.getCriteria();
      if (crit && crit.criteria && crit.criteria.length > 0) {
        url = url + '&criteria=' + escape(isc.JSON.encode(crit, {
          prettyPrint: false,
          dateFormat: 'dateConstructor'
        }));
      }
    }

    return url;
  },

  // ** {{{ addChildView }}} **
  // The addChildView creates the child tab and sets the pointer back to
  // this
  // parent.
  addChildView: function (childView) {
    var length, i, actionButton;

    if ((childView.isTrlTab && OB.PropertyStore.get('ShowTrl', this.windowId) !== 'Y') || (childView.isAcctTab && OB.PropertyStore.get('ShowAcct', this.windowId) !== 'Y')) {
      return;
    }

    this.standardWindow.addView(childView);

    // Add buttons in parent to child. Note that currently it is only added one level.
    if (this.actionToolbarButtons && this.actionToolbarButtons.length > 0 && childView.showParentButtons) {
      length = this.actionToolbarButtons.length;
      for (i = 0; i < length; i++) {
        actionButton = isc.OBToolbarActionButton.create(isc.addProperties({}, this.actionToolbarButtons[i], {
          baseStyle: 'OBToolbarTextButtonParent'
        }));
        actionButton.contextView = this; // Context is still parent view
        actionButton.toolBar = childView.toolBar;
        actionButton.view = childView;

        childView.toolBar.rightMembers.push(actionButton);

        childView.toolBar.addMems([
          [actionButton]
        ]);
        childView.toolBar.addMems([
          [isc.HLayout.create({
            width: (this.toolBar && this.toolBar.rightMembersMargin) || 12,
            height: 1
          })]
        ]);
      }

      if (this.actionToolbarButtons.length > 0) {
        // Add margin in the right
        childView.toolBar.addMems([
          [isc.HLayout.create({
            width: (this.toolBar && this.toolBar.rightMargin) || 4,
            height: 1
          })]
        ]);
      }
    }

    childView.parentView = this;
    childView.parentTabSet = this.childTabSet;

    // build the structure of the children
    childView.buildStructure();

    var childTabDef = {
      title: childView.tabTitle,
      pane: childView
    };

    this.childTabSet.addTab(childTabDef);

    childView.tab = this.childTabSet.getTab(this.childTabSet.tabs.length - 1);
    // start inactive
    childView.tab.setCustomState(isc.OBStandardView.MODE_INACTIVE);

    OB.TestRegistry.register('org.openbravo.client.application.ChildTab_' + this.tabId + '_' + childView.tabId, childView.tab);
  },

  setReadOnly: function (readOnly) {
    this.readOnly = readOnly;
    this.viewForm.readOnly = readOnly;
    if (this.viewGrid && readOnly) {
      this.viewGrid.setReadOnlyMode();
    }
  },

  setEditOrDeleteOnly: function (editOrDeleteOnly) {
    this.editOrDeleteOnly = editOrDeleteOnly;
    if (editOrDeleteOnly) {
      this.viewGrid.setListEndEditAction();
    }
  },

  setSingleRecord: function (singleRecord) {
    this.singleRecord = singleRecord;
  },

  allowNewRow: function () {
    if (this.readOnly || this.singleRecord || this.editOrDeleteOnly) {
      return false;
    }
    return true;
  },

  setViewFocus: function () {

    var object, functionName, items, item, i;

    // clear for a non-focusable item
    if (this.lastFocusedItem && !this.lastFocusedItem.getCanFocus()) {
      this.lastFocusedItem = null;
    }

    // Enable the shortcuts of the form and grid view
    // See issue 20651 (https://issues.openbravo.com/view.php?id=20651)
    if (this.viewForm && this.viewForm.enableShortcuts) {
      this.viewForm.enableShortcuts();
    }
    if (this.viewGrid && this.viewGrid.enableShortcuts) {
      this.viewGrid.enableShortcuts();
    }

    if (this.isShowingForm && this.viewForm) {
      if (!this.lastFocusedItem) {
        this.lastFocusedItem = this.viewForm.getItem(this.firstFocusedField);
      }
      if (this.lastFocusedItem && this.lastFocusedItem.getCanFocus()) {
        object = this.lastFocusedItem;
      } else if (this.viewForm.getFocusItem() && this.viewForm.getFocusItem().getCanFocus()) {
        object = this.viewForm.getFocusItem();
      } else {
        var fields = this.viewForm.fields;
        for (i = 0; i < fields.length; i++) {
          if (fields[i].getCanFocus()) {
            object = fields[i];
            break;
          }
        }
      }
      functionName = 'focusInItem';
    } else if (this.isEditingGrid && this.viewGrid.getEditForm() && this.viewGrid.getEditForm().getFocusItem()) {
      object = this.viewGrid.getEditForm();
      functionName = 'focus';
    } else if (this.lastRecordSelected) {
      object = this.viewGrid;
      functionName = 'focus';
    } else if (this.lastFocusedItem) {
      object = this.lastFocusedItem;
      functionName = 'focusInItem';
    } else if (this.viewGrid && !this.isShowingForm && this.viewGrid.getFilterEditor() && this.viewGrid.getFilterEditor().getEditForm()) {
      this.viewGrid.focusInFirstFilterEditor();
      functionName = 'focus';
    } else if (this.viewGrid) {
      object = this.viewGrid;
      functionName = 'focus';
    }

    if (object && functionName) {
      isc.Page.setEvent(isc.EH.IDLE, object, isc.Page.FIRE_ONCE, functionName);
    }
  },

  setTabButtonState: function (active) {
    var tabButton;
    if (this.tab) {
      tabButton = this.tab;
    } else {
      // don't like to use the global window object, but okay..
      tabButton = window[this.standardWindow.viewTabId];
    }
    // enable this code to set the styleclass changes
    if (!tabButton) {
      return;
    }
    if (active) {
      tabButton.setCustomState('');
    } else {
      tabButton.setCustomState(isc.OBStandardView.MODE_INACTIVE);
    }
  },

  hasValidState: function () {
    return this.isRootView || this.getParentId();
  },

  isActiveView: function () {
    if (this.standardWindow && this.standardWindow.activeView) {
      return this.standardWindow.activeView === this;
    } else {
      return false;
    }
  },

  setAsActiveView: function (autoSaveDone) {
    var activeView = this.standardWindow.activeView;
    if (activeView && activeView !== this && ((activeView.isShowingForm && activeView.viewForm.inFicCall) || (!activeView.isShowingForm && activeView.viewGrid.getEditForm() && activeView.viewGrid.getEditForm().inFicCall))) {
      return;
    }
    if (!autoSaveDone && this.standardWindow.activeView && this.standardWindow.activeView !== this) {
      var actionObject = {
        target: this,
        method: this.setAsActiveView,
        parameters: [true]
      };
      this.standardWindow.doActionAfterAutoSave(actionObject, false);
      return;
    }
    this.standardWindow.setActiveView(this);
  },

  setTargetRecordInWindow: function (recordId) {
    if (this.isActiveView()) {
      this.standardWindow.setTargetInformation(this.tabId, recordId);
    }
  },

  setRecentDocument: function (record) {
    var params = this.standardWindow.getBookMarkParams();
    params.targetTabId = this.tabId;
    params.targetRecordId = record.id;
    params.recentId = this.tabId + '_' + record.id;
    params.recentTitle = record[OB.Constants.IDENTIFIER];
    OB.Layout.ViewManager.addRecentDocument(params);
  },

  setActiveViewProps: function (state) {
    if (state) {
      this.toolBar.show();
      this.statusBar.setActive(true);
      this.activeBar.setActive(true);
      this.setViewFocus();
      this.viewGrid.setActive(true);
      this.viewGrid.markForRedraw();
      // if we are in form view
      if (this.isShowingForm && !this.viewForm.isNew) {
        this.setTargetRecordInWindow(this.viewGrid.getSelectedRecord().id);
      }
      this.toolBar.updateButtonState(true, false, true);
    } else {

      // close any editors we may have
      this.viewGrid.closeAnyOpenEditor();

      this.toolBar.hide();
      this.statusBar.setActive(false);
      this.activeBar.setActive(false);
      this.viewGrid.setActive(false);
      this.viewGrid.markForRedraw();
      // note we can not check on viewForm visibility as 
      // the grid and form can both be hidden when changing
      // to another tab, this handles the case that the grid
      // is shown but the underlying form has errors
      if (this.isShowingForm) {
        this.lastFocusedItem = this.viewForm.getFocusItem();
        this.viewForm.setFocusItem(null);
      }
      this.standardWindow.autoSave();
    }
    this.setTabButtonState(state);
  },

  visibilityChanged: function (visible) {
    if (visible && this.refreshContents) {
      this.doRefreshContents(true);
    }
  },

  doRefreshContents: function (doRefreshWhenVisible, forceRefresh, keepSelection) {
    var callback, me = this;
    // if not visible anymore, reset the view back
    if (!this.isViewVisible()) {
      if (this.isShowingForm) {
        this.switchFormGridVisibility();
      }
      // deselect any records
      this.viewGrid.deselectAllRecords(false, true);
    }

    // update this one at least before bailing out
    this.updateTabTitle();

    if (!this.isViewVisible() && !forceRefresh) {
      this.refreshContents = doRefreshWhenVisible;
      return;
    }

    if (!this.refreshContents && !doRefreshWhenVisible && !forceRefresh) {
      return;
    }

    // can be used by others to see that we are refreshing content
    this.refreshContents = true;

    if (keepSelection) {
      this.viewGrid.recordsSelectedBeforeRefresh = this.viewGrid.getSelectedRecords();
      this.formVisibleBeforeRefresh = this.isShowingForm;
    }

    // clear all our selections..
    // note the true parameter prevents autosave actions from happening
    // this should have been done before anyway
    this.viewGrid.deselectAllRecords(false, true);

    if (this.viewGrid.filterEditor) {
      // do not clear the implicit filter
      // see issue https://issues.openbravo.com/view.php?id=19943
      this.viewGrid.clearFilter(true, true);
    }
    if (this.viewGrid.data && this.viewGrid.data.setCriteria) {
      this.viewGrid.data.setCriteria(null);
    }

    // hide the messagebar
    this.messageBar.hide();

    // allow default edit mode again
    this.allowDefaultEditMode = true;

    if (this.viewForm && this.isShowingForm) {
      this.viewForm.resetForm();
    }

    if (this.shouldOpenDefaultEditMode()) {
      this.openDefaultEditView();
    } else if (this.isShowingForm && !(this.allowDefaultEditMode && this.defaultEditMode)) {
      this.switchFormGridVisibility();
    }

    if (keepSelection) {
      callback = function () {
        var length, i, recordIndex;
        length = me.viewGrid.recordsSelectedBeforeRefresh.length;
        for (i = 0; i < length; i++) {
          recordIndex = me.viewGrid.getRecordIndex(me.viewGrid.recordsSelectedBeforeRefresh[i]);
          me.viewGrid.selectRecord(recordIndex);
        }
        if (me.formVisibleBeforeRefresh) {
          me.switchFormGridVisibility();
        }
        delete me.formVisibleBeforeRefresh;
        delete me.viewGrid.recordsSelectedBeforeRefresh;
      };
    } else {
      callback = null;
    }

    this.viewGrid.refreshContents(callback);

    this.toolBar.updateButtonState(true);

    // if not visible or the parent also needs to be refreshed
    // enable the following code if we don't automatically select the first
    // record
    this.refreshChildViews();

    // set this at false at the end
    this.refreshContents = false;
  },

  refreshChildViews: function (keepSelection) {
    var i, length, tabViewPane;

    if (this.childTabSet) {
      length = this.childTabSet.tabs.length;
      for (i = 0; i < length; i++) {
        tabViewPane = this.childTabSet.tabs[i].pane;
        // force a refresh, only the visible ones will really 
        // be refreshed
        tabViewPane.doRefreshContents(true, null, keepSelection);
      }
    }
  },

  /**
   * Empties the data of the child tabs and shows emptyMessage
   */
  initChildViewsForNewRecord: function () {
    var i, length, tabViewPane;

    if (this.childTabSet) {
      length = this.childTabSet.tabs.length;
      for (i = 0; i < length; i++) {
        tabViewPane = this.childTabSet.tabs[i].pane;
        tabViewPane.viewGrid.setData([]);
        tabViewPane.viewGrid.resetEmptyMessage();
      }
    }
  },

  refreshMeAndMyChildViewsWithEntity: function (entity, excludedTabIds) {
    var i, length, tabViewPane, excludeTab = false;
    if (entity && excludedTabIds) {
      //Check is the tab has to be refreshed
      for (i = 0; i < excludedTabIds.length; i++) {
        if (excludedTabIds[i].match(this.tabId)) {
          excludeTab = true;
          // removes the tabId from the list of excluded, so it does
          // not have to be checked by the child tabs
          excludedTabIds.splice(i, 1);
          break;
        }
      }
      // If it the tab is not in the exclude list, refresh 
      // it if it belongs to the entered entity
      if (!excludeTab) {
        if (this.entity === entity) {
          this.doRefreshContents(true);
        }
      }
      // Refresh the child views of this tab
      if (this.childTabSet) {
        length = this.childTabSet.tabs.length;
        for (i = 0; i < length; i++) {
          tabViewPane = this.childTabSet.tabs[i].pane;
          tabViewPane.refreshMeAndMyChildViewsWithEntity(entity, excludedTabIds);
        }
      }
    }
  },

  shouldOpenDefaultEditMode: function () {
    // can open default edit mode if defaultEditMode is set
    // and this is the root view or a child view with a selected parent.
    var oneOrMoreSelected = this.viewGrid.data && this.viewGrid.data.lengthIsKnown && this.viewGrid.data.lengthIsKnown() && this.viewGrid.data.getLength() >= 1;
    return this.allowDefaultEditMode && oneOrMoreSelected && this.defaultEditMode && (this.isRootView || this.parentView.viewGrid.getSelectedRecords().length === 1);
  },

  // opendefaultedit view for a child view is only called
  // when a new parent is selected, in that case the 
  // edit view should be opened without setting the focus in the form
  openDefaultEditView: function (record) {
    if (!this.shouldOpenDefaultEditMode()) {
      return;
    }
    // preventFocus is treated as a boolean later
    var preventFocus = !this.isRootView;

    // don't open it again
    this.allowDefaultEditMode = false;

    // open form in edit mode
    if (record) {
      this.editRecord(record, preventFocus);
    } else if (this.viewGrid.data && this.viewGrid.data.getLength() > 0 && this.viewGrid.data.lengthIsKnown && this.viewGrid.data.lengthIsKnown()) {
      // edit the first record
      this.editRecord(this.viewGrid.getRecord(0), preventFocus);
    }
    // in other cases just show grid
  },

  // ** {{{ switchFormGridVisibility }}} **
  // Switch from form to grid view or the other way around
  switchFormGridVisibility: function () {
    if (!this.isShowingForm) {
      this.viewGrid.hide();
      this.statusBarFormLayout.show();
      this.statusBarFormLayout.setHeight('100%');
      if (this.isActiveView()) {
        this.viewForm.focus();
      }
      this.isShowingForm = true;
    } else {
      this.statusBarFormLayout.hide();
      // clear the form    
      this.viewForm.resetForm();
      this.isShowingForm = false;
      this.viewGrid.markForRedraw('showing');
      this.viewGrid.show();
      if (this.isActiveView()) {
        if (this.viewGrid.getSelectedRecords() && this.viewGrid.getSelectedRecords().length === 1) {
          this.viewGrid.focus();
        } else {
          this.viewGrid.focusInFirstFilterEditor();
        }
      }

      this.viewGrid.setHeight('100%');
    }
    this.updateTabTitle();
  },

  doHandleClick: function () {
    if (!this.childTabSet) {
      return;
    }
    if (this.state !== isc.OBStandardView.STATE_MID) {
      this.setHalfSplit();
      this.previousState = this.state;
      this.state = isc.OBStandardView.STATE_MID;
    }
  },

  doHandleDoubleClick: function () {
    var tempState;
    if (!this.childTabSet) {
      return;
    }
    tempState = this.state;
    this.state = this.previousState;
    if (this.previousState === isc.OBStandardView.STATE_BOTTOM_MAX) {
      this.setBottomMaximum();
    } else if (tempState === isc.OBStandardView.STATE_MID && this.previousState === isc.OBStandardView.STATE_MID) {
      this.setTopMaximum();
    } else if (this.previousState === isc.OBStandardView.STATE_MID) {
      this.setHalfSplit();
    } else if (this.previousState === isc.OBStandardView.STATE_TOP_MAX) {
      this.setTopMaximum();
    } else {
      isc.warn(this.previousState + ' not supported ');
    }
    this.previousState = tempState;
  },

  // ** {{{ editNewRecordGrid }}} **
  // Opens the inline grid editing for a new record.
  editNewRecordGrid: function (rowNum) {
    if (this.isShowingForm) {
      this.switchFormGridVisibility();
    }
    this.viewGrid.startEditingNew(rowNum);
  },

  // ** {{{ editRecord }}} **
  // Opens the edit form and selects the record in the grid, will refresh
  // child views also
  editRecord: function (record, preventFocus, focusFieldName) {
    var rowNum,
    // at this point the time fields of the record are formatted in local time
    localTime = true;
    this.messageBar.hide();

    if (!this.isShowingForm) {
      this.switchFormGridVisibility();
    }

    if (!record) { //  new case
      this.viewGrid.deselectAllRecords();
      this.initChildViewsForNewRecord();
      this.viewForm.editNewRecord(preventFocus);
    } else {
      this.viewGrid.doSelectSingleRecord(record);

      // also handle the case that there are unsaved values in the grid
      // show them in the form
      rowNum = this.viewGrid.getRecordIndex(record);
      this.viewForm.editRecord(this.viewGrid.getEditedRecord(rowNum), preventFocus, this.viewGrid.recordHasChanges(rowNum), focusFieldName, localTime);
    }
  },

  setMaximizeRestoreButtonState: function () {
    // single view, no maximize or restore
    if (!this.hasChildTabs && this.isRootView) {
      return;
    }
    // different cases:
    var theState = this.state;
    if (this.parentTabSet) {
      theState = this.parentTabSet.state;
    }

    if (theState === isc.OBStandardView.STATE_TOP_MAX) {
      this.statusBar.maximizeButton.hide();
      this.statusBar.restoreButton.show(true);
    } else if (theState === isc.OBStandardView.STATE_IN_MID) {
      this.statusBar.maximizeButton.show(true);
      this.statusBar.restoreButton.hide();
    } else if (!this.hasChildTabs) {
      this.statusBar.maximizeButton.hide();
      this.statusBar.restoreButton.show(true);
    } else {
      this.statusBar.maximizeButton.show(true);
      this.statusBar.restoreButton.hide();
    }
  },

  maximize: function () {
    if (this.parentTabSet) {
      this.parentTabSet.doHandleDoubleClick();
    } else {
      this.doHandleDoubleClick();
    }
    this.setMaximizeRestoreButtonState();
  },

  restore: function () {
    if (this.parentTabSet) {
      this.parentTabSet.doHandleDoubleClick();
    } else {
      this.doHandleDoubleClick();
    }
    this.setMaximizeRestoreButtonState();
  },

  // go to a next or previous record, if !next then the previous one is used
  editNextPreviousRecord: function (next) {
    var rowNum, increment, newRowNum, newRecord, currentSelectedRecord = this.viewGrid.getSelectedRecord();
    if (!currentSelectedRecord) {
      return;
    }
    rowNum = this.viewGrid.data.indexOf(currentSelectedRecord);
    if (next) {
      increment = 1;
    } else {
      increment = -1;
    }

    newRowNum = rowNum + increment;
    newRecord = this.viewGrid.getRecord(newRowNum);
    if (!newRecord) {
      return;
    }
    // a group and moving back, go back one more
    if (newRecord.isFolder && increment < 0) {
      newRowNum = newRowNum + increment;
      newRecord = this.viewGrid.getRecord(newRowNum);
    }
    if (!newRecord) {
      return;
    }
    if (newRecord.isFolder) {
      if (!this.viewGrid.groupTree.isOpen(newRecord)) {
        this.viewGrid.groupTree.openFolder(newRecord);
      }
      if (increment < 0) {
        // previous, pick the last from the group
        newRecord = newRecord.groupMembers[newRecord.groupMembers.length - 1];
        newRowNum = this.viewGrid.getRecordIndex(newRecord);
      } else {
        // next, pick the first from the group
        newRowNum = newRowNum + increment;
        newRecord = this.viewGrid.getRecord(newRowNum);
      }
      if (!newRecord) {
        return;
      }
    }
    this.viewGrid.scrollRecordToTop(newRowNum);
    this.editRecord(newRecord);
  },

  openDirectTabView: function (showContent) {
    // our content is done through the direct mode stuff
    this.refreshContents = false;

    if (this.parentTabSet && this.parentTabSet.getSelectedTab() !== this.tab) {
      this.parentTabSet.selectTab(this.tab);
    }

    if (showContent) {
      // this view is the last in the list then show it
      if (this.parentTabSet) {
        this.parentTabSet.setState(isc.OBStandardView.STATE_MID);
      } else {
        this.doHandleClick();
      }
      this.setMaximizeRestoreButtonState();

      // show the form with the selected record
      // if there is one, otherwise we are in grid mode
      if (this.viewGrid.targetRecordId && !this.isShowingForm) {
        // hide the grid as it should not show up in a short flash
        this.viewGrid.hide();
      }
      // bypass the autosave logic
      this.standardWindow.setActiveView(this);
      this.viewGrid.isOpenDirectMode = true;
      this.viewGrid.isOpenDirectModeLeaf = true;
    }

    if (this.parentView) {
      this.parentView.openDirectTabView(false);
    }
  },

  // ** {{{ recordSelected }}} **
  // Is called when a record get's selected. Will refresh direct child views
  // which will again refresh their children.
  recordSelected: function () {
    // no change go away
    if (!this.hasSelectionStateChanged()) {
      return;
    }

    // Update the tab visibility after a record has been selected and its session
    // attributes have been updated
    this.updateSubtabVisibility();

    // If the record has been automatically selected because was the only record in the header tab,
    // only select the record if the window has not been opened by clicking on the recent views icon to
    // create a new record
    // see issue https://issues.openbravo.com/view.php?id=20564
    if (this.isShowingForm && this.viewForm.isNew) {
      return;
    }
    var me = this,
        callback = function () {
        me.delayedRecordSelected();
        };
    // wait 2 times longer than the fire on pause delay default
    this.fireOnPause('delayedRecordSelected_' + this.ID, callback, this.fireOnPauseDelay * 2);
  },

  // function is called with a small delay to handle the case that a user
  // navigates quickly over a grid
  delayedRecordSelected: function () {
    var length;

    // is actually a different parent selected, only then refresh children
    var differentRecordId = !this.lastRecordSelected || !this.viewGrid.getSelectedRecord() || this.viewGrid.getSelectedRecord().id !== this.lastRecordSelected.id;
    var selectedRecordId = this.viewGrid.getSelectedRecord() ? this.viewGrid.getSelectedRecord().id : null;

    this.updateLastSelectedState();
    this.updateTabTitle();

    // commented line because of https://issues.openbravo.com/view.php?id=18963
    // toolbar seems to be refreshed in any case
    // note only set session info if there is a record selected
    this.toolBar.updateButtonState(!selectedRecordId || this.isEditingGrid || this.isShowingForm);

    var tabViewPane = null,
        i;

    // Do not try to refresh the child tabs of a new record
    if (this.viewGrid.getEditForm() && this.viewGrid.getEditForm().isNew) {
      return;
    }
    // refresh the tabs
    if (this.childTabSet && (differentRecordId || !this.isOpenDirectModeParent)) {
      length = this.childTabSet.tabs.length;
      for (i = 0; i < length; i++) {
        tabViewPane = this.childTabSet.tabs[i].pane;

        if (!selectedRecordId || !this.isOpenDirectModeParent || selectedRecordId !== tabViewPane.parentRecordId) {
          tabViewPane.doRefreshContents(true);
        }
        if (this.isOpenDirectModeParent) {
          tabViewPane.toolBar.updateButtonState(true);
        }
      }
    }
    delete this.isOpenDirectModeParent;
  },

  updateSubtabVisibility: function () {
    var i, length, tabViewPane, activeTab, activeTabNum, activeTabPane, indexFirstNotHiddenTab, contextInfo;
    if (this.childTabSet) {
      length = this.childTabSet.tabs.length;
      for (i = 0; i < length; i++) {
        tabViewPane = this.childTabSet.tabs[i].pane;
        // Calling getContextInfo with (false, true, true) in order to obtain also the value of the
        // session attributes of the form
        contextInfo = this.getContextInfo(false, true, true);
        this.addSessionAttributes(contextInfo, tabViewPane);
        if (tabViewPane.showTabIf && !(tabViewPane.showTabIf(contextInfo))) {
          this.childTabSet.tabBar.members[i].hide();
          tabViewPane.hidden = true;
        } else {
          if (this.childTabSet.visibility === 'hidden') {
            this.childTabSet.show();
            if (tabViewPane.showTabIf && !tabViewPane.data && !tabViewPane.refreshingData && tabViewPane.isVisible()) {
                // If the child tab does not have data yet, refresh it
                tabViewPane.refreshingData = true;
                tabViewPane.refresh();
              }
          }
          this.childTabSet.tabBar.members[i].show();
          tabViewPane.hidden = false;
          tabViewPane.updateSubtabVisibility();
        }
      }

      // If the active tab of the tabset is now hidden, another tab has to to be selected
      // If there are no visible tabs left, maximize the current view
      activeTab = this.childTabSet.getSelectedTab();
      activeTabNum = this.childTabSet.getTabNumber(activeTab);
      activeTabPane = this.childTabSet.getTabPane(activeTab);
      if (activeTabPane.hidden) {
        //Look for the first not-hidden tab
        indexFirstNotHiddenTab = -1;
        for (i = 0; i < length; i++) {
          tabViewPane = this.childTabSet.tabs[i].pane;
          if (!tabViewPane.hidden) {
            indexFirstNotHiddenTab = i;
            break;
          }
        }
        if (indexFirstNotHiddenTab !== -1) {
          this.childTabSet.selectTab(indexFirstNotHiddenTab);
        } else {
          this.childTabSet.hide();
        }
      }
    }
  },

  // Adds to contextInfo the session attributes of the childView, 
  // unless the session attribute is an auxiliary input of its parent tab
  addSessionAttributes: function (contextInfo, childView) {
    var auxInputs = {},
        p;
    if (this.viewForm && this.viewForm.auxInputs) {
      auxInputs = this.viewForm.auxInputs;
    }
    for (p in childView.sessionAttributes) {
      if (childView.sessionAttributes.hasOwnProperty(p) && !auxInputs.hasOwnProperty(p)) {
        contextInfo[p] = childView.sessionAttributes[p];
      }
    }
  },

  // set childs to refresh when they are made visible
  setChildsToRefresh: function () {
    var length, i;

    if (this.childTabSet) {
      length = this.childTabSet.tabs.length;
      for (i = 0; i < length; i++) {
        if (!this.childTabSet.tabs[i].pane.isVisible()) {
          this.childTabSet.tabs[i].pane.refreshContents = true;
        }
      }
    }
  },

  hasSelectionStateChanged: function () {
    return ((this.viewGrid.getSelectedRecords() && this.viewGrid.getSelectedRecords().length !== this.lastRecordSelectedCount) || (this.viewGrid.getSelectedRecord() && this.viewGrid.getSelectedRecord().id !== this.lastRecordSelected.id)) || (this.lastRecordSelected && !this.viewGrid.getSelectedRecord());
  },

  updateLastSelectedState: function () {
    this.lastRecordSelectedCount = this.viewGrid.getSelectedRecords().length;
    this.lastRecordSelected = this.viewGrid.getSelectedRecord();
  },

  getParentId: function () {
    var parentRecord = this.getParentRecord();
    if (parentRecord) {
      return parentRecord.id;
    }
  },

  getParentRecord: function () {
    if (!this.parentView || !this.parentView.viewGrid.getSelectedRecords() || this.parentView.viewGrid.getSelectedRecords().length !== 1) {
      return null;
    }

    // a new parent is not a real parent
    if (this.parentView.viewGrid.getSelectedRecord()._new) {
      return null;
    }

    return this.parentView.viewGrid.getSelectedRecord();
  },

  updateTabTitle: function () {
    var prefix = '',
        postFix;
    var suffix = '';
    var hasChanged = this.isShowingForm && (this.viewForm.isNew || this.viewForm.hasChanged);
    hasChanged = hasChanged || (this.isEditingGrid && (this.viewGrid.hasErrors() || this.viewGrid.getEditForm().isNew || this.viewGrid.getEditForm().hasChanged));
    if (hasChanged) {
      prefix = '* ';
    }

    // store the original tab title
    if (!this.originalTabTitle) {
      this.originalTabTitle = this.tabTitle;
    }

    var identifier, tab, tabSet, title;

    if (this.viewGrid.getSelectedRecord()) {
      identifier = this.viewGrid.getSelectedRecord()[OB.Constants.IDENTIFIER];
      if (this.viewGrid.getSelectedRecord()._new) {
        identifier = OB.I18N.getLabel('OBUIAPP_New');
      }
      if (!identifier) {
        identifier = '';
      } else {
        identifier = ' - ' + identifier;
      }
    }

    // showing the form
    if (this.isShowingForm && this.viewGrid.getSelectedRecord() && this.viewGrid.getSelectedRecord()[OB.Constants.IDENTIFIER]) {

      if (!this.parentTabSet && this.viewTabId) {
        tab = OB.MainView.TabSet.getTab(this.viewTabId);
        tabSet = OB.MainView.TabSet;
        title = this.originalTabTitle + identifier;
      } else if (this.parentTabSet && this.tab) {
        tab = this.tab;
        tabSet = this.parentTabSet;
        title = this.originalTabTitle + identifier;
      }
    } else if (this.viewGrid.getSelectedRecords() && this.viewGrid.getSelectedRecords().length > 0) {
      if (this.viewGrid.getSelectedRecords().length === 1) {
        postFix = identifier;
      } else {
        postFix = ' - ' + OB.I18N.getLabel('OBUIAPP_SelectedRecords', [this.viewGrid.getSelectedRecords().length]);
      }
      if (!this.parentTabSet && this.viewTabId) {
        tab = OB.MainView.TabSet.getTab(this.viewTabId);
        tabSet = OB.MainView.TabSet;
        title = this.originalTabTitle + postFix;
      } else if (this.parentTabSet && this.tab) {
        tab = this.tab;
        tabSet = this.parentTabSet;
        title = this.originalTabTitle + postFix;
      }
    } else if (!this.parentTabSet && this.viewTabId) {
      // the root view
      tabSet = OB.MainView.TabSet;
      tab = OB.MainView.TabSet.getTab(this.viewTabId);
      title = this.originalTabTitle;
    } else if (this.parentTabSet && this.tab) {
      // the check on this.tab is required for the initialization phase
      // only show a count if there is one parent
      tab = this.tab;
      tabSet = this.parentTabSet;

      if (!this.parentView.viewGrid.getSelectedRecords() || this.parentView.viewGrid.getSelectedRecords().length !== 1) {
        title = this.originalTabTitle;
      } else if (this.recordCount) {
        title = this.originalTabTitle + ' (' + this.recordCount + ')';
      } else {
        title = this.originalTabTitle;
      }
    }

    // happens when a tab gets closed
    if (!tab) {
      return;
    }

    if (title) {

      // show a prompt with the title info
      tab.prompt = title;
      tab.showPrompt = true;
      tab.hoverWidth = 150;

      // trunc the title if it too large 
      title = OB.Utilities.truncTitle(title);

      // add the prefix/suffix here to prevent cutoff on that
      title = prefix + title + suffix;
      tabSet.setTabTitle(tab, title);
    }

    // added check on tab as initially it is not set
    if (this.isRootView && tab) {
      // update the document title
      document.title = OB.Constants.WINTITLE + ' - ' + tab.title;
    }
  },

  isViewVisible: function () {
    // this prevents data requests for minimized tabs
    // note this.tab.isVisible is done as the tab is visible earlier than
    // the pane
    var visible = this.tab && this.tab.isDrawn() && this.tab.pane.isDrawn() && this.tab.pane.isVisible();
    return visible && (!this.parentTabSet || this.parentTabSet.getSelectedTabNumber() === this.parentTabSet.getTabNumber(this.tab));
  },

  // ++++++++++++++++++++ Button Actions ++++++++++++++++++++++++++
  // make a special refresh:
  // - refresh the current selected record without changing the selection
  // - refresh the parent/grand-parent in the same way without changing the selection
  // - recursive to children: refresh the children, put the children in grid mode and refresh
  refresh: function (refreshCallback, autoSaveDone, newRecordsToBeIncluded) {
    // If a record should be visible after the refresh, even if it does not comply with the
    // current filter, its ID should be entered in the newRecordsToBeIncluded parameter
    // See issue https://issues.openbravo.com/view.php?id=20722
    var me = this,
        view = this,
        actionObject, formRefresh, callback;

    // first save what we have edited
    if (!autoSaveDone) {
      actionObject = {
        target: this,
        method: this.refresh,
        parameters: [refreshCallback, true, newRecordsToBeIncluded]
      };
      this.standardWindow.doActionAfterAutoSave(actionObject, false);
      return;
    }

    if (this.viewForm && this.viewForm.contextInfo) {
      this.viewForm.contextInfo = null;
    }

    formRefresh = function () {
      if (refreshCallback) {
        refreshCallback();
      }
      me.viewForm.refresh();
    };

    if (!newRecordsToBeIncluded) {
      if (this.parentRecordId && this.newRecordsAfterRefresh) {
        this.newRecordsAfterRefresh[this.parentRecordId] = [];
      } else {
        this.newRecordsAfterRefresh = [];
      }
    }
    if (!this.isShowingForm) {
      this.viewGrid.refreshGrid(refreshCallback, newRecordsToBeIncluded);
    } else {
      if (this.viewForm.hasChanged) {
        callback = function (ok) {
          if (ok) {
            view.viewGrid.refreshGrid(formRefresh, newRecordsToBeIncluded);
          }
        };
        isc.ask(OB.I18N.getLabel('OBUIAPP_ConfirmRefresh'), callback);
      } else {
        this.viewGrid.refreshGrid(formRefresh, newRecordsToBeIncluded);
      }
    }
  },

  refreshParentRecord: function (callBackFunction) {
    if (this.parentView) {
      this.parentView.refreshCurrentRecord(callBackFunction);
    }
  },

  refreshCurrentRecord: function (callBackFunction) {
    var me = this,
        record, criteria, callback;

    if (!this.viewGrid.getSelectedRecord()) {
      return;
    }

    record = this.viewGrid.getSelectedRecord();

    criteria = {
      operator: 'and',
      _constructor: "AdvancedCriteria",
      criteria: []
    };

    // add a dummy criteria to force a fetch
    criteria.criteria.push(isc.OBRestDataSource.getDummyCriterion());

    // and add a criteria for the record itself
    criteria.criteria.push({
      fieldName: OB.Constants.ID,
      operator: 'equals',
      value: record.id
    });

    callback = function (resp, data, req) {
      // this line does not work, but it should:
      //      me.getDataSource().updateCaches(resp, req);
      // therefore do an explicit update of the visual components
      if (me.isShowingForm) {
        me.viewForm.refresh();
      }
      if (me.viewGrid.data) {
        var recordIndex = me.viewGrid.getRecordIndex(me.viewGrid.getSelectedRecord());
        data = OB.Utilities.Date.convertUTCTimeToLocalTime(data, me.viewGrid.completeFields);
        if (me.viewGrid.data.updateCacheData) {
          me.viewGrid.data.updateCacheData(data, req);
        }
        me.viewGrid.selectRecord(me.viewGrid.getRecord(recordIndex));
        me.viewGrid.refreshRow(recordIndex);
        me.viewGrid.redraw();
      }


      if (callBackFunction) {
        callBackFunction();
      }
    };

    if (this.viewForm && this.viewForm.contextInfo) {
      this.viewForm.contextInfo = null;
    }

    this.getDataSource().fetchData(criteria, callback);
    this.refreshParentRecord(callBackFunction);
  },

  hasNotChanged: function () {
    var view = this,
        form = view.viewForm,
        length, selectedRecords, grid = view.viewGrid,
        allRowsHaveErrors, hasErrors = false,
        editRow, i;
    if (view.isShowingForm) {
      if (form.isNew) {
        return false;
      }
      return form.isSaving || form.readOnly || !view.hasValidState() || !form.hasChanged;
    } else if (view.isEditingGrid) {
      editRow = view.viewGrid.getEditRow();
      hasErrors = view.viewGrid.rowHasErrors(editRow);
      form = grid.getEditForm();
      return !form.isNew && !hasErrors && (form.isSaving || form.readOnly || !view.hasValidState() || !form.hasChanged);
    } else {
      selectedRecords = grid.getSelectedRecords();
      allRowsHaveErrors = true;
      length = selectedRecords.length;
      for (i = 0; i < length; i++) {
        var rowNum = grid.getRecordIndex(selectedRecords[i]);
        allRowsHaveErrors = allRowsHaveErrors && grid.rowHasErrors(rowNum);
      }
      return selectedRecords.length === 0 || !allRowsHaveErrors;
    }
  },

  saveRow: function () {
    if (this.isEditingGrid) {
      this.viewGrid.endEditing();
    } else {
      this.viewForm.saveRow();
    }
  },

  deleteSelectedRows: function (autoSaveDone) {
    var msg, dialogTitle, view = this,
        deleteCount, callback;

    if (!this.readOnly && this.isDeleteableTable) {
      // first save what we have edited
      if (!autoSaveDone) {
        var actionObject = {
          target: this,
          method: this.deleteSelectedRows,
          parameters: [true]
        };
        this.standardWindow.doActionAfterAutoSave(actionObject, false);
        return;
      }

      deleteCount = this.viewGrid.getSelection().length;

      if (deleteCount === 1) {
        msg = OB.I18N.getLabel('OBUIAPP_DeleteConfirmationSingle');
        dialogTitle = OB.I18N.getLabel('OBUIAPP_DialogTitle_DeleteRecord');
      } else {
        msg = OB.I18N.getLabel('OBUIAPP_DeleteConfirmationMultiple', [this.viewGrid.getSelection().length]);
        dialogTitle = OB.I18N.getLabel('OBUIAPP_DialogTitle_DeleteRecords');
      }

      callback = function (ok) {
        var i, doUpdateTotalRows, data, deleteData, error, recordInfos = [],
            length, removeCallBack, selection;

        //modal dialog shown to restrict the user from accessing records when deleting records. Will be closed after successful deletion in removeCallback.
        //refer issue https://issues.openbravo.com/view.php?id=24611
        if (ok) {
          isc.showPrompt(OB.I18N.getLabel('OBUIAPP_DeletingRecords') + isc.Canvas.imgHTML({
            src: OB.Styles.LoadingPrompt.loadingImage.src
          }));
        }

        removeCallBack = function (resp, data, req) {
          var length, localData = resp.dataObject || resp.data || data,
              i, updateTotalRows;

          if (!localData) {
            // bail out, an error occured which should be displayed to the user now
            //clear deleting prompt
            isc.clearPrompt();
            return;
          }
          var status = resp.status;
          if (localData && localData.hasOwnProperty('status')) {
            status = localData.status;
          }
          if (localData && localData.response && localData.response.hasOwnProperty('status')) {
            status = localData.response.status;
          }
          if (status === isc.RPCResponse.STATUS_SUCCESS) {
            if (view.isShowingForm) {
              view.switchFormGridVisibility();
            }
            view.messageBar.setMessage(isc.OBMessageBar.TYPE_SUCCESS, null, OB.I18N.getLabel('OBUIAPP_DeleteResult', [deleteCount]));
            if (deleteData) {
              // note totalrows is used when inserting a new row, to determine after which
              // record to add a new row
              updateTotalRows = (view.viewGrid.data.getLength() === view.viewGrid.data.totalRows);
              // deleteData is computed below
              length = deleteData.ids.length;
              for (i = 0; i < length; i++) {
                recordInfos.push({
                  id: deleteData.ids[i]
                });
              }
              view.viewGrid.data.handleUpdate('remove', recordInfos, false, req);
              if (updateTotalRows) {
                view.viewGrid.data.totalRows = view.viewGrid.data.getLength();
              }
            } else if (doUpdateTotalRows) {
              view.viewGrid.data.totalRows = view.viewGrid.data.getLength();
            }
            view.viewGrid.updateRowCountDisplay();
            view.refreshChildViews();
            view.refreshParentRecord();
          } else {
            // get the error message from the dataObject 
            if (localData.response && localData.response.error && localData.response.error.message) {
              error = localData.response.error;
              if (error.type && error.type === 'user') {
                view.messageBar.setLabel(isc.OBMessageBar.TYPE_ERROR, null, error.message, error.params);
              } else if (error.message && error.params) {
                view.messageBar.setLabel(isc.OBMessageBar.TYPE_ERROR, null, error.message, error.params);
              } else if (error.message) {
                view.messageBar.setMessage(isc.OBMessageBar.TYPE_ERROR, null, error.message);
              } else {
                view.messageBar.setMessage(isc.OBMessageBar.TYPE_ERROR, null, OB.I18N.getLabel('OBUIAPP_DeleteResult', [0]));
              }
            }
          }
          isc.clearPrompt();
        };
        if (ok) {
          selection = view.viewGrid.getSelection().duplicate();
          // deselect the current records
          view.viewGrid.deselectAllRecords();

          if (selection.length > 1) {
            deleteData = {};
            deleteData.entity = view.entity;
            deleteData.ids = [];
            length = selection.length;
            for (i = 0; i < length; i++) {
              deleteData.ids.push(selection[i][OB.Constants.ID]);
            }
            OB.RemoteCallManager.call('org.openbravo.client.application.MultipleDeleteActionHandler', deleteData, {}, removeCallBack, {
              refreshGrid: true
            });
          } else {
            // note totalrows is used when inserting a new row, to determine after which
            // record to add a new row
            doUpdateTotalRows = (view.viewGrid.data.getLength() === view.viewGrid.data.totalRows);
            // note remove data expects only the id, the record key as the first param
            view.viewGrid.removeData({
              id: selection[0].id
            }, removeCallBack, {});
          }
        }
      };
      isc.ask(msg, callback, {
        title: dialogTitle
      });
    }
  },

  newRow: function (rowNum) {
    var actionObject = {
      target: this,
      method: this.editNewRecordGrid,
      parameters: [rowNum]
    };
    this.standardWindow.doActionAfterAutoSave(actionObject, false);
  },

  newDocument: function () {
    var actionObject = {
      target: this,
      method: this.editRecord,
      parameters: null
    };
    this.standardWindow.doActionAfterAutoSave(actionObject, false);
  },

  undo: function () {
    var view = this,
        callback, form, grid, errorRows, i, length;
    view.messageBar.hide(true);
    if (this.isEditingGrid) {
      grid = view.viewGrid;
      // the editing grid will take care of the confirmation
      grid.cancelEditing();

      // undo edit in all records with errors
      if (grid.hasErrors()) {
        errorRows = grid.getErrorRows();
        length = errorRows.length;
        for (i = 0; i < length; i++) {
          grid.selectRecord(grid.getRecord(errorRows[i]));
        }
        grid.undoEditSelectedRows();
      }
      return;
    } else if (this.isShowingForm) {
      form = this.viewForm;
    } else {
      // selected records
      grid = view.viewGrid;
    }
    if (form) {
      form.undo();
    } else {
      grid.undoEditSelectedRows();
    }
  },

  // ++++++++++++++++++++ Parent-Child Tab Handling ++++++++++++++++++++++++++
  convertToPercentageHeights: function () {
    if (!this.members[1]) {
      return;
    }
    var height = this.members[1].getHeight();
    var percentage = ((height / this.getHeight()) * 100);
    // this.members[0].setHeight((100 - percentage) + '%');
    this.members[0].setHeight('*');
    this.members[1].setHeight(percentage + '%');
  },

  setTopMaximum: function () {
    this.setHeight('100%');
    if (this.members[1]) {
      this.members[1].setState(isc.OBStandardView.STATE_MIN);
      this.convertToPercentageHeights();
    } else {
      this.members[0].setHeight('100%');
    }
    this.members[0].show();
    this.state = isc.OBStandardView.STATE_TOP_MAX;
    this.setMaximizeRestoreButtonState();
  },

  setBottomMaximum: function () {
    if (this.members[1]) {
      this.members[0].hide();
      this.members[1].setHeight('100%');
    }
    this.state = isc.OBStandardView.STATE_BOTTOM_MAX;
    this.setMaximizeRestoreButtonState();
  },

  setHalfSplit: function () {
    this.setHeight('100%');
    var i, tab, pane;
    if (this.members[1]) {
      // divide the space between the first and second level
      if (this.members[1].draggedHeight) {
        this.members[1].setHeight(this.members[1].draggedHeight);
        this.convertToPercentageHeights();
      } else {
        // NOTE: noticed that when resizing multiple members in a layout, that it 
        // makes a difference what the order of resizing is, first resize the 
        // one which will be larger, then the one which will be smaller.
        this.members[1].setHeight('50%');
        this.members[0].setHeight('50%');
      }
      this.members[1].setState(isc.OBStandardView.STATE_IN_MID);
    } else {
      this.members[0].setHeight('100%');
    }
    this.members[0].show();
    this.state = isc.OBStandardView.STATE_MID;
    this.setMaximizeRestoreButtonState();
  },

  getCurrentValues: function () {
    var ret;
    if (this.isShowingForm) {
      ret = this.viewForm.getValues();
    } else if (this.isEditingGrid) {
      ret = isc.addProperties({}, this.viewGrid.getSelectedRecord(), this.viewGrid.getEditForm().getValues());
    } else {
      ret = this.viewGrid.getSelectedRecord();
    }
    // return an empty object if ret is not set
    // this happens when a new record could not be saved
    // and the form view is switched for grid view
    return ret || {};
  },

  getPropertyFromColumnName: function (columnName) {
    var length = this.view.propertyToColumns.length,
        i;
    for (i = 0; i < length; i++) {
      var propDef = this.view.propertyToColumns[i];
      if (propDef.dbColumn === columnName) {
        return propDef.property;
      }
    }
    return null;
  },

  getPropertyDefinitionFromDbColumnName: function (columnName) {
    var length = this.propertyToColumns.length,
        i;
    for (i = 0; i < length; i++) {
      var propDef = this.propertyToColumns[i];
      if (propDef.dbColumn === columnName) {
        return propDef;
      }
    }
    return null;
  },

  getPropertyFromDBColumnName: function (columnName) {
    var length = this.propertyToColumns.length,
        i;
    for (i = 0; i < length; i++) {
      var propDef = this.propertyToColumns[i];
      if (propDef.dbColumn === columnName) {
        return propDef.property;
      }
    }
    return null;
  },

  getPropertyDefinitionFromInpColumnName: function (columnName) {
    var length = this.propertyToColumns.length,
        i;
    for (i = 0; i < length; i++) {
      var propDef = this.propertyToColumns[i];
      if (propDef.inpColumn === columnName) {
        return propDef;
      }
    }
    return null;
  },

  //++++++++++++++++++ Reading context ++++++++++++++++++++++++++++++
  getContextInfo: function (onlySessionProperties, classicMode, forceSettingContextVars, convertToClassicFormat) {
    var contextInfo = {},
        addProperty, rowNum, properties, i, p;
    // if classicmode is undefined then both classic and new props are used
    var classicModeUndefined = (typeof classicMode === 'undefined');
    var value, field, record, form, component, propertyObj, type, length;

    if (classicModeUndefined) {
      classicMode = true;
    }

    // a special case, the editform has been build but it is not present yet in the
    // form, so isEditingGrid is true but the edit form is not there yet, in that 
    // case use the viewGrid as component and the selected record
    if (this.isEditingGrid && this.viewGrid.getEditForm()) {
      rowNum = this.viewGrid.getEditRow();
      if (rowNum || rowNum === 0) {
        if (this.viewGrid._hidingField || this.viewGrid._showingField) {
          // If this has been caused by hiding or showing a field while the grid was being edited,
          // add the properties of the saved edit values
          // See issue https://issues.openbravo.com/view.php?id=21352
          record = isc.addProperties({}, this.viewGrid.getRecord(rowNum), this.viewGrid.getEditValues(rowNum), this.viewGrid._savedEditValues);
        } else {
          record = isc.addProperties({}, this.viewGrid.getRecord(rowNum), this.viewGrid.getEditValues(rowNum));
        }
        // Prevents the proper id from being overwritten with the dummy id
        // See issue https://issues.openbravo.com/view.php?id=22625
        if (this.viewGrid.getEditValues(rowNum)[OB.Constants.ID] && this.viewGrid.getEditValues(rowNum)[OB.Constants.ID].indexOf('_') === 0 && this.viewGrid.getRecord(rowNum)[OB.Constants.ID].indexOf('_') !== 0) {
          record[OB.Constants.ID] = this.viewGrid.getRecord(rowNum)[OB.Constants.ID];
        }
      } else {
        record = isc.addProperties({}, this.viewGrid.getSelectedRecord());
      }
      component = this.viewGrid.getEditForm();
      form = component;
    } else if (this.isShowingForm) {
      // note on purpose not calling form.getValues() as this will cause extra requests 
      // in case of a picklist
      record = isc.addProperties({}, this.viewGrid.getSelectedRecord(), this.viewForm.values);
      component = this.viewForm;
      form = component;
    } else {
      record = this.viewGrid.getSelectedRecord();
      rowNum = this.viewGrid.getRecordIndex(record);
      if (rowNum || rowNum === 0) {
        record = isc.addProperties({}, record, this.viewGrid.getEditValues(rowNum));
      }
      component = this.viewGrid;
    }

    properties = this.propertyToColumns;

    if (record) {

      // add the id of the record itself also if not set
      if (!record[OB.Constants.ID] && this.viewGrid.getSelectedRecord()) {
        // if in edit mode then the grid always has the current record selected
        record[OB.Constants.ID] = this.viewGrid.getSelectedRecord()[OB.Constants.ID];
      }

      // New records in grid have a dummy id (see OBViewGrid.createNewRecordForEditing)
      // whereas new form records don't have it. This temporary id starts with _. Removing this
      // id so it behaves in the same way in form and grid
      if (record[OB.Constants.ID] && record[OB.Constants.ID].indexOf('_') === 0) { // startsWith a SC function, is slower than indexOf
        record[OB.Constants.ID] = undefined;
      }

      length = properties.length;
      for (i = 0; i < length; i++) {
        propertyObj = properties[i];
        value = record[propertyObj.property];
        field = component.getField(propertyObj.property);
        addProperty = propertyObj.sessionProperty || !onlySessionProperties;
        if (addProperty) {
          if (classicMode) {
            if (propertyObj.type && convertToClassicFormat) {
              type = isc.SimpleType.getType(propertyObj.type);
              if (type.createClassicString) {
                contextInfo[properties[i].inpColumn] = type.createClassicString(value);
              } else {
                contextInfo[properties[i].inpColumn] = this.convertContextValue(value, propertyObj.type);
              }
            } else {
              contextInfo[properties[i].inpColumn] = this.convertContextValue(value, propertyObj.type);
            }
          } else {
            // surround the property name with @ symbols to make them different
            // from filter criteria and such          
            contextInfo['@' + this.entity + '.' + properties[i].property + '@'] = this.convertContextValue(value, propertyObj.type);
          }
        }
      }

      if (!onlySessionProperties) {
        for (p in this.standardProperties) {
          if (this.standardProperties.hasOwnProperty(p)) {
            if (classicMode) {
              contextInfo[p] = this.convertContextValue(this.standardProperties[p]);
            } else {
              // surround the property name with @ symbols to make them different
              // from filter criteria and such          
              contextInfo['@' + this.entity + '.' + p + '@'] = this.convertContextValue(this.standardProperties[p]);
            }
          }
        }
      }
    }
    if (form || forceSettingContextVars) {
      if (!form) {
        form = this.viewForm;
      }
      isc.addProperties(contextInfo, form.auxInputs);
      isc.addProperties(contextInfo, form.hiddenInputs);
      isc.addProperties(contextInfo, form.sessionAttributes);
    }

    if (this.parentView) {
      // parent properties do not override contextInfo
      var parentContextInfo = this.parentView.getContextInfo(onlySessionProperties, classicMode, forceSettingContextVars, convertToClassicFormat);
      contextInfo = isc.addProperties(parentContextInfo, contextInfo);
    }

    return contextInfo;
  },

  convertContextValue: function (value, type) {
    var isTime;
    // if a string is received, it is converted to a date so that the function
    //   is able to return its UTC time in the HH:mm:ss format
    if (isc.isA.String(value) && value.length > 0 && type && isc.SimpleType.getType(type).inheritsFrom === 'time') {
      value = this.convertToDate(value);
    }
    isTime = isc.isA.Date(value) && type && isc.SimpleType.getType(type).inheritsFrom === 'time';
    if (isTime) {
      return value.getUTCHours() + ':' + value.getUTCMinutes() + ':' + value.getUTCSeconds();
    }
    return value;
  },

  convertToDate: function (stringValue) {
    var today = new Date(),
        dateValue = isc.Time.parseInput(stringValue);
    // Set the month initially to January to prevent error like this
    // provided date: 15/02/2014
    // today: 31/03/2014
    // date.setDate(today.getDate()) would result in Mon Mar 02 2014 18:00:00 GMT+0100 (CET), because february does not have 31 days 
    dateValue.setMonth(0);
    // Only the time is relevant. In order to be able to convert it from UTC to local time
    //   properly the date value should be today's date
    dateValue.setDate(today.getDate());
    dateValue.setMonth(today.getMonth());
    dateValue.setYear(today.getFullYear());
    return dateValue;
  },

  getPropertyDefinition: function (property) {
    var properties = this.propertyToColumns,
        i, length = properties.length;
    for (i = 0; i < length; i++) {
      if (property === properties[i].property) {
        return properties[i];
      }
    }
    return null;
  },

  setContextInfo: function (sessionProperties, callbackFunction, forced) {
    var newCallback, me = this,
        gridVisibleProperties = [],
        len, i, originalID;
    // no need to set the context in this case
    if (!forced && (this.isEditingGrid || this.isShowingForm)) {
      if (callbackFunction) {
        callbackFunction();
      }
      return;
    }

    if (!sessionProperties) {
      // Call to the FIC in EDIT mode, all properties must be sent, not only the session properties
      sessionProperties = this.getContextInfo(false, true, false, true);
    }

    if (this.viewGrid && this.viewGrid.getSelectedRecord()) {
      originalID = this.viewGrid.getSelectedRecord()[OB.Constants.ID];
    }

    newCallback = function (response, data, request) {
      var context = {},
          grid = me.viewGrid,
          currentRecord, currentID;
      currentRecord = grid.getSelectedRecord();
      context.rowNum = grid.getRecordIndex(currentRecord);
      currentID = currentRecord[OB.Constants.ID];
      context.grid = grid;
      response.clientContext = context;
      if (originalID === currentID) {
        // Only update the grid if the user has not changed rows
        grid.processFICReturn(response, data, request);
      }
      if (callbackFunction) {
        callbackFunction();
      }
    };

    if (this.viewGrid && this.viewGrid.fields) {
      gridVisibleProperties.push('id');
      len = this.viewGrid.fields.length;
      for (i = 0; i < len; i++) {
        if (this.viewGrid.fields[i].name[0] !== '_') {
          gridVisibleProperties.push(this.viewGrid.fields[i].name);
        }
      }
      sessionProperties._gridVisibleProperties = gridVisibleProperties;
    }

    OB.RemoteCallManager.call('org.openbravo.client.application.window.FormInitializationComponent', sessionProperties, {
      MODE: 'EDIT',
      TAB_ID: this.tabId,
      PARENT_ID: this.getParentId(),
      ROW_ID: this.viewGrid.getSelectedRecord() ? this.viewGrid.getSelectedRecord().id : this.getCurrentValues().id
    }, newCallback);

  },

  getTabMessage: function (forcedTabId) {
    var tabId = forcedTabId || this.tabId,
        callback;

    callback = function (resp, data, req) {
      if (req.clientContext && data.type && (data.text || data.title)) {
        req.clientContext.messageBar.setMessage(isc.OBMessageBar[data.type], data.title, data.text);
      }
    };

    OB.RemoteCallManager.call('org.openbravo.client.application.window.GetTabMessageActionHandler', {
      tabId: tabId
    }, null, callback, this);
  },

  getFormPersonalization: function (checkSavedView) {
    if (!this.standardWindow) {
      // happens during the initialization
      return null;
    }
    return this.standardWindow.getFormPersonalization(this, checkSavedView);
  },

  // TODO: consider caching the prepared fields on
  // class level, the question is if it is faster
  // as then a clone action needs to be done
  prepareFields: function () {
    // first compute the gridfields and then the formfields
    this.prepareViewFields(this.fields);
    this.gridFields = this.prepareGridFields(this.fields);
    this.formFields = this.prepareFormFields(this.fields);
  },

  prepareFormFields: function (fields) {
    var i, length = fields.length,
        result = [],
        fld;

    for (i = 0; i < length; i++) {
      fld = isc.shallowClone(fields[i]);
      result.push(this.setFieldFormProperties(fld));

      if (fld.firstFocusedField) {
        this.firstFocusedField = fld.name;
      }
    }

    return result;
  },

  setFieldFormProperties: function (fld, isGridField) {
    var onChangeFunction, newShowIf;

    if (fld.displayed === false && !isGridField) {
      fld.hiddenInForm = true;
      fld.visible = false;
      fld.alwaysTakeSpace = false;
    }


    if (this.statusBarFields.contains(fld.name)) {
      fld.statusBarField = true;
    }

    if (!fld.width) {
      fld.width = '*';
    }
    if (fld.showIf && !fld.originalShowIf) {
      fld.originalShowIf = fld.showIf;
      newShowIf = function (item, value, form, values) {
        var currentValues = isc.shallowClone(values || form.view.getCurrentValues()),
            context = form.getCachedContextInfo(),
            originalShowIfValue = false;

        OB.Utilities.fixNull250(currentValues);

        try {
          if (isc.isA.Function(this.originalShowIf)) {
            originalShowIfValue = this.originalShowIf(item, value, form, currentValues, context);
          } else {
            originalShowIfValue = isc.JSON.decode(this.originalShowIf);
          }
        } catch (_exception) {
          isc.warn(_exception + ' ' + _exception.message + ' ' + _exception.stack);
        }
        return !(this.hiddenInForm && !this.statusBarField) && context && originalShowIfValue;
      };
      if (fld.statusBarField) {
        fld.showIf = null;
        fld.statusBarShowIf = newShowIf;
      } else {
        fld.showIf = newShowIf;
      }
    }
    if (fld.type === 'OBAuditSectionItem') {
      var expandAudit = OB.PropertyStore.get('ShowAuditDefault', this.standardProperties.inpwindowId);
      if (expandAudit && expandAudit === 'Y') {
        fld.sectionExpanded = true;
      }
    }

    if (fld.onChangeFunction) {
      // the default
      fld.onChangeFunction.sort = 50;

      OB.OnChangeRegistry.register(this.tabId, fld.name, fld.onChangeFunction, 'default');
    }

    return fld;
  },

  // prepare stuff on view level
  prepareViewFields: function (fields) {
    var i, length = fields.length,
        fld;

    // start with the initial ones
    this.propertyToColumns = this.initialPropertyToColumns.duplicate();

    this.propertyToColumns.push({
      property: this.standardProperties.keyProperty,
      dbColumn: this.standardProperties.keyColumnName,
      inpColumn: this.standardProperties.inpKeyName,
      sessionProperty: true,
      type: this.standardProperties.keyPropertyType
    });

    for (i = 0; i < length; i++) {
      fld = fields[i];
      if (fld.columnName) {
        this.propertyToColumns.push({
          property: fld.name,
          dbColumn: fld.columnName,
          inpColumn: fld.inpColumnName,
          sessionProperty: fld.sessionProperty,
          type: fld.type
        });
      }
    }
  },

  prepareGridFields: function (fields) {
    var result = [],
        i, length = fields.length,
        fld, type, expandFieldNames, hoverFunction, yesNoFormatFunction;

    hoverFunction = function (record, value, rowNum, colNum, grid) {
      return grid.getDisplayValue(colNum, record[(this.displayField ? this.displayField : this.name)]);
    };

    yesNoFormatFunction = function (value, record, rowNum, colNum, grid) {
      return OB.Utilities.getYesNoDisplayValue(value);
    };

    for (i = 0; i < length; i++) {
      fld = fields[i];
      if (!fld.gridProps) {
        continue;
      }
      fld = isc.shallowClone(fields[i]);

      if (fld.showHover) {
        fld.hoverHTML = hoverFunction;
      }

      if (fld.gridProps.displaylength) {
        fld.gridProps.width = isc.OBGrid.getDefaultColumnWidth(fld.gridProps.displaylength);
      } else {
        fld.gridProps.width = isc.OBGrid.getDefaultColumnWidth(30);
      }

      // move the showif defined on form level
      // otherwise it interferes with the grid level
      if (fld.showIf) {
        fld.formShowIf = fld.showIf;
        delete fld.showIf;
      }

      isc.addProperties(fld, fld.gridProps);

      // if a client class/canvas field
      if (fld.clientClass) {
        if (fld.showGridSummary !== true && fld.showGridSummary !== false) {
          fld.showGridSummary = false;
        }
        if (fld.showGroupSummary !== true && fld.showGridSummary !== false) {
          fld.showGridSummary = false;
        }
      }

      // correct some stuff coming from the form fields
      if (fld.displayed === false) {
        fld.visible = true;
        fld.alwaysTakeSpace = true;
      }

      fld.canExport = (fld.canExport === false ? false : true);
      fld.canHide = (fld.canHide === false ? false : true);
      fld.canFilter = (fld.canFilter === false ? false : true);
      fld.filterOnKeypress = (fld.filterOnKeypress === false ? false : true);
      fld.escapeHTML = (fld.escapeHTML === false ? false : true);
      fld.prompt = fld.title;
      fld.editorProperties = isc.addProperties({}, fld, isc.shallowClone(fld.editorProps));
      //issue 20192: 2nd parameter is true because fld.editorProperties is a grid property.
      this.setFieldFormProperties(fld.editorProperties, true);
      if (fld.disabled) {
        fld.editorProperties.disabled = true;
      }
      fld.disabled = false;

      if (fld.yesNo) {
        fld.formatCellValue = yesNoFormatFunction;
      }

      type = isc.SimpleType.getType(fld.type);
      if (type.editorType && !fld.editorType) {
        fld.editorType = type.editorType;
      }

      if (type.filterEditorType && !fld.filterEditorType) {
        fld.filterEditorType = type.filterEditorType;
      }

      if (type.sortNormalizer) {
        fld.sortNormalizer = type.sortNormalizer;
      }

      if (!fld.filterEditorProperties) {
        fld.filterEditorProperties = {};
      }

      if (fld.fkField) {
        fld.displayField = fld.name + OB.Constants.FIELDSEPARATOR + OB.Constants.IDENTIFIER;
        fld.valueField = fld.name;
        fld.filterOnKeypress = false;
        fld.filterEditorProperties.displayField = OB.Constants.IDENTIFIER;
        fld.filterEditorProperties.valueField = OB.Constants.IDENTIFIER;
      }

      if (fld.validationFn) {

        if (!fld.validators) {
          fld.validators = [];
        }

        fld.validators.push({
          type: 'custom',
          condition: fld.validationFn
        });
      }

      fld.filterEditorProperties.required = false;

      // get rid of illegal summary functions
      if (fld.summaryFunction && !isc.OBViewGrid.SUPPORTED_SUMMARY_FUNCTIONS.contains(fld.summaryFunction)) {
        delete fld.summaryFunction;
      }

      // add grouping stuff
      if (type.inheritsFrom === 'float' || type.inheritsFrom === 'integer') {
        // this is needed because of a bug in smartclient in Listgrid
        // only groupingmodes on type level are considered
        // http://forums.smartclient.com/showthread.php?p=91605#post91605
        isc.addProperties(type, OB.Utilities.Number.Grouping);
        // so can't define on field level 
        //      isc.addProperties(fld, OB.Utilities.Number.Grouping);
      }

      result.push(fld);
    }

    // sort according to displaylength, for the autoexpandfieldnames
    result.sort(function (v1, v2) {
      var t1 = v1.displaylength,
          t2 = v2.displaylength,
          l1 = v1.length,
          l2 = v2.length,
          n1 = v1.name,
          n2 = v2.name;
      if (!t1 && !t2) {
        return 0;
      }
      if (!t1) {
        return 1;
      }
      if (!t2) {
        return -1;
      }
      if (t1 > t2) {
        return -1;
      } else if (t1 === t2) {
        if (!l1 && !l2) {
          return 0;
        }
        if (!l1) {
          return 1;
        }
        if (!l2) {
          return -1;
        }
        if (l1 > l2) {
          return -1;
        } else if (l1 === l2) {
          if (v1.name > v2.name) {
            return 1;
          } else {
            return -1;
          }
        }
        return 1;
      }
      return 1;
    });

    this.autoExpandFieldNames = [];
    length = result.length;
    for (i = 0; i < length; i++) {
      if (result[i].autoExpand) {
        this.autoExpandFieldNames.push(result[i].name);
      }
    }
    // sort according to the sortnum
    // that's how they are displayed
    result.sort(function (v1, v2) {
      var t1 = v1.sort,
          t2 = v2.sort;
      if (!t1 && !t2) {
        return 0;
      }
      if (!t1) {
        return -1;
      }
      if (!t2) {
        return 1;
      }
      if (t1 < t2) {
        return -1;
      } else if (t1 === t2) {
        return 0;
      }
      return 1;
    });

    return result;
  }

});
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use. this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2011-2012 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */

// = OBBaseView =
//
// A class which implements the view api.
isc.ClassFactory.defineClass('OBBaseView', isc.Layout);

isc.OBBaseView.addProperties({

  // ** {{{ OBBaseView.showsItself }}} **
  // If this boolean property is set to true then the Openbravo view manager
  // will not place the view instance in a tab in the main Multi-Document-Interface.
  // Instead it will call the show method on the instance. This makes 
  // it for example possible to define views which are implemented as 
  // popups instead of opened in the main MDI.
  showsItself: false,

  // ** {{{ OBBaseView.isSameTab() }}} **
  // Is called by the view manager when opening a view. The view manager
  // will first check if there is already a tab open by calling the 
  // isSameTab method on each opened view. If one of the views returns
  // true then the requested view is opened in that tab (effectively
  // replacing the current open view there). This is needed for cases
  // when a certain view may only be opened once.
  isSameTab: function (viewId, params) {
    var prop;

    for (prop in params) {
      if (params.hasOwnProperty(prop)) {
        if (params[prop] !== this[prop]) {
          return false;
        }
      }
    }

    // a common implementation does this, this allows only 
    // one instance of certain view class to be open at one point 
    // in time.
    // this will allow multiple tabs to be opened:
    return viewId === this.getClassName();
  },

  // ** {{{ OBBaseView.getBookMarkParams() }}} **
  // Is used to create a bookmarkable url in the browser's address bar.
  // For each opened view this method is called and the result is added
  // to the address bar. This makes it possible for the user to do 
  // back in the browser, to bookmark the url and to build history in the 
  // browser itself. 
  getBookMarkParams: function () {
    var result = {};
    result.viewId = this.getClassName();
    result.tabTitle = this.tabTitle;
    return result;
  },

  // ** {{{ OBBaseView.getHelpView() }}} **
  // This method can return an object containing a view definition. 
  // If this method returns an object then a link is activated in the 
  // help pull-down in the top.
  getHelpView: function () {
    return;
    // an example of returning a view definition, the viewId contains
    // the help view classname, the tabTitle denotes the tab title of the
    // help view
    //    return {
    //        viewId: 'ClassicOBHelp',
    //        tabTitle: this.tabTitle + ' - ' + OB.I18N.getLabel('UINAVBA_Help'),
    //        windowId: this.windowId,
    //        windowType: 'W',
    //        windowName: this.tabTitle
    //    };
  }

});
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2011-2012 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  Valery Lezhebokov.
 ************************************************************************
 */
// = OBLinkedItems =
//
// Represents the linked items section shown in the bottom of the form.
// Note is not shown for new records.
//
isc.ClassFactory.defineClass('OBLinkedItemSectionItem', isc.OBSectionItem);

isc.OBLinkedItemSectionItem.addProperties({
  // as the name is always the same there should be at most
  // one linked item section per form
  name: '_linkedItems_',

  // note: setting these apparently completely hides the section
  // width: '100%',
  // height: '100%',
  overflow: 'hidden',

  // this field group does not participate in personalization
  personalizable: false,

  canFocus: true,

  // don't expand as a default
  sectionExpanded: false,

  prompt: OB.I18N.getLabel('OBUIAPP_LinkedItemsPrompt'),

  linkedItemCanvasItem: null,

  visible: false,

  itemIds: ['_linkedItems_Canvas'],

  // note formitems don't have an initWidget but an init method
  init: function () {
    // override the one passed in
    this.defaultValue = OB.I18N.getLabel('OBUIAPP_LinkedItemsTitle');
    this.sectionExpanded = false;

    // tell the form who we are
    this.form.linkedItemSection = this;

    return this.Super('init', arguments);
  },

  getLinkedItemPart: function () {
    if (!this.linkedItemCanvasItem) {
      this.linkedItemCanvasItem = this.form.getField(this.itemIds[0]);
    }
    return this.linkedItemCanvasItem.canvas;
  },

  setRecordInfo: function (entity, id) {
    this.getLinkedItemPart().setRecordInfo(entity, id);
  },

  collapseSection: function () {
    var ret = this.Super('collapseSection', arguments);
    this.getLinkedItemPart().setExpanded(false);
    return ret;
  },

  expandSection: function () {
    // if this is not there then when clicking inside the 
    // section item will visualize it
    if (!this.isVisible()) {
      return;
    }
    var ret = this.Super('expandSection', arguments);
    this.getLinkedItemPart().setExpanded(true);
    return ret;
  },

  hide: function () {
    this.collapseSection();
    this.prompt = '';
    return this.Super('hide', arguments);
  },

  visibilityChanged: function (state) {
    if (state) {
      this.prompt = OB.I18N.getLabel('OBUIAPP_LinkedItemsPrompt');
    } else {
      this.prompt = '';
    }
  },

  handleFocus: function () {
    if (this.getLinkedItemPart().linkedItemCategoryListGrid && this.getLinkedItemPart().linkedItemCategoryListGrid.filterEditor && this.getLinkedItemPart().linkedItemCategoryListGrid.filterEditor.getEditForm()) {
      this.getLinkedItemPart().linkedItemCategoryListGrid.filterEditor.getEditForm().focus();
      return true;
    }
    return false;
  }
});

isc.ClassFactory.defineClass('OBLinkedItemLayout', isc.VLayout);

isc.OBLinkedItemLayout.addProperties({

  // set to true when the content has been created at first expand
  isInitialized: false,

  layoutMargin: 5,

  // setting width/height makes the canvasitem to be hidden after a few
  // clicks on the section item, so don't do that for now
  // width: '100%',
  // height: '100%',
  /** 
   * Loads categories to the categories grid
   **/
  loadCategories: function () {
    var windowId = this.getForm().view.standardWindow.windowId;
    var entityName = this.getForm().view.entity;
    var actionURL = OB.Application.contextUrl + 'utility/UsedByLink.html';

    var that = this;

    var callback;
    callback = function (response, data, request) {
      var msg = data.msg;
      var usedByLinkData = data.usedByLinkData;
      if (msg !== null) {
        that.messageLabel.setContents(msg);
      }

      if (usedByLinkData === null) {
        usedByLinkData = [];
      }

      that.linkedItemCategoryDS.setCacheData(usedByLinkData, true);
      that.linkedItemCategoryListGrid.invalidateCache();
      that.linkedItemCategoryListGrid.filterData();
    };

    var reqObj = {
      params: {
        Command: 'JSONCategory',
        windowId: windowId,
        entityName: entityName
      },
      callback: callback,
      evalResult: true,
      httpMethod: 'POST',
      useSimpleHttp: true,
      actionURL: actionURL
    };
    this.linkedItemCategoryListGrid.setData([]);
    this.linkedItemCategoryListGrid.showLoadingMessage();
    isc.RPCManager.sendRequest(reqObj);
  },

  /** 
   * Loads linked items of a chosen category to linkedItemListGrid
   * */
  loadLinkedItems: function (record) {

    var windowId = this.getForm().view.standardWindow.windowId;
    var entityName = this.getForm().view.entity;
    var actionURL = OB.Application.contextUrl + 'utility/UsedByLink.html';
    var selCatItems = this.linkedItemCategoryListGrid.getSelectedRecord();

    var that = this; /* loads linked items to the child grid */
    var callback;
    callback = function (response, data, request) {
      var msg = data.msg;
      var usedByLinkData = data.usedByLinkData;
      if (msg !== null) {
        that.messageLabel.setContents(msg);
      }

      if (usedByLinkData === null) {
        usedByLinkData = [];
      }
      that.linkedItemListGrid.invalidateCache();
      that.linkedItemDS.setCacheData(usedByLinkData, true);
      that.linkedItemListGrid.filterData();
    };

    if (!selCatItems) {
      this.linkedItemCategoryListGrid.filterEditorSubmit();
    } else {
      var reqObj = {
        params: {
          Command: 'JSONLinkedItem',
          windowId: windowId,
          entityName: entityName,
          adTabId: record.adTabId,
          tableName: record.tableName,
          columnName: record.columnName
        },
        callback: callback,
        evalResult: true,
        httpMethod: 'POST',
        useSimpleHttp: true,
        actionURL: actionURL
      };
      this.linkedItemListGrid.setData([]);
      this.linkedItemListGrid.showLoadingMessage();
      isc.RPCManager.sendRequest(reqObj);
    }
  },

  /**
   * Opens linked item in a new window
   */
  openLinkedItemInNewWindow: function (record) {
    OB.Utilities.openDirectTab(record.adTabId, record.id, 'DEFAULT');
  },

  /**
   * Cleans linked items grid when the filter is used.
   **/
  cleanLinkedItemsListGrid: function () {
    this.linkedItemListGrid.invalidateCache();
    this.linkedItemDS.setCacheData([], true);
    this.linkedItemListGrid.filterData();
    this.linkedItemCategoryListGrid.deselectAllRecords();
  },

  /** 
   * Initializes the widget
   **/
  initWidget: function () {
    var ret = this.Super('initWidget', arguments);

    // the list of linked items
    this.linkedItemDS = isc.DataSource.create({
      fields: [{
        name: "name",
        title: OB.I18N.getLabel('OBUIAPP_LinkedItemsListGridHeader'),
        type: 'text',
        filterEditorType: 'OBTextItem'
      }],
      clientOnly: true
    });
    this.linkedItemListGrid = isc.OBGrid.create({
      width: '50%',
      height: 300,
      baseStyle: 'OBGridLinkCell',
      dataSource: this.linkedItemDS,
      autoFetchData: true,
      showFilterEditor: true,
      selectionType: 'single',
      filterOnKeypress: true,
      loadingDataMessage: OB.I18N.getLabel('OBUISC_ListGrid.loadingDataMessage'),
      emptyDataMessage: OB.I18N.getLabel('OBUIAPP_LinkedItemsEmptyMessage'),
      emptyMessage: OB.I18N.getLabel('OBUIAPP_LinkedItemsEmptyMessage'),
      layout: this,
      recordClick: 'this.layout.openLinkedItemInNewWindow(record)',
      fetchData: function (criteria, callback, requestProperties) {
        this.checkShowFilterFunnelIcon(criteria);
        return this.Super('fetchData', arguments);
      },
      filterData: function (criteria, callback, requestProperties) {
        this.checkShowFilterFunnelIcon(criteria);
        return this.Super('filterData', arguments);
      },
      showLoadingMessage: function () {
        this.emptyMessage = this.loadingDataMessage;
      },
      showNoRowsMessage: function () {
        this.emptyMessage = this.emptyDataMessage;
      },
      dataArrived: function (startRow, endRow) {
        if (startRow === 0 && endRow === -1) {
          this.showNoRowsMessage();
        }
        return this.Super('dataArrived', arguments);
      }
    });


    // the list of linked item categories
    this.linkedItemCategoryDS = isc.DataSource.create({
      fields: [{
        name: 'fullElementName',
        title: OB.I18N.getLabel('OBUIAPP_LinkedItemsCategoryListGridHeader'),
        type: 'text',
        canFilter: true,
        filterEditorType: 'OBTextItem'
      }],
      clientOnly: true,
      testData: []
    });
    this.linkedItemCategoryListGrid = isc.OBGrid.create({
      width: '50%',
      autoFetchData: true,
      height: 300,
      dataSource: this.linkedItemCategoryDS,
      layout: this,
      emptyDataMessage: OB.I18N.getLabel('OBUISC_ListGrid.emptyMessage'),
      loadingDataMessage: OB.I18N.getLabel('OBUISC_ListGrid.loadingDataMessage'),
      recordClick: 'this.layout.loadLinkedItems(record)',
      showFilterEditor: true,
      selectionType: 'single',
      filterOnKeypress: true,
      filterEditorSubmit: 'this.layout.cleanLinkedItemsListGrid()',
      fetchData: function (criteria, callback, requestProperties) {
        this.checkShowFilterFunnelIcon(criteria);
        return this.Super('fetchData', arguments);
      },
      filterData: function (criteria, callback, requestProperties) {
        this.checkShowFilterFunnelIcon(criteria);
        return this.Super('filterData', arguments);
      },
      showLoadingMessage: function () {
        this.emptyMessage = this.loadingDataMessage;
      },
      showNoRowsMessage: function () {
        this.emptyMessage = this.emptyDataMessage;
      },
      dataArrived: function (startRow, endRow) {
        if (startRow === 0 && endRow === -1) {
          this.showNoRowsMessage();
        }
        return this.Super('dataArrived', arguments);
      }
    });

    var hLayout = isc.HLayout.create({
      layoutTopMargin: 5
    });

    // add the grids to the horizontal layout
    hLayout.addMember(this.linkedItemCategoryListGrid);
    hLayout.addMember(this.linkedItemListGrid);

    this.messageLabel = isc.Label.create({
      width: '100%',
      height: '100%',
      canFocus: true
    });

    // add the grids to the vertical layout
    this.addMember(this.messageLabel);
    this.addMember(hLayout);

    return ret;
  },


  // never disable this item
  isDisabled: function () {
    return false;
  },

  getForm: function () {
    return this.canvasItem.form;
  },

  // is called when a new record is loaded in the form
  // in this method the linked item section should be cleared
  // but not reload its content, that's done when the section
  // gets expanded
  setRecordInfo: function (entity, id) {
    this.entity = entity;
    // use recordId instead of id, as id is often used to keep
    // html ids
    this.recordId = id;
    this.isInitialized = false;
  },


  // is called when the section expands/collapse
  // the linked items should not be loaded before the section actually expands
  setExpanded: function (expanded) {
    if (expanded && !this.isInitialized) {

      this.loadCategories();
      this.linkedItemCategoryListGrid.filterEditorSubmit();
      // this part should stay also for linked items
      this.isInitialized = true;
    }
  },

  // ensure that the view gets activated
  focusChanged: function () {
    var view = this.getForm().view;
    if (view && view.setAsActiveView) {
      view.setAsActiveView();
    }
    return this.Super('focusChanged', arguments);
  },

  destroy: function () {
    // Explicitly destroy the associated DataSource to prevent memory leaks
    // http://forums.smartclient.com/showthread.php?p=70493
    if (this.linkedItemDS) {
      this.linkedItemDS.destroy();
      this.likedItemDS = null;
    }
    if (this.linkedItemCategoryDS) {
      this.linkedItemCategoryDS.destroy();
      this.likedItemDS = null;
    }
    this.Super('destroy', arguments);
  }
});


isc.ClassFactory.defineClass('OBLinkedItemCanvasItem', isc.CanvasItem);

isc.OBLinkedItemCanvasItem.addProperties({

  // some defaults, note if this changes then also the 
  // field generation logic needs to be checked
  colSpan: 4,
  startRow: true,
  endRow: true,

  canFocus: true,

  // setting width/height makes the canvasitem to be hidden after a few
  // clicks on the section item, so don't do that for now
  // width: '100%',
  // height: '100%',
  showTitle: false,

  // note that explicitly setting the canvas gives an error as not
  // all props are set correctly on the canvas (for example the
  // pointer back to this item: canvasItem
  // for setting more properties use canvasProperties, etc. see
  // the docs
  canvasConstructor: 'OBLinkedItemLayout',

  // never disable this one
  isDisabled: function () {
    return false;
  }

});
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2011-2013 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s): Valery Lezhebokov.
 ************************************************************************
 */

// = OBNotesItems =
//
// Represents the notes section shown in the bottom of the form.
// Note is not shown for new records.
//
isc.ClassFactory.defineClass('OBNoteSectionItem', isc.OBSectionItem);

isc.OBNoteSectionItem.addProperties({
  // as the name is always the same there should be at most
  // one note section per form
  name: '_notes_',

  overflow: 'hidden',

  // some defaults, note if this changes then also the 
  // field generation logic needs to be checked
  colSpan: 4,
  startRow: true,
  endRow: true,

  canFocus: true,

  prompt: OB.I18N.getLabel('OBUIAPP_NotesPrompt'),

  noteCanvasItem: null,

  visible: true,

  noteCount: 0,

  // this field group does not participate in personalization
  personalizable: false,

  itemIds: ['_notes_Canvas'],

  // note formitems don't have an initWidget but an init method
  init: function () {
    // override the one passed in
    this.defaultValue = OB.I18N.getLabel('OBUIAPP_NotesTitle');

    /* tell the form who we are */
    this.form.noteSection = this;

    this.Super('init', arguments);
  },

  setNoteCount: function (lNoteCount) {
    lNoteCount = parseInt(lNoteCount, 10);
    this.noteCount = lNoteCount;
    if (lNoteCount !== 0) {
      if (!this.getNotePart().noteListGrid.isVisible()) {
        this.getNotePart().noteListGrid.show();
      }
      this.setValue(OB.I18N.getLabel('OBUIAPP_NotesTitle') + ' (' + lNoteCount + ')');
    } else {
      if (this.getNotePart().noteListGrid.isVisible()) {
        this.getNotePart().noteListGrid.hide();
      }
      this.setValue(OB.I18N.getLabel('OBUIAPP_NotesTitle'));
    }
  },

  getNotePart: function () {
    if (!this.noteCanvasItem) {
      this.noteCanvasItem = this.form.getField(this.itemIds[0]);
    }
    return this.noteCanvasItem.canvas;
  },

  setRecordInfo: function (entity, id) {
    this.getNotePart().setRecordInfo(entity, id);
  },

  refresh: function () {
    this.getNotePart().refresh();
  },

  expandSection: function () {
    this.Super('expandSection', arguments);
    this.form.noteSection.refresh();
  },

  hide: function () {
    this.Super('hide', arguments);
    if (this.noteCanvasItem) {
      // Solves issue #16663: Forcing call to canvas hide. 
      // Shouldn't this be invoked by SmartClient 
      this.noteCanvasItem.hide();
    }
  }

});

isc.ClassFactory.defineClass('OBNoteLayout', isc.VLayout);

isc.OBNoteLayout.addProperties({

  entity: null,

  recordId: null,

  view: null,
  //Set in initWidget
  layoutMargin: 0,

  membersMargin: 10,

  noteTextAreaItem: null,

  noteDynamicForm: null,

  saveNoteButton: null,

  noteDSId: '090A37D22E61FE94012E621729090048',

  noteListGrid: null,

  refreshFormWithEntities: [],
  // * Entities that will force a refresh event when a new note be added or removed
  // * If the string 'all' is found in the array, it will refresh in all cases
  // * Entities can be added to the list by third parties by doing: isc.OBNoteLayout.getPrototype().refreshFormWithEntities.push(theEntityName);
  //   Where 'theEntityName' is the string with the name of the entity
  shouldRefreshAfterAddOrRemove: function () {
    var i;
    for (i = 0; i < this.refreshFormWithEntities.length; i++) {
      if (this.refreshFormWithEntities[i].toLowerCase() === 'all' || this.refreshFormWithEntities[i] === this.entity) {
        return true;
      }
    }
    return false;
  },

  addOrRemoveCancelLogic: function () {
    if (this.shouldRefreshAfterAddOrRemove() && this.view && this.view.viewForm && this.view.viewGrid && //
    (this.view.viewForm.hasChanged || (this.view.isEditingGrid && this.view.viewGrid.getEditForm().hasChanged))) { //
      // If should refresh after save, and there is already changes made in the form,
      // notice it and cancel the note save action to avoid possible collisions
      isc.warn(OB.I18N.getLabel('OBUIAPP_SaveChangesBeforeAddRemoveNote'), function () {
        return true;
      }, {
        icon: '[SKINIMG]Dialog/error.png',
        title: OB.I18N.getLabel('OBUIAPP_Error')
      });
      return false;
    } else {
      return true;
    }
  },

  addOrRemoveNoteCallback: function (dsResponse, data, dsRequest) {
    if (this.shouldRefreshAfterAddOrRemove()) {
      this.view.refresh();
    }
  },

  /**
   * Saves the note to the DB.
   */
  saveNote: function () {
    var me = this;
    var addNoteCallback = function (dsResponse, data, dsRequest) {
        me.addOrRemoveNoteCallback(dsResponse, data, dsRequest);
        };

    if (!this.addOrRemoveCancelLogic()) {
      return false;
    }

    var note = this.noteDynamicForm.getField('noteOBTextAreaItem').getValue();

    if (!note) {
      return;
    }

    this.noteDynamicForm.validate();

    var noteDS = this.getNoteDataSource();

    var currentTime = new Date();

    noteDS.addData({
      'client': OB.User.clientId,
      'organization': OB.User.organizationId,
      'table': this.getForm().view.standardProperties.inpTableId,
      'record': this.getForm().view.viewGrid.getSelectedRecord().id,
      'note': note
    }, addNoteCallback);

    // clean text area
    this.noteDynamicForm.getItem('noteOBTextAreaItem').clearValue();
    this.saveNoteButton.setDisabled(true);
    this.noteDynamicForm.focusInItem('noteOBTextAreaItem');

    this.parentElement.noteSection.setNoteCount(this.parentElement.noteSection.noteCount + 1);
  },

  /**
   * Deletes the note from the DB.
   */
  deleteNote: function ( /* note id to delete */ id) {
    var me = this;
    var removeNoteCallback = function (dsResponse, data, dsRequest) {
        me.addOrRemoveNoteCallback(dsResponse, data, dsRequest);
        };

    if (!this.addOrRemoveCancelLogic()) {
      return false;
    }

    var noteDS = this.getNoteDataSource();
    var noteSection = this.parentElement.noteSection;
    isc.confirm(OB.I18N.getLabel('OBUIAPP_ConfirmRemoveNote'), function (clickedOK) {
      if (clickedOK) {
        noteDS.removeData({
          'id': id
        }, removeNoteCallback);
        noteSection.setNoteCount(noteSection.noteCount - 1);
      }
    }, {
      title: OB.I18N.getLabel('OBUIAPP_DialogTitle_DeleteNote')
    });
  },

  /**
   * Returns Notes data source.
   */
  getNoteDataSource: function () {
    return this.noteListGrid.dataSource;
  },

  /**
   * Initializes the widget.
   */
  initWidget: function () {
    this.Super('initWidget', arguments);

    var view = this.getForm().view;
    this.view = view;

    var hLayout = isc.HLayout.create({
      width: '50%',
      height: '100%',
      layoutMargin: 0,
      layoutTopMargin: 10,
      membersMargin: 10
    });
    hLayout.setLayoutMargin();

    this.noteDynamicForm = isc.DynamicForm.create({
      numCols: 1,
      width: '100%',
      fields: [{
        name: 'noteOBTextAreaItem',
        type: 'OBTextAreaItem',
        showTitle: false,
        layout: this,
        width: '*',
        length: 2000,
        change: function (form, item, value, oldValue) {
          if (value) {
            this.layout.saveNoteButton.setDisabled(false);
          } else {
            this.layout.saveNoteButton.setDisabled(true);
          }
          return this.Super('change', arguments);
        },
        isDisabled: function () {
          this.Super('isDisabled', arguments);
          if (OB.PropertyStore.get("DisableNotesForReadOnlyTabs", this.windowId) === 'Y' && view.readOnly === true) {
            this.readOnly = true;
            this.canEdit = false;
          }
        },
        validators: [{
          type: 'required'
        }]
      }]
    });

    this.saveNoteButton = isc.OBFormButton.create({
      layout: this,
      margin: 4,
      //hLayout layoutTopMargin is not affecting completly the button, so this magin tries to balance it
      title: OB.I18N.getLabel('OBUIAPP_SaveNoteButtonTitle'),
      click: function () {
        this.layout.saveNote();
        return false;
      },
      canFocus: true,
      draw: function () {
        this.setDisabled(true);
        return this.Super('draw', arguments);
      }
    });

    hLayout.addMember(this.noteDynamicForm);
    hLayout.addMember(this.saveNoteButton);
    // add the grids to the vertical layout
    this.addMember(hLayout);

    this.noteListGrid = isc.OBGrid.create({
      width: '50%',
      autoFitData: 'vertical',
      fields: [{
        name: 'colorBar',
        width: '5'
      }, {
        name: 'note'
      }],
      alternateRecordStyles: false,
      autoFetchData: true,
      baseStyle: 'OBNoteListGridCell',
      fixedRecordHeights: false,
      filterOnKeypress: true,
      headerHeight: 0,
      hoverStyle: 'OBNoteListGridCellOver',
      layout: this,
      height: 1,
      //Due to issue 16695. Only with this, the visualization is strange when no records are shown. The noteListGrid visibility management is needed too.
      visibility: 'hidden',
      //Due to issue 16695. The noteListGrid is automatically shown/hidden each time the note count (set using setNoteCount) is > 0
      selectionType: 'none',
      showEmptyMessage: false,
      styleName: 'OBNoteListGrid',
      wrapCells: true,

      setDataSource: function (dataSource, fields) {
        this.Super('setDataSource', [dataSource, this.fields]);
      },

      fetchData: function (criteria, callback, requestProperties) {
        if (this.layout.getForm() && this.layout.getForm().noteSection && this.layout.getForm().noteSection.visible && this.layout.getForm().noteSection.isExpanded()) {
          return this.Super('fetchData', [this.convertCriteria(criteria), callback, requestProperties]);
        }
      },

      filterData: function (criteria, callback, requestProperties) {
        return this.Super('filterData', [
        this.convertCriteria(criteria), callback, requestProperties]);
      },

      getCriteria: function () {
        var criteria = this.Super('getCriteria', arguments) || {};
        criteria = this.convertCriteria(criteria);
        return criteria;
      },

      convertCriteria: function (criteria) {
        criteria = isc.addProperties({}, criteria || {});

        if (!criteria.criteria) {
          criteria.criteria = [];
        }

        if (view && view.viewGrid.getSelectedRecord()) {
          criteria.criteria.push({
            fieldName: 'table',
            operator: 'equals',
            value: view.standardProperties.inpTableId
          });

          criteria.criteria.push({
            fieldName: 'record',
            operator: 'equals',
            value: view.viewGrid.getSelectedRecord().id
          });

          criteria[OB.Constants.ORDERBY_PARAMETER] = '-updated';
        }
        return criteria;

      },

      formatCellValue: function (value, record, rowNum, colNum) {

        if (this.getFieldName(colNum) !== 'note') {
          return value;
        }

        value = value + ' <span class="OBNoteListGridAuthor">' + OB.Utilities.getTimePassedInterval(record.recordTime - record.creationDate.getTime()) + ' ' + OB.I18N.getLabel('OBUIAPP_by') + ' ' + record['createdBy' + OB.Constants.FIELDSEPARATOR + OB.Constants.IDENTIFIER] + '</span>';

        // show delete link if the note was created by
        // the current user
        if (record && record.createdBy === OB.User.id) {
          value = value + ' <nobr><span class="OBNoteListGridDelete" ><a class="OBNoteListGridDelete" href="#" onclick="' + this.layout.ID + '.deleteNote(\'' + record.id + '\')">[ ' + OB.I18N.getLabel('OBUIAPP_delete') + ' ]</a></span></nobr>';
        }
        return value;
      },

      getBaseStyle: function (record, rowNum, colNum) {
        if (this.getFieldName(colNum) !== 'colorBar') {
          return this.baseStyle;
        }

        if (record && record.createdBy === OB.User.id) {
          return 'OBNoteListGridCurrentUserNoteCell';
        } else {
          return 'OBNoteListGridOtherUserNoteCell';
        }
      }

    });

    this.noteListGrid.addSort({
      direction: 'desc',
      property: 'updated'
    });

    this.addMember(this.noteListGrid);

    // use or get DS
    if (view && view.notesDataSource) {
      this.noteListGrid.setDataSource(view.notesDataSource);
    } else {
      OB.Datasource.get(this.noteDSId, this.noteListGrid, null, true);
    }
  },

  /**
   * Sets record information.
   */
  setRecordInfo: function (entity, id) {
    this.entity = entity;
    this.recordId = id;
  },

  refresh: function () {
    this.noteDynamicForm.getItem('noteOBTextAreaItem').clearValue();
    this.noteListGrid.fetchData();
  },

  getForm: function () {
    return this.canvasItem.form;
  }

});

isc.ClassFactory.defineClass('OBNoteCanvasItem', isc.CanvasItem);

isc.OBNoteCanvasItem.addProperties({

  // some defaults, note if this changes then also the 
  // field generation logic needs to be checked
  colSpan: 4,
  startRow: true,
  endRow: true,

  canFocus: true,

  // setting width/height makes the canvasitem to be hidden after a few
  // clicks on the section item, so don't do that for now
  showTitle: false,

  // note that explicitly setting the canvas gives an error as not
  // all props are set correctly on the canvas (for example the
  // pointer back to this item: canvasItem
  // for setting more properties use canvasProperties, etc. see
  // the docs
  canvasConstructor: 'OBNoteLayout',

  // never disable this one
  isDisabled: function () {
    return false;
  }

});
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2011-2012 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */
// = OBAttachments =
//
// Represents the attachments section in the form.
//
isc.ClassFactory.defineClass('OBAttachmentsSectionItem', isc.OBSectionItem);

isc.OBAttachmentsSectionItem.addProperties({
  // as the name is always the same there should be at most
  // one linked item section per form
  name: '_attachments_',

  // note: setting these apparently completely hides the section
  // width: '100%',
  // height: '100%',
  // this field group does not participate in personalization
  personalizable: false,

  canFocus: true,

  // don't expand as a default
  sectionExpanded: false,

  prompt: OB.I18N.getLabel('OBUIAPP_AttachmentPrompt'),

  attachmentCanvasItem: null,

  visible: false,

  itemIds: ['_attachments_Canvas'],

  // note formitems don't have an initWidget but an init method
  init: function () {
    // override the one passed in
    this.defaultValue = OB.I18N.getLabel('OBUIAPP_AttachmentTitle');
    this.sectionExpanded = false;

    // tell the form who we are
    this.form.attachmentsSection = this;

    return this.Super('init', arguments);
  },

  getAttachmentPart: function () {
    if (!this.attachmentCanvasItem) {
      this.attachmentCanvasItem = this.form.getField(this.itemIds[0]);
    }
    return this.attachmentCanvasItem.canvas;
  },

  setRecordInfo: function (entity, id, tabId) {
    this.getAttachmentPart().setRecordInfo(entity, id, tabId);
  },

  collapseSection: function () {
    var ret = this.Super('collapseSection', arguments);
    this.getAttachmentPart().setExpanded(false);
    return ret;
  },

  expandSection: function () {
    // if this is not there then when clicking inside the 
    // section item will visualize it
    if (!this.isVisible()) {
      return;
    }
    var ret = this.Super('expandSection', arguments);
    this.getAttachmentPart().setExpanded(true);
    return ret;
  },

  fillAttachments: function (attachments) {
    this.getAttachmentPart().fillAttachments(attachments);
  }
});


isc.ClassFactory.defineClass('OBAttachmentCanvasItem', isc.CanvasItem);

isc.OBAttachmentCanvasItem.addProperties({

  // some defaults, note if this changes then also the 
  // field generation logic needs to be checked
  colSpan: 4,
  startRow: true,
  endRow: true,

  canFocus: true,

  // setting width/height makes the canvasitem to be hidden after a few
  // clicks on the section item, so don't do that for now
  // width: '100%',
  // height: '100%',
  showTitle: false,

  // note that explicitly setting the canvas gives an error as not
  // all props are set correctly on the canvas (for example the
  // pointer back to this item: canvasItem
  // for setting more properties use canvasProperties, etc. see
  // the docs
  canvasConstructor: 'OBAttachmentsLayout',

  // never disable this one
  isDisabled: function () {
    return false;
  }

});

isc.ClassFactory.defineClass('OBAttachmentsSubmitPopup', isc.OBPopup);

isc.OBAttachmentsSubmitPopup.addProperties({
  submitButton: null,
  addForm: null,
  showMinimizeButton: false,
  showMaximizeButton: false,
  title: OB.I18N.getLabel('OBUIAPP_AttachFile'),
  initWidget: function (args) {
    this.addItem(
    isc.HLayout.create({
      width: '100%',
      height: this.height,
      layoutTopMargin: this.hlayoutTopMargin,
      layoutBottomMargin: 5,
      align: this.align,
      members: [
      this.addForm, this.submitButton]
    }));
    this.Super('initWidget', arguments);
  }
});

isc.ClassFactory.defineClass('OBAttachmentsLayout', isc.VLayout);

isc.OBAttachmentsLayout.addProperties({

  // set to true when the content has been created at first expand
  isInitialized: false,

  layoutMargin: 5,

  width: '100%',
  align: 'left',

  // never disable this item
  isDisabled: function () {
    return false;
  },

  getForm: function () {
    return this.canvasItem.form;
  },

  setRecordInfo: function (entity, id, tabId) {
    this.entity = entity;
    // use recordId instead of id, as id is often used to keep
    // html ids
    this.recordId = id;
    this.tabId = tabId;
    this.isInitialized = false;
  },


  setExpanded: function (expanded) {
    if (expanded && !this.isInitialized) {
      this.isInitialized = true;
    }
  },

  addAttachmentInfo: function (attachmentLayout, attachment) {},

  callback: function (attachmentsobj) {
    var button = this.getForm().view.toolBar.getLeftMember(isc.OBToolbar.TYPE_ATTACHMENTS);
    if (!button) {
      button = this.getForm().view.toolBar.getLeftMember("attachExists");
    }
    button.customState = '';
    button.resetBaseStyle();
    this.fillAttachments(attachmentsobj.attachments);
  },
  resetToolbar: function () {
    var canvas = null;
    var currentElement = null;
    var positionOfLastMember = 0;
    var button = this.getForm().view.toolBar.getLeftMember(isc.OBToolbar.TYPE_ATTACHMENTS);
    if (!button) {
      button = this.getForm().view.toolBar.getLeftMember("attachExists");
    }
    button.customState = '';
    button.resetBaseStyle();
    //Deleting the upload message of the cancelled upload
    if (OB.Utilities.currentUploader) {
      canvas = window[OB.Utilities.currentUploader];
      if (canvas) {
        //The last member is the cancelled upload.
        positionOfLastMember = canvas.getMembers().size() - 1;
        //The first member is the Hlayout where the buttons are.
        if (positionOfLastMember > 0) {
          currentElement = canvas.getMembers()[positionOfLastMember];
          if (currentElement) {
            canvas.removeMember(currentElement);
          }
        }
      }
    }
  },
  fileExists: function (fileName, attachments) {
    var i, length;

    if (!attachments || attachments.length === 0) {
      return false;
    }

    length = attachments.length;
    for (i = 0; i < length; i++) {
      if (attachments[i].name === fileName) {
        return true;
      }
    }
    return false;
  },

  fillAttachments: function (attachments) {
    var id, i, length;

    this.savedAttachments = attachments;
    this.destroyAndRemoveMembers(this.getMembers());
    var hLayout = isc.HLayout.create();

    if (this.getForm().isNew) {
      return;
    }

    this.addMember(hLayout);
    var me = this;
    var addButton = isc.OBLinkButtonItem.create({
      title: '[ ' + OB.I18N.getLabel('OBUIAPP_AttachmentAdd') + ' ]',
      width: '30px',
      canvas: me,
      action: function (forceUpload) {
        if (OB.Utilities.currentUploader === null || forceUpload) {
          var attachmentFile = OB.I18N.getLabel('OBUIAPP_AttachmentFile');
          var form = isc.DynamicForm.create({
            autoFocus: true,
            fields: [{
              name: 'inpname',
              title: attachmentFile,
              type: 'upload',
              multiple: false,
              canFocus: false,
              align: 'right'
            }, {
              name: 'Command',
              type: 'hidden',
              value: 'SAVE_NEW_OB3'
            }, {
              name: 'buttonId',
              type: 'hidden',
              value: this.canvas.ID
            }, {
              name: 'inpKey',
              type: 'hidden',
              value: this.canvas.recordId
            }, {
              name: 'inpTabId',
              type: 'hidden',
              value: this.canvas.tabId
            }, {
              name: 'inpwindowId',
              type: 'hidden',
              value: this.canvas.windowId
            }, {
              name: 'inpDescription',
              title: OB.I18N.getLabel('APRM_FATS_DESCRIPTION'),
              type: 'text',
              value: this.canvas.description
            }],
            encoding: 'multipart',
            action: './businessUtility/TabAttachments_FS.html',
            target: "background_target",
            numCols: 4,
            align: 'center',
            height: '30px',
            redraw: function () {},
            theCanvas: this.canvas
          });
          var submitbutton = isc.OBFormButton.create({
            title: OB.I18N.getLabel('OBUIAPP_AttachmentSubmit'),
            theForm: form,
            canvas: me,
            click: function () {
              var fileName, form = this.theForm,
                  addFunction;
              addFunction = function (clickedOK) {
                if (clickedOK) {
                  var hTempLayout = isc.HLayout.create();
                  form.theCanvas.addMember(hTempLayout, form.theCanvas.getMembers().size());
                  var uploadingFile = isc.Label.create({
                    contents: fileName
                  });
                  var uploading = isc.Label.create({
                    className: 'OBLinkButtonItemFocused',
                    contents: '    ' + OB.I18N.getLabel('OBUIAPP_AttachmentUploading')
                  });
                  hTempLayout.addMember(uploadingFile);
                  hTempLayout.addMember(uploading);
                  var button = form.theCanvas.getForm().view.toolBar.getLeftMember(isc.OBToolbar.TYPE_ATTACHMENTS);
                  if (!button) {
                    button = form.theCanvas.getForm().view.toolBar.getLeftMember("attachExists");
                  }
                  button.customState = 'Progress';
                  button.resetBaseStyle();
                  if (OB.Utilities.currentUploader !== null) {
                    var origButton = window[OB.Utilities.currentUploader];
                    if (origButton && origButton.resetToolbar) {
                      origButton.resetToolbar();
                    }
                  }
                  OB.Utilities.currentUploader = form.theCanvas.ID;
                  form.submitForm();
                  form.popup.hide();
                }
              };
              var value = this.theForm.getItem('inpname').getElement().value;
              if (!value) {
                isc.say(OB.I18N.getLabel('OBUIAPP_AttachmentsSpecifyFile'));
                return;
              }
              value = value ? value : '';

              var lastChar = value.lastIndexOf("\\") + 1;

              fileName = lastChar === -1 ? value : value.substring(lastChar);

              if (this.theForm.theCanvas.fileExists(fileName, this.canvas.savedAttachments)) {
                isc.confirm(OB.I18N.getLabel('OBUIAPP_ConfirmUploadOverwrite'), addFunction);
              } else {
                addFunction(true);
              }
            }
          });
          var popup = isc.OBAttachmentsSubmitPopup.create({
            submitButton: submitbutton,
            addForm: form
          });
          form.popup = popup;
          popup.show();
        } else {
          isc.ask(OB.I18N.getLabel('OBUIAPP_OtherUploadInProgress'), function (clickOK) {
            if (clickOK) {
              var forceUpload = true;
              this.button.action(forceUpload);
            }
          }, {
            button: this
          });
        }
      }
    });
    if (!this.getForm().view.viewForm.readOnly) {
      hLayout.addMember(addButton);
    }
    // If there are no attachments, we only display the "[Add]" button
    if (!attachments || attachments.length === 0) {
      this.getForm().getItem('_attachments_').setValue(OB.I18N.getLabel('OBUIAPP_AttachmentTitle'));
      this.getForm().view.attachmentExists = false;
      this.getForm().view.toolBar.updateButtonState();
      return;
    }
    this.getForm().view.attachmentExists = true;
    this.getForm().view.toolBar.updateButtonState();
    var fields = this.getForm().getFields();
    for (id = 0; id < fields.length; id++) {
      if (fields[id].type === 'OBAttachmentsSectionItem') {
        fields[id].setValue(OB.I18N.getLabel('OBUIAPP_AttachmentTitle') + " (" + attachments.length + ")");
      }
    }
    var downloadAllButton = isc.OBLinkButtonItem.create({
      title: '[ ' + OB.I18N.getLabel('OBUIAPP_AttachmentDownloadAll') + ' ]',
      width: '30px',
      canvas: this,
      action: function () {
        var canvas = this.canvas;
        isc.confirm(OB.I18N.getLabel('OBUIAPP_FormConfirmDownloadMultiple'), function (clickedOK) {
          if (clickedOK) {
            var d = {
              Command: 'GET_MULTIPLE_RECORDS_OB3',
              tabId: canvas.tabId,
              recordIds: canvas.recordId
            };
            OB.Utilities.postThroughHiddenForm('./businessUtility/TabAttachments_FS.html', d);
          }
        });
      }
    });
    var removeAllButton = isc.OBLinkButtonItem.create({
      title: '[ ' + OB.I18N.getLabel('OBUIAPP_AttachmentRemoveAll') + ' ]',
      width: '30px',
      canvas: me,
      action: function () {
        var d = {
          Command: 'DELETE',
          tabId: this.canvas.tabId,
          buttonId: this.canvas.ID,
          recordIds: this.canvas.recordId
        };
        var canvas = this.canvas;
        isc.confirm(OB.I18N.getLabel('OBUIAPP_ConfirmRemoveAll'), function (clickedOK) {
          if (clickedOK) {
            OB.RemoteCallManager.call('org.openbravo.client.application.window.AttachmentsAH', {}, d, function (response, data, request) {
              canvas.fillAttachments(data.attachments);
            });
          }
        }, {
          title: OB.I18N.getLabel('OBUIAPP_DialogTitle_RemoveAttachments')
        });
      }
    });
    hLayout.addMember(downloadAllButton);
    if (!this.getForm().view.viewForm.readOnly) {
      hLayout.addMember(removeAllButton);
    }

    var downloadActions;
    downloadActions = function () {
      var d = {
        Command: 'DISPLAY_DATA',
        inpcFileId: this.attachId
      };
      OB.Utilities.postThroughHiddenForm('./businessUtility/TabAttachments_FS.html', d);
    };

    var removeActions;
    removeActions = function () {
      var i, length, d = {
        Command: 'DELETE',
        tabId: this.canvas.tabId,
        buttonId: this.canvas.ID,
        recordIds: this.canvas.recordId,
        attachId: this.attachmentId
      },
          canvas = this.canvas;

      isc.confirm(OB.I18N.getLabel('OBUIAPP_ConfirmRemove'), function (clickedOK) {
        if (clickedOK) {
          OB.RemoteCallManager.call('org.openbravo.client.application.window.AttachmentsAH', {}, d, function (response, data, request) {
            canvas.fillAttachments(data.attachments);
          });
        }
      }, {
        title: OB.I18N.getLabel('OBUIAPP_DialogTitle_RemoveAttachment')
      });
    };

    var editDescActions;
    editDescActions = function (fileName) {
      var form, submitbutton, popup, canvas = this.canvas;
      form = isc.DynamicForm.create({
        autoFocus: true,
        fields: [{
          name: 'inpname',
          type: 'hidden',
          value: this.attachmentName
        }, {
          name: 'Command',
          type: 'hidden',
          value: 'EDIT_DESC_OB3'
        }, {
          name: 'buttonId',
          type: 'hidden',
          value: this.canvas.ID
        }, {
          name: 'inpKey',
          type: 'hidden',
          value: this.canvas.recordId
        }, {
          name: 'inpTabId',
          type: 'hidden',
          value: this.canvas.tabId
        }, {
          name: 'inpwindowId',
          type: 'hidden',
          value: this.canvas.windowId
        }, {
          name: 'inpDescription',
          type: 'text',
          title: OB.I18N.getLabel('APRM_FATS_DESCRIPTION'),
          value: this.hLayout.description
        }, {
          name: 'inpAttachId',
          type: 'hidden',
          value: this.attachmentId
        }],
        encoding: 'multipart',
        action: './businessUtility/TabAttachments_FS.html',
        target: "background_target",
        numCols: 4,
        align: 'center',
        height: '30px',
        redraw: function () {},
        theCanvas: this.canvas
      });
      submitbutton = isc.OBFormButton.create({
        title: OB.I18N.getLabel('OBUIAPP_AttachmentSubmit'),
        theForm: form,
        canvas: me,
        click: function () {
          var fileName, form = this.theForm,
              addFunction;
          addFunction = function (clickedOK) {
            if (clickedOK) {
              var hTempLayout = isc.HLayout.create();
              form.theCanvas.addMember(hTempLayout, form.theCanvas.getMembers().size());
              var uploadingFile = isc.Label.create({
                contents: fileName
              });
              var uploading = isc.Label.create({
                className: 'OBLinkButtonItemFocused',
                contents: '    ' + OB.I18N.getLabel('OBUIAPP_AttachmentUploading')
              });
              hTempLayout.addMember(uploadingFile);
              hTempLayout.addMember(uploading);
              var button = form.theCanvas.getForm().view.toolBar.getLeftMember(isc.OBToolbar.TYPE_ATTACHMENTS);
              if (!button) {
                button = form.theCanvas.getForm().view.toolBar.getLeftMember("attachExists");
              }
              button.customState = 'Progress';
              button.resetBaseStyle();
              if (OB.Utilities.currentUploader !== null) {
                var origButton = window[OB.Utilities.currentUploader];
                if (origButton && origButton.resetToolbar) {
                  origButton.resetToolbar();
                }
              }
              OB.Utilities.currentUploader = form.theCanvas.ID;
              form.submitForm();
              form.popup.hide();
            }
          };
          var value = this.theForm.getItem('inpname').getElement().value;
          addFunction(true);
        }
      });
      popup = isc.OBAttachmentsSubmitPopup.create({
        submitButton: submitbutton,
        addForm: form,
        title: OB.I18N.getLabel('OBUIAPP_AttachmentEditDesc')
      });
      form.popup = popup;
      popup.show();
    };

    length = attachments.length;
    for (i = 0; i < attachments.length; i++) {
      var attachment = attachments[i];
      var buttonLayout = isc.HLayout.create();
      var attachmentLabel = isc.Label.create({
        contents: attachment.name,
        className: 'OBNoteListGrid',
        width: '200px',
        height: 20,
        wrap: false
      });
      var creationDate = OB.Utilities.getTimePassedInterval(attachment.age);
      var attachmentBy = isc.Label.create({
        height: 1,
        className: 'OBNoteListGridAuthor',
        width: '200px',
        contents: creationDate + " " + OB.I18N.getLabel('OBUIAPP_AttachmentBy') + " " + attachment.updatedby
      });
      var downloadAttachment = isc.OBLinkButtonItem.create({
        title: '[ ' + OB.I18N.getLabel('OBUIAPP_AttachmentDownload') + ' ]',
        width: '30px',
        attachmentName: attachment.name,
        attachId: attachment.id,
        action: downloadActions
      });
      downloadAttachment.height = 0;
      var removeAttachment = isc.OBLinkButtonItem.create({
        title: '[ ' + OB.I18N.getLabel('OBUIAPP_AttachmentRemove') + ' ]',
        width: '30px',
        attachmentName: attachment.name,
        attachmentId: attachment.id,
        canvas: this,
        action: removeActions
      });


      var editDescription = isc.OBLinkButtonItem.create({
        title: '[ ' + OB.I18N.getLabel('OBUIAPP_AttachmentEditDesc') + ' ]',
        width: '30px',
        attachmentName: attachment.name,
        attachmentId: attachment.id,
        canvas: this,
        action: editDescActions,
        hLayout: buttonLayout
      });
      var description = isc.DynamicForm.create({
        title: 'Description',
        numCols: 1,
        width: '100%',
        canvas: this,
        fields: [{
          name: 'descriptionOBTextAreaItem',
          type: 'OBTextAreaItem',
          showTitle: false,
          layout: this,
          width: '*',
          length: 2000,
          value: attachment.description,
          disabled: true
        }]
      });

      buttonLayout.description = description.fields[0].value;
      buttonLayout.addMember(attachmentLabel);
      buttonLayout.addMember(attachmentBy);
      buttonLayout.addMember(downloadAttachment);
      if (!this.getForm().view.viewForm.readOnly) {
        buttonLayout.addMember(removeAttachment);
      }
      buttonLayout.addMember(editDescription);
      buttonLayout.addMember(description);
      this.addMember(buttonLayout);
    }
  },

  // ensure that the view gets activated
  focusChanged: function () {
    var view = this.getForm().view;
    if (view && view.setAsActiveView) {
      view.setAsActiveView();
    }
    return this.Super('focusChanged', arguments);
  }
});
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use. this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2010-2013 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */

isc.ClassFactory.defineClass('OBViewForm', isc.DynamicForm);

// = OBViewForm =
// The OBViewForm is the Openbravo specific subclass of the Smartclient
// DynamicForm. The properties of the view form are stored in a separate object
// as they are re-used to create the editor in the grid. The properties are added to the viewform at the bottom
// of this file.
OB.ViewFormProperties = {

  // ** {{{ view }}} **
  // The view member contains the pointer to the composite canvas which
  // handles this form
  // and the grid and other related components.
  view: null,
  auxInputs: {},
  hiddenInputs: {},
  sessionAttributes: {},
  dynamicCols: [],
  width: '100%',
  height: '100%',

  showErrorIcons: false,
  showErrorStyle: true,
  autoComplete: true,
  redrawOnDisable: true,

  // ** {{ Layout Settings }} **
  numCols: 4,
  colWidths: ['24%', '24%', '24%', '24%'],

  titleOrientation: 'top',
  titleSuffix: '</b>',
  titlePrefix: '<b>',
  requiredTitleSuffix: ' *</b>',
  requiredRightTitlePrefix: '<b>* ',
  rightTitlePrefix: '<b>',
  rightTitleSuffix: '</b>',

  fieldsByInpColumnName: null,
  fieldsByColumnName: null,

  isNew: false,
  hasChanged: false,

  // is false for forms used in grid editing
  // true for the main form
  isViewForm: false,

  // Name to the first focused field defined in AD
  firstFocusedField: null,

  // Name of the fields shown in status bar
  statusBarFields: [],

  // is set in the OBNoteSectionItem.initWidget
  noteSection: null,

  // is set in the OBLinkedItemSectionItem.initWidget
  linkedItemSection: null,

  // is set in the OBAttachmentsSectionItem.initWidget
  attachmentsSection: null,

  // is set in the OBAuditSectionItem.init
  auditSection: null,

  selectOnFocus: true,

  initWidget: function () {
    this._preventFocusChanges = true;

    // add the obFormProperties to ourselves, the obFormProperties
    // are re-used for inline grid editing
    isc.addProperties(this, this.obFormProperties);

    this.Super('initWidget', arguments);

    delete this._preventFocusChanges;
  },

  getStatusBarFields: function () {
    var i, item, title, refColumnName, targetEntity, value, displayedValue, length = this.statusBarFields.length,
        sourceWindowId, statusBarFields;

    statusBarFields = [
      [],
      [],
      [],
      [],
      [],
      []
    ];

    for (i = 0; i < length; i++) {
      item = this.getItem(this.statusBarFields[i]);
      if (item.statusBarShowIf && item.statusBarShowIf(item, item.getValue(), this, this.getValues()) === false) {
        continue;
      }
      title = item.getTitle();
      sourceWindowId = this.view.standardWindow.windowId;
      refColumnName = item.refColumnName;
      targetEntity = item.targetEntity;
      if (item.canvas) {
        if (item.canvas.noTitle) {
          title = null;
        }
        statusBarFields[0].push(title);
        statusBarFields[1].push(item.canvas);
        statusBarFields[2].push(null);
        statusBarFields[3].push(null);
        statusBarFields[4].push(null);
        statusBarFields[5].push(null);
        continue;
      }
      value = item.getValue();
      displayedValue = item.getValue();
      if (displayedValue !== null && displayedValue !== '') {

        if (item.getDisplayValue()) {
          displayedValue = item.getDisplayValue();
        }

        if (displayedValue === title && typeof item.getValue() === 'boolean') { // Checkbox items return the title as display value
          if (item.getValue()) {
            displayedValue = OB.I18N.getLabel('OBUIAPP_Yes');
          } else {
            displayedValue = OB.I18N.getLabel('OBUIAPP_No');
          }
        }

        // if there is a display field or an identifier field accompanying the
        // status bar field and it has a value then always use that
        // one
        if (item.displayField && this.getValue(item.displayField)) {
          displayedValue = this.getValue(item.displayField);
        } else if (this.getValue(item.name + OB.Constants.FIELDSEPARATOR + OB.Constants.IDENTIFIER)) {
          displayedValue = this.getValue(item.name + OB.Constants.FIELDSEPARATOR + OB.Constants.IDENTIFIER);
        }

        statusBarFields[0].push(title);
        statusBarFields[1].push(displayedValue);
        statusBarFields[2].push(sourceWindowId);
        statusBarFields[3].push(refColumnName);
        statusBarFields[4].push(targetEntity);
        statusBarFields[5].push(value);
      }
    }
    return statusBarFields;
  },

  setHasChanged: function (value) {
    this.hasChanged = value;
    this.view.updateTabTitle();
    if (value && !this.isNew && this.view.statusBar.mode !== 'EDIT') {
      this.view.statusBar.mode = "EDIT";
      this.view.statusBar.setContentLabel(this.view.statusBar.editIcon, 'OBUIAPP_Editing', this.getStatusBarFields());
    }

    if (value) {
      // signal that autosave is needed after this
      this.view.standardWindow.setDirtyEditForm(this);
      this.validateAfterFicReturn = true;
    } else {
      // signal that no autosave is needed after this
      this.view.standardWindow.setDirtyEditForm(null);
    }
  },

  editRecord: function (record, preventFocus, hasChanges, focusFieldName, isLocalTime) {
    var timeFields, ret;
    this.clearValues();
    // if editRecord is called from OBStandardView.editRecord, then the time fields have already
    //   be converted from UTC to local time
    // if editRecord is called from fetchDataReply (ActionMethod.js) then the record comes directly  
    //   from the datasource, so it has to be converted from UTC to local time
    // see issue https://issues.openbravo.com/view.php?id=20684
    if (!isLocalTime) {
      record = OB.Utilities.Date.convertUTCTimeToLocalTime([record], this.fields)[0];
    }

    ret = this.Super('editRecord', arguments);

    // used when clicking on a cell in a grid
    if (!preventFocus && focusFieldName) {
      this.forceFocusedField = focusFieldName;
    }

    this.doEditRecordActions(preventFocus, record._new);

    if (hasChanges) {
      this.setHasChanged(true);
    }

    this.view.setTargetRecordInWindow(record.id);

    return ret;
  },

  doEditRecordActions: function (preventFocus, isNew) {
    delete this.contextInfo;

    this.initializing = true;

    delete this.validateAfterFicReturn;

    // will be recomputed after the initial values
    // FIC call, prevents firefox from incorrectly
    // showing focused style in multiple fields
    if (this.getFocusItem()) {
      this.getFocusItem().hasFocus = false;
      this.getFocusItem().elementBlur();
    }
    this.setFocusItem(null);

    // sometimes if an error occured we stay disabled
    // prevent this
    this.disableForm(false);

    this.setHasChanged(false);

    this.setNewState(isNew);

    // errors are cleared anyway
    delete this.validateAfterFicReturn;

    // focus is done automatically, prevent the focus event if needed
    // the focus event will set the active view
    if (!isNew) {
      // If editing a document set to recent documents
      this.view.setRecentDocument(this.getValues());
    }

    this.ignoreFirstFocusEvent = preventFocus;

    // retrieveinitialvalues does focus and clear of errors
    this.retrieveInitialValues(isNew);

    if (isNew) {
      this.view.statusBar.mode = 'NEW';
      this.view.statusBar.setContentLabel(this.view.statusBar.newIcon, 'OBUIAPP_New');
    }
  },

  editNewRecord: function (preventFocus) {
    this.clearValues();
    var ret = this.Super('editNewRecord', arguments);
    this.doEditRecordActions(preventFocus, true);
    return ret;
  },

  // set parent display info in the record
  setParentDisplayInfo: function () {
    if (this.view.parentProperty) {
      var parentRecord = this.view.getParentRecord();
      if (parentRecord) {
        this.setValue(this.view.parentProperty, parentRecord.id);
        this.setValue(this.view.parentProperty + OB.Constants.FIELDSEPARATOR + OB.Constants.IDENTIFIER, parentRecord[OB.Constants.IDENTIFIER]);
        if (this.getField(this.view.parentProperty) && !this.getField(this.view.parentProperty).valueMap) {
          var valueMap = {};
          this.getField(this.view.parentProperty).valueMap = valueMap;
          valueMap[parentRecord.id] = parentRecord[OB.Constants.IDENTIFIER];
        }
      }
    }
  },

  enableNoteSection: function (enable) {
    if (!this.noteSection) {
      return;
    }
    if (enable) {
      this.noteSection.setRecordInfo(this.view.entity, this.getValue(OB.Constants.ID));
      this.noteSection.collapseSection(true);
      delete this.noteSection.hiddenInForm;
      this.noteSection.refresh();
      this.noteSection.show();
    } else {
      this.noteSection.hiddenInForm = true;
      this.noteSection.hide();
    }
  },

  enableAuditSection: function (enable) {
    var auditSection;
    auditSection = this.auditSection;
    if (!auditSection) {
      return;
    }
    if (enable) {
      delete auditSection.hiddenInForm;
      auditSection.show();
    } else {
      auditSection.collapseSection(false);
      auditSection.hiddenInForm = true;
      auditSection.hide();
    }
  },

  enableLinkedItemSection: function (enable) {
    if (!this.linkedItemSection) {
      return;
    }
    if (enable) {
      this.linkedItemSection.collapseSection(true);
      this.linkedItemSection.setRecordInfo(this.view.entity, this.getValue(OB.Constants.ID));
      delete this.linkedItemSection.hiddenInForm;
      this.linkedItemSection.show();
    } else {
      this.linkedItemSection.hiddenInForm = true;
      this.linkedItemSection.hide();
    }
  },

  enableAttachmentsSection: function (enable) {
    if (!this.attachmentsSection) {
      return;
    }
    if (enable) {
      this.attachmentsSection.collapseSection(true);
      this.attachmentsSection.setRecordInfo(this.view.entity, this.getValue(OB.Constants.ID), this.view.tabId);
      delete this.attachmentsSection.hiddenInForm;
      this.attachmentsSection.show();
    } else {
      this.attachmentsSection.hiddenInForm = true;
      this.attachmentsSection.hide();
    }
  },

  // add the undo buttons to the clickmask so that no save happens when 
  // clicking undo
  showClickMask: function (clickAction, mode, unmaskedTargets) {
    if (!isc.isA.Array(unmaskedTargets)) {
      if (!unmaskedTargets) {
        unmaskedTargets = [];
      } else {
        unmaskedTargets = [unmaskedTargets];
      }
    }
    // the main undo button
    unmaskedTargets.push(this.view.toolBar.getLeftMember('undo'));

    // the row cancel button
    var editRow = this.view.viewGrid.getEditRow();
    if (editRow || editRow === 0) {
      var record = this.view.viewGrid.getRecord(editRow);
      if (record && record.editColumnLayout) {
        unmaskedTargets.push(record.editColumnLayout.cancelButton);
      }
    }
    this.Super('showClickMask', [clickAction, mode, unmaskedTargets]);
  },

  setNewState: function (isNew) {
    // showing the sections will change the focus item
    // restore that
    this.isNew = isNew;
    this.view.statusBar.setNewState(isNew);
    this.view.updateTabTitle();

    this.enableNoteSection(!isNew);
    this.enableLinkedItemSection(!isNew);
    this.enableAttachmentsSection(!isNew);
    this.enableAuditSection(!isNew);

    if (isNew) {
      this.view.statusBar.newIcon.prompt = OB.I18N.getLabel('OBUIAPP_NewIconPrompt');
    } else {
      this.view.statusBar.editIcon.prompt = OB.I18N.getLabel('OBUIAPP_EditIconPrompt');
    }

    // see issue:
    // 16064: Autosave error is triggered when closing a tab, even if the form wasn't touched
    // https://issues.openbravo.com/view.php?id=16064
    // this is inline with current behavior
    // NOTE: changed to reset the edit form when closing the form, so only there
    // so autosave always works except when closing if nothing has changed
    if (isNew) {
      // signal that autosave is needed after this
      this.view.standardWindow.setDirtyEditForm(this);
    }
  },

  computeFocusItem: function (startItem) {
    var items = this.getItems(),
        nextItem, itemsLength = items.length,
        item, i;

    var errorFld = this.getFirstErrorItem();
    if (!startItem && errorFld && errorFld.isFocusable(true)) {
      // get rid of this one, to not set the focus back to this field
      delete this.forceFocusedField;

      this.setFocusItem(errorFld);
      return;
    }

    if (!startItem && this.forceFocusedField) {
      item = this.getItem(this.forceFocusedField);
      delete this.forceFocusedField;
      if (item && item.isFocusable(true)) {
        this.setFocusItem(item);
        return;
      }
    } else {
      delete this.forceFocusedField;
    }

    if (!startItem && this.firstFocusedField) {
      item = this.getItem(this.firstFocusedField);
      if (item && item.isFocusable(true)) {
        this.setFocusItem(item);
        if (this.parentElement) {
          this.parentElement.delayCall('scrollTo', [null, this.getTop()], 100);
        }
        return;
      }
    }

    if (items) {
      if (startItem) {
        for (i = 0; i < itemsLength; i++) {
          item = items[i];
          if (!nextItem && item === startItem) {
            nextItem = true;
          } else if (nextItem && !isc.isA.SectionItem(item) && item && item.isFocusable(true)) {
            this.setFocusItem(item);
            return;
          }
        }
      }

      // not found retry the item we have
      if (startItem && startItem.isFocusable(true)) {
        this.setFocusItem(startItem);
      } else {
        // not found start from new again
        for (i = 0; i < itemsLength; i++) {
          item = items[i];
          if (item.isFocusable(true)) {
            this.setFocusItem(item);
            return;
          }
        }
      }
    }
  },

  // sets the focus in the current focusitem 
  // if it is not focusable then a next item is 
  // searched for
  setFocusInForm: function () {
    if (!this.view || !this.view.isActiveView()) {
      return;
    }

    var focusItem = this.getFocusItem();
    // an edit form in a grid is not
    // drawn it seems...
    if ((!this.grid && !this.isDrawn()) && !this.isVisible()) {
      // autofocus will do it for us
      return;
    }

    if (focusItem && focusItem.isFocusable()) {
      focusItem.focusInItem();
      this.view.lastFocusedItem = focusItem;
    } else {
      // find a new one
      this.computeFocusItem(focusItem);
      if (this.getFocusItem() !== focusItem && this.getFocusItem()) {
        focusItem.focusInItem();
        this.view.lastFocusedItem = focusItem;
      }
    }
  },

  selectFocusItemValue: function (delayCall) {
    if (!this.getFocusItem() || !this.view.isActiveView()) {
      return;
    }
    // if not explicitly set to false, select its value
    // or if do initial select on focus
    if (this.getFocusItem().selectOnFocus !== false || this.getFocusItem().doInitialSelectOnFocus) {
      if (delayCall || isc.Browser.isIE) {
        this.getFocusItem().delayCall('selectValue', [], 100);
      } else {
        this.getFocusItem().selectValue();
      }
    }
  },

  getFieldFromInpColumnName: function (inpColumnName) {
    var i, length;

    if (!this.fieldsByInpColumnName) {
      var localResult = [],
          fields = this.getFields();
      length = fields.length;
      for (i = 0; i < length; i++) {
        if (fields[i].inpColumnName) {
          localResult[fields[i].inpColumnName.toLowerCase()] = fields[i];
        }
      }
      this.fieldsByInpColumnName = localResult;
    }
    return this.fieldsByInpColumnName[inpColumnName.toLowerCase()];
  },

  getFieldFromColumnName: function (columnName) {
    var i, length;
    if (!this.fieldsByColumnName) {
      var localResult = [],
          fields = this.getFields();

      length = fields.length;

      for (i = 0; i < fields.length; i++) {
        if (fields[i].columnName) {
          localResult[fields[i].columnName.toLowerCase()] = fields[i];
        }
      }
      this.fieldsByColumnName = localResult;
    }
    return this.fieldsByColumnName[columnName.toLowerCase()];
  },

  getFieldFromFieldName: function (fieldName) {
    var i, length, localResult, fields;
    if (!this.fieldsByFieldName) {
      localResult = {};
      fields = this.getFields();
      length = fields.length;
      for (i = 0; i < fields.length; i++) {
        if (fields[i].name) {
          localResult[fields[i].name] = fields[i];
        }
      }
      this.fieldsByFieldName = localResult;
    }
    return this.fieldsByFieldName[fieldName];
  },

  setFields: function () {
    var i, item, length;

    // is used in various places, prevent focus and scroll events
    this._preventFocusChanges = true;
    this.Super('setFields', arguments);
    delete this._preventFocusChanges;
    this.fieldsByInpColumnName = null;
    this.fieldsByColumnName = null;

    length = this.getItems().length;
    for (i = 0; i < length; i++) {
      item = this.getItem(i);
      if (item && item.setSectionItemInContent) {
        item.setSectionItemInContent(this);
      }
    }

  },

  retrieveInitialValues: function (isNew) {
    var parentId = this.view.getParentId(),
        i, fldNames = [],
        requestParams, allProperties, parentColumn, me = this,
        mode, length = this.getFields().length,
        gridVisibleProperties = [],
        len;

    this.setParentDisplayInfo();

    // note also in this case initial values are passed in as in case of grid
    // editing the unsaved/error values from a previous edit session are maintained
    allProperties = this.view.getContextInfo(false, true, false, true);

    if (isNew) {
      mode = 'NEW';
    } else {
      mode = 'EDIT';
    }

    requestParams = {
      MODE: mode,
      PARENT_ID: parentId,
      TAB_ID: this.view.tabId,
      ROW_ID: this.getValue(OB.Constants.ID)
    };

    if (parentId && isNew && this.view.parentProperty) {
      parentColumn = this.view.getPropertyDefinition(this.view.parentProperty).inpColumn;
      requestParams[parentColumn] = parentId;
    }

    if (this.view && this.view.viewGrid && this.view.viewGrid.fields) {
      gridVisibleProperties.push('id');
      len = this.view.viewGrid.fields.length;
      for (i = 0; i < len; i++) {
        if (this.view.viewGrid.fields[i].name[0] !== '_') {
          gridVisibleProperties.push(this.view.viewGrid.fields[i].name);
        }
      }
      allProperties._gridVisibleProperties = gridVisibleProperties;
    }


    allProperties._entityName = this.view.entity;

    // only put the visible field names in the call
    for (i = 0; i < length; i++) {
      if (this.getFields()[i].inpColumnName) {
        fldNames.push(this.getFields()[i].inpColumnName);
      }
    }
    allProperties._visibleProperties = fldNames;

    this.disableForm(true);

    // note that only the fields with errors are validated anyway
    this.validateAfterFicReturn = true;

    // store grid editing information which can be used when the fic returns
    // this is needed as after the fic return the edit row may have changed.
    var gridEditInformation = this.view.viewGrid.getEditForm() ? {
      grid: this.view.viewGrid,
      editRow: this.view.viewGrid.getEditRow()
    } : null;

    this.inFicCall = true;

    OB.RemoteCallManager.call('org.openbravo.client.application.window.FormInitializationComponent', allProperties, requestParams, function (response, data, request) {

      // no focus item found, focus on the body of the grid
      // this makes sure that keypresses end up in the 
      // bodyKeyPress method
      if (!me.getFocusItem() || !me.getFocusItem().isFocusable()) {
        me.view.viewGrid.body.focus();
      }

      me.processFICReturn(response, data, request, gridEditInformation);

      if (!this.grid || !gridEditInformation || this.grid.getEditRow() !== gridEditInformation.editRow) {
        // remember the initial values, if we are still editing the same row
        me.rememberValues();
      }
      me.initializing = false;

      // do here because during initial form drawing
      // fields get blurred and will show an error
      me.clearErrors(true);

      // only compute a new focus item if the form is active
      if (me.view.isActiveView()) {
        me.computeFocusItem();
      }

      // if the focus item is not really enabled
      // then find a new one, even if the form is not active
      if (me.getFocusItem() && !me.getFocusItem().isFocusable(true)) {
        me.computeFocusItem(me.getFocusItem());
      }
      // note the focus is set in the field when the FIC call
      // returns
      // at this point select the focused value      
      if (me.getFocusItem()) {
        me.setFocusInForm();
      }
    });
  },

  rememberValues: function () {
    var i, flds = this.getFields(),
        length = flds.length;
    this.Super('rememberValues', arguments);

    // also remember the valuemaps
    for (i = 0; i < length; i++) {
      if (flds[i].valueMap) {
        //This ensures that the valueMap of the createdBy and updatedBy fields will be properly initialized when adding a new record in form view
        //See issue #19843
        if (isc.isA.emptyObject(flds[i].valueMap) && (flds[i].name === 'createdBy' || flds[i].name === 'updatedBy') && flds[i].form.getValue(flds[i].displayField)) {
          flds[i].valueMap = {};
          flds[i].valueMap[flds[i].form.getValue(flds[i].name)] = flds[i].form.getValue(flds[i].displayField);
          flds[i]._rememberedValueMap = flds[i].valueMap;
        } else {
          flds[i]._rememberedValueMap = flds[i].valueMap;
        }
      }
    }
  },

  // used in grid editing, when an edit is discarded then the canFocus needs to be
  // reset
  resetCanFocus: function () {
    var i, length = this.getItems().length;
    for (i = 0; i < length; i++) {
      delete this.getItems()[i].canFocus;
    }
  },

  processFICReturn: function (response, data, request, gridEditInformation) {
    var length, modeIsNew = request.params.MODE === 'NEW',
        noErrors, errorSolved;

    delete this.contextInfo;

    // needs to be recomputed as for grid editing the fields
    // are reset for every edit session
    this.fieldsByColumnName = null;

    // TODO: an error occured, handles this much better...
    if (!data || !data.columnValues) {
      this.disableForm(false);
      this.validate();
      delete this.inFicCall;
      return;
    }

    if (data._readOnly || this.view.readOnly) {
      this.readOnly = true;
    } else {
      this.readOnly = false;
    }

    var columnValues = data.columnValues,
        calloutMessages = data.calloutMessages,
        auxInputs = data.auxiliaryInputValues,
        prop, value, i, j, dynamicCols = data.dynamicCols,
        sessionAttributes = data.sessionAttributes,
        editValues, item, section, retHiddenInputs = data.hiddenInputs;


    // apparently sometimes an empty string is returned
    if (calloutMessages && calloutMessages.length > 0 && calloutMessages[calloutMessages.length - 1].text !== '') {
      // TODO: check as what type should call out messages be displayed
      this.view.messageBar.setMessage(isc.OBMessageBar[calloutMessages[calloutMessages.length - 1].severity], null, calloutMessages[calloutMessages.length - 1].text);
    }

    // edit row has changed when returning, don't update the form anymore
    if (this.grid && gridEditInformation && this.grid.getEditRow() !== gridEditInformation.editRow) {
      if (columnValues) {
        for (prop in columnValues) {
          if (columnValues.hasOwnProperty(prop)) {
            this.setColumnValuesInEditValues(prop, columnValues[prop], gridEditInformation);
          }
        }
      }
      editValues = gridEditInformation.grid.getEditValues(gridEditInformation.editRow);
      if (editValues && editValues.actionAfterFicReturn) {
        OB.Utilities.callAction(editValues.actionAfterFicReturn);
        gridEditInformation.grid.setEditValue(gridEditInformation.editRow, 'actionAfterFicReturn', null, true, true);
      }
      return;
    }

    if (columnValues) {
      for (prop in columnValues) {
        if (columnValues.hasOwnProperty(prop)) {
          this.processColumnValue(prop, columnValues[prop], gridEditInformation);
        }
      }
    }

    if (modeIsNew || request.params.MODE === 'EDIT') {
      //If a new record is created, or an existing one is opened,
      //the existing hiddenInputs (which correspond to a different record) should be deleted
      this.hiddenInputs = {};
    } else if (retHiddenInputs) {
      for (prop in retHiddenInputs) {
        if (retHiddenInputs.hasOwnProperty(prop)) {
          this.hiddenInputs[prop] = retHiddenInputs[prop];
        }
      }
    }

    if (this.attachmentsSection) {
      this.attachmentsSection.fillAttachments(data.attachments);
    }

    // We will show the note count if it has been calculated and is different from 0
    if (this.noteSection) {
      if (data.noteCount) {
        this.noteSection.setNoteCount(data.noteCount);
      } else if (request.params.MODE === 'EDIT') {
        this.noteSection.setNoteCount(0);
      }
    }
    if (auxInputs) {
      for (prop in auxInputs) {
        if (auxInputs.hasOwnProperty(prop)) {
          value = typeof auxInputs[prop].value !== 'undefined' ? auxInputs[prop].value : '';
          this.setValue(prop, value);
          this.auxInputs[prop] = value;
        }
      }
    }

    if (sessionAttributes) {
      this.sessionAttributes = sessionAttributes;
    }

    if (dynamicCols) {
      this.dynamicCols = dynamicCols;
    }

    // grid editing    
    if (this.grid && gridEditInformation && this.grid.setEditValues && this.grid.getEditRow() === gridEditInformation.editRow) {
      editValues = gridEditInformation.grid.getEditValues(gridEditInformation.editRow);

      // keep it as it is overwritten by the setEditValues
      var tmpActionAfterFic = null;
      if (editValues && editValues.actionAfterFicReturn) {
        tmpActionAfterFic = editValues.actionAfterFicReturn;
      }
      this.grid.setEditValues(this.grid.getEditRow(), this.getValues(), true);
      this.grid.storeUpdatedEditorValue(true);
      if (tmpActionAfterFic) {
        this.grid.setEditValue(gridEditInformation.editRow, 'actionAfterFicReturn', tmpActionAfterFic, true, true);
      }
    }

    // note onFieldChanged uses the form.readOnly set above
    this.onFieldChanged(this);

    // on field changed may have made the focused item non-editable
    // this is handled in disableForm restore focus item's call
    this.disableForm(false);

    length = this.getFields().length;

    //Updates the visibility of the tabs before they are shown to the client
    this.view.updateSubtabVisibility();

    if (this.validateAfterFicReturn) {
      delete this.validateAfterFicReturn;
      // only validate the fields which have errors or which have changed
      noErrors = true;

      for (i = 0; i < length; i++) {
        if (this.getFields()[i]._changedByFic || this.hasFieldErrors(this.getFields()[i].name)) {
          errorSolved = this.getFields()[i].validate();
          noErrors = noErrors && errorSolved;
          if (errorSolved && this.grid) {
            this.grid.clearFieldError(this.grid.getEditRow(), this.getFields()[i].name);
          }
        }
      }
      if (this.grid && noErrors) {
        this.grid.clearRowErrors(this.grid.getEditRow());
        this.grid.refreshRow(this.grid.getEditRow());
      }
    }

    for (i = 0; i < length; i++) {
      delete this.getFields()[i]._changedByFic;
    }

    // refresh WidgetInForm fields if present (as they might depend on data of current record) 
    for (i = 0; i < length; i++) {
      var locField = this.getFields()[i];
      if (locField.hasOwnProperty("widgetClassId")) {
        locField.refresh();
      }
    }

    this.redraw();

    delete this.inFicCall;
    this.view.toolBar.updateButtonState(true);
    if (request.params.MODE === 'EDIT') {
      this.view.statusBar.mode = 'VIEW';
      this.view.statusBar.setContentLabel(null, null, this.getStatusBarFields());
    }

    if (this.callSaveAfterFICReturn) {
      delete this.callSaveAfterFICReturn;
      this.saveRow(true);
    }
    if (this.expandAttachments) {
      this.getItem('_attachments_').expandSection();
      delete this.expandAttachments;
    }
    if (editValues && editValues.actionAfterFicReturn) {
      OB.Utilities.callAction(editValues.actionAfterFicReturn);
      delete editValues.actionAfterFicReturn;
    }

    if (data.jscode) {
      length = data.jscode.length;
      for (i = 0; i < length; i++) {
        eval(data.jscode[i]);
      }
    }
  },

  // called during the FIC call to prevent key events and to restor
  // flags on formitems
  disableForm: function (state) {
    var previousAllItemsDisabled = this.allItemsDisabled || false,
        i, length;
    this.allItemsDisabled = state;

    if (previousAllItemsDisabled !== this.allItemsDisabled) {
      if (this.getFocusItem()) {
        if (this.allItemsDisabled) {
          this.disableKeyboardEvents(state, null, true);
        } else {
          this.disableKeyboardEvents(state, null, true);
          // reset the canfocus
          length = this.getFields().length;
          for (i = 0; i < length; i++) {
            delete this.getFields()[i].canFocus;
          }
          delete this.ignoreFirstFocusEvent;
        }
      } else {
        this.view.viewGrid.refreshEditRow();
      }
    }
  },

  refresh: function () {
    var criteria = {
      id: this.getValue(OB.Constants.ID)
    };
    this.fetchData(criteria);
  },

  processColumnValue: function (columnName, columnValue, gridEditInformation) {
    // Modifications in this method should go also in setColumnValuesInEditValues because both almost do the same
    var typeInstance;
    var assignValue;
    var assignClassicValue;
    var isDate, isDateTime, isImage, i, valueMap = {},
        oldValue, field = this.getFieldFromColumnName(columnName),
        entries = columnValue.entries;
    // not a field on the form, probably a datasource field
    var propDef = this.view.getPropertyDefinitionFromDbColumnName(columnName);
    var prop = propDef ? propDef.property : null;
    var id, identifier;
    if (!field) {
      if (!propDef) {
        return;
      }
      field = this.getDataSource().getField(prop);
      if (!field) {
        field = {
          name: propDef.property,
          type: propDef.type
        };
      }
    }

    // ignore the id
    if (prop === OB.Constants.ID) {
      return;
    }

    // note field can be a datasource field, see above, in that case
    // don't set the entries    
    if (field.form && entries && field.setEntries) {
      field.setEntries(entries);
    }

    if (gridEditInformation && field.valueMap) {
      // store the valuemap in the edit values so it can be retrieved later
      // when the form is rebuild
      gridEditInformation.grid.setEditValue(gridEditInformation.editRow, prop + '._valueMap', field.valueMap, true, true);
    }

    // Adjust to formatting if exists value and classicValue. 
    oldValue = this.getValue(field.name);
    if (field.typeInstance && field.typeInstance.parseInput && field.typeInstance.editFormatter) {
      assignValue = field.typeInstance.parseInput(field.typeInstance.editFormatter(columnValue.value));
      assignClassicValue = field.typeInstance.editFormatter(field.typeInstance.parseInput(columnValue.classicValue));
    } else {
      assignValue = columnValue.value;
      assignClassicValue = columnValue.classicValue;
    }

    if (columnValue.value && (columnValue.value === 'null' || columnValue.value === '')) {
      // handle the case that the FIC returns a null value as a string
      // should be repaired in the FIC
      // note: do not use clearvalue as this removes the value from the form
      this.setItemValue(field.name, null);
    } else if (columnValue.value || columnValue.value === 0 || columnValue.value === false) {
      isDate = field.type && (isc.SimpleType.getType(field.type).inheritsFrom === 'date' || isc.SimpleType.getType(field.type).inheritsFrom === 'time');
      isDateTime = field.type && isc.SimpleType.getType(field.type).inheritsFrom === 'datetime';
      isImage = field.type && isc.SimpleType.getType(field.type).inheritsFrom === 'image';
      if (isDate) {
        this.setItemValue(field.name, isc.Date.parseSchemaDate(columnValue.value));
        if (field.textField) {
          delete field.textField._textChanged;
        }
      } else if (isDateTime) {
        this.setItemValue(field.name, isc.Date.parseStandardDate(columnValue.value));
        if (field.textField) {
          delete field.textField._textChanged;
        }
      } else if (isImage) {
        //calls setValue to handle buttons display for read-only windows
        this.setValue(field.name, assignValue);
        if (field.rowSpan) {
          this.rowSpan = field.rowSpan;
        }
        if (field.colSpan) {
          this.colSpan = field.colSpan;
        }
      } else if (columnValue.hasDateDefault) {
        this.setItemValue(field.name, columnValue.classicValue);
      } else {

        // set the identifier/display field if the identifier is passed also
        // note that when the field value is changed by the user the setting 
        // of the identifier field is done in the form item
        identifier = columnValue.identifier;
        if (!identifier && field.valueMap) {
          identifier = field.valueMap[columnValue.value];
        }
        if (identifier) {
          if (field.setEntry) {
            field.setEntry(columnValue.value, identifier);
          } else {
            if (!field.valueMap) {
              field.valueMap = {};
            }
            field.valueMap[columnValue.value] = identifier;
          }
          if (field.form) {
            // only set the display field name if the field does not have its own
            // datasource and the field displayfield contains a dot, otherwise 
            // it is a direct field
            if (field.displayField && field.displayField.contains(OB.Constants.FIELDSEPARATOR) && !this.getField(field.displayField) && !field.optionDataSource && !field.getDataSource()) {
              field.form.setItemValue(field.displayField, identifier);
            } else if (!field.displayField) {
              field.form.setItemValue(field.name + OB.Constants.FIELDSEPARATOR + OB.Constants.IDENTIFIER, identifier);
            }
          }
        }

        this.setItemValue(field.name, assignValue);
      }
    } else {
      // note: do not use clearvalue as this removes the value from the form
      // which results it to not be sent to the server anymore
      isImage = field.type && isc.SimpleType.getType(field.type).inheritsFrom === 'image';
      if (isImage) {
        //calls setValue to handle buttons display for read-only windows
        this.setValue(field.name, null);
        if (field.rowSpan) {
          this.rowSpan = field.rowSpan;
        }
        if (field.colSpan) {
          this.colSpan = field.colSpan;
        }
      }
      this.setItemValue(field.name, null);
      if (this.getValue(field.name + OB.Constants.FIELDSEPARATOR + OB.Constants.IDENTIFIER)) {
        this.setItemValue(field.name + OB.Constants.FIELDSEPARATOR + OB.Constants.IDENTIFIER, null);
      }
    }

    if (field.compareValues && !field.compareValues(oldValue, this.getValue(field.name))) {
      field._changedByFic = true;
    }

    // store the textualvalue so that it is correctly send back to the server
    typeInstance = isc.SimpleType.getType(field.type);
    if ((columnValue.classicValue || columnValue.classicValue === '') && typeInstance.decSeparator) {
      this.setTextualValue(field.name, assignClassicValue, typeInstance);
    }
  },

  setColumnValuesInEditValues: function (columnName, columnValue, gridEditInformation) {
    // Modifications in this method should go also in processColumnValue because both almost do the same
    var assignClassicValue, typeInstance, length, isDate;

    // no editvalues even anymore, go away
    if (!gridEditInformation) {
      return;
    }

    var id, identifier, field = this.getFieldFromColumnName(columnName),
        i, valueMap = {},
        entries = columnValue.entries;
    var prop = this.view.getPropertyFromDBColumnName(columnName);

    // ignore the id
    if (prop === OB.Constants.ID) {
      return;
    }

    if (entries) {
      length = entries.length;
      for (i = 0; i < length; i++) {
        id = entries[i][OB.Constants.ID] || '';
        identifier = entries[i][OB.Constants.IDENTIFIER] || '';
        valueMap[id] = identifier;
      }
      gridEditInformation.grid.setEditValue(gridEditInformation.editRow, prop + '._valueMap', valueMap, true, true);
    }

    if (columnValue.value && (columnValue.value === 'null' || columnValue.value === '')) {
      // handle the case that the FIC returns a null value as a string
      // should be repaired in the FIC
      // note: do not use clearvalue as this removes the value from the form
      gridEditInformation.grid.setEditValue(gridEditInformation.editRow, prop, null, true, true);
    } else if (columnValue.value || columnValue.value === 0 || columnValue.value === false) {
      isDate = field && field.type && (isc.SimpleType.getType(field.type).inheritsFrom === 'date' || isc.SimpleType.getType(field.type).inheritsFrom === 'datetime');
      if (isDate) {
        gridEditInformation.grid.setEditValue(gridEditInformation.editRow, prop, isc.Date.parseSchemaDate(columnValue.value), true, true);
      } else {

        // set the identifier/display field if the identifier is passed also
        // note that when the field value is changed by the user the setting 
        // of the identifier field is done in the form item
        identifier = columnValue.identifier;
        if (!identifier && valueMap) {
          identifier = valueMap[columnValue.value];
        }
        if (identifier) {
          gridEditInformation.grid.setEditValue(gridEditInformation.editRow, prop + OB.Constants.FIELDSEPARATOR + OB.Constants.IDENTIFIER, identifier, true, true);
        }
        gridEditInformation.grid.setEditValue(gridEditInformation.editRow, prop, columnValue.value, true, true);
      }
    } else {
      // note: do not use clearvalue as this removes the value from the form
      // which results it to not be sent to the server anymore
      gridEditInformation.grid.setEditValue(gridEditInformation.editRow, prop, null, true, true);
    }

    if (!field) {
      // Look in the complete fields, the column might be hidden
      field = this.grid.getFieldFromColumnName(columnName);
    }

    // store the textualvalue so that it is correctly send back to the server
    if (field) {
      // Adjust to formatting if exists value and classicValue.
      assignClassicValue = (field.typeInstance && field.typeInstance.parseInput && field.typeInstance.editFormatter) ? field.typeInstance.editFormatter(field.typeInstance.parseInput(columnValue.classicValue)) : columnValue.classicValue;
      typeInstance = isc.SimpleType.getType(field.type);
      if ((columnValue.classicValue || columnValue.classicValue === '') && typeInstance.decSeparator) {
        this.setTextualValue(field.name, assignClassicValue, typeInstance, gridEditInformation);
      }
    }
  },

  // note textValue is in user format using users decimal and group separator
  setTextualValue: function (fldName, textValue, type, gridEditInformation) {
    if (!textValue || textValue.trim() === '') {
      textValue = '';
    } else {
      textValue = OB.Utilities.Number.OBMaskedToOBPlain(textValue, type.decSeparator, type.groupSeparator);
      textValue = textValue.replace(type.decSeparator, '.');
    }

    this.setValue(fldName + '_textualValue', textValue);

    if (gridEditInformation) {
      gridEditInformation.grid.setEditValue(gridEditInformation.editRow, fldName + '_textualValue', textValue, true, true);
    } else if (this.grid && this.grid.isEditing()) {
      this.grid.setEditValue(this.grid.getEditRow(), fldName + '_textualValue', textValue, true, true);
    }
  },

  // calls setValue and the onchange handling
  setItemValue: function (item, value) {
    var currentValue, view, isGridItem, completeFieldsLength, i, undef;

    if (isc.isA.String(item)) {

      // not an item, set and bail
      if (!this.getField(item)) {
        // It might be a column that is not being displayed in the grid
        if (!this.view.isShowingForm && this.grid) {
          // check if the item is included in the complete fields of the grid
          // see issue https://issues.openbravo.com/view.php?id=21375
          isGridItem = false;
          completeFieldsLength = this.grid.completeFields;
          for (i = 0; i < completeFieldsLength; i++) {
            if (item === this.grid.completeFields[i].name) {
              isGridItem = true;
              break;
            }
          }
          if (isGridItem) {
            this.grid.setEditValue(this.grid.getEditRow(), item, value);
          }
        }
        this.setValue(item, value);
        return;
      }
      item = this.getField(item);
    }
    currentValue = item.getValue();

    // no change go away
    if (currentValue !== undef && item.compareValues(value, currentValue)) {
      // Force setElemntValue even there is no change to show new possible values
      // in field.valueMap (issue #18957)
      item.setElementValue(item.mapValueToDisplay(value));

      return;
    }

    if (this.grid) {
      this.grid.setEditValue(this.grid.getEditRow(), item.name, value);
    }

    this.setValue(item, value);

    // fire any new callouts
    if (this.view) {
      view = this.view;
    } else if (this.grid && this.grid.view) {
      view = this.grid.view;
    }

    if (view && OB.OnChangeRegistry.hasOnChange(view.tabId, item)) {
      OB.OnChangeRegistry.call(view.tabId, item, view, this, view.viewGrid);
    }
  },

  // called explicitly onblur and when non-editable fields change
  handleItemChange: function (item) {
    var i, length, tabId, view;

    // is used to prevent infinite loops during save
    delete this.saveFocusItemChanged;

    delete this.contextInfo;

    if (item._hasChanged) {
      this.itemChangeActions(item);

      this.view.updateSubtabVisibility();

      if (!this.isNew) {
        this.view.statusBar.mode = "EDIT";
        this.view.statusBar.setContentLabel(this.view.statusBar.editIcon, 'OBUIAPP_Editing', this.getStatusBarFields());
      }

      this.onFieldChanged(item.form, item, item.getValue());

      if (this.view) {
        view = this.view;
      } else if (this.grid && this.grid.view) {
        view = this.grid.view;
      }

      if (view && OB.OnChangeRegistry.hasOnChange(view.tabId, item)) {
        OB.OnChangeRegistry.call(view.tabId, item, view, this, view.viewGrid);
      } else {
        // call the classic callout if there
        length = this.dynamicCols.length;
        for (i = 0; i < length; i++) {
          if (this.dynamicCols[i] === item.inpColumnName) {
            item._hasChanged = false;
            this.inFicCall = true;
            this.doChangeFICCall(item);
            return true;
          }
        }
      }

      if (this.getFocusItem() && !this.getFocusItem().isFocusable(true)) {
        this.computeFocusItem(this.getFocusItem());
        this.setFocusInForm();
      }
    }

    item._hasChanged = false;
  },

  setDisabledWhenStillInFIC: function () {
    if (this.inFicCall) {
      this.disableForm(true);
    }
  },

  // note item can be null, is also called when the form is re-shown
  // to recompute combos
  // if preserveGridEditing is set to true, the isEditingGrid flag will be marked when the FIC processing ends
  // this is used in case the doChangeFICCall is triggered by an action which unwillingly ends the grid editing early
  doChangeFICCall: function (item, preserveGridEditing) {
    var parentId = null,
        me = this,
        requestParams, allProperties = this.view.getContextInfo(false, true, false, true);
    if (this.view.parentProperty) {
      parentId = this.view.getParentId();
    }
    this.setParentDisplayInfo();

    requestParams = {
      MODE: 'CHANGE',
      PARENT_ID: parentId,
      TAB_ID: this.view.tabId,
      ROW_ID: this.getValue(OB.Constants.ID)
    };
    if (item) {
      requestParams.CHANGED_COLUMN = item.inpColumnName;
    }
    allProperties._entityName = this.view.entity;

    // disable with a delay to allow the focus to be moved to a new field
    // before disabling
    // only do this if there is no popup currently
    if (!this.view.standardWindow.inAutoSaveConfirmation) {
      this.delayCall('setDisabledWhenStillInFIC', [true], 10);
    }

    // store grid editing information which can be used when the fic returns
    // this is needed as after the fic return the edit row may have changed.
    var gridEditInformation = this.view.viewGrid.isEditing() ? {
      grid: this.view.viewGrid,
      editRow: this.view.viewGrid.getEditRow()
    } : null;

    OB.RemoteCallManager.call('org.openbravo.client.application.window.FormInitializationComponent', allProperties, requestParams, function (response, data, request) {

      me.processFICReturn(response, data, request, gridEditInformation);

      // compute the focus item after the fic has been done
      // and fields have become visible
      if (me.doFocusInNextItemAfterFic) {
        me.focusInNextItem(me.doFocusInNextItemAfterFic);
        delete me.doFocusInNextItemAfterFic;
      } else if (!me.forceFocusedField) {
        // don't set the focus in this case, this happens
        // when moving to a new row in grid editing
        if (me.getFocusItem()) {
          me.setFocusInForm();
        }
      }
      if (preserveGridEditing) {
        me.view.isEditingGrid = true;
        me.view.toolBar.updateButtonState(true);
      }
    });
    this.view.toolBar.updateButtonState(true);
  },

  itemChanged: function (item, newValue) {
    this.itemChangeActions(item);
  },

  // these actions are done when the user types in a field
  // in contrast to other actions which are done at blur
  // see: handleItemChange
  itemChangeActions: function (item) {
    var i = 0;
    // special case, item change is called when the inline form is being hidden
    if (!this.view.isShowingForm && !this.view.isEditingGrid) {
      return;
    }

    // remove the message
    this.setHasChanged(true);
    this.view.messageBar.hide();
    this.view.toolBar.updateButtonState(true, true);
  },

  // make sure that any field errors also appear in the grid
  setFieldErrors: function (itemName, msg, display) {
    this.Super('setFieldErrors', arguments);
    if (this.grid && this.view.isEditingGrid) {
      this.grid.setFieldError(this.grid.getEditRow(), itemName, msg, !display);
    }
  },

  resetForm: function () {
    this.resetValues();
    this.clearErrors(true);
    this.setHasChanged(false);
  },

  undo: function () {
    var i, flds = this.getFields(),
        length = flds.length,
        doClose = !this.hasChanged;

    if (doClose) {
      this.doClose();
      return;
    }

    // also restore the valuemaps
    for (i = 0; i < length; i++) {
      if (flds[i]._rememberedValueMap) {
        flds[i].valueMap = flds[i]._rememberedValueMap;
      }
    }

    this.view.messageBar.hide();
    this.resetValues();
    this.setHasChanged(false);
    if (this.isNew) {
      this.setNewState(this.isNew);
    } else {
      this.view.statusBar.mode = 'VIEW';
      this.view.statusBar.setContentLabel(null, null, this.getStatusBarFields());
    }
    this.view.toolBar.updateButtonState(true);
  },

  doClose: function () {
    this.view.switchFormGridVisibility();
    this.view.messageBar.hide();
    if (this.isNew) {
      this.view.refreshChildViews();
    }

    if (this.view.directNavigation) {
      // direct navigation opens form view, set message in toolbar when switching 
      // back to grid
      this.view.viewGrid.setSingleRecordFilterMessage();
    }

    this.view.standardWindow.setDirtyEditForm(null);
  },

  autoSave: function () {
    if (this.isViewForm) {
      this.saveRow();
    } else {
      // grid editing, forward to the grid
      this.view.viewGrid.autoSave();
    }
  },

  // always let the saveRow callback handle the error
  saveEditorReply: function (response, data, request) {
    var form, isNewRecord;
    form = request.editor.view.isShowingForm ? request.editor.view.viewForm : request.editor.view.viewGrid.getEditForm();
    isNewRecord = form === null ? false : form.isNew;
    if (request.editor && request.editor.view && isNewRecord) {
      delete request.editor.view._savingNewRecord;
    }
    return true;
  },

  // Note: saveRow is not called in case of grid editing
  // there the save call is done through the grid saveEditedValues
  // function
  saveRow: function () {
    var savingNewRecord = this.isNew,
        storedFocusItem, i, length, flds, form = this,
        ficCallDone, record, recordIndex, callback, viewsNotToRefresh;

    if (this.getFocusItem()) {
      storedFocusItem = this.getFocusItem();
    }

    // store the value of the current focus item
    if (this.getFocusItem() && this.saveFocusItemChanged !== this.getFocusItem()) {
      this.getFocusItem().blur(this, this.getFocusItem());
      // prevent infinite loops
      this.saveFocusItemChanged = this.getFocusItem();
    } else {
      delete this.saveFocusItemChanged;
    }

    record = form.view.viewGrid.getSelectedRecord();

    // note record does not have to be set in case new and no
    // previously selected record
    recordIndex = (record ? form.view.viewGrid.getRecordIndex(record) : -1);

    form.isSaving = true;

    // remove the error message if any
    if (this.view.messageBar.type === isc.OBMessageBar.TYPE_ERROR) {
      this.view.messageBar.hide();
    }

    callback = function (resp, data, req) {
      var index1, index2, view = form.view,
          localRecord, status = resp.status,
          sessionProperties, keepSelection;

      if (this.hasOwnProperty('previousExplicitOffline')) {
        isc.Offline.explicitOffline = this.previousExplicitOffline;
        delete this.previousExplicitOffline;
      }

      // if no recordIndex then select explicitly
      if (recordIndex === -1) {
        var id = form.getValue('id');
        record = view.viewGrid.data.find('id', id);
        recordIndex = view.viewGrid.data.indexOf(record);
      }

      // not in the filter, insert the record in the cachedata so it will be made visible
      if (status === isc.RPCResponse.STATUS_SUCCESS && recordIndex === -1) {
        var visibleRows = view.viewGrid.body.getVisibleRows();
        if (visibleRows[0] !== -1) {
          view.viewGrid.addToCacheData(data, visibleRows[0]);
          recordIndex = visibleRows[0];
        }
      }

      if (recordIndex || recordIndex === 0) {
        // if this is not done the selection gets lost
        localRecord = view.viewGrid.data.get(recordIndex);
        if (localRecord) {
          localRecord[view.viewGrid.selection.selectionProperty] = true;
        }

        // a new id has been computed use that now    
        if (localRecord && localRecord._newId) {
          localRecord.id = localRecord._newId;
          delete localRecord._newId;
        }

        view.viewGrid.scrollToRow(recordIndex);
      }

      if (status === isc.RPCResponse.STATUS_SUCCESS) {
        // do remember values here to prevent infinite autosave loop
        form.rememberValues();

        //view.messageBar.setMessage(isc.OBMessageBar.TYPE_SUCCESS, null, OB.I18N.getLabel('OBUIAPP_SaveSuccess'));
        this.view.statusBar.mode = 'SAVED';
        view.statusBar.setContentLabel(view.statusBar.savedIcon, 'OBUIAPP_Saved', this.getStatusBarFields());

        view.setRecentDocument(this.getValues());

        if (localRecord && localRecord !== view.viewGrid.getSelectedRecord()) {
          localRecord[view.viewGrid.selection.selectionProperty] = false;
          view.viewGrid.doSelectSingleRecord(localRecord);
        }

        view.updateLastSelectedState();

        // remove any new pointer
        if (this.getValue('_new')) {
          this.clearValue('_new');
        }

        view.viewGrid.markForRedraw();

        keepSelection = true;
        view.refreshChildViews(keepSelection);

        // success invoke the action, if any there
        view.standardWindow.autoSaveDone(view, true);

        // stop here if the window was getting closed anyway
        if (view.standardWindow.closing) {
          return;
        }

        if (view.parentRecordId) {
          if (!view.newRecordsAfterRefresh) {
            view.newRecordsAfterRefresh = {};
          }
          if (!view.newRecordsAfterRefresh[view.parentRecordId]) {
            view.newRecordsAfterRefresh[view.parentRecordId] = [];
          }
          view.newRecordsAfterRefresh[view.parentRecordId].push(data[OB.Constants.ID]);
        } else {
          if (!view.newRecordsAfterRefresh) {
            view.newRecordsAfterRefresh = [];
          }
          view.newRecordsAfterRefresh.push(data[OB.Constants.ID]);
        }

        // do this after doing autoSave as the setHasChanged will clean
        // the autosave info
        form.setHasChanged(false);

        // remove any edit info in the grid
        view.viewGrid.discardEdits(recordIndex, null, false, isc.ListGrid.PROGRAMMATIC, true);

        // change some labels
        form.setNewState(false);

        view.refreshParentRecord();

        // Refreshes the selected record of the views that belong to the same entity
        // as the view being saved
        if (view.standardWindow) {
          viewsNotToRefresh = [];
          // there is no need to refresh the current view...
          viewsNotToRefresh[0] = view.tabId;
          if (view.parentView) {
            //  ... nor the parent view, if any (it would have been refreshed just a few lines ago)
            viewsNotToRefresh[1] = view.parentView.tabId;
          }
          view.standardWindow.refreshViewsWithEntity(this.view.entity, viewsNotToRefresh);
        }

        // We fill attachments in case the record is new, so that components
        // of the attachments section are created
        if (savingNewRecord) {
          this.attachmentsSection.fillAttachments(null);
          //Issue 20544 -> The session shouldn't be setted with a null value
          if (this.values.id) {
            // We also do a call to the FIC on SETSESSION mode to set the session variables
            // to fix issue 18453
            sessionProperties = this.view.getContextInfo(true, true, false, true);
            OB.RemoteCallManager.call('org.openbravo.client.application.window.FormInitializationComponent', sessionProperties, {
              MODE: 'SETSESSION',
              TAB_ID: this.view.tabId,
              PARENT_ID: this.view.getParentId(),
              ROW_ID: this.values.id
            }, null);
          }
        }

      } else if (status === isc.RPCResponse.STATUS_VALIDATION_ERROR && resp.errors) {
        form.handleFieldErrors(resp.errors);
        view.standardWindow.autoSaveDone(view, false);
      } else {
        view.setErrorMessageFromResponse(resp, data, req);
        view.standardWindow.autoSaveDone(view, false);
      }

      form.isSaving = false;
      view.toolBar.updateButtonState(true);
      if (form.isVisible() && storedFocusItem && storedFocusItem.isFocusable(true) && !this.isNewRecord()) {
        // The setTimeout fixes issue https://issues.openbravo.com/view.php?id=21546
        // that is only reproducible in certain versions of Chrome
        setTimeout(function () {
          form.setFocusItem(storedFocusItem);
          form.setFocusInForm();
        }, 10);
      }

      return false;
    };


    if (this.inFicCall) {
      this.callSaveAfterFICReturn = true;
    } else {
      // note validate will also set the formfocus, this is 
      // done by calling showErrors without the third parameter to true
      if (!form.validateForm()) {
        return;
      }
      this.previousExplicitOffline = isc.Offline.explicitOffline;
      isc.Offline.explicitOffline = false;
      // last parameter true prevents additional validation
      this.saveData(callback, {
        willHandleError: true,
        formSave: true
      }, true);
    }
  },

  validateForm: function () {
    var form = this;
    if (!form.validate()) {
      form.handleFieldErrors(null);
      form.view.standardWindow.autoSaveDone(form.view, false);
      form.isSaving = false;
      form.view.toolBar.updateButtonState(true);
      return false;
    }
    return true;
  },

  // called when someone picks something from a picklist, the focus should go to the next
  // item
  focusInNextItem: function (currentItemName) {
    // if in the fic then let the fic call us again afterwards
    if (this.inFicCall) {
      this.doFocusInNextItemAfterFic = currentItemName;
      return;
    }

    // wait for the redraw to be finished before moving the focus 
    if (this.isDirty()) {
      this.delayCall('focusInNextItem', [currentItemName], 100);
      return;
    }

    this.computeFocusItem(this.getField(currentItemName));
    if (this.getFocusItem()) {
      this.getFocusItem().focusInItem();
      this.selectFocusItemValue();
    }
  },

  // overridden to prevent focus setting when autoSaving  
  showErrors: function (errors, hiddenErrors, suppressAutoFocus) {
    if (this.view.standardWindow.isAutoSaving) {
      return this.Super('showErrors', [errors, hiddenErrors, true]);
    }
    return this.Super('showErrors', arguments);
  },

  handleFieldErrors: function (errors) {
    var msg, additionalMsg = '',
        err, errorFld;

    if (this.view.isEditingGrid) {
      msg = OB.I18N.getLabel('OBUIAPP_ErrorInFieldsGrid', [this.view.ID]);
    } else {
      msg = OB.I18N.getLabel('OBUIAPP_ErrorInFields');
    }

    if (errors) {
      this.setErrors(errors, true);
      for (err in errors) {
        if (errors.hasOwnProperty(err)) {
          var fld = this.getField(err);
          if (!fld || !fld.visible) {
            if (additionalMsg !== '') {
              additionalMsg = additionalMsg + '<br/>';
            }
            additionalMsg = additionalMsg + errors[err];
          }
        }
      }
      if (additionalMsg) {
        msg = additionalMsg;
      }
    }
    errorFld = this.getFirstErrorItem();
    // special case
    // if there is only an error on the id and no error on any field
    // display that message then
    if (!additionalMsg && errors && errors.id && !errorFld && errors.id.errorMessage) {
      msg = errors.id.errorMessage;
    }

    // set the error message
    this.view.messageBar.setMessage(isc.OBMessageBar.TYPE_ERROR, null, msg);

    // and focus to the first error field
    this.setFocusInErrorField();
  },

  setFocusInErrorField: function () {
    var errorFld = this.getFirstErrorItem();
    if (errorFld) {
      if (this.view.standardWindow.isAutoSaving) {
        // otherwise the focus results in infinite cycles
        // with views getting activated all the time
        this.setFocusItem(errorFld);
      } else if (this.view.isActiveView()) {
        errorFld.focusInItem();
      }
      return;
    }
  },

  getFirstErrorItem: function () {
    var flds = this.getFields(),
        errs = this.getErrors(),
        i;
    if (flds.length) {
      var length = flds.length;
      for (i = 0; i < length; i++) {
        if (flds[i].getErrors() || errs[flds[i].name]) {
          return flds[i];
        }
      }
    }
    return null;
  },

  // overridden to show the error when hovering over items
  titleHoverHTML: function (item) {
    if (!item.isVisible()) {
      return null;
    }
    var errs = item.getErrors();
    if (!errs) {
      return this.Super('titleHoverHTML', arguments);
    }
    return OB.Utilities.getPromptString(errs);
  },

  itemHoverHTML: function (item) {
    if (!item.isVisible()) {
      return null;
    }
    var errs = item.getErrors();
    if (!errs) {
      return this.Super('itemHoverHTML', arguments);
    }
    return OB.Utilities.getPromptString(errs);
  },

  // overridden here to place the link icon after the mandatory sign
  getTitleHTML: function (item, error) {
    var titleHTML = this.Super('getTitleHTML', arguments),
        searchIconObj, imgHTML;

    if (item.showLinkIcon && item.targetEntity && OB.AccessibleEntities[item.targetEntity]) {

      // the parent property does not need a link, as it is shown in the 
      // parent view
      if (item.parentProperty) {
        return titleHTML;
      }

      searchIconObj = {
        src: item.newTabIconSrc,
        height: item.newTabIconSize,
        width: item.newTabIconSize,
        align: 'absmiddle',
        extraStuff: ' id="' + item.ID + this.LINKBUTTONSUFFIX + '" class="OBFormFieldLinkButton" '
      };

      imgHTML = isc.Canvas.imgHTML(searchIconObj);

      // handle a small issue in chrome/firefox that the user agents stylesheet
      // sets a default cursor on labels
      if (titleHTML.contains('LABEL')) {
        titleHTML = titleHTML.replace('<LABEL', '<LABEL style="cursor: pointer"');
      }

      return '<span class="OBFormFieldLinkButton">' + titleHTML + '</span>&nbsp;' + imgHTML;
    }
    //is not a link therefore this property is not needed.
    //if this property is null the click event won't open a new tab
    item.linkButtonClick = null;
    return titleHTML;
  },

  // we are being reshown, get new values for the combos
  visibilityChanged: function (visible) {
    if (visible && (this.view.isShowingForm || this.view.isEditingGrid)) {
      this.doChangeFICCall();
    }
  },

  onFieldChanged: function (form, item, value) {
    // To be implemented dynamically
  },

  disableItem: function (otherName, condition) {
    var otherItem = this.getItem(otherName);
    if (otherItem && otherItem.disable && otherItem.enable) {
      if (this.readOnly) {
        otherItem.disable();
      } else if (condition) {
        otherItem.disable();
      } else {
        otherItem.enable();
      }
    }
  },

  getCachedContextInfo: function () {
    if (!this.contextInfo) {
      this.contextInfo = this.view.getContextInfo(false, true, true);
    }
    return this.contextInfo;
  },

  // overridden to prevent updating of a time value which 
  // has only been edited half, only do this if we are in change
  // handling (to enable buttons etc.)
  updateFocusItemValue: function () {
    var ret, focusItem = this.getFocusSubItem();
    if (this.inChangeHandling && focusItem && !focusItem.changeOnKeypress) {
      return;
    }
    if (this.grid) {
      this.grid._preventDateParsing = true;
      ret = this.Super('updateFocusItemValue', arguments);
      delete this.grid._preventDateParsing;
    } else {
      ret = this.Super('updateFocusItemValue', arguments);
    }
    return ret;
  },

  enableShortcuts: function () {
    var me = this,
        ksAction;

    ksAction = function () {
      if (me.getFocusItem && me.getFocusItem().titleClick) {
        me.getFocusItem().titleClick(me, me.getFocusItem());
      }
      return false; //To avoid keyboard shortcut propagation
    };

    OB.KeyboardManager.Shortcuts.set('ViewForm_OpenLinkOut', 'OBViewForm', ksAction);
  },

  draw: function () {
    this.enableShortcuts();
    this.Super('draw', arguments);
  },

  keyDown: function () {
    if (this.grid && this.grid.editFormKeyDown) {
      // To fix issue https://issues.openbravo.com/view.php?id=21786
      var focusedItem = this.getFocusItem(),
          isEscape = isc.EH.getKey() === 'Escape' && !isc.EH.ctrlKeyDown() && !isc.EH.altKeyDown() && !isc.EH.shiftKeyDown();
      if (isEscape && focusedItem && Object.prototype.toString.call(focusedItem.isPickListShown) === '[object Function]' && focusedItem.isPickListShown()) {
        return true; // Then the event will bubble to ComboBoxItem.keyDown
      }

      // To fix issue https://issues.openbravo.com/view.php?id=21382
      this.grid.editFormKeyDown(arguments);
    }
    var response = OB.KeyboardManager.Shortcuts.monitor('OBViewForm');
    if (response !== false) {
      response = this.Super('keyDown', arguments);
    }
    return response;
  },

  // always suppress focus when showing errors, we do focus handling
  // explicitly
  showFieldErrors: function (fieldName, suppressAutoFocus) {
    // temporary set selectonfocus to false
    // until after the redraw, to prevent this issue
    // https://issues.openbravo.com/view.php?id=18739
    this.previousSelectOnFocus = this.selectOnFocus;
    this.selectOnFocus = false;
    this.selectOnFocusStored = true;
    this.Super('showFieldErrors', [fieldName, true]);
  },

  redraw: function () {
    var focusItemValue;
    this._isRedrawing = true;
    //fetch the focus item value as it is lost sometimes during reflow. Refer issue https://issues.openbravo.com/view.php?id=24960
    if (this.getFocusItem()) {
      focusItemValue = this.getFocusItem().getValue();
    }
    this.Super('redraw', arguments);
    delete this._isRedrawing;
    //reset focus item value if lost
    if (focusItemValue && this.getFocusItem() && this.getFocusItem().getValue() !== focusItemValue) {
      this.getFocusItem().setValue(focusItemValue);
    }

    // Restore the focus item if it has been deleted because it was a number and was mistaken as an UUID
    if (this.getFocusItem() && this.getFocusItem().targetEntity !== null && (/^\d+$/).test(focusItemValue) && !this.getFocusItem().getElementValue() && (!this.getFocusItem().valueMap || !this.getFocusItem().valueMap[focusItemValue])) {
      this.getFocusItem().setElementValue(focusItemValue);
    }

    if (this.selectOnFocusStored) {
      this.selectOnFocus = this.previousSelectOnFocus;
      delete this.previousSelectOnFocus;
      delete this.selectOnFocusStored;
    }
  },

  destroy: function () {
    var i, item, items = this.getItems(),
        len = items.length,
        ds, dataSources = [];

    // caching reference to all DS of Items
    for (i = 0; i < len; i++) {
      item = items[i];
      ds = item ? item.dataSource || item.optionDataSource : null;

      if (ds) {
        dataSources.push(ds);
      }
    }

    this.Super('destroy', arguments);
    len = dataSources.length;

    // Destroying DS not managed by DynamicForm.destroy
    for (i = 0; i < len; i++) {
      ds = dataSources[i];
      if (ds) {
        ds.destroy();
        ds = null;
      }
    }
  },

  isID: function (item) {
    return item.type === '_id_13';
  },

  allRequiredFieldsSet: function () {
    var i, item, length = this.getItems().length,
        value, undef, nullValue = null;
    for (i = 0; i < length; i++) {
      item = this.getItems()[i];
      value = item.getValue();
      // Do no check ids, even though they are mandatory they are automatically set DAL before
      // storing the record in the database. See issue https://issues.openbravo.com/view.php?id=21657
      if (this.isRequired(item) && (item.displayed !== false) && !this.isID(item) && value !== false && value !== 0 && !value) {
        return false;
      }
    }
    return true;
  }
};
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2010-2014 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */
isc.ClassFactory.defineClass('OBViewGrid', isc.OBGrid);
isc.OBViewGrid.addClassProperties({
  EDIT_LINK_FIELD_NAME: '_editLink',
  //prevent the count operation on the server
  NO_COUNT_PARAMETER: '_noCount',
  // note following 2 values should be the same
  // ListGrid._$ArrowUp and ListGrid._$ArrowDown
  ARROW_UP_KEY_NAME: 'Arrow_Up',
  ARROW_DOWN_KEY_NAME: 'Arrow_Down',
  ERROR_MESSAGE_PROP: isc.OBViewGrid.ERROR_MESSAGE_PROP,
  ICONS: {
    PROGRESS: 0,
    OPEN_IN_FORM: 1,
    SEPARATOR1: 2,
    EDIT_IN_GRID: 3,
    CANCEL: 4,
    SEPARATOR2: 5,
    SAVE: 6
  },

  SUPPORTED_SUMMARY_FUNCTIONS: ['count', 'avg', 'min', 'max', 'sum']

});

if (!isc.Browser.isIE) {
  isc.OBViewGrid.addProperties({
    enforceVClipping: true // To avoid apply in IE, since it moves the grid row content to the top of each cell (issue 17884)
  });
}

// = OBViewGrid =
// The OBViewGrid is the Openbravo specific subclass of the Smartclient
// ListGrid.
isc.OBViewGrid.addProperties({

  // ** {{{ view }}} **
  // The view member contains the pointer to the composite canvas which
  // handles this form
  // and the grid and other related components.
  view: null,

  // ** {{{ editGrid }}} **
  // Controls if an edit link column is created in the grid, set to false to
  // prevent this.
  editGrid: true,

  textMatchStyle: 'substring',

  // ** {{{ editLinkFieldProperties }}} **
  // The properties of the ListGridField created for the edit links.
  editLinkFieldProperties: {
    type: 'text',
    canSort: false,
    canReorder: false,
    frozen: true,
    canFreeze: false,
    canEdit: false,
    canGroupBy: false,
    canHide: false,
    showTitle: true,
    title: '&nbsp;',
    // autoFitWidth: true,
    canDragResize: false,
    canFilter: true,
    autoExpand: false,
    filterEditorType: 'StaticTextItem',
    name: isc.OBViewGrid.EDIT_LINK_FIELD_NAME
  },

  editLinkColNum: -1,

  // ** {{{ dataPageSize }}} **
  // The data page size used for loading paged data from the server.
  dataPageSize: 100,

  fetchDelay: 500,

  autoFitFieldWidths: true,
  autoFitWidthApproach: 'title',
  canAutoFitFields: false,
  minFieldWidth: 75,
  width: '100%',
  height: '100%',

  showSortArrow: 'field',
  autoFetchTextMatchStyle: 'substring',
  showFilterEditor: true,
  canEdit: true,
  alternateRecordStyles: true,
  canReorderFields: true,
  canFreezeFields: true,
  canAddFormulaFields: true,
  canAddSummaryFields: true,

  canGroupBy: true,
  showGroupSummaryInHeader: true,
  showGroupSummary: true,
  showGroupTitleColumn: false,
  groupByMaxRecords: 1000,
  selectionAppearance: 'checkbox',
  arrowKeyAction: 'select',
  useAllDataSourceFields: false,
  editEvent: 'none',
  showCellContextMenus: true,
  canOpenRecordEditor: true,
  showDetailFields: true,
  showErrorIcons: false,
  ungroupText: OB.I18N.getLabel('OBUIAPP_ungroup'),
  groupByText: OB.I18N.getLabel('OBUIAPP_GroupBy'),

  allowFilterExpressions: true,
  showFilterExpressionLegendMenuItem: true,

  // internal sc grid property, see the ListGrid source code
  preserveEditsOnSetData: false,

  // enabling this results in a slower user interaction
  // it is better to allow fast grid interaction and if an error occurs
  // dismiss any new records being edited and go back to the edit row
  // which causes the error
  // set to true to solve this issue:
  // https://issues.openbravo.com/view.php?id=21352
  waitForSave: true,
  stopOnErrors: false,
  confirmDiscardEdits: false,
  canMultiSort: false,

  emptyMessage: OB.I18N.getLabel('OBUISC_ListGrid.loadingDataMessage'),
  discardEditsSaveButtonTitle: OB.I18N.getLabel('UINAVBA_Save'),
  editPendingCSSText: null,

  // commented out because of: https://issues.openbravo.com/view.php?id=16515
  // default is much smaller which give smoother scrolling
  // quickDrawAheadRatio: 1.0,
  // drawAheadRatio: 2.0,
  // see this discussion:
  // http://forums.smartclient.com/showthread.php?t=16376
  // scrollRedrawDelay: 20,
  // note: don't set drawAllMaxCells too high as it results in extra reads
  // of data, Smartclient will try to read until drawAllMaxCells has been
  // reached
  drawAllMaxCells: 0,

  // the default is enabled which is a commonly used field
  recordEnabledProperty: '_enabled',

  // keeps track if we are in objectSelectionMode or in toggleSelectionMode
  // objectSelectionMode = singleRecordSelection === true
  singleRecordSelection: false,

  // editing props
  rowEndEditAction: 'next',
  listEndEditAction: 'next',

  fixedRecordHeights: true,

  validateByCell: true,

  currentEditColumnLayout: null,

  recordBaseStyleProperty: '_recordStyle',

  // set to false because of this: https://issues.openbravo.com/view.php?id=16509
  modalEditing: false,
  // set to true because if not all cols are drawn then when doing inline editing
  // errors were reported for undrawn columns
  // need to rework how the FormInitializationComponent sets the valuemap and defaultvalue
  // for non-existing columns this should be stored somewhere, see this reply in
  // the smartclient forum:
  // http://forums.smartclient.com/showthread.php?p=63146
  showAllColumns: true,
  // showGridSummary: true,
  timeFormatter: 'to24HourTime',

  dataProperties: {
    // this means that after an update/add the new/updated row does not fit
    // in the current filter criteria then they are still shown
    // note that if this is set to false that when using the _dummy criteria
    // that the _dummy criteria can mean that new/updated records are not
    // shown in the grid
    neverDropUpdatedRows: true,
    useClientFiltering: true,
    useClientSorting: true,
    fetchDelay: 300,

    // overridden to update the context/request properties for the fetch
    fetchRemoteData: function (serverCriteria, startRow, endRow) {
      // clone to prevent side effects
      var requestProperties = isc.clone(this.context);
      this.grid.getFetchRequestParams(requestProperties.params);

      return this.Super('fetchRemoteData', arguments);
    },

    clearLoadingMarkers: function (start, end) {
      var j;
      if (this.localData) {
        for (j = start; j < end; j++) {
          if (Array.isLoading(this.localData[j])) {
            this.localData[j] = null;
          }
        }
      }
    },

    // always return false otherwise sc switches to local mode
    // which does not work correctly for when doing inserts in form mode
    // at that point the grid.data.allRows is being used which results 
    // in mismatches with grid.data.localData, returning false here
    // prevents allRows from being used. In our case we never really
    // want to have all rows cached locally as we do all filtering
    // server side.
    allRowsCached: function () {
      return false;
    },

    transformData: function (newData, dsResponse) {
      var i, length, timeFields, responseToFilter;

      // when the data is received from the datasource, time fields are formatted in UTC time. They have to be converted to local time
      if (dsResponse && dsResponse.context && (dsResponse.context.operationType === 'fetch' || dsResponse.context.operationType === 'update' || dsResponse.context.operationType === 'add')) {
        if (this.grid) {
          newData = OB.Utilities.Date.convertUTCTimeToLocalTime(newData, this.grid.completeFields);
        }
      }
      // only do this stuff for fetch operations, in other cases strange things
      // happen as update/delete operations do not return the totalRows parameter
      if (dsResponse && dsResponse.context && dsResponse.context.operationType !== 'fetch') {
        return newData;
      }
      // correct the length if there is already data in the localData array
      // only do this if filtering is not the origin action to the datasource request
      // see issue https://issues.openbravo.com/view.php?id=23006
      responseToFilter = false;
      if (dsResponse.context && dsResponse.context._dsRequest && dsResponse.context._dsRequest.filtering) {
        responseToFilter = true;
      }

      if (this.localData && !responseToFilter) {
        length = this.localData.length;
        for (i = dsResponse.endRow + 1; i < length; i++) {
          if (!Array.isLoading(this.localData[i]) && this.localData[i]) {
            dsResponse.totalRows = i + 1;
          } else {
            break;
          }
        }

        // get rid of old loading markers, this has to be done explicitly
        // as we can return another rowset than requested
        // call with a delay otherwise the grid will keep requesting rows while processing the
        // current rowset
        this.delayCall('clearLoadingMarkers', [dsResponse.context.startRow, dsResponse.context.endRow], 100);
      } else {
        // Clear the filtering attribute from the context to prevent including it
        // automatically in the following datasource requests
        if (this.context) {
          delete this.context.filtering;
        }
      }
      if (this.localData && this.localData[dsResponse.totalRows]) {
        this.localData[dsResponse.totalRows] = null;
      }
      return newData;
    },

    shouldUseClientFiltering: function () {
      if (this.forceRefresh) {
        // forcing fetch from server
        return false;
      }
      return this.Super('shouldUseClientFiltering', arguments);
    }
  },

  // To avoid JS error if OBViewGrid doesn't extend OBGrid (for debugging purposes)
  isGridFiltered: function () {
    return this.Super('isGridFiltered', arguments);
  },
  // To avoid JS error if OBViewGrid doesn't extend OBGrid (for debugging purposes)
  checkShowFilterFunnelIcon: function () {
    return this.Super('checkShowFilterFunnelIcon', arguments);
  },
  // To avoid JS error if OBViewGrid doesn't extend OBGrid (for debugging purposes)
  focusInFirstFilterEditor: function () {
    return this.Super('focusInFirstFilterEditor', arguments);
  },

  initWidget: function () {
    var i, vwState;

    // make a copy of the dataProperties otherwise we get
    // change results that values of one grid are copied/coming back
    // in other grids
    this.dataProperties = isc.addProperties({}, this.dataProperties);

    // override setSort to sort by group title when the grouped by 
    // column is clicked
    this.groupTreeProperties = {
      grid: this,

      // always return all records
      getRange: function (start, end) {
        return this.getOpenList(
        this.root, this.openDisplayNodeType, null, this.sortDirection, this.openListCriteria, null, true).slice(start, end);
      },

      setSort: function (sortSpecifier) {
        var i, fld, sortSpec = isc.clone(sortSpecifier),
            flds = this.grid.getAllFields(),
            groupByFields = this.grid.getGroupByFields();

        if (groupByFields && sortSpec && sortSpec[0]) {
          for (i = 0; i < flds.length; i++) {
            fld = flds[i];
            if (groupByFields.contains(fld.name) && (fld.name === sortSpec[0].property || fld.displayField === sortSpec[0].property)) {
              sortSpec[0].property = 'groupValue';
              break;
            }
          }
        }

        return this.Super('setSort', [sortSpec]);
      }
    };

    // re-use getCellValue to handle count and related functions
    this.summaryRowProperties = {
      showRecordComponents: false,
      cellHoverHTML: this.cellHoverHTML,

      getCellAlign: function (record, rowNum, colNum) {
        var fld = this.getFields()[colNum],
            isRTL = this.isRTL(),
            func = this.getGridSummaryFunction(fld),
            isSummary = record && (record[this.groupSummaryRecordProperty] || record[this.gridSummaryRecordProperty]);

        // the count of a character column should also be right aligned
        if (isSummary && func === 'count') {
          return isRTL ? isc.Canvas.LEFT : isc.Canvas.RIGHT;
        }

        return this.Super('getCellAlign', arguments);
      },

      // only set active view but don't do any context menu
      cellContextClick: function () {
        this.view.setAsActiveView();
        return false;
      },

      view: this.view,

      getCellValue: function (record, recordNum, fieldNum, gridBody) {
        var field = this.getField(fieldNum),
            gridField, func = this.parentElement.getGridSummaryFunction(field),
            value = record && field ? (field.displayField ? record[field.displayField] : record[field.name]) : null;

        // get the summary function from the main grid
        if (!func) {
          delete field.summaryFunction;
        } else {
          field.summaryFunction = func;
        }

        // handle count much simpler than smartclient does
        // so no extra titles or formatting
        if (record && func === 'count' && value >= 0) {
          return value;
        }

        return this.Super('getCellValue', arguments);
      }
    };

    var thisGrid = this,
        localEditLinkField;
    if (this.editGrid) {
      // add the edit pencil in the beginning
      localEditLinkField = isc.addProperties({}, this.editLinkFieldProperties);
      localEditLinkField.width = this.editLinkColumnWidth;
      this.fields.unshift(localEditLinkField);
      // is the column after the checkbox field
      this.editLinkColNum = 1;
    }

    this.editFormDefaults = isc.addProperties({}, isc.clone(OB.ViewFormProperties), this.editFormDefaults);

    // added for showing counts in the filtereditor row
    this.checkboxFieldProperties = isc.addProperties({}, this.checkboxFieldProperties | {}, {
      canFilter: true,
      // frozen is much nicer, but check out this forum discussion:
      // http://forums.smartclient.com/showthread.php?p=57581
      frozen: true,
      canFreeze: true,
      showHover: true,
      prompt: OB.I18N.getLabel('OBUIAPP_GridSelectAllColumnPrompt'),
      filterEditorType: 'StaticTextItem'
    });

    var grid = this;
    var menuItems = [{
      title: OB.I18N.getLabel('OBUIAPP_CreateRecordInGrid'),
      click: function () {
        grid.deselectAllRecords();
        grid.startEditingNew();
      }
    }, {
      title: OB.I18N.getLabel('OBUIAPP_CreateRecordInForm'),
      click: function () {
        grid.deselectAllRecords();
        grid.view.newDocument();
      }
    }];

    if (this.showSortArrow === 'field') {
      // solves https://issues.openbravo.com/view.php?id=17362
      this.showSortArrow = isc.ListGrid.BOTH;
      if (!this.lazyFiltering) {
        this.sorterDefaults = {};
      }
    }

    // TODO: add dynamic part of readonly (via setWindowSettings: see issue 17441)
    // add context-menu only if 'new' is allowed in tab definition
    if (this.uiPattern !== 'SR' && this.uiPattern !== 'RO' && this.uiPattern !== 'ED') {
      this.contextMenu = this.getMenuConstructor().create({
        items: menuItems
      });
      this.contextMenu.show = function () {
        var me = this;
        // If not in the header tab, and no parent is selected, do not show the context menu
        // See issue https://issues.openbravo.com/view.php?id=21787
        if (!grid.view.hasValidState()) {
          return;
        }
        if (grid.isGrouped) {
          return;
        }
        if (!grid.view.isActiveView()) {
          // The view where the context menu is being opened must be active
          // See issue https://issues.openbravo.com/view.php?id=20872
          grid.view.setAsActiveView(true);
          setTimeout(function () {
            me.Super('show', arguments);
          }, 10);
        } else {
          me.Super('show', arguments);
        }
      };
    }

    var ret = this.Super('initWidget', arguments);

    // only show summary rows if there are summary functions
    for (i = 0; i < this.getFields().length; i++) {
      if (this.getFields()[i].summaryFunction) {
        this.showGridSummary = true;
      }
    }

    // only personalize if there is a professional license
    if (!OB.Utilities.checkProfessionalLicense(null, true)) {
      vwState = this.view.standardWindow.getDefaultGridViewState(this.view.tabId);
      if (vwState) {
        this.setViewState(vwState);
      }
    }

    if (this.lazyFiltering) {
      this.noDataEmptyMessage = '<span class="' + this.emptyMessageStyle + '">' + OB.I18N.getLabel('OBUIAPP_LazyFilteringNoFetch') + '</span>';
    } else {
      this.noDataEmptyMessage = '<span class="' + this.emptyMessageStyle + '">' + OB.I18N.getLabel('OBUISC_ListGrid.loadingDataMessage') + '</span>'; // OB.I18N.getLabel('OBUIAPP_GridNoRecords')
    }
    this.filterNoRecordsEmptyMessage = '<span class="' + this.emptyMessageStyle + '">' + OB.I18N.getLabel('OBUIAPP_GridFilterNoResults') + '</span>' + '<span onclick="window[\'' + this.ID + '\'].clearFilter();" class="' + this.emptyMessageLinkStyle + '">' + OB.I18N.getLabel('OBUIAPP_GridClearFilter') + '</span>';

    return ret;
  },

  clearFilter: function () {
    // hide the messagebar
    this.view.messageBar.hide();
    this._cleaningFilter = true;
    this.Super('clearFilter', arguments);
    delete this._cleaningFilter;
  },

  // select the first field after the frozen fields
  // as the one to use for grouping headers
  getGroupTitleField: function () {
    var frozenFields = this.frozenFields;
    if (frozenFields) {
      // first field after frozen section
      return this.getField(frozenFields.length).name;
    }
    // field number 2 is the first one after the standard frozen section
    return this.getField(2).name;
  },

  // prevent a jscript error if there are no group summary functions
  getGroupSummaryData: function () {
    var ret = this.Super('getGroupSummaryData', arguments);
    if (isc.isAn.Array(ret) && !ret[0]) {
      return [{}];
    }
    return ret;
  },

  // Overridden to sort before grouping, so that groups are sorted
  // and open initial group, move the group field to the left,
  // or put it back when ungrouping
  groupBy: function (fields) {
    var fld, currentGroupByFields, currentGroupByField;

    // move the current group column to where it came from
    currentGroupByFields = this.getGroupByFields();

    // no changes go away
    if (!currentGroupByFields && !fields) {
      return;
    } else if (fields === currentGroupByFields) {
      return;
    }

    if (currentGroupByFields && currentGroupByFields[0]) {
      currentGroupByField = this.getField(currentGroupByFields[0]);
      currentGroupByField.canReorder = true;
      currentGroupByField.canHide = true;
      this.reorderField(this.getFieldNum(currentGroupByField), currentGroupByField.previousFieldNum);
    }

    // first sort so that groups are correctly sorted
    if (fields) {
      if (isc.isAn.Array(fields)) {
        fld = fields[0];
      } else {
        fld = fields;
      }
      this.getField(fld).previousFieldNum = this.getFieldNum(fld);
      fld = this.getField(fld);
      fld.canReorder = false;
      fld.canHide = false;
      this.reorderField(this.getFieldNum(fld), 0);
      this.sort(fld);
    }

    this.Super('groupBy', arguments);

    this.view.toolBar.updateButtonState(true);

    // when there was already a group open, changing the group by
    // starts with all groups closed, explicitly open the first group
    if (fields && currentGroupByFields) {
      this.openInitialGroups();
    }

    this.view.standardWindow.storeViewState();
  },

  clearGroupBy: function () {
    var currentGroupByFields, currentGroupByField;

    // reason for clearing was large dataset, tell the user
    if (this.data && this.data.getLength() > this.groupByMaxRecords) {
      // move the current group column to where it came from
      currentGroupByFields = this.getGroupByFields();
      if (currentGroupByFields && currentGroupByFields[0]) {
        currentGroupByField = this.getField(currentGroupByFields[0]);
        currentGroupByField.canReorder = true;
        currentGroupByField.canHide = true;
        this.reorderField(this.getFieldNum(currentGroupByField), currentGroupByField.previousFieldNum);
      }

      this.Super('clearGroupBy');

      this.view.standardWindow.storeViewState();

      isc.say(OB.I18N.getLabel('OBUIAPP_MaxGroupingReached', [this.groupByMaxRecords]));
    } else {
      this.Super('clearGroupBy');
    }
  },

  // Overrides the standard SC function as that function
  // also returns the default summary function from the 
  // type definition. We only want the explicitly set
  // summary functions.
  getGridSummaryFunction: function (field) {
    if (!field) {
      return;
    }
    return field.summaryFunction;
  },

  // when the summary information changes, refresh
  // the grid in the correct way
  setSummaryFunctionActions: function (clear) {
    var i, noSummaryFunction;
    if (this.isGrouped) {
      this.regroup();
    }
    if (!clear) {
      if (!this.showGridSummary) {
        this.setShowGridSummary(true);
      }
      this.recalculateGridSummary();
    } else if (this.showGridSummary) {
      noSummaryFunction = true;
      for (i = 0; i < this.getFields().length; i++) {
        if (this.getFields()[i].summaryFunction) {
          noSummaryFunction = false;
          break;
        }
      }
      if (noSummaryFunction) {
        this.setShowGridSummary(false);
      } else {
        this.recalculateGridSummary();
      }
    }
  },

  getHeaderContextMenuItems: function (colNum) {
    var field = this.getField(colNum),
        i, summarySubMenu = [],
        grid = this,
        groupByFields = this.getGroupByFields(),
        type, isDate, isNumber, menuItems = this.Super('getHeaderContextMenuItems', arguments);


    // remove the group by menu option if the field is grouped 
    // and it does not have a submenu
    if (groupByFields && groupByFields.contains(field.name)) {
      for (i = 0; i < menuItems.length; i++) {
        if (menuItems[i].groupItem && !menuItems[i].submenu) {
          menuItems.removeAt(i);
          break;
        }
      }
    }

    if (field) {
      type = isc.SimpleType.getType(field.type);
      isDate = isc.SimpleType.inheritsFrom(type, 'date');
      isNumber = isc.SimpleType.inheritsFrom(type, 'integer') || isc.SimpleType.inheritsFrom(type, 'float');

      if (isNumber && !field.clientClass) {
        summarySubMenu.add({
          title: OB.I18N.getLabel('OBUIAPP_SummaryFunctionSum'),
          // enabled: field.summaryFunction != 'sum',
          checked: field.summaryFunction === 'sum',
          click: function (target, item) {
            field.summaryFunction = 'sum';
            grid.setSummaryFunctionActions();
          }
        });

        summarySubMenu.add({
          title: OB.I18N.getLabel('OBUIAPP_SummaryFunctionAvg'),
          // enabled: field.summaryFunction != 'avg',
          checked: field.summaryFunction === 'avg',
          click: function (target, item) {
            field.summaryFunction = 'avg';
            grid.setSummaryFunctionActions();
          }
        });
      }

      if (!field.clientClass) {
        summarySubMenu.add({
          title: OB.I18N.getLabel('OBUIAPP_SummaryFunctionMin'),
          checked: field.summaryFunction === 'min',
          click: function (target, item) {
            field.summaryFunction = 'min';
            grid.setSummaryFunctionActions();
          }
        });

        summarySubMenu.add({
          title: OB.I18N.getLabel('OBUIAPP_SummaryFunctionMax'),
          checked: field.summaryFunction === 'max',
          click: function (target, item) {
            field.summaryFunction = 'max';
            grid.setSummaryFunctionActions();
          }
        });
      }

      summarySubMenu.add({
        title: OB.I18N.getLabel('OBUIAPP_SummaryFunctionCount'),
        // enabled: field.summaryFunction != 'count',
        checked: field.summaryFunction === 'count',
        click: function (target, item) {
          field.summaryFunction = 'count';
          grid.setSummaryFunctionActions();
        }
      });

      menuItems.add({
        isSeparator: true
      });

      menuItems.add({
        groupItem: true,
        title: OB.I18N.getLabel('OBUIAPP_SetSummaryFunction'),
        fieldName: field.name,
        targetField: field,
        prompt: OB.I18N.getLabel('OBUIAPP_SetSummaryFunction_Description'),
        canSelectParent: true,
        submenu: summarySubMenu
      });

      if (field.summaryFunction) {
        menuItems.add({
          title: OB.I18N.getLabel('OBUIAPP_ClearSummaryFunction'),
          targetField: field,
          click: function (target, item) {
            delete field.summaryFunction;
            grid.setSummaryFunctionActions(true);
          }
        });
      }

      menuItems.add({
        title: OB.I18N.getLabel('OBUIAPP_ClearSummaries'),
        targetField: field,
        click: function (target, item) {
          var i, fld;
          for (i = 0; i < grid.getFields().length; i++) {
            fld = grid.getFields()[i];
            delete fld.summaryFunction;
          }
          grid.setSummaryFunctionActions(true);
        }
      });
    }

    // add the summary functions
    return menuItems;
  },

  // overridden to load all data in one request
  requestVisibleRows: function () {
    // fake smartclient to think that there groupByMaxRecords + 1 records
    if (this.data && this.isGrouped && !this.data.allRows) {
      this.data.totalRows = this.groupByMaxRecords + 1;
    }
    this.Super('requestVisibleRows', arguments);
  },

  // Overridden to make sure that the group header is not shown in
  // the frozen body
  getGroupNodeHTML: function (node, gridBody) {
    var isFrozenBody = this.frozenBody === gridBody;
    if (this.frozenBody && isFrozenBody) {
      return this.emptyCellValue;
    }
    var state = this.data.isOpen(node) ? 'opened' : 'closed',
        url = isc.Img.urlForState(this.groupIcon, null, null, state),
        iconIndent = isc.Canvas.spacerHTML(this.groupIconPadding, 1),
        groupIndent = isc.Canvas.spacerHTML((this.data.getLevel(node) - 1) * this.groupIndentSize + this.groupLeadingIndent, 1);
    var img = this.imgHTML(url, this.groupIconSize, this.groupIconSize);
    var retStr = (this.canCollapseGroup ? groupIndent + img + iconIndent + this.getGroupTitle(node) : groupIndent + iconIndent + this.getGroupTitle(node));

    return retStr;
  },

  filterEditorSubmit: function () {
    // hide the messagebar
    this.view.messageBar.hide();
    this.Super('filterEditorSubmit', arguments);
  },

  // destroy the context menu also
  // see why this needs to be done in the
  // documentation of canvas.contextMenu in Canvas.js
  destroy: function () {
    var i, field, fields = this.getFields(),
        editorProperties, len = fields.length,
        ds, dataSources = [];

    if (this.getDataSource()) {
      // will get destroyed in the super class then
      this.getDataSource().potentiallyShared = false;
    }

    for (i = 0; i < len; i++) {
      field = fields[i];
      editorProperties = field && field.editorProperties;
      ds = editorProperties && editorProperties.optionDataSource;
      if (ds) {
        dataSources.push(ds);
      }
    }

    if (this.contextMenu) {
      this.contextMenu.destroy();
      this.contextMenu = null;
    }

    this.Super('destroy', arguments);

    len = dataSources.length;

    for (i = 0; i < len; i++) {
      ds = dataSources[i];
      if (ds) {
        ds.destroy();
        ds = null;
      }
    }
  },

  setData: function (data) {
    data.grid = this;
    this.Super('setData', arguments);
  },

  refreshFields: function () {
    this.setFields(this.completeFields.duplicate());
  },

  setReadOnlyMode: function () {
    if (this.uiPattern !== 'RO') {
      this.uiPattern = 'RO';
      this.canEdit = false;
      if (this.contextMenu) {
        this.contextMenu.destroy();
        this.contextMenu = null;
      }
      this.refreshContents();
    }
  },

  draw: function () {
    var drawnBefore = this.isDrawn(),
        i, form, item, items, length;
    this.enableShortcuts();
    this.Super('draw', arguments);

    // set the focus in the filter editor
    if (this.view && this.view.isActiveView() && !drawnBefore && this.isVisible() && this.getFilterEditor() && this.getFilterEditor().getEditForm()) {
      // there is a filter editor
      form = this.getFilterEditor().getEditForm();

      // compute a focus item, set focus with some delay
      // to give everyone time to be ready
      if (!form.getFocusItem()) {
        items = form.getItems();
        length = items.length;

        for (i = 0; i < length; i++) {
          item = items[i];
          if (item.getCanFocus() && !item.isDisabled()) {
            item.delayCall('focusInItem', null, 100);
            break;
          }
        }
      } else {
        form.getFocusItem().delayCall('focusInItem', null, 100);
      }
    }
  },

  // add the properties from the form
  addFormProperties: function (props) {
    isc.addProperties(this.editFormDefaults, props);
  },

  getCellVAlign: function () {
    return 'center';
  },

  getCellAlign: function (record, rowNum, colNum) {
    var fld = this.getFields()[colNum],
        isRTL = this.isRTL(),
        func = this.getGridSummaryFunction(fld),
        isSummary = record && (record[this.groupSummaryRecordProperty] || record[this.gridSummaryRecordProperty]);
    if (!fld.clientClass && rowNum === this.getEditRow()) {
      return 'center';
    }

    if (isSummary && func === 'count') {
      return isRTL ? isc.Canvas.LEFT : isc.Canvas.RIGHT;
    }

    return this.Super('getCellAlign', arguments);
  },

  // overridden to support hover on the header for the checkbox field
  setFieldProperties: function (field, properties) {
    var localField = field;
    if (isc.isA.Number(localField)) {
      localField = this.fields[localField];
    }
    if (this.isCheckboxField(localField) && properties) {
      properties.showHover = true;
      properties.prompt = OB.I18N.getLabel('OBUIAPP_GridSelectAllColumnPrompt');
    }

    return this.Super('setFieldProperties', arguments);
  },

  reorderField: function (fieldNum, moveToPosition) {
    var res = this.Super('reorderField', arguments);
    this.view.standardWindow.storeViewState();
    return res;
  },

  hideField: function (field, suppressRelayout) {
    var res;
    this._hidingField = true;
    this._savedEditValues = this.getEditValues(this.getEditRow());
    res = this.Super('hideField', arguments);
    delete this._savedEditValues;
    delete this._hidingField;
    this.view.standardWindow.storeViewState();
    this.refreshContents();
    return res;
  },

  showField: function (field, suppressRelayout) {
    var res;
    // Do not allow to add a new field while the grid is being edited. Adding a new field implies a grid refresh, 
    // and the refresh toolbar button is disabled while the grid/form is being edited
    if (this.view.isEditingGrid) {
      this.view.messageBar.setMessage(isc.OBMessageBar.TYPE_ERROR, OB.I18N.getLabel('OBUIAPP_Error'), OB.I18N.getLabel('OBUIAPP_NotAddingFieldsWhileGridEditing'));
      return;
    }
    this._showingField = true;
    this._savedEditValues = this.getEditValues(this.getEditRow());
    res = this.Super('showField', arguments);
    delete this._savedEditValues;
    delete this._showingField;
    this.view.standardWindow.storeViewState();
    this.invalidateCache();
    this.refreshContents();
    return res;
  },

  resizeField: function (fieldNum, newWidth, storeWidth) {
    var res = this.Super('resizeField', arguments);
    this.view.standardWindow.storeViewState();
    return res;
  },

  // also store the filter criteria
  getViewState: function (returnObject, includeFilter) {
    var i, fld, state = this.Super('getViewState', [returnObject || true]);

    if (includeFilter) {
      state.filter = this.getCriteria();

      if (!this.filterClause) {
        state.noFilterClause = true;
      }
    }

    state.filterClause = this.filterClause;

    // set summary information, can not be stored in the field state
    // because smartclient does not provide a nice override point
    // when setting the fieldstate back to also set the summary function
    state.summaryFunctions = {};
    for (i = 0; i < this.getAllFields().length; i++) {
      fld = this.getAllFields()[i];
      if (fld.summaryFunction && isc.isA.String(fld.summaryFunction)) {
        state.summaryFunctions[fld.name] = fld.summaryFunction;
      }
    }

    // get rid of the selected state
    delete state.selected;

    this.deleteSelectedParentRecordFilter(state);

    if (returnObject) {
      return state;
    }
    return '(' + isc.Comm.serialize(state, false) + ')';
  },

  setViewState: function (state, settingDefault) {
    var localState, i, fld, hasSummaryFunction;

    localState = this.evalViewState(state, 'viewState');

    // strange case, sometimes need to call twice
    if (isc.isA.String(localState)) {
      localState = this.evalViewState(state, 'viewState');
    }

    if (!localState) {
      return;
    }

    if (this.getDataSource()) {
      // old versions stored selected records in grid view, this can cause
      // problems if record is not selected yet
      delete localState.selected;
      this.deselectAllRecords();

      if (localState.summaryFunctions) {
        hasSummaryFunction = false;
        for (i = 0; i < this.getAllFields().length; i++) {
          fld = this.getAllFields()[i];
          if (localState.summaryFunctions[fld.name]) {
            hasSummaryFunction = true;
            fld.summaryFunction = localState.summaryFunctions[fld.name];
          } else {
            delete fld.summaryFunction;
          }
        }
        this.setShowGridSummary(hasSummaryFunction);
      }

      // remove focus as this results in blur behavior before the
      // (filter)editor is redrawn with new fields when
      // doing setviewstate
      // https://issues.openbravo.com/view.php?id=21249
      if (this.getEditForm() && this.getEditForm().getFocusItem()) {
        this.getEditForm().getFocusItem().hasFocus = false;
      }
      if (this.filterEditor && this.filterEditor.getEditForm() && this.filterEditor.getEditForm().getFocusItem()) {
        this.filterEditor.getEditForm().getFocusItem().hasFocus = false;
      }

      this.deleteSelectedParentRecordFilter(localState);

      if (settingDefault && localState.group && localState.group.groupByFields) {
        // Setting default view, at this point fetch data is not already performed,
        // confings as field group are done in local with data, so not applying them 
        // till fetch callback. Marking now grid to reaply state afterwards
        // see issue #25119
        if (this.view && this.view.standardWindow) {
          this.view.standardWindow.requiredReapplyViewState = true;
          this.view.standardWindow.gridsToReapply = this.view.standardWindow.gridsToReapply || [];
          // push only what is pending to be reapplied
          this.view.standardWindow.gridsToReapply.push({
            view: this,
            state: {
              group: isc.shallowClone(localState.group)
            }
          });
          localState.group.groupByFields = '';
        }
      }

      this.Super('setViewState', ['(' + isc.Comm.serialize(localState, false) + ')']);

      // Focus on the first filterable item
      if (this.view.isActiveView()) {
        this.focusInFirstFilterEditor();
      }
    }

    if (localState.noFilterClause) {
      if (OB.Utilities.isNonEmptyString(this.filterClause)) {
        if (this.data) {
          this.data.forceRefresh = true;
        }
      }
      this.filterClause = null;
      if (this.view.messageBar) {
        this.view.messageBar.hide();
      }
    } else if (localState.filterClause) {
      this.filterClause = localState.filterClause;
    }

    // and no additional filter clauses passed in
    if (localState.filter && this.view.tabId !== this.view.standardWindow.additionalCriteriaTabId && this.view.tabId !== this.view.standardWindow.additionalFilterTabId) {
      // a filtereditor but no editor yet
      // set it in the initialcriteria of the filterEditro
      if (this.filterEditor && !this.filterEditor.getEditForm()) {
        this.filterEditor.setValuesAsCriteria(localState.filter);
      }
      // this initial criteria needs to be removed in order to properly
      // manage filtering clean up
      this.initialCriteriaSetBySavedView = true;
      this.setCriteria(localState.filter);
    }
  },

  // overridden to also store the group mode
  // http://forums.smartclient.com/showthread.php?p=93877#post93877
  getGroupState: function () {
    var i, fld, state = this.Super('getGroupState', arguments),
        result = {};
    result.groupByFields = state;
    result.groupingModes = {};
    for (i = 0; i < this.getFields().length; i++) {
      fld = this.getFields()[i];
      if (fld.groupingMode) {
        result.groupingModes[fld.name] = fld.groupingMode;
      }
    }
    return result;
  },

  setGroupState: function (state) {
    var i, fld, key;
    if (state && (state.groupByFields || state.groupByFields === '')) {
      if (state.groupingModes) {
        for (key in state.groupingModes) {
          if (state.groupingModes.hasOwnProperty(key)) {
            fld = this.getField(key);
            if (fld) {
              fld.groupingMode = state.groupingModes[key];
            }
          }
        }
      }
      this.Super('setGroupState', [state.groupByFields]);
    } else {
      // older state definition
      this.Super('setGroupState', arguments);
    }
  },

  // Deletes the implicit filter on the selected record of the parent
  deleteSelectedParentRecordFilter: function (state) {
    var i, filterLength, filterItem;
    if (state.filter) {
      filterLength = state.filter.criteria.length;
      for (i = 0; i < filterLength; i++) {
        filterItem = state.filter.criteria[i];
        if (filterItem.fieldName === this.view.parentProperty) {
          // This way it is ensured that the sub tabs will not show the registers associated with
          // the register of its parent tab that was selected when the filter was created
          state.filter.criteria[i].value = '-1';
          break;
        }
      }
    }
  },

  getSummaryRowDataSource: function () {
    if (this.getSummarySettings()) {
      return this.getDataSource();
    }
  },

  getSummaryRowFetchRequestConfig: function () {
    var fld, i, summary = this.getSummarySettings(),
        config = this.Super('getSummaryRowFetchRequestConfig', arguments);
    if (summary) {
      config.params = config.params || {};
      config.params._summary = summary;
      config.params = this.getFetchRequestParams(config.params);
    }
    return config;
  },

  getSummarySettings: function () {
    var fld, i, summary;

    for (i = 0; i < this.getFields().length; i++) {
      fld = this.getFields()[i];
      if (fld.summaryFunction && isc.OBViewGrid.SUPPORTED_SUMMARY_FUNCTIONS.contains(fld.summaryFunction)) {
        summary = summary || {};
        summary[fld.displayField || fld.name] = fld.summaryFunction;
      }
    }
    return summary;
  },

  setView: function (view) {
    var dataPageSizeaux, length, i, crit, groupByMaxRecords;

    this.view = view;

    this.editFormDefaults.view = view;

    if (this.getField(this.view.parentProperty)) {
      this.getField(this.view.parentProperty).canFilter = false;
      this.getField(this.view.parentProperty).canEdit = false;
    }

    // Begins-added to have the additional filter clause and tabid..Mallikarjun M
    // URL example:http://localhost:8080/openbravo/?tabId=186&filterClause=e.businessPartner.searchKey%3D%27mcgiver%27&replaceDefaultFilter=true&
    if (this.view.tabId === this.view.standardWindow.additionalFilterTabId) {

      if (!this.filterClause || this.view.standardWindow.replaceDefaultFilter === 'true') {
        this.filterClause = unescape(this.view.standardWindow.additionalFilterClause);
      } else if (this.filterClause) {
        this.filterClause = '((' + this.filterClause + ') and (' + unescape(this.view.standardWindow.additionalFilterClause) + '))';
      }
    }
    // Ends..
    if (this.view.tabId === this.view.standardWindow.additionalCriteriaTabId && this.view.standardWindow.additionalCriteria) {
      crit = isc.JSON.decode(unescape(this.view.standardWindow.additionalCriteria));
      this.setCriteria(crit);
      delete this.view.standardWindow.additionalCriteria;
    }
    // if there is no autoexpand field then just divide the space
    if (!this.getAutoFitExpandField()) {
      length = this.fields.length;

      // nobody, then give all the fields a new size, dividing
      // the space among them
      for (i = 0; i < length; i++) {
        // ignore the first 2 fields, the checkbox and edit/form
        // buttons
        if (i > 1) {
          this.fields[i].width = '*';
        }
      }
    }
    // Modify the quantity of lines to count per Window
    dataPageSizeaux = OB.PropertyStore.get('dataPageSize', this.view.standardWindow.windowId);
    this.dataPageSize = dataPageSizeaux ? +dataPageSizeaux : 100;

    groupByMaxRecords = OB.PropertyStore.get('OBUIAPP_GroupingMaxRecords', this.view.standardWindow.windowId);
    this.groupByMaxRecords = groupByMaxRecords ? +groupByMaxRecords : 1000;
    this.canGroupBy = 'Y' === OB.PropertyStore.get('OBUIAPP_GroupingEnabled', this.view.standardWindow.windowId);
  },

  show: function () {
    var ret = this.Super('show', arguments);

    this.view.toolBar.updateButtonState(true);

    this.updateRowCountDisplay();

    this.resetEmptyMessage();

    return ret;
  },

  headerClick: function (fieldNum, header, autoSaveDone) {
    delete this.wasEditing;
    if (!autoSaveDone) {
      var actionObject = {
        target: this,
        method: this.headerClick,
        parameters: [fieldNum, header, true]
      };
      this.view.standardWindow.doActionAfterAutoSave(actionObject, true);
      return;
    }
    var field = this.fields[fieldNum],
        res;
    if (this.isCheckboxField(field) && this.singleRecordSelection) {
      this.deselectAllRecords();
      this.singleRecordSelection = false;
    }
    res = this.Super('headerClick', arguments);

    if (field.canSort !== false) {
      // saving grid configuration after sorting by new a field
      this.view.standardWindow.storeViewState();
    }
    return res;
  },

  keyPress: function () {
    var response = OB.KeyboardManager.Shortcuts.monitor('OBViewGrid');
    if (response !== false) {
      response = this.Super('keyPress', arguments);
    }
    return response;
  },

  bodyKeyPress: function (event, eventInfo) {
    var response = OB.KeyboardManager.Shortcuts.monitor('OBViewGrid.body');
    if (response !== false) {
      if (event && event.keyName === 'Space' && (isc.EventHandler.ctrlKeyDown() || isc.EventHandler.altKeyDown() || isc.EventHandler.shiftKeyDown())) {
        return true;
      }
      response = this.Super('bodyKeyPress', arguments);
    }
    return response;
  },

  editFormKeyDown: function () {
    // Custom method. Only works if the form is an OBViewForm
    var response = OB.KeyboardManager.Shortcuts.monitor('OBViewGrid.editForm');
    if (response !== false) {
      response = this.Super('editFormKeyDown', arguments);
    }
    return response;
  },

  // called when the view gets activated
  setActive: function (active) {
    if (active) {
      this.enableShortcuts();
    } else {
      this.disableShortcuts();
    }
  },

  disableShortcuts: function () {
    OB.KeyboardManager.Shortcuts.set('ViewGrid_EditInGrid', null, function () {
      return true;
    });
    OB.KeyboardManager.Shortcuts.set('ViewGrid_EditInForm', null, function () {
      return true;
    });
  },

  enableShortcuts: function () {
    var me = this,
        ksAction_CancelEditing, ksAction_MoveUpWhileEditing, ksAction_MoveDownWhileEditing, ksAction_DeleteSelectedRecords, ksAction_EditInGrid, ksAction_EditInForm, ksAction_CancelChanges;

    // This is JUST for the case of an editing row with the whole row in "read only mode"
    ksAction_MoveUpWhileEditing = function () {
      if (me.getEditForm()) {
        var editRow = me.getEditRow();
        me.cancelEditing();
        if (editRow) {
          me.startEditing(editRow - 1);
        }
        return false; // To avoid keyboard shortcut propagation
      } else {
        return true;
      }
    };
    OB.KeyboardManager.Shortcuts.set('ViewGrid_MoveUpWhileEditing', 'OBViewGrid.body', ksAction_MoveUpWhileEditing, null, {
      'key': 'Arrow_Up'
    });

    // This is JUST for the case of an editing row with the whole row in "read only mode"
    ksAction_MoveDownWhileEditing = function () {
      if (me.getEditForm()) {
        var editRow = me.getEditRow();
        me.cancelEditing();
        if (editRow || editRow === 0) {
          me.startEditing(editRow + 1);
        }
        return false; // To avoid keyboard shortcut propagation
      } else {
        return true;
      }
    };
    OB.KeyboardManager.Shortcuts.set('ViewGrid_MoveDownWhileEditing', 'OBViewGrid.body', ksAction_MoveDownWhileEditing, null, {
      'key': 'Arrow_Down'
    });

    ksAction_CancelEditing = function () {
      if (me.getEditForm()) {
        me.cancelEditing();
        return false; // To avoid keyboard shortcut propagation
      } else {
        return true;
      }
    };
    OB.KeyboardManager.Shortcuts.set('ViewGrid_CancelEditing', ['OBViewGrid.body', 'OBViewGrid.editForm'], ksAction_CancelEditing);

    ksAction_DeleteSelectedRecords = function () {
      var isRecordDeleted = me.deleteSelectedRowsByToolbarIcon();
      if (isRecordDeleted) {
        return false; // To avoid keyboard shortcut propagation
      } else {
        return true;
      }
    };
    OB.KeyboardManager.Shortcuts.set('ViewGrid_DeleteSelectedRecords', 'OBViewGrid.body', ksAction_DeleteSelectedRecords);

    ksAction_EditInGrid = function () {
      if (me.getSelectedRecords().length === 1) {
        me.endEditing();
        me.startEditing(me.getRecordIndex(me.getSelectedRecords()[0]));
        return false; // To avoid keyboard shortcut propagation
      } else {
        return true;
      }
    };
    OB.KeyboardManager.Shortcuts.set('ViewGrid_EditInGrid', 'OBViewGrid.body', ksAction_EditInGrid);

    ksAction_EditInForm = function () {
      if (me.getSelectedRecords().length === 1) {
        me.endEditing();
        me.view.editRecord(me.getSelectedRecords()[0]);
        return false; // To avoid keyboard shortcut propagation
      } else {
        return true;
      }
    };
    OB.KeyboardManager.Shortcuts.set('ViewGrid_EditInForm', ['OBViewGrid.body', 'OBViewGrid.editForm'], ksAction_EditInForm);

    this.Super('enableShortcuts', arguments);
  },

  deselectAllRecords: function (preventUpdateSelectInfo, autoSaveDone) {
    // if there is nothing to deselect then don't deselect
    if (!this.getSelectedRecord()) {
      return;
    }
    if (!autoSaveDone) {
      var actionObject = {
        target: this,
        method: this.deselectAllRecords,
        parameters: [preventUpdateSelectInfo, true]
      };
      this.view.standardWindow.doActionAfterAutoSave(actionObject, true);
      return;
    }

    this.allSelected = false;
    var ret = this.Super('deselectAllRecords', arguments);
    this.lastSelectedRecord = null;
    if (!preventUpdateSelectInfo) {
      this.selectionUpdated();
    }
    return ret;
  },

  selectAllRecords: function (autoSaveDone) {
    if (!autoSaveDone) {
      var actionObject = {
        target: this,
        method: this.selectAllRecords,
        parameters: [true]
      };
      this.view.standardWindow.doActionAfterAutoSave(actionObject, true);
      return;
    }
    this.allSelected = true;
    var ret = this.Super('selectAllRecords', arguments);
    this.selectionUpdated();
    return ret;
  },

  updateRowCountDisplay: function (delayed) {
    if (!delayed) {
      this.delayCall('updateRowCountDisplay', [true], 100);
      return;
    }
    var newValue = '',
        length = isc.isA.Tree(this.data) ? this.countGroupContent() : this.data.getLength();
    if (length > this.dataPageSize) {
      newValue = '>' + this.dataPageSize;
    } else if (length === 0) {
      newValue = '&nbsp;';
    } else {
      newValue = length;
    }
    if (this.filterEditor && this.filterEditor.getEditForm()) {
      this.filterEditor.getEditForm().setValue(isc.OBViewGrid.EDIT_LINK_FIELD_NAME, newValue);
      this.filterEditor.getEditForm().getField(isc.OBViewGrid.EDIT_LINK_FIELD_NAME).defaultValue = newValue;
    }
  },

  countGroupContent: function () {
    var i, cnt = 0,
        data = this.data.getRange(0, this.groupByMaxRecords + 1);
    for (i = 0; i < data.length; i++) {
      if (!data[i].isFolder) {
        cnt++;
      }
    }
    return cnt;
  },

  refreshContents: function (callback) {
    var selectedValues, context, additionalCriteriaTabId;

    this.resetEmptyMessage();
    this.view.updateTabTitle();

    /*
     * In case the url contains advanced criteria, the initial criteria contains the criteria to be applied. So it should not be deleted.
     * Refer issue https://issues.openbravo.com/view.php?id=23333
     */
    additionalCriteriaTabId = this.view.standardWindow.additionalCriteriaTabId;
    if (additionalCriteriaTabId && additionalCriteriaTabId !== this.view.tabId) {
      delete this.initialCriteria;
    }

    // do not refresh if the parent is not selected and we have no data
    // anyway
    if (this.view.parentProperty && (!this.data || !this.data.getLength || this.data.getLength() === 0)) {
      selectedValues = this.view.parentView.viewGrid.getSelectedRecords();
      if (selectedValues && !this.isOpenDirectMode && selectedValues.length === 0) {
        if (callback) {
          callback();
        }
        // but in this case we should show ourselves also
        if (!this.isVisible()) {
          this.makeVisible();
        }
        return;
      }
    }

    context = {
      showPrompt: false
    };
    this.filterData(this.getCriteria(), callback, context);
  },

  // the dataarrived method is where different actions are done after
  // data has arrived in the grid:
  // - open the edit view if default edit mode is enabled
  // - if the user goes directly to a tab (from a link in another window)
  // then
  // opening the relevant record is done here or if no record is passed grid
  // mode is opened
  // - if there is only one record then select it directly
  dataArrived: function (startRow, endRow) {
    var noSetSession, changeEvent, forceUpdate;
    // do this now, to replace the loading message
    // TODO: add dynamic part of readonly (via setWindowSettings: see issue 17441)
    if (this.uiPattern === 'SR' || this.uiPattern === 'RO' || this.uiPattern === 'ED') {
      this.noDataEmptyMessage = '<span class="' + this.emptyMessageStyle + '">' + OB.I18N.getLabel('OBUIAPP_NoDataInGrid') + '</span>';
    } else {
      this.noDataEmptyMessage = '<span class="' + this.emptyMessageStyle + '">' + OB.I18N.getLabel('OBUIAPP_GridNoRecords') + '</span>' + '<span onclick="this.onclick = new Function(); setTimeout(function() { window[\'' + this.ID + '\'].view.newRow(); }, 50); return false;" class="' + this.emptyMessageLinkStyle + '">' + OB.I18N.getLabel('OBUIAPP_GridCreateOne') + '</span>';
    }
    this.resetEmptyMessage();

    var record, ret = this.Super('dataArrived', arguments);
    this.updateRowCountDisplay();

    if (this.getSelectedRecords() && this.getSelectedRecords().length > 0) {
      this.selectionUpdated();
    }

    delete this.view.refreshingData;

    // no data and the grid is not visible, only do this is if the 
    // form is not in new mode
    if (this.data && this.data.getLength() === 0 && !this.isVisible() && !this.view.viewForm.isNew) {
      this.makeVisible();
    }

    // get the record id from any record
    if (this.isOpenDirectMode && this.data && this.data.getLength() >= 1) {
      // now tell the parent grid to refresh on the basis of this parentRecordId also
      if (this.view.parentView) {
        this.view.parentRecordId = this.data.get(startRow)[this.view.parentProperty];

        this.view.parentView.viewGrid.isOpenDirectMode = true;
        // makes sure that the parent refresh will not fire back to cause a child refresh
        this.view.parentView.isOpenDirectModeParent = true;
        // prevents opening edit mode for parent views
        this.view.parentView.viewGrid.isOpenDirectModeParent = true;
        this.view.parentView.viewGrid.targetRecordId = this.view.parentRecordId;
        this.view.parentView.viewGrid.delayCall('refreshContents', [], 10);
      }
    }
    delete this.isOpenDirectMode;

    if (this.initialCriteriaSetBySavedView) {
      delete this.initialCriteria;
      delete this.initialCriteriaSetBySavedView;
    }

    if (!this.targetRecordId) {
      delete this.isOpenDirectModeLeaf;
    }

    if (this.targetOpenNewEdit) {
      delete this.targetOpenNewEdit;
      // not passing record opens new
      this.view.editRecord();
    } else if (this.targetOpenGrid) {
      // direct link from other window but without a record id
      // so just show grid mode
      // don't need to do anything here
      delete this.targetOpenGrid;
    } else if (this.targetRecordId) {
      // direct link from other tab to a specific record
      this.delayedHandleTargetRecord(startRow, endRow);
    } else if (this.view.shouldOpenDefaultEditMode()) {
      // ui-pattern: single record/edit mode
      this.view.openDefaultEditView(this.getRecord(startRow));
    } else if (this.data && this.data.getLength() === 1) {
      // one record select it directly
      record = this.getRecord(0);
      // this select method prevents state changing if the record
      // was already selected
      this.doSelectSingleRecord(record);

      // Call to updateButtonState to force a call to the FIC in setsession mode
      // See issue https://issues.openbravo.com/view.php?id=22655
      noSetSession = false;
      changeEvent = false;
      forceUpdate = true;
      this.view.toolBar.updateButtonState(noSetSession, changeEvent, forceUpdate);

    } else if (this.lastSelectedRecord) {
      // if nothing was select, select the record again
      if (!this.getSelectedRecord()) {
        // if it is still in the cache ofcourse
        var gridRecord = this.data.find(OB.Constants.ID, this.lastSelectedRecord.id);
        if (gridRecord) {
          this.doSelectSingleRecord(gridRecord);
        }
      } else if (this.getSelectedRecords() && this.getSelectedRecords().length !== 1) {
        this.lastSelectedRecord = null;
      }
    }

    if (this.actionAfterDataArrived) {
      this.actionAfterDataArrived();
      this.actionAfterDataArrived = null;
    }

    return ret;
  },

  removeOrClause: function (criteria) {
    // The original criteria is stored in the position #0
    // The criteria to select the recently created records is stored in position #1..length-1
    return criteria.criteria.get(0);
  },

  refreshGrid: function (callback, newRecordsToBeIncluded) {
    var originalCriteria, criteria = {},
        newRecordsCriteria, newRecordsLength, i, index;

    //check whether newRecordsToBeIncluded contains records not part of the current grid and remove them.
    if (newRecordsToBeIncluded && newRecordsToBeIncluded.length > 0 && this.data) {
      for (i = 0; i < newRecordsToBeIncluded.length; i++) {
        if (!this.data.findByKey(newRecordsToBeIncluded[i])) {
          index = newRecordsToBeIncluded.indexOf(newRecordsToBeIncluded[i]);
          if (index !== -1) {
            newRecordsToBeIncluded.splice(index, 1);
          }
        }
      }
    }

    if (this.getSelectedRecord()) {
      this.targetRecordId = this.getSelectedRecord()[OB.Constants.ID];
      // as the record is already selected it is already in the filter
      this.notRemoveFilter = true;
    }
    this.actionAfterDataArrived = callback;
    this.invalidateCache();

    var context = {
      showPrompt: false
    };

    // Removes the 'or' clause, if there is one
    // See note at the function foot
    originalCriteria = this.getCriteria();
    if (this._criteriaWithOrClause) {
      originalCriteria = this.removeOrClause(originalCriteria);
      this._criteriaWithOrClause = false;
    }

    // If a record has to be included in the refresh, it must be included
    // in the filter with an 'or' operator, along with the original filter,
    // but only if there is an original filter
    if (newRecordsToBeIncluded && newRecordsToBeIncluded.length > 0 && originalCriteria.criteria.length > 0) {
      // Adds the current record to the criteria
      newRecordsCriteria = [];
      newRecordsLength = newRecordsToBeIncluded.length;
      for (i = 0; i < newRecordsLength; i++) {
        newRecordsCriteria.push({
          fieldName: 'id',
          operator: 'equals',
          value: newRecordsToBeIncluded[i]
        });
      }

      this._criteriaWithOrClause = true;
      criteria._constructor = 'AdvancedCriteria';
      criteria._OrExpression = true; // trick to get a really _or_ in the backend
      criteria.operator = 'or';
      criteria.criteria = [originalCriteria].concat(newRecordsCriteria);
    } else {
      criteria = originalCriteria;
    }
    this.filterData(criteria, null, context);
    // At this point the original criteria should be restored, to prevent
    // the 'or' clause that was just added to be used in subsequent refreshes.
    // It is not possible to do it here, though, because a this.setCriteria(originalCriteria)
    // would trigger an automatic refresh that would leave without effect that last filterData
    // The additional criteria will be removed in the next call to refreshGrid
  },

  // with a delay to handle the target record when the body has been drawn
  delayedHandleTargetRecord: function (startRow, endRow) {
    var rowTop, recordIndex, i, data = this.data,
        tmpTargetRecordId = this.targetRecordId;
    if (!this.targetRecordId) {
      delete this.isOpenDirectModeLeaf;
      return;
    }
    if (this.body) {
      // don't need it anymore
      delete this.targetRecordId;
      delete this.notRemoveFilter;

      var gridRecord = data.find(OB.Constants.ID, tmpTargetRecordId);

      // no grid record found, stop here
      if (!gridRecord) {
        return;
      }
      recordIndex = this.getRecordIndex(gridRecord);

      if (data.criteria) {
        data.criteria._targetRecordId = null;
      }

      this.doSelectSingleRecord(gridRecord);

      this.scrollCellIntoView(recordIndex, null, true, true);

      // show the form with the selected record
      if (!this.view.isShowingForm && this.isOpenDirectModeLeaf) {
        this.view.editRecord(gridRecord);
      }

      delete this.isOpenDirectModeLeaf;
      delete this.isOpenDirectModeParent;

    } else {
      // wait a bit longer til the body is drawn
      this.delayCall('delayedHandleTargetRecord', [startRow, endRow], 200, this);
    }
  },

  selectRecordById: function (id, forceFetch) {
    if (forceFetch) {
      this.targetRecordId = id;
      this.filterData(this.getCriteria());
      return;
    }

    var recordIndex, gridRecord = this.data.find(OB.Constants.ID, id);
    // no grid record fetch it
    if (!gridRecord) {
      this.targetRecordId = id;
      this.filterData(this.getCriteria());
      return;
    }
    recordIndex = this.getRecordIndex(gridRecord);
    this.scrollRecordIntoView(recordIndex, true);
    this.doSelectSingleRecord(gridRecord);
  },

  filterData: function (criteria, callback, requestProperties) {
    var theView = this.view,
        newCallBack;

    if (!requestProperties) {
      requestProperties = {};
    }
    requestProperties.showPrompt = false;
    requestProperties.filtering = true;

    newCallBack = function () {
      theView.recordSelected();
      if (typeof callback === 'function') {
        callback();
      }
    };

    return this.Super('filterData', [this.convertCriteria(criteria), newCallBack, requestProperties]);
  },

  fetchData: function (criteria, callback, requestProperties) {
    var theView = this.view,
        newCallBack;

    if (!requestProperties) {
      requestProperties = {};
    }
    requestProperties.showPrompt = false;

    newCallBack = function () {
      if (theView.standardWindow && theView.standardWindow.requiredReapplyViewState) {
        theView.standardWindow.reapplyViewStates();
      }

      theView.recordSelected();
      if (callback) {
        callback();
      }
    };

    return this.Super('fetchData', [this.convertCriteria(criteria), newCallBack, requestProperties]);
  },

  handleFilterEditorSubmit: function (criteria, context, autoSaveDone) {
    if (!autoSaveDone) {
      var actionObject = {
        target: this,
        method: this.handleFilterEditorSubmit,
        parameters: [criteria, context, true]
      };
      this.view.standardWindow.doActionAfterAutoSave(actionObject, true);
      return;
    }

    this.Super('handleFilterEditorSubmit', arguments);
  },

  getInitialCriteria: function () {
    var criteria = this.Super('getInitialCriteria', arguments);
    return this.convertCriteria(criteria);
  },

  getCriteria: function () {
    var criteria = this.Super('getCriteria', arguments) || {};
    if ((criteria === null || !criteria.criteria) && this.initialCriteria) {
      criteria = isc.shallowClone(this.initialCriteria);
    }
    criteria = this.convertCriteria(criteria);
    return criteria;
  },

  convertCriteria: function (criteria) {
    var selectedValues, prop, fld, value, i, j, k, criterion, fldName, length, today = new Date(),
        currentTimeZoneOffsetInMinutes = -today.getTimezoneOffset();

    if (!criteria) {
      criteria = {};
    } else {
      criteria = isc.clone(criteria);
    }

    if (!criteria.operator) {
      criteria.operator = 'and';
    }
    if (!criteria._constructor) {
      criteria._constructor = 'AdvancedCriteria';
    }

    if (!criteria.criteria) {
      criteria.criteria = [];
    }

    if (!this.notRemoveFilter && this.targetRecordId) {
      // do not filter on anything with a targetrecord
      criteria = {
        operator: 'and',
        _constructor: 'AdvancedCriteria',
        criteria: []
      };

      // add a dummy criteria to force a fetch
      criteria.criteria.push(isc.OBRestDataSource.getDummyCriterion());
    }

    // note pass in criteria otherwise infinite looping!
    this.resetEmptyMessage(criteria);

    if (this.view.parentProperty && !this.isOpenDirectMode) {
      selectedValues = this.view.parentView.viewGrid.getSelectedRecords();
      var parentPropertyFilterValue = -1;
      if (selectedValues) {
        if (selectedValues.length === 0) {
          parentPropertyFilterValue = '-1';
        } else if (selectedValues.length > 1) {
          parentPropertyFilterValue = '-1';
        } else {
          parentPropertyFilterValue = selectedValues[0][OB.Constants.ID];
        }
      }

      this.view.parentRecordId = parentPropertyFilterValue;

      var fnd = false;
      var innerCriteria = criteria.criteria;
      length = innerCriteria.length;
      for (i = 0; i < length; i++) {
        criterion = innerCriteria[i];
        fldName = criterion.fieldName;
        if (fldName === this.view.parentProperty) {
          fnd = true;
          criterion.operator = 'equals';
          criterion.value = parentPropertyFilterValue;
          break;
        }
      }
      if (!fnd) {
        innerCriteria.add({
          fieldName: this.view.parentProperty,
          operator: 'equals',
          value: parentPropertyFilterValue
        });
      }
    }

    // Iterates all the criterias
    // -If they are not needed, they are removed
    // -Otherwise, if it is a datetime criteria, the UTC offset in minutes is added
    if (criteria && criteria.criteria) {
      var internalCriteria = criteria.criteria;
      for (i = (internalCriteria.length - 1); i >= 0; i--) {
        var shouldRemove = false;
        criterion = internalCriteria[i];
        // but do not remove dummy criterion
        if (criterion.fieldName && criterion.fieldName.startsWith('_') && criterion.fieldName !== isc.OBRestDataSource.DUMMY_CRITERION_NAME) {
          shouldRemove = true;
        } else if (isc.isA.emptyString(criterion.value)) {
          shouldRemove = true;
        } else if (this.view.parentView && !this.view.parentProperty) {
          // subtabs without an explicit reference to their parent property need to remove unused criterias
          if (this.view.parentView.isShowingTree) {
            selectedValues = this.view.parentView.treeGrid.getSelectedRecords();
          } else {
            selectedValues = this.view.parentView.viewGrid.getSelectedRecords();
          }

          if (selectedValues.length !== 1) {
            // if there is not a single record selected, remove dummies
            if (criterion.fieldName === isc.OBRestDataSource.DUMMY_CRITERION_NAME) {
              shouldRemove = true;
            }
          } else {
            // with a single record selected, removed false criterion
            if (criterion.fieldName === 'id' && criterion.operator === 'equals' && criterion.value === '-1') {
              shouldRemove = true;
            }
          }
        } else if (criterion.fieldName === this.view.parentProperty + OB.Constants.FIELDSEPARATOR + OB.Constants.IDENTIFIER && criterion.operator === 'iEquals') {
          // Prevent the filtering of a parent column if it is shown on grid
          // See issue https://issues.openbravo.com/view.php?id=26767
          shouldRemove = true;
        }

        if (shouldRemove) {
          internalCriteria.removeAt(i);
        } else {
          var fieldName;
          // The first name a date time field is filtered, the fieldName is stored in criteria.criteria[i].criteria[0].fieldName
          if (criteria.criteria[i].criteria && criteria.criteria[i].criteria[0]) {
            fieldName = criteria.criteria[i].criteria[0].fieldName;
          } else { // After the first time, the fieldName is stored in criteria.criteria[i].fieldName
            fieldName = criteria.criteria[i].fieldName;
          }

          for (j = 0; j < this.fields.length; j++) {
            if (this.fields[j].name === fieldName && isc.SimpleType.getType(this.fields[j].type).inheritsFrom === 'datetime') {
              if (criteria.criteria[i].criteria) {
                for (k = 0; k < criteria.criteria[i].criteria.length; k++) {
                  criteria.criteria[i].criteria[k].minutesTimezoneOffset = currentTimeZoneOffsetInMinutes;
                }
              } else {
                criteria.criteria[i].minutesTimezoneOffset = currentTimeZoneOffsetInMinutes;
              }
              break;
            }
          }
        }
      }
    }

    if (this.view.parentView && !this.view.parentProperty) {
      // subtabs without an explicit reference to their parent property
      // result in an empty criteria which is ignored not generating the
      // request. Forcing load
      // See issue #22645
      selectedValues = this.view.parentView.viewGrid.getSelectedRecords();
      if (selectedValues.length !== 1) {
        // if there is not a single record selected, always false criterion
        criteria.criteria.push({
          fieldName: 'id',
          operator: 'equals',
          value: '-1'
        });
      } else {
        // with a single record selected, dummy criterion
        criteria.criteria.push(isc.OBRestDataSource.getDummyCriterion());
      }
    }

    this.checkShowFilterFunnelIcon(criteria);

    return criteria;
  },

  onFetchData: function (criteria, requestProperties) {
    if (this.data && this.data.forceRefresh) {
      // to force fetch from server, remove all cached data
      delete this.data.forceRefresh;
      delete this.data.localData;
      delete this.data.allRows;
      this.data.totalRows = 0;
      this.data.cachedRows = 0;
    }

    requestProperties = requestProperties || {};
    requestProperties.params = this.getFetchRequestParams(requestProperties.params);
  },

  getFetchRequestParams: function (params, isExporting) {
    var i, len, first, selectedProperties;
    params = params || {};

    if (this.targetRecordId) {
      params._targetRecordId = this.targetRecordId;
      if (!this.notRemoveFilter) {
        // remove the filter clause we don't want to use it anymore
        this.filterClause = null;
      }

      // this mode means that no parent is selected but the parent needs to be
      // determined from the target record and the parent property
      if (this.isOpenDirectMode && this.view.parentView) {
        params._filterByParentProperty = this.view.parentProperty;
      }

      if (this.view && this.view.directNavigation) {
        params._directNavigation = true;
      }
    } else if (params._targetRecordId) {
      delete params._targetRecordId;
    }

    // prevent the count operation
    params[isc.OBViewGrid.NO_COUNT_PARAMETER] = 'true';

    if (this.orderByClause) {
      params[OB.Constants.ORDERBY_PARAMETER] = this.orderByClause;
    }

    // add all the new session properties context info to the requestProperties
    isc.addProperties(params, this.view.getContextInfo(true, false));

    if (this.filterClause) {
      if (this.whereClause) {
        params[OB.Constants.WHERE_PARAMETER] = ' ((' + this.whereClause + ') and (' + this.filterClause + ')) ';
      } else {
        params[OB.Constants.WHERE_PARAMETER] = this.filterClause;
      }
    } else if (this.whereClause) {
      params[OB.Constants.WHERE_PARAMETER] = this.whereClause;
    } else {
      params[OB.Constants.WHERE_PARAMETER] = null;
    }

    if (!isExporting) {
      first = true;
      selectedProperties = '';
      len = this.requiredGridProperties.length;
      for (i = 0; i < len; i++) {
        if (first) {
          first = false;
          selectedProperties = selectedProperties + this.requiredGridProperties[i];
        } else {
          selectedProperties = selectedProperties + ',' + this.requiredGridProperties[i];
        }
      }

      len = this.fields.length;
      for (i = 0; i < len; i++) {
        if (this.fields[i].name[0] !== '_') {
          selectedProperties = selectedProperties + ',';
          selectedProperties = selectedProperties + this.fields[i].name;
        }
      }
      params._selectedProperties = selectedProperties;
    }
    return params;
  },

  createNew: function () {
    this.view.editRecord();
  },

  makeVisible: function () {
    if (this.view.isShowingForm) {
      this.view.switchFormGridVisibility();
    } else {
      this.show();
    }
  },

  // determine which field can be autoexpanded to use extra space
  getAutoFitExpandField: function () {
    var ret, i, length;
    length = this.view.autoExpandFieldNames.length;
    for (i = 0; i < length; i++) {
      var field = this.getField(this.view.autoExpandFieldNames[i]);
      if (field && field.name) {
        return field.name;
      }
    }
    ret = this.Super('getAutoFitExpandField', arguments);
    return ret;
  },

  recordClick: function (viewer, record, recordNum, field, fieldNum, value, rawValue) {
    var textDeselectInterval = setInterval(function () { //To ensure that if finally a double click (recordDoubleClick) is executed, no work is highlighted/selected
      if (document.selection && document.selection.empty) {
        document.selection.empty();
      } else if (window.getSelection) {
        var sel = window.getSelection();
        sel.removeAllRanges();
      }
    }, 15);
    setTimeout(function () {
      clearInterval(textDeselectInterval);
    }, 350);
    var actionObject = {
      target: this,
      method: this.handleRecordSelection,
      parameters: [viewer, record, recordNum, field, fieldNum, value, rawValue, false, this.view.isEditingGrid]
    };
    this.view.standardWindow.doActionAfterAutoSave(actionObject, true);
  },

  recordDoubleClick: function (viewer, record, recordNum, field, fieldNum, value, rawValue) {
    var actionObject = {
      target: this.view,
      method: this.view.editRecord,
      parameters: [record, false, (field ? field.name : null)]
    };
    this.view.standardWindow.doActionAfterAutoSave(actionObject, true);
  },

  resetEmptyMessage: function (criteria) {
    var selectedValues, parentIsNew, oldMessage = this.emptyMessage;
    criteria = criteria || this.getCriteria();
    if (!this.view) {
      this.emptyMessage = this.noDataEmptyMessage;
    } else if (this.isGridFiltered(criteria)) {
      // there can be some initial filters, but still no parent selected
      if (this.view.parentView) {
        selectedValues = this.view.parentView.viewGrid.getSelectedRecords();
        parentIsNew = this.view.parentView.isShowingForm && this.view.parentView.viewForm.isNew;
        parentIsNew = parentIsNew || (selectedValues.length === 1 && selectedValues[0]._new);
        if (parentIsNew) {
          this.emptyMessage = '<span class="' + this.emptyMessageStyle + '">' + OB.I18N.getLabel('OBUIAPP_ParentIsNew') + '</span>';
        } else if (!selectedValues || selectedValues.length === 0) {
          this.emptyMessage = '<span class="' + this.emptyMessageStyle + '">' + OB.I18N.getLabel('OBUIAPP_NoParentSelected') + '</span>';
        } else if (selectedValues.length > 1) {
          this.emptyMessage = '<span class="' + this.emptyMessageStyle + '">' + OB.I18N.getLabel('OBUIAPP_MultipleParentsSelected') + '</span>';
        } else {
          this.emptyMessage = this.filterNoRecordsEmptyMessage;
        }
      } else {
        if (this.lazyFiltering && !isc.isA.ResultSet(this.data)) {
          this.emptyMessage = this.noDataEmptyMessage;
        } else {
          this.emptyMessage = this.filterNoRecordsEmptyMessage;
        }
      }
    } else if (this.view.isRootView) {
      this.emptyMessage = this.noDataEmptyMessage;
    } else {
      selectedValues = this.view.parentView.viewGrid.getSelectedRecords();
      parentIsNew = this.view.parentView.isShowingForm && this.view.parentView.viewForm.isNew;
      parentIsNew = parentIsNew || (selectedValues.length === 1 && selectedValues[0]._new);
      if (parentIsNew) {
        this.emptyMessage = '<span class="' + this.emptyMessageStyle + '">' + OB.I18N.getLabel('OBUIAPP_ParentIsNew') + '</span>';
      } else if (!selectedValues || selectedValues.length === 0) {
        this.emptyMessage = '<span class="' + this.emptyMessageStyle + '">' + OB.I18N.getLabel('OBUIAPP_NoParentSelected') + '</span>';
      } else if (selectedValues.length > 1) {
        this.emptyMessage = '<span class="' + this.emptyMessageStyle + '">' + OB.I18N.getLabel('OBUIAPP_MultipleParentsSelected') + '</span>';
      } else {
        this.emptyMessage = this.noDataEmptyMessage;
      }
    }
    if (oldMessage !== this.emptyMessage) {
      this.body.markForRedraw();
    }
  },

  // +++++++++++++++++++++++++++++ Context menu on record click +++++++++++++++++++++++
  cellContextClick: function (record, rowNum, colNum) {
    var isGroupOrSummary = record && (record[this.groupSummaryRecordProperty] || record[this.gridSummaryRecordProperty]);

    // don't do anything if right-clicking on a selected record
    if (!this.isSelected(record)) {
      this.handleRecordSelection(null, record, rowNum, null, colNum, null, null, true);
    }

    this.view.setAsActiveView();

    if (isGroupOrSummary) {
      return false;
    }

    var ret = this.Super('cellContextClick', arguments);
    return ret;
  },

  makeCellContextItems: function (record, rowNum, colNum) {
    var sourceWindow = this.view.standardWindow.windowId;
    var menuItems = [];
    var recordsSelected = this.getSelectedRecords().length > 0;
    var singleSelected = this.getSelectedRecords().length === 1;
    var field = this.getField(colNum);
    var grid = this;
    if (!this.view.hasNotChanged() || this.view.viewGrid.hasErrors()) {
      menuItems.add({
        title: OB.I18N.getLabel('OBUIAPP_UndoChanges'),
        keyTitle: OB.KeyboardManager.Shortcuts.getProperty('keyComb.text', 'Grid_CancelChanges', 'id'),
        click: function () {
          grid.view.undo();
        }
      });
    }

    if (singleSelected && this.canEdit && this.isWritable(record) && !this.view.readOnly) {
      menuItems.add({
        title: OB.I18N.getLabel('OBUIAPP_EditInGrid'),
        keyTitle: OB.KeyboardManager.Shortcuts.getProperty('keyComb.text', 'ViewGrid_EditInGrid', 'id'),
        click: function () {
          grid.endEditing();
          if (colNum || colNum === 0) {
            grid.forceFocusColumn = grid.getField(colNum).name;
          }
          grid.startEditing(rowNum, colNum);
        }
      });
    }

    if (!this.view.singleRecord && !this.view.readOnly && !this.isGrouped && !this.view.editOrDeleteOnly) {
      menuItems.add({
        title: OB.I18N.getLabel('OBUIAPP_CreateRecordInGrid'),
        keyTitle: OB.KeyboardManager.Shortcuts.getProperty('keyComb.text', 'ToolBar_NewRow', 'id'),
        click: function () {
          grid.startEditingNew(rowNum);
        }
      });
    }

    if (singleSelected && field.canFilter) {
      menuItems.add({
        title: OB.I18N.getLabel('OBUIAPP_UseAsFilter'),
        click: function () {
          var value;
          // a foreign key field, use the displayfield/identifier
          if (field.fkField && field.displayField) {
            value = record[field.displayField];
          } else {
            value = grid.getEditDisplayValue(rowNum, colNum, record);
          }
          // assume a date range filter item
          if (isc.isA.Date(value) && field.filterEditorType === 'OBMiniDateRangeItem') {
            grid.filterEditor.getEditForm().getField(field.name).setSingleDateValue(value);
          } else {
            grid.filterEditor.getEditForm().setValue(field.name, OB.Utilities.encodeSearchOperator(value));
          }
          var criteria = grid.filterEditor.getEditForm().getValuesAsCriteria();
          grid.checkShowFilterFunnelIcon(criteria);
          grid.filterData(criteria);
        }
      });
    }
    if (singleSelected && field.fkField) {
      menuItems.add({
        title: OB.I18N.getLabel('OBUIAPP_OpenOnTab'),
        click: function () {
          var fldName = field.name;
          var dotIndex = fldName.lastIndexOf(OB.Constants.FIELDSEPARATOR);
          if (dotIndex !== -1 && fldName.endsWith(OB.Constants.IDENTIFIER)) {
            fldName = fldName.substring(0, dotIndex);
          }
          OB.Utilities.openDirectView(sourceWindow, field.refColumnName, field.targetEntity, record[fldName]);
        }
      });
    }
    if (this.view.isDeleteableTable && recordsSelected && !this.view.readOnly && !this.view.singleRecord && this.allSelectedRecordsWritable() && (this.view.standardWindow.allowDelete !== 'N')) {
      menuItems.add({
        title: OB.I18N.getLabel('OBUIAPP_Delete'),
        keyTitle: OB.KeyboardManager.Shortcuts.getProperty('keyComb.text', 'ToolBar_Eliminate', 'id'),
        click: function () {
          grid.deleteSelectedRowsByToolbarIcon();
        }
      });
    }
    return menuItems;
  },

  deleteSelectedRowsByToolbarIcon: function () {
    // The deleteSelectedRows action trigger should be the same than the toolbar button, so if this last one is overwritten,
    // this delete rows logic should perform the same action than the toolbar button.
    var grid = this,
        isToolbarButtonFound = false,
        toolbarButton, i;
    if (grid.getSelectedRecords().length < 1) {
      return false;
    }
    if (grid.view.toolBar && grid.view.toolBar.leftMembers && isc.OBToolbar.TYPE_DELETE) {
      for (i = 0; i < grid.view.toolBar.leftMembers.length; i++) {
        if (grid.view.toolBar.leftMembers[i].buttonType === isc.OBToolbar.TYPE_DELETE) {
          isToolbarButtonFound = true;
          toolbarButton = grid.view.toolBar.leftMembers[i];
          if (!toolbarButton.disabled) {
            toolbarButton.action();
            return true;
          }
          break;
        }
      }
    }
    // But if the toolbar button is not found, do the default action
    if (!isToolbarButtonFound) {
      grid.view.deleteSelectedRows();
      return true;
    }
    return false;
  },

  // +++++++++++++++++++++++++++++ Record Selection Handling +++++++++++++++++++++++
  updateSelectedCountDisplay: function () {
    var selection = this.getSelection(),
        fld, grid = this;
    var selectionLength = selection.getLength();
    var newValue = '&nbsp;';
    if (selectionLength > 0) {
      newValue = selectionLength;

      if (this.filterEditor && this.filterEditor.getEditForm()) {
        fld = this.filterEditor.getEditForm().getField(this.getCheckboxField().name);
        if (fld && !fld.clickForSelectedRow) {
          fld.clickForSelectedRow = true;
          fld.originalClick = fld.click;
          fld.click = function () {
            if (grid.getSelection().getLength() === 0) {
              return;
            }
            grid.scrollToRow(grid.getRecordIndex(grid.getSelectedRecord()));
            // do redraw as first columns with buttons are not drawn
            grid.markForRedraw();
          };
          fld.itemHoverHTML = function () {
            return OB.I18N.getLabel('OBUIAPP_ClickSelectedCount');
          };
        }
        fld.textBoxStyle = fld.clickableTextBoxStyle;
        fld.updateState();
      }
    } else {
      if (this.filterEditor && this.filterEditor.getEditForm()) {
        fld = this.filterEditor.getEditForm().getField(this.getCheckboxField().name);
        if (fld) {
          fld.textBoxStyle = fld.nonClickableTextBoxStyle;
          fld.updateState();
        }
      }
    }
    if (this.filterEditor) {
      this.filterEditor.getEditForm().setValue(this.getCheckboxField().name, newValue);
      this.filterEditor.getEditForm().getField(this.getCheckboxField().name).defaultValue = newValue;
    }
  },

  // note when solving selection issues in the future also
  // consider using the selectionChanged method, but that
  // one has as disadvantage that it is called multiple times
  // for one select/deselect action
  selectionUpdated: function (record, recordList) {
    if ((!recordList || recordList.length === 1) && record === this.lastSelectedRecord && (this.lastSelectedRecord || record)) {
      return;
    }

    // close any editors, but only if it is different from the one we are editing
    if (this.isEditingGrid) {
      var editRecord = this.getRecord(this.getEditRow());
      if (editRecord !== record) {
        this.closeAnyOpenEditor();
      }
    }
    this.stopHover();
    this.updateSelectedCountDisplay();
    this.view.recordSelected();
    if (this.getSelectedRecords() && this.getSelectedRecords().length !== 1) {
      this.lastSelectedRecord = null;
    } else {
      this.lastSelectedRecord = this.getSelectedRecord();
    }
  },

  selectOnMouseDown: function (record, recordNum, fieldNum, autoSaveDone) {
    // don't change selection on right mouse down
    var EH = isc.EventHandler,
        eventType = EH.getEventType();
    this.wasEditing = this.view.isEditingGrid;

    // don't do anything if right-clicking on a selected record
    if (EH.rightButtonDown() && this.isSelected(record)) {
      return;
    }

    // do autosave when this is a click on a checkbox field or when this is not
    // a mouse event, in other cases the autosave is done as part of the recordclick
    // which is called for a mousedown also
    var passToAutoSave = this.getCheckboxFieldPosition() === fieldNum || !EH.isMouseEvent(eventType);

    if (!autoSaveDone && passToAutoSave) {
      var actionObject = {
        target: this,
        method: this.selectOnMouseDown,
        parameters: [record, recordNum, fieldNum, true]
      };
      this.view.standardWindow.doActionAfterAutoSave(actionObject, true);
      return;
      // only call this method in case a checkbox click was done
      // in all other cases the recordClick will be called later
      // anyway
      //      if (this.getCheckboxFieldPosition() === fieldNum) {
      //        this.setActionAfterAutoSave(this, this.selectOnMouseDown, arguments);
      //      }
    }

    var previousSingleRecordSelection = this.singleRecordSelection;
    var currentSelectedRecordSelected = (this.getSelectedRecord() === record);
    if (this.getCheckboxFieldPosition() === fieldNum) {
      if (this.singleRecordSelection) {
        this.deselectAllRecords(true);
      }
      this.singleRecordSelection = false;
      this.Super('selectOnMouseDown', arguments);

      // handle a special case:
      // - singlerecordmode: checkbox is not checked
      // - user clicks on checkbox
      // in this case move to multi select mode and keep the record selected
      if (previousSingleRecordSelection && currentSelectedRecordSelected) {
        this.selectSingleRecord(record);
      }

      this.selectionUpdated();

      this.markForRedraw('Selection checkboxes need to be redrawn');
    } else {
      // do some checking, the handleRecordSelection should only be called
      // in case of keyboard navigation and not for real mouse clicks,
      // these are handled by the recordClick and recordDoubleClick methods
      // if this method here would also handle mouseclicks then the
      // doubleClick
      // event is not captured anymore
      if (!EH.isMouseEvent(eventType)) {
        this.handleRecordSelection(null, record, recordNum, null, fieldNum, null, null, true);
      }
    }
  },

  handleRecordSelection: function (viewer, record, recordNum, field, fieldNum, value, rawValue, fromSelectOnMouseDown) {
    var wasEditing = this.wasEditing;
    delete this.wasEditing;
    var EH = isc.EventHandler;
    var keyName = EH.getKey();

    // stop editing if the user clicks out of the row
    if ((this.getEditRow() || this.getEditRow() === 0) && this.getEditRow() !== recordNum) {
      this.endEditing();
      wasEditing = true;
    }
    // do nothing, click in the editrow itself
    if ((this.getEditRow() || this.getEditRow() === 0) && this.getEditRow() === recordNum) {
      return;
    }

    // if the arrow key was pressed and no ctrl/shift pressed then
    // go to single select mode
    var arrowKeyPressed = keyName && (keyName === isc.OBViewGrid.ARROW_UP_KEY_NAME || keyName === isc.OBViewGrid.ARROW_DOWN_KEY_NAME);

    var previousSingleRecordSelection = this.singleRecordSelection;
    if (arrowKeyPressed) {
      if ((EH.ctrlKeyDown() && !EH.altKeyDown() && !EH.shiftKeyDown()) || (!EH.ctrlKeyDown() && !EH.altKeyDown() && EH.shiftKeyDown())) {
        // move to multi-select mode, let the standard do it for us
        this.singleRecordSelection = false;
      } else if (!(!EH.ctrlKeyDown() && EH.altKeyDown() && EH.shiftKeyDown())) { // 'if' statement to avoid do an action when the KS to move to a child tab is fired
        this.doSelectSingleRecord(record);
      }
    } else if (this.getCheckboxFieldPosition() === fieldNum) {
      if (this.singleRecordSelection) {
        this.deselectAllRecords(true);
      }
      // click in checkbox field is done by standard logic
      // in the selectOnMouseDown
      this.singleRecordSelection = false;
      this.selectionUpdated();
    } else if (isc.EventHandler.ctrlKeyDown() && !isc.EventHandler.altKeyDown() && !isc.EventHandler.shiftKeyDown()) {
      // only do something if record clicked and not from selectOnMouseDown
      // this method got called twice from one clicK: through recordClick
      // and
      // to selectOnMouseDown. Only handle one.
      if (!fromSelectOnMouseDown) {
        this.singleRecordSelection = false;
        // let ctrl-click also deselect records
        if (this.isSelected(record)) {
          this.deselectRecord(record);
        } else {
          this.selectRecord(record);
        }
      }
    } else if (!isc.EventHandler.ctrlKeyDown() && !isc.EventHandler.altKeyDown() && isc.EventHandler.shiftKeyDown()) {
      this.singleRecordSelection = false;
      this.selection.selectOnMouseDown(this, recordNum, fieldNum);
      this.selectionUpdated(this.getSelectedRecord(), this.getSelection());
    } else {
      // click on the record which was already selected
      this.doSelectSingleRecord(record);

      // if we were editing then a single click continue edit mode
      if (wasEditing) {
        // set the focus in the clicked cell
        this.forceFocusColumn = this.getField(fieldNum).name;
        this.startEditing(recordNum, fieldNum);
      }
    }

    this.updateSelectedCountDisplay();
    this.view.toolBar.updateButtonState(true);

    // mark some redraws if there are lines which don't
    // have a checkbox flagged, so if we move from single record selection
    // to multi record selection
    if (!this.singleRecordSelection && previousSingleRecordSelection) {
      this.markForRedraw('Selection checkboxes need to be redrawn');
    }
  },

  selectRecordForEdit: function (record) {
    this.Super('selectRecordForEdit', arguments);
    this.doSelectSingleRecord(record);
  },

  doSelectSingleRecord: function (record) {
    // if this record is already selected and the only one then do nothing
    // note that when navigating with the arrow key that at a certain 2 are
    // selected
    // when going into this method therefore the extra check on length === 1
    if (this.singleRecordSelection && this.getSelectedRecord() === record && this.getSelection().length === 1) {
      return;
    }
    this.singleRecordSelection = true;
    this.selectSingleRecord(record);

    // deselect the checkbox in the top
    var fieldNum = this.getCheckboxFieldPosition(),
        field = this.fields[fieldNum];
    var icon = this.checkboxFieldFalseImage || this.booleanFalseImage;
    var title = this.getValueIconHTML(icon, field);

    this.setFieldTitle(fieldNum, title);
  },

  // overridden to prevent the checkbox to be shown when only one
  // record is selected.
  getCellValue: function (record, recordNum, fieldNum, gridBody) {
    var field = this.fields[fieldNum],
        value, isEditRow = (recordNum === this.getEditRow()),
        wasGrouped, func = this.getGridSummaryFunction(field),
        isGroupOrSummary = record && (record[this.groupSummaryRecordProperty] || record[this.gridSummaryRecordProperty]);

    // no checkbox in checkbox column for summary row
    if (isGroupOrSummary && this.isCheckboxField(field)) {
      return '';
    }

    if (!field || this.allSelected) {
      return this.Super('getCellValue', arguments);
    }

    if (isGroupOrSummary) {
      // handle count much simpler than smartclient does
      // so no extra titles or formatting
      if (!this.getGroupByFields().contains(field.name) && func === 'count' && (record[field.name] === 0 || record[field.name])) {
        return record[field.name];
      }
      return this.Super('getCellValue', arguments);
    }

    // do all the cases which are handled in the super directly
    if (this.isCheckboxField(field)) {
      // NOTE: code copied from super class
      var icon;
      if (this.singleRecordSelection && !this.allSelected) {
        // always show the false image
        icon = (this.checkboxFieldFalseImage || this.booleanFalseImage);
      } else {
        // checked if selected, otherwise unchecked
        var isSel = this.selection.isSelected(record) ? true : false;
        icon = isSel ? (this.checkboxFieldTrueImage || this.booleanTrueImage) : (this.checkboxFieldFalseImage || this.booleanFalseImage);
      }
      // if the record is disabled, make the checkbox image disabled as well
      // or if the record is new then also show disabled
      if (!record || record[this.recordEnabledProperty] === false) {
        icon = icon.replace('.', '_Disabled.');
      }

      var html = this.getValueIconHTML(icon, field);

      return html;
    } else {
      // prevent group style behavior for edit rows
      if (isEditRow && this.isGrouped) {
        wasGrouped = true;
        this.isGrouped = false;
      }
      value = this.Super('getCellValue', arguments);
      if (wasGrouped) {
        this.isGrouped = true;
      }
      return value;
    }
  },

  getSelectedRecords: function () {
    return this.getSelection();
  },

  // +++++++++++++++++ functions for grid editing +++++++++++++++++
  startEditing: function (rowNum, colNum, suppressFocus, eCe, suppressWarning) {
    var i, ret, fld, length = this.getFields().length;
    // if a row is set and not a col then check if we should focus in the
    // first error field
    if ((rowNum || rowNum === 0) && (!colNum && colNum !== 0) && this.rowHasErrors(rowNum)) {
      for (i = 0; i < length; i++) {
        if (this.cellHasErrors(rowNum, i)) {
          colNum = i;
          break;
        }
      }
    }

    if (colNum || colNum === 0) {
      this.forceFocusColumn = this.getField(colNum).name;
    } else {
      // set the first focused column
      for (i = 0; i < length; i++) {
        if (this.getFields()[i].editorProperties && this.getFields()[i].editorProperties.firstFocusedField) {
          colNum = i;
        }
      }
      if (colNum < length && this.getFields()[colNum].disabled) {
        for (i = 0; i < length; i++) {
          if (this.getFields()[i].editorProperties && !this.getFields()[i].disabled && this.getFields()[i].visible) {
            colNum = i;
            break;
          }
        }
      }
    }

    // make sure that we are visible    
    this.scrollRecordIntoView(rowNum);

    ret = this.Super('startEditing', [rowNum, colNum, suppressFocus, eCe, suppressWarning]);

    return ret;
  },

  startEditingNew: function (rowNum) {
    // several cases:
    // - no current rows, add at position 0
    // - row selected, add row after selected row
    // - no row selected, add in the bottom
    var undef, insertRow;
    if (rowNum === undef) {
      // nothing selected
      if (!this.getSelectedRecord()) {
        if (this.getTotalRows() > this.data.cachedRows) {
          insertRow = 0;
        } else {
          insertRow = this.getTotalRows();
        }
      } else {
        insertRow = 1 + this.getRecordIndex(this.getSelectedRecord());
      }
    } else {
      insertRow = rowNum + 1;
    }
    this.createNewRecordForEditing(insertRow);
    this.startEditing(insertRow);
    this.recomputeCanvasComponents(insertRow);
    this.view.initChildViewsForNewRecord();
  },

  initializeEditValues: function (rowNum, colNum) {
    var record = this.getRecord(rowNum);
    // no record create one
    if (!record) {
      this.createNewRecordForEditing(rowNum);
    }
    return this.Super('initializeEditValues', arguments);
  },

  createNewRecordForEditing: function (rowNum) {
    // note: the id is dummy, will be replaced when the save succeeds, 
    // it MUST start with _ to identify it is a temporary id 
    var record = {
      _new: true,
      id: '_' + new Date().getTime()
    };

    this.addToCacheData(record, rowNum);
    this.scrollToRow(rowNum);
    this.updateRowCountDisplay();
    this.view.toolBar.updateButtonState(true);

    // do it with a delay to give the system time to set the record information
    this.markForRedraw();
  },

  addToCacheData: function (record, rowNum) {
    // originalData is used when the grid is grouped
    var data = this.originalData || this.data;

    // When a new record is inserted and added to cache, existent cache of
    // rows received from server is replaced with current localData.
    // Not doing it causes problems when localData does not match allRows
    // beacause it has been restricted in client through adaptive filters.
    data.allRows = data.localData;
    data.allRowsCriteria = data.criteria || {};
    data.cachedRows = data.localData.length;
    data.totalRows = data.localData.length;

    data.insertCacheData(record, rowNum);
  },

  editFailed: function (rowNum, colNum, newValues, oldValues, editCompletionEvent, dsResponse, dsRequest) {
    var record = this.getRecord(rowNum),
        editRow, editSession, view = this.view,
        form, isNewRecord;

    // set the default error message,
    // is possibly overridden in the next call
    if (record) {
      record._hasValidationErrors = true;
      if (!record[isc.OBViewGrid.ERROR_MESSAGE_PROP]) {
        this.setRecordErrorMessage(rowNum, OB.I18N.getLabel('OBUIAPP_ErrorInFields'));
        // do not automatically remove this message
        this.view.messageBar.keepOnAutomaticRefresh = true;
      } else {
        record[this.recordBaseStyleProperty] = this.recordStyleError;
      }
    }

    if (!this.isVisible()) {
      isc.warn(OB.I18N.getLabel('OBUIAPP_TabWithErrors', [this.view.tabTitle]));
    } else if (view.standardWindow.forceDialogOnFailure && !this.view.isActiveView) {
      isc.warn(OB.I18N.getLabel('OBUIAPP_AutoSaveError', [this.view.tabTitle]));
    }

    view.standardWindow.cleanUpAutoSaveProperties();
    view.updateTabTitle();
    view.toolBar.updateButtonState(true);

    // if nothing else got selected, select ourselves then
    if (record && !this.getSelectedRecord()) {
      this.selectRecord(record);
    }

    form = this.getEditForm();
    isNewRecord = (form === null) ? false : form.isNew;
    if (isNewRecord) {
      delete this.view._savingNewRecord;
    }
  },

  recordHasChanges: function (rowNum, colNum, checkEditor) {
    var record = this.getRecord(rowNum);
    // If a record has validation errors but had all the mandatory fields set,
    // smartclient's recordHasChanges will return false, and the record will be cleared (see ListGrid.hideInlineEditor function)
    // In this case recordhasChanges should return true, because the values in the grid differ with the values in the database
    // See issue https://issues.openbravo.com/view.php?id=22123
    if (record && record._hasValidationErrors) {
      return true;
    } else if (!this.recordHasActualChanges(rowNum, colNum, checkEditor)) {
      return false;
    } else {
      return this.Super('recordHasChanges', arguments);
    }
  },

  // Checks if there are changes in the other other than a field changing from undefined to not undefined
  // Those kind of changes happen when a row is opened in edit mode, they should not be detected as an actual change
  recordHasActualChanges: function (rowNum, colNum, checkEditor) {
    var newValues, oldValues, changes = false,
        fieldName, oldFieldValue, newFieldValue, i, len, isNew;
    if (!checkEditor) {
      checkEditor = true;
    }
    newValues = (checkEditor ? this.getEditValues(rowNum, colNum) : this.getEditSession(rowNum, colNum));
    oldValues = this.getCellRecord(rowNum);
    if (!oldValues) {
      return true;
    }
    isNew = this.getEditForm() ? this.getEditForm().isNew : false;
    for (fieldName in newValues) {
      if (newValues.hasOwnProperty(fieldName)) {
        if (fieldName === this.removeRecordProperty) {
          continue;
        }
        oldFieldValue = oldValues[fieldName];
        newFieldValue = newValues[fieldName];
        // Use custom comparator to catch things like Dates where '==' check is not sufficient
        if ((isNew || oldFieldValue !== undefined) && !this.fieldValuesAreEqual(this.getField(fieldName), oldFieldValue, newFieldValue) && !(newFieldValue === '' && oldFieldValue === null)) {
          changes = true;
          break;
        }
      }
    }
    return changes;
  },

  editComplete: function (rowNum, colNum, newValues, oldValues, editCompletionEvent, dsResponse) {

    var record = this.getRecord(rowNum),
        editRow, editSession, autoSaveAction, keepSelection, form, isNewRecord;

    // this happens when the record change causes a group name
    // change and therefore a group collapse
    if (!record) {
      return;
    }

    // a new id has been computed use that now
    if (record && record._newId) {
      record.id = record._newId;
      delete record._newId;
    }

    form = this.getEditForm();
    isNewRecord = (form === null) ? false : form.isNew;
    if (isNewRecord) {
      delete this.view._savingNewRecord;
    }

    // during save the record looses the link to the editColumnLayout,
    // restore it
    if (oldValues.editColumnLayout && !record.editColumnLayout) {
      var editColumnLayout = oldValues.editColumnLayout;
      editColumnLayout.record = record;
      record.editColumnLayout = editColumnLayout;
    }
    if (record.editColumnLayout) {
      record.editColumnLayout.editButton.setErrorState(false);
      record.editColumnLayout.showEditOpen();
    }

    // remove any new pointer
    delete record._new;

    // success invoke the action, if any there
    this.view.standardWindow.autoSaveDone(this.view, true);

    // if nothing else got selected, select ourselves then
    if (!this.getSelectedRecord()) {
      this.selectRecord(record);
      keepSelection = true;
      this.view.refreshChildViews(keepSelection);
    } else if (this.getSelectedRecord() === record) {
      this.view.refreshChildViews();
    }

    // remove the error style/message
    this.setRecordErrorMessage(rowNum, null);
    // update after the error message has been removed
    this.view.updateTabTitle();
    this.view.toolBar.updateButtonState(true);
    if (this.view.messageBar.type === isc.OBMessageBar.TYPE_ERROR) {
      this.view.messageBar.hide();
    }
    this.view.refreshParentRecord();

    // Update the focus cell value if different from edit form values.
    // To avoid the case where sometimes data updated through trigger is not showing up without refreshing.
    // Refer issue https://issues.openbravo.com/view.php?id=25028
    this.setEditValue(rowNum, this.getField(colNum).name, record[this.getField(colNum).name], true, true);

    if (this.getEditRow() === rowNum) {
      this.getEditForm().markForRedraw();
    } else {
      this.refreshRow(rowNum);
    }
  },

  undoEditSelectedRows: function () {
    var selectedRecords = this.getSelectedRecords(),
        toRemove = [],
        i, length = selectedRecords.length;
    for (i = 0; i < length; i++) {
      var rowNum = this.getRecordIndex(selectedRecords[i]);
      var record = selectedRecords[i];
      this.Super('discardEdits', [rowNum, false, false, isc.ListGrid.PROGRAMMATIC]);
      // remove the record if new
      if (record._new) {
        toRemove.push({
          id: record.id
        });
      } else {
        // remove the error style/msg    
        this.setRecordErrorMessage(rowNum, null);
      }
    }
    this.deselectAllRecords();
    this.view.refreshChildViews();
    if (toRemove.length > 0) {
      this.data.handleUpdate('remove', toRemove);
      this.updateRowCountDisplay();
      this.view.toolBar.updateButtonState(true);
    }
    this.view.standardWindow.cleanUpAutoSaveProperties();
    this.view.updateTabTitle();
    this.view.toolBar.updateButtonState(true);
  },

  getCellStyle: function (record, rowNum, colNum) {
    // inactive, selected
    if (record && record[this.recordCustomStyleProperty]) {
      return record[this.recordCustomStyleProperty];
    }

    if (!this.view.isActiveView() && record && record[this.selection.selectionProperty]) {
      return this.recordStyleSelectedViewInActive;
    }

    return this.Super('getCellStyle', arguments);
  },

  discardEdits: function (rowNum, colNum, dontHideEditor, editCompletionEvent, preventConfirm) {
    var localArguments = arguments,
        editForm = this.getEditForm(),
        totalRows, me = this,
        record = this.getRecord(rowNum);

    if (!preventConfirm && ((editForm && editForm.hasChanged) || this.rowHasErrors(rowNum))) {
      me.Super('discardEdits', localArguments);

      // remove the record if new
      if (record._new) {
        totalRows = me.data.totalRows;
        me.data.handleUpdate('remove', [{
          id: record.id
        }]);
        // the total rows should be decreased
        if (me.data.totalRows === totalRows) {
          me.data.totalRows = me.data.totalRows - 1;
        }
        me.updateRowCountDisplay();
        me.view.toolBar.updateButtonState(true);
        me.view.refreshChildViews();
      } else {
        // remove the error style/msg    
        me.setRecordErrorMessage(rowNum, null);
      }

      me.view.standardWindow.cleanUpAutoSaveProperties();

      // update after removing the error msg
      me.view.updateTabTitle();
      me.view.toolBar.updateButtonState(true);
    } else {
      me.Super('discardEdits', localArguments);

      // remove the record if new
      if (record && record._new) {
        totalRows = me.data.totalRows;
        me.data.handleUpdate('remove', [{
          id: record.id
        }]);
        // the total rows should be decreased
        if (me.data.totalRows === totalRows) {
          me.data.totalRows = me.data.totalRows - 1;
        }
        me.updateRowCountDisplay();
        me.view.toolBar.updateButtonState(true);
        me.view.refreshChildViews();
      } else {
        // remove the error style/msg    
        me.setRecordErrorMessage(rowNum, null);
      }

      this.view.standardWindow.cleanUpAutoSaveProperties();

      this.refreshRow(rowNum);

      // update after removing the error msg
      this.view.updateTabTitle();
    }
  },

  saveEdits: function (editCompletionEvent, callback, rowNum, colNum, validateOnly, skipValidation) {
    var ret = this.Super('saveEdits', arguments);
    // save was not done, because there were no changes probably
    if (!ret) {
      this.view.standardWindow.cleanUpAutoSaveProperties();
      this.view.updateTabTitle();
      this.view.toolBar.updateButtonState(true);
    }
    return ret;
  },

  // check if a fic call needs to be done when leaving a cell and moving to the next
  // row
  // see description in saveEditvalues
  cellEditEnd: function (editCompletionEvent, newValue, ficCallDone, autoSaveDone) {
    var rowNum = this.getEditRow(),
        colNum = this.getEditCol();
    var editForm = this.getEditForm(),
        editField = this.getEditField(colNum),
        focusItem = (editForm ? editForm.getFocusItem() : null),
        isDynamicCol = false,
        i, len;
    // sometimes rowNum and colnum are not set, then don't compute the next cell
    var nextEditCell = ((rowNum || rowNum === 0) && (colNum || colNum === 0) ? this.getNextEditCell(rowNum, colNum, editCompletionEvent) : null);
    var newRow = nextEditCell && nextEditCell[0] !== rowNum;
    var enterKey = editCompletionEvent === 'enter';

    // no newValue, compute it, this because in the super method there is a check
    // how many arguments are passed on, sometimes the newValue is not passed in
    // and then it must be recomputed, so if we then use the undefined newValue
    // in the actionObject below things will go wrong
    if (arguments.length < 2 && this.view.allowNewRow()) {
      newValue = this.getEditValue(rowNum, colNum);
    }

    if (!this.view.standardWindow.isAutoSaveEnabled() && !enterKey && !autoSaveDone && newRow && (editForm.hasChanged || editForm.isNew)) {
      var actionObject = {
        target: this,
        method: this.cellEditEnd,
        parameters: [editCompletionEvent, newValue, ficCallDone, true]
      };
      this.view.standardWindow.doActionAfterAutoSave(actionObject, true);
      return;
    }


    if (this.getEditForm().dynamicCols) {
      for (i = 0; i < this.getEditForm().dynamicCols.length; i++) {
        if (this.getEditForm().dynamicCols[i] === focusItem.inpColumnName) {
          isDynamicCol = true;
          break;
        }
      }
    }

    if (newRow && this.getEditForm().isNew && this.getEditForm().inFicCall && isDynamicCol && editCompletionEvent === 'tab' && !ficCallDone) {
      this.setEditValue(rowNum, 'actionAfterFicReturn', {
        target: this,
        method: this.cellEditEnd,
        parameters: [editCompletionEvent, newValue, true, autoSaveDone]
      }, true, true);
      return;
    }

    // If leaving the row...
    if (editCompletionEvent === 'enter' || editCompletionEvent === 'arrow_up' || editCompletionEvent === 'arrow_down') {
      // See issue https://issues.openbravo.com/view.php?id=19830
      if (this.view.standardWindow.getDirtyEditForm()) {
        this.view.standardWindow.getDirtyEditForm().validateForm();
      }
    }

    this._leavingCell = true;

    if (newValue) {
      this.Super('cellEditEnd', [editCompletionEvent, newValue]);
    } else {
      this.Super('cellEditEnd', [editCompletionEvent]);
    }
    delete this._leavingCell;
    // only needed for non picklist fields
    // as picklist fields will always have picked a value
    // note that focusItem updatevalue for picklist can result in extra datasource requests
    if (focusItem && editField && focusItem.name === editField.name && !focusItem.hasPickList) {
      focusItem.blur(focusItem.form, focusItem);
    }
  },

  // overridden to set the enterkeyaction to nextrowstart in cases the current row
  // is the last being edited
  // also sets a flag which is used in canEditCell   
  getNextEditCell: function (rowNum, colNum, editCompletionEvent) {
    var ret, i, length = this.getFields().length;
    this._inGetNextEditCell = true;
    // past the last row
    if (editCompletionEvent === isc.ListGrid.ENTER_KEYPRESS && rowNum === (this.getTotalRows() - 1) && this.view.allowNewRow()) {
      // move to the next row
      ret = this.findNextEditCell(rowNum + 1, 0, 1, true, true);

      // force the focus column in the first focus field
      for (i = 0; i < length; i++) {
        if (this.getFields()[i].editorProperties && this.getFields()[i].editorProperties.firstFocusedField) {
          this.forceFocusColumn = this.getFields()[i].name;
          break;
        }
      }

    } else {
      ret = this.Super('getNextEditCell', arguments);
    }

    // when moving between rows with the arrow keys, force the focus in the correct 
    // column
    if (ret && ret[0] !== rowNum && this.getField(colNum) && (editCompletionEvent === isc.ListGrid.UP_ARROW_KEYPRESS || editCompletionEvent === isc.ListGrid.DOWN_ARROW_KEYPRESS) && this.view.allowNewRow()) {
      this.forceFocusColumn = this.getField(colNum).name;
    }

    delete this._inGetNextEditCell;
    return ret;
  },

  //used in Edit or Delete only UI pattern
  setListEndEditAction: function () {
    this.listEndEditAction = 'done';
  },

  // overridden to take into account disabled at item level
  // only used when computing the next edit cell
  // if caneditcell returns false in other cases then smartclient
  // won't even show an input but shows the display value directly
  // this interferes sometimes with the very dynamic enabling 
  // disabling of fields by the readonlylogic
  canEditCell: function (rowNum, colNum) {
    var ret;
    if (this._inGetNextEditCell) {
      var field = this.getField(colNum);
      if (field && this.getEditForm()) {
        var item = this.getEditForm().getItem(field.name);
        if (item && item.isDisabled()) {
          return false;
        }
      }
    }

    if (!colNum && colNum !== 0) {
      return false;
    }

    ret = this.Super('canEditCell', arguments);
    return ret;
  },

  // saveEditedValues: when saving, first check if a FIC call needs to be done to update to the 
  // latest values. This can happen when the focus is in a field and the save action is
  // done, at that point first try to force a fic call (handleItemChange) and if that
  // indeed happens stop the saveEdit until the fic returns
  saveEditedValues: function (rowNum, colNum, newValues, oldValues, editValuesID, editCompletionEvent, originalCallback, ficCallDone) {
    var previousExplicitOffline, saveCallback;
    if (!rowNum && rowNum !== 0) {
      rowNum = this.getEditRow();
    }
    if (!colNum && colNum !== 0) {
      colNum = this.getEditCol();
    }

    // nothing changed just fire the calback and bail
    if (!ficCallDone && this.getEditForm() && !this.getEditForm().hasChanged && !this.getEditForm().isNew) {
      if (originalCallback) {
        this.fireCallback(originalCallback, 'rowNum,colNum,editCompletionEvent,success', [rowNum, colNum, editCompletionEvent]);
      }
      return true;
    }

    saveCallback = function () {
      if (originalCallback) {
        if (this.getSelectedRecord() && this.getSelectedRecord()[OB.Constants.ID]) {
          if (this.view.parentRecordId) {
            if (!this.view.newRecordsAfterRefresh) {
              this.view.newRecordsAfterRefresh = {};
            }
            if (!this.view.newRecordsAfterRefresh[this.view.parentRecordId]) {
              this.view.newRecordsAfterRefresh[this.view.parentRecordId] = [];
            }
            this.view.newRecordsAfterRefresh[this.view.parentRecordId].push(this.getSelectedRecord()[OB.Constants.ID]);
          } else {
            if (!this.view.newRecordsAfterRefresh) {
              this.view.newRecordsAfterRefresh = [];
            }
            this.view.newRecordsAfterRefresh.push(this.getSelectedRecord()[OB.Constants.ID]);
          }
        }
        this.fireCallback(originalCallback, 'rowNum,colNum,editCompletionEvent,success', [rowNum, colNum, editCompletionEvent]);
      }
    };

    if (!ficCallDone) {
      var editForm = this.getEditForm(),
          focusItem = editForm.getFocusItem();
      if (focusItem && !focusItem.hasPickList) {
        focusItem.blur(focusItem.form, focusItem);
        if (editForm.inFicCall) {
          // use editValues object as the edit form will be re-used for a next row
          this.setEditValue(rowNum, 'actionAfterFicReturn', {
            target: this,
            method: this.saveEditedValues,
            parameters: [rowNum, colNum, newValues, oldValues, editValuesID, editCompletionEvent, saveCallback, true]
          }, true, true);
          return;
        }
      }
    }
    // reset the new values as this can have changed because of a fic call or in the blur event of the focused item
    newValues = this.getEditValues(rowNum);

    previousExplicitOffline = isc.Offline.explicitOffline;
    isc.Offline.explicitOffline = false;
    this.Super('saveEditedValues', [rowNum, colNum, newValues, oldValues, editValuesID, editCompletionEvent, saveCallback]);
    isc.Offline.explicitOffline = previousExplicitOffline;
    // commented out as it removes an autosave action which is done in the edit complete method
    //    this.view.standardWindow.setDirtyEditForm(null);
  },

  autoSave: function () {
    // flag to force the parsing of date fields when autosaving
    // see issue 20071 (https://issues.openbravo.com/view.php?id=20071)
    this._autoSaving = true;
    this.storeUpdatedEditorValue();
    delete this._autoSaving;
    this.endEditing();
  },

  hideInlineEditor: function (focusInBody, suppressCMHide) {

    var rowNum = this.getEditRow(),
        record = this.getRecord(rowNum),
        editForm = this.getEditForm();

    // Do not hide the inline editor if the action has been caused
    // by hiding or showing a field
    // See issue https://issues.openbravo.com/view.php?id=21352
    if (this._hidingField || this._showingField) {
      return;
    }
    this._hidingInlineEditor = true;
    if (record && (rowNum === 0 || rowNum)) {
      if (!this.rowHasErrors(rowNum)) {
        record[this.recordBaseStyleProperty] = null;
      }

      if (record && record.editColumnLayout) {
        isc.Log.logDebug('hideInlineEditor has record and editColumnLayout', 'OB');
        record.editColumnLayout.showEditOpen();
      } else if (this.currentEditColumnLayout) {
        this.currentEditColumnLayout.showEditOpen();
      } else {
        isc.Log.logDebug('hideInlineEditor has NO record and editColumnLayout', 'OB');
      }
      this.view.isEditingGrid = false;
      // Update the tab title after the record has been saved or canceled
      // to get rid of the '*' in the tab title
      // See https://issues.openbravo.com/view.php?id=21709
      this.view.updateTabTitle();
    }

    // always hide the clickmask, as it needs to be re-applied
    // this super call needs to be done before clearing the values
    // of the form, as the form value clear will result
    // in a field to be flagged with an error
    var ret = this.Super('hideInlineEditor', [focusInBody, false]);

    if (editForm) {
      // canFocus is set when disabling a form item
      // a new record needs to compute canFocus again
      editForm.resetCanFocus();
      // clear all values, as null values in the new row won't overwrite filled form
      // values
      editForm.clearValues();
      // clear the errors so that they don't show up at the next row
      editForm.clearErrors();
      // do not save the focus item to prevent wrong validations when creating a new row
      // see issue 20537 (https://issues.openbravo.com/view.php?id=20537)
      editForm.setFocusItem(null);
    }

    delete this._hidingInlineEditor;

    this.recomputeCanvasComponents(rowNum);

    this.body.markForRedraw();

    return ret;
  },

  getEditDisplayValue: function (rowNum, colNum, record) {
    // somehow this extra call is needed to not restore
    // the old value when the new value is null
    this.storeUpdatedEditorValue();
    return this.Super('getEditDisplayValue', arguments);
  },

  showInlineEditor: function (rowNum, colNum, newCell, newRow, suppressFocus) {
    var fld;

    this._showingEditor = true;

    if (newRow) {
      if (this.getEditForm()) {
        this.getEditForm().clearErrors();
      }
      // if the focus does not get suppressed then the clicked field will receive focus
      // and won't be disabled so the user can already start typing      
      suppressFocus = true;
    }

    var ret = this.Super('showInlineEditor', [rowNum, colNum, newCell, newRow, suppressFocus]);

    if (!newRow) {
      delete this._showingEditor;
      return ret;
    }

    if (this.forceFocusColumn) {
      // set the field to focus on after returning from the fic
      this.getEditForm().forceFocusedField = this.forceFocusColumn;
      delete this.forceFocusColumn;
    } else if (colNum || colNum === 0) {
      fld = this.getField(colNum);
      this.getEditForm().forceFocusedField = fld.name;
    }

    var record = this.getRecord(rowNum);

    this.view.isEditingGrid = true;

    record[this.recordBaseStyleProperty] = this.baseStyleEdit;

    // also called in case of new
    var form = this.getEditForm();

    // also make sure that the new indicator is send to the server
    if (record._new) {
      form.setValue('_new', true);
    }

    form.doEditRecordActions(false, record._new && !record._editedBefore);
    record._editedBefore = true;

    // must be done after doEditRecordActions    
    if (this.rowHasErrors(rowNum)) {
      this.getEditForm().setErrors(this.getRowValidationErrors(rowNum));
      this.view.standardWindow.setDirtyEditForm(form);
    }

    if (record && record.editColumnLayout) {
      record.editColumnLayout.showSaveCancel();
    }

    this.view.messageBar.hide();

    delete this._showingEditor;
    return ret;
  },

  closeAnyOpenEditor: function () {
    delete this.wasEditing;
    // close any editors we may have
    if (this.getEditRow() || this.getEditRow() === 0) {
      this.endEditing();
    }
  },

  validateField: function (field, validators, value, record, options) {
    // Smartclient passes in the grid field, use the editform field
    // as it contains the latest valuemap
    var editField = this.getEditForm().getField(field.name) || field;
    var ret = this.Super('validateField', [editField, validators, value, record, options]);
    return ret;
  },

  refreshEditRow: function () {
    var editRow = this.view.viewGrid.getEditRow(),
        i, length;
    if (editRow || editRow === 0) {
      // don't refresh the frozen fields, this give strange
      // styling issues in chrome
      length = this.view.viewGrid.fields.length;
      for (i = 0; i < length; i++) {
        if (!this.fieldIsFrozen(i)) {
          this.view.viewGrid.refreshCell(editRow, i, true);
        }
      }
    }
  },

  // having a valueMap property results in setValueMap to be called
  // on an item. On items with a picklist this causes calls to the
  // server side
  //  https://issues.openbravo.com/view.php?id=16611
  getEditItem: function () {
    var result = this.Super('getEditItem', arguments);
    if (result.hasOwnProperty('valueMap') && !result.valueMap) {
      delete result.valueMap;
    }
    return result;
  },

  // set some flags to prevent the picklist fields from doing extra datasource 
  // requests
  // https://issues.openbravo.com/view.php?id=16611
  storeUpdatedEditorValue: function (suppressChange, editCol) {
    this._storingUpdatedEditorValue = true;
    this._preventDateParsing = true;
    this.Super('storeUpdatedEditorValue', arguments);
    delete this._storingUpdatedEditorValue;
    delete this._preventDateParsing;
  },

  // the form gets recreated many times, maintain the already read valuemap
  getEditorValueMap: function (field, values) {
    var editRow = this.getEditRow(),
        editValues = this.getEditValues(editRow);
    // valuemap is set in the processcolumnvalues of the ob-view-form.js
    if (editValues && editValues[field.name + '._valueMap']) {
      return editValues[field.name + '._valueMap'];
    }

    if (this.getEditForm() && this.getEditForm().getField(field.name)) {
      var liveField = this.getEditForm().getField(field.name);
      if (liveField.valueMap) {
        return liveField.valueMap;
      }
    }

    return this.Super('getEditorValueMap', arguments);
  },

  setFieldError: function (rowNum, fieldID, errorMessage, dontDisplay) {
    // if there are no errors then no need to clear
    // prevents an undefined exception because also keep errors in other 
    // places then the editvalues._validationErrors
    if (!errorMessage && !this.Super('cellHasErrors', [rowNum, fieldID])) {
      return;
    }
    return this.Super('setFieldError', arguments);
  },

  cellHasErrors: function (rowNum, fieldID) {
    if (this.Super('cellHasErrors', arguments)) {
      return true;
    }
    if (this.getEditRow() === rowNum) {
      var itemName = this.getEditorName(rowNum, fieldID);

      if (this.getEditForm().hasFieldErrors(itemName)) {
        return true;
      }
      // sometimes the error is there but the error message is null
      if (this.getEditForm().getErrors().hasOwnProperty(itemName)) {
        return true;
      }
    }
    return false;
  },

  getCellErrors: function (rowNum, fieldName) {
    var itemName;
    var ret = this.Super('getCellErrors', arguments);
    if (this.getEditRow() === rowNum) {
      return this.getEditForm().getFieldErrors(itemName);
    }
    return ret;
  },

  rowHasErrors: function (rowNum, colNum) {
    if (this.Super('rowHasErrors', arguments)) {
      return true;
    }
    if (!this.getEditForm()) {
      return false;
    }
    if (this.getEditRow() === rowNum && this.getEditForm().hasErrors()) {
      return true;
    }
    var record = this.getRecord(rowNum);
    if (record) {
      return record[isc.OBViewGrid.ERROR_MESSAGE_PROP];
    }
    return false;
  },

  // we are being reshown, get new values for the combos
  visibilityChanged: function (visible) {
    if (visible && this.getEditRow()) {
      this.getEditForm().doChangeFICCall();
    }
    if (!this.view.isVisible() && this.hasErrors()) {
      isc.warn(OB.I18N.getLabel('OBUIAPP_TabWithErrors', [this.view.tabTitle]));
    }
  },

  isWritable: function (record) {
    return !record._readOnly;
  },

  allSelectedRecordsWritable: function () {
    var i, length = this.getSelectedRecords().length;
    for (i = 0; i < length; i++) {
      var record = this.getSelectedRecords()[i];
      if (!this.isWritable(record) || record._new) {
        return false;
      }
    }
    return true;
  },

  setRecordErrorMessage: function (rowNum, msg) {
    var record = this.getRecord(rowNum);
    if (!record) {
      return;
    }
    record[isc.OBViewGrid.ERROR_MESSAGE_PROP] = msg;
    if (msg) {
      record[this.recordBaseStyleProperty] = this.recordStyleError;
    } else {
      record[this.recordBaseStyleProperty] = null;
    }
    if (record.editColumnLayout) {
      record.editColumnLayout.editButton.setErrorState(msg);
      record.editColumnLayout.editButton.setErrorMessage(msg);
    }
    this.refreshRow(rowNum);
  },

  setRecordFieldErrorMessages: function (rowNum, errors) {
    var record = this.getRecord(rowNum);
    if (!record) {
      return;
    }
    if (record.editColumnLayout) {
      record.editColumnLayout.editButton.setErrorState(errors);
      record.editColumnLayout.editButton.setErrorMessage(OB.I18N.getLabel('OBUIAPP_ErrorInFields'));
    }
    this.setRowErrors(rowNum, errors);
    if (errors) {
      record[this.recordBaseStyleProperty] = this.recordStyleError;
    } else {
      record[this.recordBaseStyleProperty] = null;
    }

    if (this.frozenBody) {
      this.frozenBody.markForRedraw();
    }
    this.body.markForRedraw();
  },

  // overridden to handle the case that the rowNum is in fact 
  // an edit state id
  getRecord: function (rowNum) {
    if (!isc.isA.Number(rowNum)) {
      // an edit id
      rowNum = this.getEditSessionRowNum(rowNum);
      return this.Super('getRecord', [rowNum]);
    }
    return this.Super('getRecord', arguments);
  },

  // always work with fixed rowheights
  // https://issues.openbravo.com/view.php?id=16307
  shouldFixRowHeight: function () {
    return true;
  },

  // needed for: https://issues.openbravo.com/view.php?id=16307
  getRowHeight: function () {
    return this.cellHeight;
  },

  // +++++++++++++++++ functions for the edit-link column +++++++++++++++++
  createRecordComponent: function (record, colNum) {
    var fld = this.getFields()[colNum],
        isSummary = record && (record[this.groupSummaryRecordProperty] || record[this.gridSummaryRecordProperty]),
        canvas, rowNum = this.getRecordIndex(record),
        isEditRecord = rowNum === this.getEditRow();

    // don't support record components in summary fields
    if (isSummary) {
      return null;
    }

    if (this.isEditLinkColumn(colNum)) {
      var layout = isc.OBGridButtonsComponent.create({
        record: record,
        grid: this
      });
      layout.editButton.setErrorState(record[isc.OBViewGrid.ERROR_MESSAGE_PROP]);
      layout.editButton.setErrorMessage(record[isc.OBViewGrid.ERROR_MESSAGE_PROP]);
      record.editColumnLayout = layout;

      if (this.selection && this.selection.lastSelectionItem && this.selection.lastSelectionItem._new) {
        this.selection.lastSelectionItem.editColumnLayout = layout;
      }

      if (record._new) {
        layout.showSaveCancel();
      } else {
        layout.showEditOpen();
      }
      return layout;
    } else {
      return this.Super('createRecordComponent', arguments);
    }
  },

  updateRecordComponent: function (record, colNum, component, recordChanged) {
    var rowNum = this.getRecordIndex(record),
        isSummary = record && (record[this.groupSummaryRecordProperty] || record[this.gridSummaryRecordProperty]),
        isEditRecord = rowNum === this.getEditRow();

    // don't support record components in summary fields
    if (isSummary) {
      return null;
    }

    if (component.editButton) {
      if (recordChanged && component.record.editColumnLayout === component) {
        component.record.editColumnLayout = null;
      }
      component.record = record;
      record.editColumnLayout = component;
      component.editButton.setErrorState(record[isc.OBViewGrid.ERROR_MESSAGE_PROP]);
      component.editButton.setErrorMessage(record[isc.OBViewGrid.ERROR_MESSAGE_PROP]);
      if (record._new) {
        component.showSaveCancel();
      } else {
        component.showEditOpen();
      }
    } else if (isEditRecord) {
      return null;
    } else {
      return this.Super('updateRecordComponent', arguments);
    }
    return component;
  },

  isEditLinkColumn: function (colNum) {
    return this.editLinkColNum === colNum;
  },

  getFieldFromColumnName: function (columnName) {
    var i, field, length, fields = this.view.propertyToColumns;

    length = fields.length;

    for (i = 0; i < fields.length; i++) {
      if (fields[i].dbColumn === columnName) {
        field = fields[i];
        break;
      }
    }
    return field;
  },

  processColumnValue: function (rowNum, columnName, columnValue) {
    var field, newValue;
    if (!columnValue) {
      return;
    }
    field = this.getFieldFromColumnName(columnName);
    if (!field) {
      return;
    }
    newValue = {};
    if (field) {
      newValue[field.property] = columnValue.value;
    }
    this.setEditValue(rowNum, field.property, columnValue.value);
  },

  processFICReturn: function (response, data, request) {
    var context = response && response.clientContext,
        rowNum = context && context.rowNum,
        grid = context && context.grid,
        columnValues, prop, value, undef, field;

    if (rowNum === undef || !data || !data.columnValues) {
      return;
    }
    columnValues = data.columnValues;

    for (prop in columnValues) {
      if (columnValues.hasOwnProperty(prop)) {
        field = this.getFieldFromColumnName(prop);
        // This call to the FIC was done to retrieve the missing values
        // Do not try to overwrite the existing values
        if (field && !this.getRecord(rowNum)[field.property]) {
          grid.processColumnValue(rowNum, prop, columnValues[prop]);
        }
      }
    }
  }
});

// = OBGridToolStripIcon =
// The icons which are inside of OBGridToolStrip
isc.ClassFactory.defineClass('OBGridToolStripIcon', isc.ImgButton);

isc.OBGridToolStripIcon.addProperties({
  buttonType: null,
  /* This could be: edit - form - cancel - save */
  initWidget: function () {
    if (this.initWidgetStyle) {
      this.initWidgetStyle();
    }
    this.Super('initWidget', arguments);
  }
});

// = OBGridToolStripSeparator =
// The separator between icons of OBGridToolStrip
isc.ClassFactory.defineClass('OBGridToolStripSeparator', isc.Img);

isc.OBGridToolStripSeparator.addProperties({});

// = OBGridButtonsComponent =
// The component which is used to create the contents of the
// edit open column in the grid
isc.ClassFactory.defineClass('OBGridButtonsComponent', isc.HLayout);

isc.OBGridButtonsComponent.addProperties({
  OBGridToolStrip: null,
  saveCancelLayout: null,

  // the grid to which this component belongs
  grid: null,

  rowNum: null,

  // the record to which this component belongs
  record: null,

  initWidget: function () {
    var me = this,
        formButton;

    this.editButton = isc.OBGridToolStripIcon.create({
      buttonType: 'edit',
      originalPrompt: OB.I18N.getLabel('OBUIAPP_GridEditButtonPrompt'),
      prompt: OB.I18N.getLabel('OBUIAPP_GridEditButtonPrompt'),
      action: function () {
        var actionObject = {
          target: me,
          method: me.doEdit,
          parameters: null
        };
        me.grid.view.standardWindow.doActionAfterAutoSave(actionObject, true);
      },

      setErrorMessage: function (msg) {
        if (msg) {
          this.prompt = msg + '<br><br>' + this.originalPrompt;
        } else {
          this.prompt = this.originalPrompt;
        }
      },

      showable: function () {
        return !me.grid.view.readOnly && !me.record._readOnly;
      },

      show: function () {
        if (!this.showable()) {
          return;
        }
        return this.Super('show', arguments);
      }
    });

    formButton = isc.OBGridToolStripIcon.create({
      buttonType: 'form',
      prompt: OB.I18N.getLabel('OBUIAPP_GridFormButtonPrompt'),
      action: function () {
        var actionObject = {
          target: me,
          method: me.doOpen,
          parameters: null
        };
        me.grid.view.standardWindow.doActionAfterAutoSave(actionObject, true);
      }
    });

    this.buttonSeparator1 = isc.OBGridToolStripSeparator.create({});

    if (me.grid.view.readOnly) {
      this.buttonSeparator1.visibility = 'hidden';
    }

    this.addMembers([formButton, this.buttonSeparator1, this.editButton]);
    this.Super('initWidget', arguments);
  },

  addSaveCancelProgressButtons: function () {
    var me = this;
    // already been here
    if (this.cancelButton) {
      return;
    }

    this.progressIcon = isc.Img.create(this.grid.progressIconDefaults);
    this.progressIcon.setVisibility(false);
    this.addMember(this.progressIcon, 0);

    // is referred to in OBViewForm.showClickMask
    this.cancelButton = isc.OBGridToolStripIcon.create({
      buttonType: 'cancel',
      prompt: OB.I18N.getLabel('OBUIAPP_GridCancelButtonPrompt'),
      action: function () {
        me.doCancel();
      }
    });

    var saveButton = isc.OBGridToolStripIcon.create({
      buttonType: 'save',
      prompt: OB.I18N.getLabel('OBUIAPP_GridSaveButtonPrompt'),
      action: function () {
        me.doSave();
      }
    });

    this.addMembers([this.cancelButton, isc.OBGridToolStripSeparator.create({}), saveButton]);
  },

  toggleProgressIcon: function (toggle) {
    if (toggle) {
      this.hideAllMembers();
      this.showMember(isc.OBViewGrid.PROGRESS);
    } else {
      this.hideMember(isc.OBViewGrid.PROGRESS);
      if (this.grid.view.isEditingGrid) {
        this.showSaveCancel();
      } else {
        this.showEditOpen();
      }
    }
  },

  hideAllMembers: function () {
    this.hideMember(isc.OBViewGrid.ICONS.EDIT_IN_GRID);
    this.hideMember(isc.OBViewGrid.ICONS.SEPARATOR1);
    this.hideMember(isc.OBViewGrid.ICONS.OPEN_IN_FORM);
    this.hideMember(isc.OBViewGrid.ICONS.PROGRESS);
    this.hideMember(isc.OBViewGrid.ICONS.CANCEL);
    this.hideMember(isc.OBViewGrid.ICONS.SEPARATOR2);
    this.hideMember(isc.OBViewGrid.ICONS.SAVE);
  },

  showEditOpen: function () {
    var offset = 0;
    if (this.cancelButton) {
      this.hideMember(isc.OBViewGrid.ICONS.SAVE);
      this.hideMember(isc.OBViewGrid.ICONS.SEPARATOR2);
      this.hideMember(isc.OBViewGrid.ICONS.CANCEL);
      this.hideMember(isc.OBViewGrid.ICONS.PROGRESS);
      offset = 1;
    }
    this.showMember(offset);
    if (this.editButton.showable()) {
      this.showMember(1 + offset);
      this.showMember(2 + offset);
    } else {
      this.hideMember(1 + offset);
      this.hideMember(2 + offset);
    }
    this.grid.currentEditColumnLayout = null;
  },

  showSaveCancel: function () {
    this.addSaveCancelProgressButtons();

    this.hideMember(isc.OBViewGrid.ICONS.EDIT_IN_GRID);
    this.hideMember(isc.OBViewGrid.ICONS.SEPARATOR1);
    this.hideMember(isc.OBViewGrid.ICONS.OPEN_IN_FORM);
    this.hideMember(isc.OBViewGrid.ICONS.PROGRESS);

    this.showMember(isc.OBViewGrid.ICONS.CANCEL);
    this.showMember(isc.OBViewGrid.ICONS.SEPARATOR2);
    this.showMember(isc.OBViewGrid.ICONS.SAVE);

    this.grid.currentEditColumnLayout = this;
  },

  doEdit: function () {
    this.showSaveCancel();
    this.grid.selectSingleRecord(this.record);
    var rowNum = this.grid.getRecordIndex(this.record);
    this.grid.startEditing(rowNum);
  },

  doOpen: function () {
    this.grid.endEditing();
    this.grid.view.editRecord(this.record);
  },

  doSave: function () {
    // note change back to editOpen is done in the editComplete event of the
    // grid itself
    this.grid.endEditing();
  },

  doCancel: function () {
    this.grid.cancelEditing();
  },

  hideMember: function (memberNo) {
    if (!this.members[memberNo]) {
      return;
    }
    // already hidden
    if (this.members[memberNo] && this.members[memberNo].visibility === isc.Canvas.HIDDEN) {
      return;
    }
    this.Super('hideMember', arguments);
  },

  showMember: function (memberNo) {
    if (!this.members[memberNo]) {
      return;
    }
    // already visible
    if (this.members[memberNo] && (this.members[memberNo].visibility === isc.Canvas.INHERIT || this.members[memberNo].visibility === isc.Canvas.VISIBLE)) {
      return;
    }
    this.Super('showMember', arguments);
  }

});
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use. this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2011-2012 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */

// == OB.CalloutRegistry ==
// A registry which can be used to register callouts for a certain
// tab and field combination. Multiple callouts can be registered
// for one field.
OB.OnChangeRegistry = {
  registry: {},

  register: function (tabId, field, callback, id) {
    var tabEntry, fieldEntry, i, overwritten = false;

    if (!this.registry[tabId]) {
      this.registry[tabId] = {};
    }

    tabEntry = this.registry[tabId];
    if (!tabEntry[field]) {
      tabEntry[field] = [];
    }

    if (id && !callback.id) {
      callback.id = id;
    }

    // just set a default sort if not defined
    if (callback.sort !== 0 && !callback.sort) {
      callback.sort = 100;
    }

    // check if there is one with the same name
    for (i = 0; i < tabEntry[field].length; i++) {
      if (tabEntry[field][i] && tabEntry[field][i].id === callback.id) {
        tabEntry[field][i] = callback;
        overwritten = true;
        break;
      }
    }

    // add
    if (!overwritten) {
      tabEntry[field].push(callback);
    }

    // and sort according to the sort property
    tabEntry[field].sortByProperty('sort', true);
  },

  hasOnChange: function (tabId, item) {
    return this.getFieldEntry(tabId, item);
  },

  getFieldEntry: function (tabId, item) {
    var tabEntry, field = item.name;
    if (!this.registry[tabId]) {
      return;
    }
    tabEntry = this.registry[tabId];
    return tabEntry[field];
  },

  call: function (tabId, item, view, form, grid) {
    var callResult, fieldEntry = this.getFieldEntry(tabId, item),
        i;

    if (!fieldEntry) {
      return;
    }
    for (i = 0; i < fieldEntry.length; i++) {
      if (fieldEntry[i]) {
        callResult = fieldEntry[i](item, view, form, grid);
        if (callResult === false) {
          return;
        }
      }
    }
  }
};

OB.OnChangeRegistry.TestFunction = function (item) {
  alert('You changed ' + item.name);
};
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License+
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2010-2012 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */

// = Keyboard Manager =
//
// Manages the keyboard shortcuts which are used to open flyouts, menus etc.
//
(function (OB, isc) {

  if (!OB || !isc) {
    throw {
      name: 'ReferenceError',
      message: 'openbravo and isc objects are required'
    };
  }

  // cache object references locally
  var O = OB,
      ISC = isc,
      keyboardMgr; // Local reference to UrlManager instance

  function KeyboardManager() {}

  KeyboardManager.prototype = {

    Shortcuts: {

      setPredefinedList: function (RefList) {
        var i, list = [],
            length;

        list = OB.PropertyStore.get(RefList);
        if (list) {
          length = list.length;
          for (i = 0; i < length; i++) {
            this.set(list[i].id, null, null, null, list[i].keyComb);
          }
        }
      },

      set: function (id, execLevel, action, funcParam, keyComb) {
        if (typeof id === 'undefined' || id === null) {
          return false;
        }

        var position = this.getProperty('position', id, 'id');
        if (position === null) {
          position = this.list.length;
          this.list[position] = {};
          this.list[position].keyComb = {};
          this.list[position].keyComb.text = '';
        }
        if (typeof id !== 'undefined' && id !== null) {
          this.list[position].id = id;
        }
        if (typeof execLevel !== 'undefined' && execLevel !== null) {
          if (typeof execLevel === 'string') {
            execLevel = new Array(execLevel);
          }
          this.list[position].execLevel = execLevel;
        }
        if (typeof action !== 'undefined' && action !== null) {
          this.list[position].action = action;
        }
        if (typeof funcParam !== 'undefined' && funcParam !== null) {
          this.list[position].funcParam = funcParam;
        }
        if (typeof keyComb !== 'undefined' && keyComb !== null) {
          this.list[position].keyComb.text = '';
          if (typeof keyComb.ctrl === 'undefined') {
            this.list[position].keyComb.ctrl = false;
          } else {
            this.list[position].keyComb.ctrl = keyComb.ctrl;
            if (keyComb.ctrl === true) {
              if (this.list[position].keyComb.text.length > 0) {
                this.list[position].keyComb.text += '+';
              }
              this.list[position].keyComb.text += 'Ctrl';
            }
          }
          if (typeof keyComb.alt === 'undefined') {
            this.list[position].keyComb.alt = false;
          } else {
            this.list[position].keyComb.alt = keyComb.alt;
            if (keyComb.alt === true) {
              if (this.list[position].keyComb.text.length > 0) {
                this.list[position].keyComb.text += '+';
              }
              this.list[position].keyComb.text += 'Alt';
            }
          }
          if (typeof keyComb.shift === 'undefined') {
            this.list[position].keyComb.shift = false;
          } else {
            this.list[position].keyComb.shift = keyComb.shift;
            if (keyComb.shift === true) {
              if (this.list[position].keyComb.text.length > 0) {
                this.list[position].keyComb.text += '+';
              }
              this.list[position].keyComb.text += 'Shift';
            }
          }
          if (typeof keyComb.space === 'undefined') {
            this.list[position].keyComb.space = false;
          } else {
            this.list[position].keyComb.space = keyComb.space;
            if (keyComb.space === true) {
              if (this.list[position].keyComb.text.length > 0) {
                this.list[position].keyComb.text += '+';
              }
              this.list[position].keyComb.text += 'Space';
            }
          }
          if (typeof keyComb.key === 'undefined') {
            this.list[position].keyComb.key = null;
          } else {
            this.list[position].keyComb.key = keyComb.key;
            if (keyComb.key) {
              if (this.list[position].keyComb.text.length > 0) {
                this.list[position].keyComb.text += '+';
              }
              switch (keyComb.key) {
              case 'f1':
                keyComb.key = 'F1';
                break;
              case 'f2':
                keyComb.key = 'F2';
                break;
              case 'f3':
                keyComb.key = 'F3';
                break;
              case 'f4':
                keyComb.key = 'F4';
                break;
              case 'f5':
                keyComb.key = 'F5';
                break;
              case 'f6':
                keyComb.key = 'F6';
                break;
              case 'f7':
                keyComb.key = 'F7';
                break;
              case 'f8':
                keyComb.key = 'F8';
                break;
              case 'f9':
                keyComb.key = 'F9';
                break;
              case 'f10':
                keyComb.key = 'F10';
                break;
              case 'f11':
                keyComb.key = 'F11';
                break;
              case 'f12':
                keyComb.key = 'F12';
                break;
              case 'I':
                keyComb.key = 'i';
                break; //Special case to ensure 'I' is different than 'l'
              case 'Space':
                keyComb.key = OB.I18N.getLabel('OBUIAPP_SpaceKey');
                break;
              case 'Tab':
                keyComb.key = OB.I18N.getLabel('OBUIAPP_TabKey');
                break;
              case 'Enter':
                keyComb.key = OB.I18N.getLabel('OBUIAPP_EnterKey');
                break;
              case 'Escape':
                keyComb.key = OB.I18N.getLabel('OBUIAPP_EscKey');
                break;
              case 'Backspace':
                keyComb.key = OB.I18N.getLabel('OBUIAPP_BackspaceKey');
                break;
              case 'Insert':
                keyComb.key = OB.I18N.getLabel('OBUIAPP_InsKey');
                break;
              case 'Delete':
                keyComb.key = OB.I18N.getLabel('OBUIAPP_DelKey');
                break;
              case 'Arrow_Up':
                keyComb.key = OB.I18N.getLabel('OBUIAPP_ArrowUpKey');
                break;
              case 'Arrow_Down':
                keyComb.key = OB.I18N.getLabel('OBUIAPP_ArrowDownKey');
                break;
              case 'Arrow_Left':
                keyComb.key = OB.I18N.getLabel('OBUIAPP_ArrowLeftKey');
                break;
              case 'Arrow_Right':
                keyComb.key = OB.I18N.getLabel('OBUIAPP_ArrowRightKey');
                break;
              case 'Home':
                keyComb.key = OB.I18N.getLabel('OBUIAPP_HomeKey');
                break;
              case 'End':
                keyComb.key = OB.I18N.getLabel('OBUIAPP_EndKey');
                break;
              case 'Page_Up':
                keyComb.key = OB.I18N.getLabel('OBUIAPP_PgUpKey');
                break;
              case 'Page_Down':
                keyComb.key = OB.I18N.getLabel('OBUIAPP_PgDnKey');
                break;
              case 'Shift':
                keyComb.key = OB.I18N.getLabel('OBUIAPP_ShiftKey');
                break;
              case 'Ctrl':
                keyComb.key = OB.I18N.getLabel('OBUIAPP_CtrlKey');
                break;
              case 'Alt':
                keyComb.key = OB.I18N.getLabel('OBUIAPP_AltKey');
                break;
              }
              this.list[position].keyComb.text += keyComb.key;
            }
          }
        }
      },

      remove: function (id) {
        var position = this.getProperty('position', id, 'id');
        if (position === null) {
          return false;
        }
        delete this.list[position];
      },

      getProperty: function (property, element, searchPattern) {
        var i, position = null,
            length = this.list.length;
        for (i = 0; i < length; i++) {
          if (typeof this.list[i] === 'undefined') {
            break;
          }
          if (searchPattern === 'id' && this.list[i].id === element) {
            position = i;
          } else if (searchPattern === 'execLevel' && this.list[i].execLevel === element) {
            position = i;
          } else if (searchPattern === 'keyComb' && this.list[i].keyComb.ctrl === element.ctrl && this.list[i].keyComb.alt === element.alt && this.list[i].keyComb.shift === element.shift && this.list[i].keyComb.key === element.key) {
            position = i;
          } else if (searchPattern === 'action' && this.list[i].action === element) {
            position = i;
          }
        }
        if (position !== null) {
          if (property === 'position') {
            return position;
          } else if (property.indexOf('keyComb.') === 0 && this.list[position].keyComb[property.substring(8, property.length)]) {
            return this.list[position].keyComb[property.substring(8, property.length)];
          } else if (this.list[position][property]) {
            return this.list[position][property];
          }
        } else {
          return null;
        }
      },

      execute: function (position, caller) {
        if (this.list[position].action !== null && typeof this.list[position].action === 'function') {
          return this.list[position].action(caller, this.list[position].funcParam);
        } else {
          return true;
        }
      },

      getList: function () {
        return this.list;
      },

      isSpacePressed: false,

      monitor: function (execLevel, caller) {
        var i, j, length = this.list.length,
            position = null,
            pushedKS = {};
        pushedKS.ctrl = false;
        pushedKS.alt = false;
        pushedKS.shift = false;
        pushedKS.space = false;
        pushedKS.key = null;
        if (isc.Event.ctrlKeyDown()) {
          pushedKS.ctrl = true;
        }
        if (isc.Event.altKeyDown()) {
          pushedKS.alt = true;
        }
        if (isc.Event.shiftKeyDown()) {
          pushedKS.shift = true;
        }
        if (this.isSpacePressed) {
          pushedKS.space = true;
        }
        pushedKS.key = isc.Event.getKey();
        if (pushedKS.key === 'Space' && pushedKS.ctrl && pushedKS.space) {
          return false; // To avoid write a space when "just" ctrl+space combination is pressed
        }

        for (i = 0; i < length; i++) {
          if (typeof this.list[i] === 'undefined' && !execLevel) {
            break;
          }
          if (this.list[i].execLevel) {
            for (j = 0; j < this.list[i].execLevel.length; j++) {
              if (this.list[i].execLevel[j] === execLevel && this.list[i].keyComb.ctrl === pushedKS.ctrl && this.list[i].keyComb.alt === pushedKS.alt && this.list[i].keyComb.shift === pushedKS.shift && this.list[i].keyComb.space === pushedKS.space && this.list[i].keyComb.key === pushedKS.key) {
                position = i;
                break;
              }
            }
          }

          if (position) {
            break;
          }
        }

        if (position !== null) {
          return this.execute(position, caller);
        } else {
          return true;
        }
      },

      list: []
    }

  };

  // Initialize KeyboardManager object
  keyboardMgr = O.KeyboardManager = new KeyboardManager();

  // To fix issue https://issues.openbravo.com/view.php?id=21786
  isc.ComboBoxItem.getPrototype()._originalKeyDown = isc.ComboBoxItem.getPrototype().keyDown;
  isc.ComboBoxItem.getPrototype().keyDown = function () {
    var actionObject = {
      target: this,
      method: this._originalKeyDown,
      parameters: arguments
    },
        response = OB.Utilities.callAction(actionObject),
        isEscape = isc.EH.getKey() === 'Escape' && !isc.EH.ctrlKeyDown() && !isc.EH.altKeyDown() && !isc.EH.shiftKeyDown();

    if (isEscape && this.isPickListShown()) {
      this.hidePicker();
      response = false;
    }
    return response;
  };

  O.KeyboardManager.Shortcuts.origWindowOnKeyDown = null;
  O.KeyboardManager.Shortcuts.origWindowOnKeyUp = null;
  O.KeyboardManager.Shortcuts.isOrigWindowOnKeyDownSet = false;

  /* isc.Page.setEvent('keyPress', 'OB.KeyboardManager.Shortcuts.monitor('Canvas')'); // Discart due to Chrome event propagation problems http://forums.smartclient.com/showthread.php?p=65578 */
  isc.Canvas.getPrototype()._originalKeyDown = isc.Canvas.getPrototype().keyDown;
  isc.Canvas.getPrototype().keyDown = function () {
    var actionObject = {
      target: this,
      method: this._originalKeyDown,
      parameters: arguments
    },
        response;

    // Special case to avoid "BACKSPACE" key resulting in a browser shortcut that performs a browser history "Go back".
    // Issue: https://issues.openbravo.com/view.php?id=21776
    if (isc.EH.getKey() === 'Backspace' && !isc.EH.ctrlKeyDown() && !isc.EH.altKeyDown() && !isc.EH.shiftKeyDown()) {
      if (!O.KeyboardManager.Shortcuts.isOrigWindowOnKeyDownSet) {
        var avoidBackspace, restoreOriginals;

        O.KeyboardManager.Shortcuts.isOrigWindowOnKeyDownSet = true;
        O.KeyboardManager.Shortcuts.origWindowOnKeyDown = window.onkeydown;
        O.KeyboardManager.Shortcuts.origWindowOnKeyUp = window.onkeyup;

        avoidBackspace = function (e) {
          if (e.keyCode === 8) {
            if (document.activeElement && (document.activeElement.tagName.toLowerCase() === 'div' || document.activeElement.tagName.toLowerCase() === 'body')) {
              return false;
            } else {
              return true;
            }
          } else {
            return true;
          }
        };

        restoreOriginals = function (e) {
          window.onkeydown = O.KeyboardManager.Shortcuts.origWindowOnKeyDown;
          window.onkeyup = O.KeyboardManager.Shortcuts.origWindowOnKeyUp;
          O.KeyboardManager.Shortcuts.isOrigWindowOnKeyDownSet = false;
        };

        window.onkeydown = avoidBackspace;
        window.onkeyup = restoreOriginals;
      }
    }
    if (isc.Event.getKey() === 'Space') {
      OB.KeyboardManager.Shortcuts.isSpacePressed = true;
    }
    response = OB.KeyboardManager.Shortcuts.monitor('Canvas');
    if (response !== false) { // To ensure that if a previous keyDown was set in the Canvas it is executed if the action KeyboardManager.action should be propagated
      response = OB.Utilities.callAction(actionObject);
    }
    return response;
  };

  isc.Canvas.getPrototype()._originalKeyUp = isc.Canvas.getPrototype().keyUp;
  isc.Canvas.getPrototype().keyUp = function () {
    var actionObject = {
      target: this,
      method: this._originalKeyUp,
      parameters: arguments
    };
    if (isc.Event.getKey() === 'Space') {
      OB.KeyboardManager.Shortcuts.isSpacePressed = false;
    }
    return OB.Utilities.callAction(actionObject);
  };

}(OB, isc));
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2010-2012 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */

// This file contains declarations for 3 types:
// - OBPopupClassicWindow: opens a popup to show a url, a classic OB process window.
// - OBClassicPopupModal: Opens a classic compatibility modal popup
// - OBClassicPopup: shows popups like heartbeat
// = Popup Classic OB Window =
//
// Opens a popup to show a url. Is used to show a classic OB process window.
//
isc.defineClass('OBPopupClassicWindow', isc.Class).addProperties({
  showsItself: true,
  command: 'DEFAULT',
  appURL: OB.Application.contextUrl + 'security/Menu.html',
  obManualURL: '',
  height: 450,
  width: 625
});

isc.OBPopupClassicWindow.addMethods({
  show: function () {
    var urlCharacter = '?',
        contentsURL;
    if (this.appURL.indexOf('?') !== -1) {
      urlCharacter = '&';
    }
    if (this.obManualURL !== '') {
      contentsURL = OB.Utilities.applicationUrl(this.obManualURL) + '?Command=' + this.command;
    } else {
      contentsURL = this.appURL + urlCharacter + 'Command=' + this.command + '&noprefs=true&tabId=' + this.tabId + '&hideMenu=true';
    }

    OB.Utilities.openProcessPopup(contentsURL, false, this.postParams, this.height, this.width);
  }
});

//= OBClassicPopupModal =
//
// Opens a modal classic compatibility popup to show a url. Is used to show a classic OB process window in modal popups.
//
isc.defineClass('OBClassicPopupModal', isc.Class).addProperties({
  showsItself: true,
  show: function () {
    OB.Layout.ClassicOBCompatibility.Popup.open(this.id, 625, 450, OB.Utilities.applicationUrl(this.obManualURL) + '?Command=' + this.command, '', null, false, false, true);
  }

});

isc.ClassFactory.defineClass('OBClassicPopup', isc.OBPopup);

// = OBClassicPopup =
//
// The OBClassicPopup is a shortcut for render classic OB popups in the new layout. It extends
// the OBPopup type (declared in the ob-popup.js file).
//
isc.OBClassicPopup.addProperties({

  init: function () {
    if (typeof this.width === 'string' && this.width.indexOf('%') !== -1) {
      this.percentualWidth = true;
    }
    if (typeof this.height === 'string' && this.height.indexOf('%') !== -1) {
      this.percentualHeight = true;
    }
    this.Super('init', arguments);
  },

  initWidget: function () {
    this.items = [
    isc.OBPopupHTMLFlow.create({
      contentsURL: ''
    })];
    this.Super('initWidget', arguments);
    var frameWidth, frameHeight;
    if (!this.percentualWidth) {
      frameWidth = this.width;
      frameWidth = parseInt(frameWidth, 10);
      frameWidth = frameWidth + this.edgeSize + this.edgeSize; // Smartclient to calculate the width takes into account the margin width
      frameWidth = parseInt(frameWidth, 10);
      if (frameWidth > OB.Layout.getVisibleWidth()) {
        frameWidth = OB.Layout.getVisibleWidth();
      }
      this.setWidth(frameWidth);
    }
    if (!this.percentualHeight) {
      frameHeight = this.height;
      frameHeight = parseInt(frameHeight, 10);
      frameHeight = frameHeight + this.edgeBottom + this.edgeTop; // Smartclient to calculate the height takes into account the margin width
      frameHeight = parseInt(frameHeight, 10);
      if (frameHeight > OB.Layout.getVisibleHeight()) {
        frameHeight = OB.Layout.getVisibleHeight();
      }
      this.setHeight(frameHeight);
    }
  },

  autoSize: false,
  showMaximizeButton: true,
  showHeaderIcon: true,
  showCloseButton: true,
  showMinimizeButton: true,
  showModalMask: true,
  showTitle: true,
  width: 600,
  height: 500,
  percentualWidth: false,
  percentualHeight: false,

  getIframeHtmlObj: function () {
    var container, iframes;
    container = this.getHandle();
    if (container && container.getElementsByTagName) {
      iframes = container.getElementsByTagName('iframe');
      if (iframes) {
        return iframes[0];
      }
    }
    return null;
  }
});
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2011-2012 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */
isc.ClassFactory.defineClass('OBMessageBarMainIcon', isc.Img);

isc.ClassFactory.defineClass('OBMessageBarDescriptionText', isc.HTMLFlow);

isc.ClassFactory.defineClass('OBMessageBarCloseIcon', isc.ImgButton);

isc.OBMessageBarCloseIcon.addProperties({
  messageBar: null,
  action: function () {
    this.messageBar.hide(true);
  }
});

isc.ClassFactory.defineClass('OBMessageBar', isc.HLayout);

isc.OBMessageBar.addClassProperties({
  TYPE_SUCCESS: 'success',
  TYPE_ERROR: 'error',
  TYPE_WARNING: 'warning',
  TYPE_INFO: 'info'
});

isc.OBMessageBar.addProperties({
  view: null,
  type: null,
  mainIcon: null,
  text: null,
  closeIcon: null,

  initWidget: function () {
    this.Super('initWidget', arguments);
    this.mainIcon = isc.OBMessageBarMainIcon.create({});
    this.text = isc.OBMessageBarDescriptionText.create({
      contents: ''
    });
    this.closeIcon = isc.OBMessageBarCloseIcon.create({
      messageBar: this
    });

    this.addMembers([this.mainIcon, this.text, this.closeIcon]);
  },

  hideCloseIcon: function () {
    this.closeIcon.hide();
  },

  showCloseIcon: function () {
    this.closeIcon.show();
  },

  setType: function (type) {
    if (this.setTypeStyle) {
      this.setTypeStyle(type);
    }
    this.type = type;
  },

  setText: function (title, text) {
    if (!title) {
      this.text.setContents(text);
    } else {
      // TODO: low-prio, move styling to a css class
      this.text.setContents('<b>' + title + '</b>' + (text ? '<br/>' + text : ''));
    }
  },

  getDefaultTitle: function (type) {
    if (type === isc.OBMessageBar.TYPE_SUCCESS) {
      return OB.I18N.getLabel('OBUIAPP_Success');
    } else if (type === isc.OBMessageBar.TYPE_ERROR) {
      return OB.I18N.getLabel('OBUIAPP_Error');
    } else if (type === isc.OBMessageBar.TYPE_INFO) {
      return OB.I18N.getLabel('OBUIAPP_Info');
    } else if (type === isc.OBMessageBar.TYPE_WARNING) {
      return OB.I18N.getLabel('OBUIAPP_Warning');
    }
    return null;
  },

  setMessage: function (type, title, text) {
    var i, length, newText, form, grid;
    if (this.view && this.view.viewForm) {
      form = this.view.viewForm;
    }
    if (this.view && this.view.viewGrid) {
      grid = this.view.viewGrid;
    }
    this.setType(type);
    if (isc.isAn.Array(text)) {
      length = text.length;
      // TODO: low prio, do some better styling display of multiple messages
      newText = '<ul class="OBMessageBarTextList">';
      for (i = 0; i < length; i++) {
        newText = newText + '<li>' + text[i] + '</li>';
      }
      text = newText + '</ul>';
    }

    if ((form && form.isSaving) || (grid && grid.isSaving)) {
      text = OB.I18N.getLabel('OBUIAPP_ErrorSavingFailed') + ' ' + text;
    }

    this.setText(title || this.getDefaultTitle(type), text);
    delete this.hasFilterMessage;
    this.show();
  },

  // calls te OB.I18N.getLabel to asynchronously get a label
  // and display it  
  setLabel: function (type, title, label, params) {
    var me = this;
    OB.I18N.getLabel(label, params, {
      setLabel: function (text) {
        me.setMessage(type, title, text);
      }
    }, 'setLabel');
  },

  hide: function (force) {
    // if hide is not forced, keep the message if marked as keepOnAutomaticRefresh
    if (force || !this.keepOnAutomaticRefresh) {
      delete this.keepOnAutomaticRefresh;
      this.Super('hide', arguments);
    }
  }
});
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2011-2012 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */
isc.ClassFactory.defineClass('OBStatusBarLeftBar', isc.HLayout);

isc.OBStatusBarLeftBar.addProperties({
  // to allow setting the active view when clicking in the statusbar
  canFocus: true
});

isc.ClassFactory.defineClass('OBStatusBarTextLabel', isc.Label);

isc.OBStatusBarTextLabel.addProperties({
  // to allow setting the active view when clicking in the statusbar
  canFocus: true,
  canSelectText: true
});

isc.ClassFactory.defineClass('OBStatusBarIconButtonBar', isc.HLayout);

isc.OBStatusBarIconButtonBar.addProperties({
  // to allow setting the active view when clicking in the statusbar
  canFocus: true
});

isc.ClassFactory.defineClass('OBStatusBarIconButton', isc.ImgButton);

isc.OBStatusBarIconButton.addProperties({
  buttonType: null,
  view: null,
  // to allow setting the active view when clicking in the statusbar
  canFocus: true,
  keyboardShortcutId: null,

  // always go through the autosave of the window
  action: function () {
    // to avoid issue that autosave is executed when maximize/minimize views using KS
    if (this.buttonType === 'maximizeRestore') {
      this.doAction();
      return;
    }

    // don't do autosave if new and nothing changed
    if (this.buttonType === 'close' && !this.view.viewForm.hasChanged && this.view.viewForm.isNew) {
      this.view.standardWindow.setDirtyEditForm(null);
    }

    // or when maximizing/minimizing
    if (this.buttonType === 'maximize' || this.buttonType === 'restore') {
      this.doAction();
      return;
    }

    var actionObject = {
      target: this,
      method: this.doAction,
      parameters: []
    };
    this.view.standardWindow.doActionAfterAutoSave(actionObject, false);
  },

  doAction: function () {
    var invalidFormState = this.view.viewForm.hasChanged && !this.view.viewForm.validateForm(),
        rowNum, newRowNum, newRecord, theButtonBar, i, length;
    if (this.buttonType === 'previous') {
      if (invalidFormState) {
        return;
      }
      this.view.editNextPreviousRecord(false);
    } else if (this.buttonType === 'maximize') {
      this.view.maximize();
    } else if (this.buttonType === 'restore') {
      this.view.restore();
    } else if (this.buttonType === 'next') {
      if (invalidFormState) {
        return;
      }
      this.view.editNextPreviousRecord(true);
    } else if (this.buttonType === 'close') {
      if (invalidFormState) {
        return;
      }
      this.view.viewForm.doClose();
    } else if (this.buttonType === 'maximizeRestore') {
      theButtonBar = this.view.statusBar.buttonBar;
      if (theButtonBar.members) {
        length = theButtonBar.members.length;
        for (i = 0; i < length; i++) {
          if (theButtonBar.members[i].buttonType === 'maximize' && !theButtonBar.members[i].isDisabled() && theButtonBar.members[i].isVisible()) {
            theButtonBar.members[i].action();
            break;
          } else if (theButtonBar.members[i].buttonType === 'restore' && !theButtonBar.members[i].isDisabled() && theButtonBar.members[i].isVisible()) {
            theButtonBar.members[i].action();
            break;
          }
        }
      }
    }
  },

  enableShortcut: function () {
    var me = this,
        ksAction;
    if (this.keyboardShortcutId) {
      ksAction = function () {
        if (!me.isDisabled() && me.isVisible()) {
          me.focus();
          me.action();
        } else if (me.forceKeyboardShortcut) {
          me.action();
        }
        return false; //To avoid keyboard shortcut propagation
      };
      OB.KeyboardManager.Shortcuts.set(this.keyboardShortcutId, 'OBViewForm', ksAction);
    }
  },

  disableShortcut: function () {
    if (this.keyboardShortcutId) {
      OB.KeyboardManager.Shortcuts.set(this.keyboardShortcutId, null, function () {
        return true;
      });
    }
  },

  initWidget: function () {
    if (this.initWidgetStyle) {
      this.initWidgetStyle();
    }
    this.Super('initWidget', arguments);
  }

});

isc.ClassFactory.defineClass('OBStatusBar', isc.HLayout);

isc.OBStatusBar.addProperties({
  view: null,
  iconButtonGroupSpacerWidth: 0,
  // Set in the skin
  previousButton: null,
  nextButton: null,
  showPreviousNextButton: true,
  closeButton: null,
  showCloseButton: true,
  maximizeButton: null,
  restoreButton: null,
  maximizeRestoreButton: null,
  showMaximizeRestoreButton: true,
  customButtons: null,

  newIcon: null,
  editIcon: null,
  showingIcon: false,
  mode: '',
  isActive: true,
  buttonBar: null,

  initWidget: function () {
    this.content = isc.HLayout.create({
      defaultLayoutAlign: 'center',
      width: '100%',
      height: '100%'
    });

    this.leftStatusBar = isc.OBStatusBarLeftBar.create({});
    this.leftStatusBar.addMember(this.content);

    this.buttonBar = isc.OBStatusBarIconButtonBar.create({
      width: this.buttonBarWidth
    });
    this.addCreateButtons();

    this.savedIcon = isc.Img.create(this.savedIconDefaults);
    this.newIcon = isc.Img.create(this.newIconDefaults);
    this.editIcon = isc.Img.create(this.editIconDefaults);
    this.spacer = isc.LayoutSpacer.create({
      width: 14
    });
    this.leftStatusBar.addMember(this.spacer, 0);

    this.addMembers([this.leftStatusBar, this.buttonBar]);
    this.Super('initWidget', arguments);
  },

  addCreateButtons: function () {
    var i, length, buttonSpacer;

    if (this.customButtons) {
      this.buttonBar.addMembers(this.customButtons);
    }

    if (this.showPreviousNextButton) {
      buttonSpacer = isc.HLayout.create({
        width: this.iconButtonGroupSpacerWidth
      });

      this.previousButton = isc.OBStatusBarIconButton.create({
        view: this.view,
        buttonType: 'previous',
        keyboardShortcutId: 'StatusBar_Previous',
        prompt: OB.I18N.getLabel('OBUIAPP_PREVIOUSBUTTON')
      });

      this.nextButton = isc.OBStatusBarIconButton.create({
        view: this.view,
        buttonType: 'next',
        keyboardShortcutId: 'StatusBar_Next',
        prompt: OB.I18N.getLabel('OBUIAPP_NEXTBUTTON')
      });

      this.buttonBar.addMembers([this.previousButton, this.nextButton, buttonSpacer]);
    }

    if (this.showMaximizeRestoreButton) {
      this.maximizeButton = isc.OBStatusBarIconButton.create({
        view: this.view,
        buttonType: 'maximize',
        prompt: OB.I18N.getLabel('OBUIAPP_MAXIMIZEBUTTON')
      });

      this.restoreButton = isc.OBStatusBarIconButton.create({
        visibility: 'hidden',
        view: this.view,
        buttonType: 'restore',
        prompt: OB.I18N.getLabel('OBUIAPP_RESTOREBUTTON')
      });

      this.maximizeRestoreButton = isc.OBStatusBarIconButton.create({ // Only for implement 'StatusBar_Maximize-Restore' keyboard shortcut
        visibility: 'hidden',
        view: this.view,
        buttonType: 'maximizeRestore',
        forceKeyboardShortcut: true,
        keyboardShortcutId: 'StatusBar_Maximize-Restore'
      });

      this.buttonBar.addMembers([this.maximizeButton, this.restoreButton, this.maximizeRestoreButton]);
    }

    if (this.showCloseButton) {
      this.closeButton = isc.OBStatusBarIconButton.create({
        view: this.view,
        buttonType: 'close',
        keyboardShortcutId: 'StatusBar_Close',
        prompt: OB.I18N.getLabel('OBUIAPP_CLOSEBUTTON')
      });

      this.buttonBar.addMembers([this.closeButton]);
    }

    length = this.buttonBar.members.length;
    for (i = 0; i < length; i++) {
      if (this.buttonBar.members[i].buttonType && this.view) {
        OB.TestRegistry.register('org.openbravo.client.application.statusbar.button.' + this.buttonBar.members[i].buttonType + '.' + this.view.tabId, this.buttonBar.members[i]);
      }
    }
  },

  draw: function () {
    this.Super('draw', arguments);
  },

  visibilityChanged: function (state) {
    if (this.isActive) {
      if (state) {
        this.enableShortcuts();
      } else {
        this.disableShortcuts();
      }
    }
  },

  setActive: function (value) {
    if (value) {
      this.isActive = true;
      this.enableShortcuts();
    } else {
      this.isActive = false;
      this.disableShortcuts();
    }
  },

  enableShortcuts: function () {
    var i;
    if (this.buttonBar.members) {
      for (i = 0; i < this.buttonBar.members.length; i++) {
        if (this.buttonBar.members[i].enableShortcut) {
          this.buttonBar.members[i].enableShortcut();
        }
      }
    }
  },

  disableShortcuts: function () {
    var length, i;
    if (this.buttonBar.members) {
      length = this.buttonBar.members.length;
      for (i = 0; i < length; i++) {
        if (this.buttonBar.members[i].disableShortcut) {
          this.buttonBar.members[i].disableShortcut();
        }
      }
    }
  },

  addIcon: function (icon) {
    // remove any existing icon or spacer
    this.leftStatusBar.destroyAndRemoveMembers(this.leftStatusBar.members[0]);
    this.leftStatusBar.addMember(icon, 0);
  },

  removeIcon: function () {
    // remove any existing icon or spacer
    this.leftStatusBar.destroyAndRemoveMembers(this.leftStatusBar.members[0]);
    this.leftStatusBar.addMember(this.spacer, 0);
  },

  setNewState: function (isNew) {
    this.previousButton.setDisabled(isNew);
    this.nextButton.setDisabled(isNew);
    if (isNew) {
      this.mode = 'NEW';
      this.setContentLabel(this.newIcon, 'OBUIAPP_New');
    }
  },

  setContentLabel: function (icon, statusCode, arrayTitleField, message) {
    // set the status code before calling updateContentTitle
    this.statusCode = statusCode;

    this.updateContentTitle(arrayTitleField, message);

    if (icon) {
      this.addIcon(icon);
    } else {
      this.removeIcon(icon);
    }
  },

  updateContentTitle: function (arrayTitleField, message) {
    var linkImageWidth = this.titleLinkImageWidth,
        linkImageHeight = this.titleLinkImageHeight,
        msg = '',
        msgTmp = '',
        ltrSep = '',
        rtlSep = '',
        imgLink, ltrImgLink = '',
        rtlImgLink = '',
        i, length, undef;

    if (typeof linkImageWidth !== 'undefined') {
      linkImageWidth = linkImageWidth.toString();
      if (linkImageWidth.indexOf('px') === -1) {
        linkImageWidth = linkImageWidth + 'px';
      }
      linkImageWidth = 'width: ' + linkImageWidth + ';';
    } else {
      linkImageWidth = '';
    }

    if (typeof linkImageHeight !== 'undefined') {
      linkImageHeight = linkImageHeight.toString();
      if (linkImageHeight.indexOf('px') === -1) {
        linkImageHeight = linkImageHeight + 'px';
      }
      linkImageHeight = 'height: ' + linkImageHeight + ';';
    } else {
      linkImageHeight = '';
    }

    for (i = this.content.members.length - 1; i >= 0; i--) {
      if (this.content.members[i].canvasItem) {
        this.content.removeMember(this.content.members[i]);
      }
    }

    this.content.destroyAndRemoveMembers(this.content.members);
    this.content.setMembers([]);

    imgLink = '<img src="' + (this.titleLinkImageSrc ? this.titleLinkImageSrc : '') + '" style="' + linkImageWidth + linkImageHeight + '" />';
    if (!isc.Page.isRTL()) {
      ltrSep = ':&nbsp;';
      ltrImgLink = imgLink + '&nbsp;';
    } else {
      rtlSep = '&nbsp;:';
      rtlImgLink = '&nbsp;' + imgLink;
    }
    if (this.statusCode) {
      msg = '<span class="' + (this.statusLabelStyle ? this.statusLabelStyle : '') + '">' + OB.I18N.getLabel(this.statusCode) + '</span>';
      this.content.addMember(isc.OBStatusBarTextLabel.create({
        contents: msg
      }));
    }
    if (arrayTitleField) {
      length = arrayTitleField[0].length;
      for (i = 0; i < length; i++) {
        if (i !== 0 || this.statusCode) {
          msg = '<span class="' + (this.separatorLabelStyle ? this.separatorLabelStyle : '') + '">' + '&nbsp;&nbsp;|&nbsp;&nbsp;' + '</span>';
        }
        if (isc.isA.Canvas(arrayTitleField[1][i])) {
          if (msg) {
            this.content.addMember(isc.OBStatusBarTextLabel.create({
              contents: msg
            }));
          }
          if (arrayTitleField[0][i]) {
            msg = '<span class="' + (this.titleLabelStyle ? this.titleLabelStyle : '') + '">' + rtlSep + arrayTitleField[0][i] + ltrSep + '</span>';
            this.content.addMember(isc.OBStatusBarTextLabel.create({
              contents: msg
            }));
          }

          // required by the automatic smoke test
          arrayTitleField[1][i]._title = arrayTitleField[0][i];
          arrayTitleField[1][i]._value = arrayTitleField[1][i].contents;

          arrayTitleField[1][i].show();
          arrayTitleField[1][i].inStatusBar = true;
          this.content.addMember(arrayTitleField[1][i]);
          continue;
        }

        msgTmp = '<span class="' + (this.fieldLabelStyle ? this.fieldLabelStyle : '') + '">' + this.getValidValue(arrayTitleField[1][i]) + '</span>';

        if (isc.Page.isRTL()) {
          msg += msgTmp;
        }
        if (arrayTitleField.length === 6 && arrayTitleField[2][i] !== undef && arrayTitleField[3][i] !== undef && arrayTitleField[4][i] !== undef && arrayTitleField[5][i] !== undef && OB.AccessibleEntities[arrayTitleField[4][i]]) {
          msg += '<span class="' + (this.titleLinkStyle ? this.titleLinkStyle : '') + '" onclick="OB.Utilities.openDirectView(\'' + arrayTitleField[2][i] + '\', \'' + arrayTitleField[3][i] + '\', \'' + arrayTitleField[4][i] + '\', \'' + arrayTitleField[5][i] + '\')">' + rtlImgLink + rtlSep + arrayTitleField[0][i] + ltrSep + ltrImgLink + '</span>';
        } else {
          msg += '<span class="' + (this.titleLabelStyle ? this.titleLabelStyle : '') + '">' + rtlSep + arrayTitleField[0][i] + ltrSep + '</span>';
        }
        if (!isc.Page.isRTL()) {
          msg += msgTmp;
        }

        this.content.addMember(isc.OBStatusBarTextLabel.create({
          contents: msg,
          _title: arrayTitleField[0][i],
          _value: this.getValidValue(arrayTitleField[1][i])
        }));
        msg = null;
      }
    }
    if (message) {
      if (arrayTitleField || this.statusCode) {
        msg = '<span class="' + (this.separatorLabelStyle ? this.separatorLabelStyle : '') + '">' + '&nbsp;&nbsp;|&nbsp;&nbsp;' + '</span>';
      }
      msg += '<span class="' + (this.titleLabelStyle ? this.titleLabelStyle : '') + '">' + message + '</span>';
      this.content.addMember(isc.OBStatusBarTextLabel.create({
        contents: msg
      }));
    }
  },

  getValidValue: function (value) {
    var undef;
    if (value === null || value === undef) {
      return '&nbsp;&nbsp;&nbsp;';
    }
    return value;
  },

  destroy: function () {
    if (this.savedIcon) {
      this.savedIcon.destroy();
      this.savedIcon = null;
    }

    if (this.newIcon) {
      this.newIcon.destroy();
      this.newIcon = null;
    }

    if (this.editIcon) {
      this.editIcon.destroy();
      this.editIcon = null;
    }
    this.Super('destroy', arguments);
  }
});
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2010-2012 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */

// = Recent Utilities =
//
// The Recent Utilities provides a mechanism to store and maintain recent choices
// by the user in the user interface. Examples are the last three menu choices 
// of a user in the application menu. The number of entries stores is defined
// by a property UINAVBA_RecentListSize.
//
(function (OB, isc) {

  if (!OB || !isc) {
    throw {
      name: 'ReferenceError',
      message: 'openbravo and isc objects are required'
    };
  }

  // cache object references locally
  var ISC = isc,
      rcutils; // Local reference to RemoveCallManager instance

  function RecentUtilities() {}

  RecentUtilities.prototype = {
    getRecentNum: function () {
      if (this.recentNum) {
        return this.recentNum;
      }
      this.recentNum = null;
      var storedRecentNum = OB.PropertyStore.get('UINAVBA_RecentListSize');
      if (storedRecentNum && storedRecentNum.size) {
        this.recentNum = storedRecentNum.size;
      } else if (storedRecentNum) {
        // a direct number
        this.recentNum = storedRecentNum;
      }

      // is the value valid
      if (!this.recentNum || (String(this.recentNum)) !== (String(parseInt(this.recentNum, 10)))) {
        this.recentNum = 3;
      }
      return this.recentNum;
    },

    // ** {{{ RecentUtilities.getRecent(/*String*/ propertyName) }}} **
    //
    // Retrieves the most recent choices which are stored under the name
    // specified by
    // by the parameter
    //
    // Parameters:
    // * {{{propertyName}}}: the name under which the recent value is stored.
    //
    getRecentValue: function (propertyName) {
      var value = OB.PropertyStore.get(propertyName);
      if (!value) {
        return [];
      }
      return value;
    },

    // ** {{{ RecentUtilities.addRecent(/*String*/ propertyName, /*Object*/
    // choiceObject) }}} **
    //
    // Add a new recent entry to the array of recent entries. There are never
    // stored more than {{{recentNum}}}
    // in the recent entries.
    //
    // Parameters:
    // * {{{propertyName}}}: the name under which the recent value is stored.
    // * {{{choiceObject}}}: the object defining the last user choice, can be null
    //                        in this case the call returns without changing things.
    //
    addRecent: function (propertyName, choiceObject) {
      // in some cases the choiceobject is not set, just ignore those
      if (!choiceObject) {
        return;
      }
      var currentRecentValue = this.getRecentValue(propertyName);
      // check if there is already an entry for the new recent
      var currentIndex = -1,
          i, length = currentRecentValue.length;
      for (i = 0; i < length; i++) {
        // if the title is the same then assume they are the same, only 
        // check this if there is no recentId being used
        if (!currentRecentValue[i].recentId && currentRecentValue[i].tabTitle && choiceObject.tabTitle && choiceObject.tabTitle === currentRecentValue[i].tabTitle) {
          currentIndex = i;
        } else if (currentRecentValue[i].recentId && choiceObject.recentId && choiceObject.recentId === currentRecentValue[i].recentId) {
          currentIndex = i;
        } else if (currentRecentValue[i].id && currentRecentValue[i].id === choiceObject.id) {
          currentIndex = i;
        }
      }

      //if found and the current index is 0, skip
      if (currentIndex === 0) {
        return;
      }

      // if found then first remove it, re-add it later
      if (currentIndex > -1) {
        var currentLength = currentRecentValue.length;
        for (i = currentIndex; i < (currentLength - 1); i++) {
          currentRecentValue[i] = currentRecentValue[i + 1];
        }
        currentRecentValue.length = currentRecentValue.length - 1;
      }

      var newLength = 1;
      for (i = (currentRecentValue.length - 1); i >= 0; i--) {
        if (i < (this.getRecentNum() - 1)) {
          currentRecentValue[i + 1] = currentRecentValue[i];
          if (newLength === 1) {
            newLength = i + 1 + 1;
          }
        }
      }
      currentRecentValue[0] = choiceObject;
      currentRecentValue.length = newLength;
      OB.PropertyStore.set(propertyName, currentRecentValue);
    }
  };

  // Initialize RemoteCallManager object
  rcutils = OB.RecentUtilities = new RecentUtilities();
  OB.RecentUtilitiesClass = RecentUtilities;
}(OB, isc));
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2010-2013 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */
isc.ClassFactory.defineClass('OBUserProfile', isc.OBQuickRun);

// = OBUserProfile =
// The OBUserProfile implements a widget which displays the currently logged in
// user. By clicking the widget a form is opened which allows to edit the
// user/role information and change the password.
isc.OBUserProfile.addProperties({
  showInPortal: true,

  showProfileFormInPortal: false,

  layoutProperties: {
    width: 280
  },

  // ** {{{ title }}} **
  //
  // Contains the user name of the user
  title: OB.User.userName,

  // ** {{{ src }}} **
  //
  // Set to empty to prevent an icon from being displayed on the button.
  src: '',

  hoverWidth: 200,

  showTitle: true,

  // ** {{{ doShow() }}} **
  //
  // Is called when the forms are shown.
  doShow: function () {
    this.initialize();

    // reset before showing
    if (this.profileForm) {
      this.profileForm.reset();
      this.profileForm.focusInItem('role');
    }
    this.tabSet.selectTab(0);
    if (this.pwdForm) {
      this.pwdForm.reset();
      this.pwdForm.setFocusItem('currentPwd');
    }
    this.Super('doShow', arguments);
  },

  formActionHandler: 'org.openbravo.client.application.navigationbarcomponents.UserInfoWidgetActionHandler',

  keyboardShortcutId: 'NavBar_OBUserProfile',

  initWidget: function () {
    var me = this;
    OB.RemoteCallManager.call(this.formActionHandler, {}, {
      'command': 'data'
    }, function (req, data, resp) {
      me.formData = data;
    });
    // ** {{{ setPrompt }}} **
    // Shown on hover, shows some user information.
    if (!OB.User.isPortal) {
      this.setPrompt('<b>' + OB.I18N.getLabel('UINAVBA_Role') + '</b>: ' + OB.User.roleName + '<br/>' + '<b>' + OB.I18N.getLabel('UINAVBA_Client') + '</b>: ' + OB.User.clientName + '<br/>' + '<b>' + OB.I18N.getLabel('UINAVBA_Organization') + '</b>: ' + OB.User.organizationName);
    }

    this.Super('initWidget', arguments);
    OB.TestRegistry.register('org.openbravo.client.application.navigationbarcomponents.UserProfileButton', this);
  },

  createProfileForm: function () {
    var me = this,
        profileFormLayout, buttonLayout, profileForm, comboBoxFieldProperties, roleField, orgField, warehouseField, languageField, checkboxFieldProperties, defaultField, clientField, textFieldProperties;

    if (OB.User.isPortal && !this.showProfileFormInPortal) {
      return false;
    }

    // create a default form field types
    comboBoxFieldProperties = {
      errorOrientation: OB.Styles.OBFormField.DefaultComboBox.errorOrientation,
      cellStyle: OB.Styles.OBFormField.DefaultComboBox.cellStyle,
      titleStyle: OB.Styles.OBFormField.DefaultComboBox.titleStyle,
      textBoxStyle: OB.Styles.OBFormField.DefaultComboBox.textBoxStyle,
      pendingTextBoxStyle: OB.Styles.OBFormField.DefaultComboBox.pendingTextBoxStyle,
      controlStyle: OB.Styles.OBFormField.DefaultComboBox.controlStyle,
      width: '*',
      pickListBaseStyle: OB.Styles.OBFormField.DefaultComboBox.pickListBaseStyle,
      pickListTallBaseStyle: OB.Styles.OBFormField.DefaultComboBox.pickListTallBaseStyle,
      pickerIconSrc: OB.Styles.OBFormField.DefaultComboBox.pickerIconSrc,

      height: OB.Styles.OBFormField.DefaultComboBox.height,
      pickerIconWidth: OB.Styles.OBFormField.DefaultComboBox.pickerIconWidth,
      pickListCellHeight: OB.Styles.OBFormField.DefaultComboBox.pickListCellHeight,
      pickListProperties: {
        bodyStyleName: OB.Styles.OBFormField.DefaultComboBox.pickListProperties.bodyStyleName
      },

      // workaround for this issue:
      // https://issues.openbravo.com/view.php?id=18501
      setUpPickList: function () {
        this.Super("setUpPickList", arguments);
        if (this.pickList) {
          this.pickList.setBodyStyleName(this.pickListProperties.bodyStyleName);
        }
      },

      titleOrientation: 'top',
      showFocused: true,
      editorType: 'select',
      selectOnFocus: true,
      addUnknownValues: false,
      allowEmptyValue: false,
      defaultToFirstOption: true,

      // to solve: https://issues.openbravo.com/view.php?id=20067
      // in chrome the order of the valueMap object is not retained
      // the solution is to keep a separate entries array with the
      // records in the correct order, see also the setEntries
      // method
      getClientPickListData: function () {
        if (this.entries) {
          return this.entries;
        }
        return this.Super('getClientPickListData', arguments);
      },

      setEntries: function (entries) {
        var length = entries.length,
            i, id, identifier, valueField = this.getValueFieldName(),
            valueMap = {};
        this.entries = [];
        for (i = 0; i < length; i++) {
          id = entries[i][OB.Constants.ID] || '';
          identifier = entries[i][OB.Constants.IDENTIFIER] || '';
          valueMap[id] = identifier;
          this.entries[i] = {};
          this.entries[i][valueField] = id;
        }
        this.setValueMap(valueMap);
      }
    };

    roleField = isc.addProperties({
      name: 'role',
      title: OB.I18N.getLabel('UINAVBA_Role')
    }, comboBoxFieldProperties);

    orgField = isc.addProperties({
      name: 'organization',
      title: OB.I18N.getLabel('UINAVBA_Organization')
    }, comboBoxFieldProperties);

    warehouseField = isc.addProperties({
      name: 'warehouse',
      title: OB.I18N.getLabel('UINAVBA_Warehouse')
    }, comboBoxFieldProperties);

    languageField = isc.addProperties({
      name: 'language',
      title: OB.I18N.getLabel('UINAVBA_Language')
    }, comboBoxFieldProperties);

    checkboxFieldProperties = {
      cellStyle: OB.Styles.OBFormField.DefaultCheckbox.cellStyle,
      titleStyle: OB.Styles.OBFormField.DefaultCheckbox.titleStyle,
      textBoxStyle: OB.Styles.OBFormField.DefaultCheckbox.textBoxStyle,
      showValueIconOver: OB.Styles.OBFormField.DefaultCheckbox.showValueIconOver,
      showValueIconFocused: OB.Styles.OBFormField.DefaultCheckbox.showValueIconFocused,
      showFocused: OB.Styles.OBFormField.DefaultCheckbox.showFocused,
      defaultValue: OB.Styles.OBFormField.DefaultCheckbox.defaultValue,
      checkedImage: OB.Styles.OBFormField.DefaultCheckbox.checkedImage,
      uncheckedImage: OB.Styles.OBFormField.DefaultCheckbox.uncheckedImage,
      titleOrientation: 'right',
      editorType: 'checkbox'
    };

    defaultField = isc.addProperties({
      name: 'default',
      title: OB.I18N.getLabel('UINAVBA_SetAsDefault')
    }, checkboxFieldProperties);

    textFieldProperties = {
      errorOrientation: OB.Styles.OBFormField.DefaultTextItem.errorOrientation,
      cellStyle: OB.Styles.OBFormField.DefaultTextItem.cellStyle,
      titleStyle: OB.Styles.OBFormField.DefaultTextItem.titleStyle,
      textBoxStyle: OB.Styles.OBFormField.DefaultTextItem.textBoxStyle,
      showFocused: true,
      showDisabled: true,
      disabled: true,
      showIcons: false,
      width: '*',
      titleOrientation: 'top',
      editorType: 'TextItem'
    };

    clientField = isc.addProperties({
      name: 'client',
      title: OB.I18N.getLabel('UINAVBA_Client')
    }, textFieldProperties);

    // create the form for the role information
    profileForm = isc.DynamicForm.create({
      autoFocus: true,
      overflow: 'visible',
      numCols: 1,
      width: '100%',
      titleSuffix: '',
      errorsPreamble: '',
      showInlineErrors: false,
      widgetInstance: me,

      initWidget: function () {
        this.Super('initWidget', arguments);
        this.setInitialData(this.widgetInstance.formData);
      },

      itemKeyPress: function (item, keyName, characterValue) {
        if (keyName === 'Escape') {
          if (isc.OBQuickRun.currentQuickRun) {
            isc.OBQuickRun.currentQuickRun.doHide();
          }
        }

        this.Super('itemKeyPress', arguments);
      },

      localFormData: null,
      reset: function () {
        // note order is important, first order item then do ValueMaps
        // then do setValues
        // this is needed because the select items will reject values
        // if the valuemap is not yet set
        this.setValue('role', this.localFormData.initialValues.role);
        this.setOtherEntries();
        // note, need to make a copy of the initial values
        // otherwise they are updated when the form values change!
        this.setValues(isc.addProperties({}, this.localFormData.initialValues));
        this.setWarehouseValueMap();
        //We set initial values again to set warehouse correctly
        this.setValues(isc.addProperties({}, this.localFormData.initialValues));
        if (this.getItem('warehouse').getClientPickListData().length > 0 && !this.getItem('warehouse').getValue()) {
          this.getItem('warehouse').moveToFirstValue();
        }
      },
      setInitialData: function (data) {
        // order of these statements is important see comments in reset
        // function
        this.localFormData = data;
        this.getItem('language').setEntries(data.language.valueMap);
        this.getItem('role').setEntries(data.role.valueMap);
        this.setValue('role', data.initialValues.role);
        this.setValue('client', data.initialValues.client);
        this.setOtherEntries();
        //First we set initial values, but warehouse will not work
        //as its combo hasn't yet been filled
        this.setValues(isc.addProperties({}, data.initialValues));
        this.setWarehouseValueMap();
        //We set initial values again to set warehouse correctly
        this.setValues(isc.addProperties({}, data.initialValues));
      },
      // updates the dependent combos
      itemChanged: function (item, newValue) {
        this.setOtherEntries();
        if (item.name === 'role') {
          if (this.getItem('organization').getClientPickListData().length > 0) {
            this.getItem('organization').moveToFirstValue();
          }
        }
        this.setWarehouseValueMap();
        if (item.name !== 'warehouse' && item.name !== 'default') {
          if (this.getItem('warehouse').getClientPickListData().length > 0) {
            this.getItem('warehouse').moveToFirstValue();
          }
        }
      },
      setOtherEntries: function () {
        var i, role, roleId = this.getValue('role'),
            length = this.localFormData.role.roles.length;
        for (i = 0; i < length; i++) {
          role = this.localFormData.role.roles[i];
          if (role.id === roleId) {
            this.getItem('organization').setEntries(role.organizationValueMap);
            this.setValue('client', role.client);
          }
        }
      },
      setWarehouseValueMap: function () {
        var i, j, warehouseOrg, role, roleId, roleLength, length, orgId = this.getItem('organization').getValue();
        if (!orgId) {
          return;
        }
        roleLength = this.localFormData.role.roles.length;
        roleId = this.getValue('role');
        for (i = 0; i < roleLength; i++) {
          role = this.localFormData.role.roles[i];
          if (role.id === roleId) {
            length = role.warehouseOrgMap.length;
            for (j = 0; j < length; j++) {
              warehouseOrg = role.warehouseOrgMap[j];
              if (warehouseOrg.orgId === orgId) {
                this.getItem('warehouse').setEntries(warehouseOrg.warehouseMap);
              }
            }
          }
        }
      },

      // call the server to save the information
      doSave: function () {
        OB.RemoteCallManager.call(this.widgetInstance.formActionHandler, this.getValues(), {
          'command': 'save'
        }, this.doSaveCallback);
      },

      // and reload
      doSaveCallback: function (rpcResponse, data, rpcRequest) {
        // if not success then an error, can not really occur
        // is handled as an exception is returned anyway
        if (data.result === OB.Constants.SUCCESS) {
          // reload the window to reflect the changed role etc.
          window.location.href = OB.Utilities.getLocationUrlWithoutFragment();
        }
      },

      fields: [roleField, clientField, orgField, warehouseField, languageField, defaultField]
    });

    // create the form layout which contains both the form and the buttons
    profileFormLayout = isc.VStack.create({
      align: 'center',
      overflow: 'visible',
      height: 1,
      width: '100%'
    });
    profileFormLayout.addMembers(profileForm);

    // create the buttons
    buttonLayout = isc.HStack.create({
      layoutTopMargin: 10,
      membersMargin: 10,
      align: 'center',
      overflow: 'visible',
      height: 1,
      width: 248
    });
    if (isc.Page.isRTL()) { //HACK: in RTL mode this width is higher than in LTR (Even with width: '100%'). Manual set to a lower value.
      buttonLayout.width = 220;
    }

    buttonLayout.addMembers(isc.OBFormButton.create({
      title: OB.I18N.getLabel('OBUIAPP_Apply'),
      click: function () {
        isc.OBQuickRun.currentQuickRun.doHide();
        profileForm.doSave();
      }
    }));
    buttonLayout.addMembers(isc.OBFormButton.create({
      title: OB.I18N.getLabel('UINAVBA_Cancel'),
      click: isc.OBQuickRun.hide
    }));
    profileFormLayout.addMembers(buttonLayout);

    // pointer to the form
    this.profileForm = profileForm;
    this.profileFormLayout = profileFormLayout;

    OB.TestRegistry.register('org.openbravo.client.application.navigationbarcomponents.UserProfileRole.RoleField', profileForm.getField('role'));
    OB.TestRegistry.register('org.openbravo.client.application.navigationbarcomponents.UserProfileRole.OrgField', profileForm.getField('organization'));
    OB.TestRegistry.register('org.openbravo.client.application.navigationbarcomponents.UserProfileRole.WarehouseField', profileForm.getField('warehouse'));
    OB.TestRegistry.register('org.openbravo.client.application.navigationbarcomponents.UserProfileRole.LanguageField', profileForm.getField('language'));
    OB.TestRegistry.register('org.openbravo.client.application.navigationbarcomponents.UserProfileRole.DefaultField', profileForm.getField('default'));
    OB.TestRegistry.register('org.openbravo.client.application.navigationbarcomponents.UserProfileRole.ClientField', profileForm.getField('client'));
    OB.TestRegistry.register('org.openbravo.client.application.navigationbarcomponents.UserProfileRole.Form', profileForm);
    OB.TestRegistry.register('org.openbravo.client.application.navigationbarcomponents.UserProfileRole.SaveButton', buttonLayout.members[0]);
    OB.TestRegistry.register('org.openbravo.client.application.navigationbarcomponents.UserProfileRole.CancelButton', buttonLayout.members[1]);
  },

  createPwdForm: function () {
    var me = this,
        newPasswordField, pwdForm, confirmPasswordField, currentPasswordField, pwdButtonLayout, pwdFormLayout, pwdSaveButton, passwordFieldProperties;

    // now create the fields for the password form
    passwordFieldProperties = {
      errorOrientation: OB.Styles.OBFormField.DefaultTextItem.errorOrientation,
      cellStyle: OB.Styles.OBFormField.DefaultTextItem.cellStyle,
      titleStyle: OB.Styles.OBFormField.DefaultTextItem.titleStyle,
      textBoxStyle: OB.Styles.OBFormField.DefaultTextItem.textBoxStyle,
      titleOrientation: 'top',
      width: '*',
      showErrorIcon: false,
      showFocused: true,
      required: true,
      selectOnFocus: false,
      editorType: 'PasswordItem'
    };

    currentPasswordField = isc.addProperties({
      name: 'currentPwd',
      title: OB.I18N.getLabel('UINAVBA_CurrentPwd')
    }, passwordFieldProperties);

    newPasswordField = isc.addProperties({
      name: 'newPwd',
      title: OB.I18N.getLabel('UINAVBA_NewPwd')
    }, passwordFieldProperties);

    confirmPasswordField = isc.addProperties({
      name: 'confirmPwd',
      title: OB.I18N.getLabel('UINAVBA_ConfirmPwd')
    }, passwordFieldProperties);

    // create the password form
    pwdForm = isc.DynamicForm.create({
      autoFocus: true,
      overflow: 'visible',
      width: '100%',
      titleSuffix: '</b>',
      titlePrefix: '<b>',
      requiredTitleSuffix: ' *</b>',
      requiredRightTitlePrefix: '<b>* ',
      rightTitlePrefix: '<b>',
      rightTitleSuffix: '</b>',
      numCols: 1,
      errorOrientation: 'right',

      // overridden to pass suppressautofocus to parent
      addFieldErrors: function (fieldName, errors, showErrors) {
        if (!this.errors) {
          this.errors = {};
        }

        this.addValidationError(this.errors, fieldName, errors);

        // Don't bother updating hiddenErrors - this will be updated by 
        // showErrors() / showFieldErrors()
        if (showErrors) {
          this.showFieldErrors(fieldName, true);
        }
      },

      itemKeyPress: function (item, keyName, characterValue) {
        if (keyName === 'Escape') {
          if (isc.OBQuickRun.currentQuickRun) {
            isc.OBQuickRun.currentQuickRun.doHide();
          }
        }

        this.Super('itemKeyPress', arguments);
      },

      // call the server
      formActionHandler: 'org.openbravo.client.application.navigationbarcomponents.UserInfoWidgetActionHandler',
      doSave: function () {
        OB.RemoteCallManager.call(pwdForm.formActionHandler, pwdForm.getValues(), {
          'command': 'changePwd'
        }, pwdForm.doSaveCallback);
      },

      // the callback displays an info dialog and then hides the form
      doSaveCallback: function (rpcResponse, data, rpcRequest) {
        var i, length;
        if (data.result === OB.Constants.SUCCESS) {
          isc.OBQuickRun.hide();
          isc.say(OB.I18N.getLabel('UINAVBA_PasswordChanged'));
        } else {
          if (data.messageCode) {
            isc.showPrompt(OB.I18N.getLabel(data.message));
          }
          if (data.fields) {
            length = data.fields.length;
            for (i = 0; i < length; i++) {
              var field = data.fields[i];
              pwdForm.addFieldErrors(field.field, OB.I18N.getLabel(field.messageCode), true);
            }
          }
        }
      },

      // enable/disable the save button, show an error if the two values
      // are unequal
      itemChanged: function (item, newValue) {
        var currentPwd = this.getValue('currentPwd');
        var newPwd = this.getValue('newPwd');
        var confirmPwd = this.getValue('confirmPwd');
        if (OB.Utilities.isNonEmptyString(currentPwd) && OB.Utilities.isNonEmptyString(newPwd) && OB.Utilities.isNonEmptyString(confirmPwd) && OB.Utilities.areEqualWithTrim(newPwd, confirmPwd)) {
          if (pwdSaveButton.isDisabled()) {
            pwdSaveButton.enable();
          }
          pwdForm.clearFieldErrors('confirmPwd', true);
        } else if (pwdSaveButton.isEnabled()) {
          pwdSaveButton.disable();
        }
        if (item.name === 'newPwd' || item.name === 'confirmPwd') {
          if (!OB.Utilities.areEqualWithTrim(newPwd, confirmPwd)) {
            pwdForm.addFieldErrors('confirmPwd', OB.I18N.getLabel('UINAVBA_UnequalPwd'), true);
          }
        }
        pwdForm.focusInItem(item.name);
      },
      fields: [currentPasswordField, newPasswordField, confirmPasswordField]
    });

    // create the layout that holds the form and the buttons
    pwdFormLayout = isc.VStack.create({
      overflow: 'visible',
      height: 1,
      width: '100%',
      align: 'center'
    });
    pwdFormLayout.addMembers(pwdForm);

    pwdSaveButton = isc.OBFormButton.create({
      title: OB.I18N.getLabel('OBUIAPP_Apply'),
      action: pwdForm.doSave,
      disabled: true
    });

    pwdButtonLayout = isc.HStack.create({
      layoutTopMargin: 10,
      membersMargin: 10,
      width: 248,
      align: 'center',
      overflow: 'visible',
      height: 1
    });
    if (isc.Page.isRTL()) { //HACK: in RTL mode this width is higher than in LTR (Even with width: '100%'). Manual set to a lower value.
      pwdButtonLayout.width = 220;
    }
    pwdButtonLayout.addMembers(pwdSaveButton);
    pwdButtonLayout.addMembers(isc.OBFormButton.create({
      title: OB.I18N.getLabel('UINAVBA_Cancel'),
      click: isc.OBQuickRun.hide
    }));
    pwdFormLayout.addMembers(pwdButtonLayout);

    // pointer to the form
    this.pwdForm = pwdForm;
    this.pwdFormLayout = pwdFormLayout;

    OB.TestRegistry.register('org.openbravo.client.application.navigationbarcomponents.UserProfilePassword.SaveButton', pwdSaveButton);
    OB.TestRegistry.register('org.openbravo.client.application.navigationbarcomponents.UserProfilePassword.CancelButton', pwdButtonLayout.members[1]);
    OB.TestRegistry.register('org.openbravo.client.application.navigationbarcomponents.UserProfilePassword.CurrentPasswordField', pwdForm.getField('currentPwd'));
    OB.TestRegistry.register('org.openbravo.client.application.navigationbarcomponents.UserProfilePassword.NewPasswordField', pwdForm.getField('newPwd'));
    OB.TestRegistry.register('org.openbravo.client.application.navigationbarcomponents.UserProfilePassword.ConfirmPasswordField', pwdForm.getField('confirmPwd'));
    OB.TestRegistry.register('org.openbravo.client.application.navigationbarcomponents.UserProfilePassword.Form', pwdForm);
  },

  // ** {{{ initialize() }}} **
  //
  // Creates the forms, fields and buttons.
  initialize: function () {
    var me = this,
        tabSet, dummyFirstField, dummyLastField;

    if (this.profileForm || this.pwdForm) {
      return;
    }

    OB.Layout.userProfileWidget = this;

    this.createProfileForm();
    this.createPwdForm();

    // and create the tabset
    tabSet = isc.TabSet.create({
      paneContainerOverflow: 'visible',
      overflow: 'visible',
      useSimpleTabs: true,
      simpleTabBaseStyle: 'OBNavBarComponentFormTabButton',
      paneContainerClassName: 'OBNavBarComponentFormTabSetContainer',
      tabBarProperties: {
        baseLineThickness: 0
      },
      width: 250,
      initWidget: function () {
        this.Super('initWidget', arguments);
        if (me.profileFormLayout) {
          this.addTab({
            title: OB.I18N.getLabel('UINAVBA_Profile'),
            pane: me.profileFormLayout,
            overflow: 'visible'
          });
        }
        if (me.pwdFormLayout) {
          this.addTab({
            title: OB.I18N.getLabel('UINAVBA_ChangePassword'),
            pane: me.pwdFormLayout,
            overflow: 'visible'
          });
        }
      }
    });
    this.tabSet = tabSet;

    dummyFirstField = isc.OBFocusButton.create({
      getFocusTarget: function () {
        var tabSet = this.parentElement.members[1];
        var selectedTabNumber = tabSet.getSelectedTabNumber();
        var length1 = tabSet.getTabPane(selectedTabNumber).members.length - 1;
        var length2 = tabSet.getTabPane(selectedTabNumber).members[length1].members.length - 1;
        return tabSet.getTabPane(selectedTabNumber).members[length1].members[length2];
      }
    });

    dummyLastField = isc.OBFocusButton.create({
      getFocusTarget: function () {
        var tabSet = this.parentElement.members[1];
        var selectedTabNumber = tabSet.getSelectedTabNumber();
        return tabSet.tabBar.members[selectedTabNumber];
      }
    });

    this.members = [dummyFirstField, tabSet, dummyLastField];

    OB.TestRegistry.register('org.openbravo.client.application.navigationbarcomponents.UserProfile.Tabset', tabSet);

    this.resetLayout();
    this.computeSetContent();
  }
});
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2011-2013 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */

isc.ClassFactory.defineClass('OBLogout', isc.ImgButton);

// = OBLogout =
// The OBLogout implements a widget to logout the application
isc.OBLogout.addProperties({
  showInPortal: true,

  keyboardShortcutId: 'NavBar_OBLogout',

  showLogoutText: false,

  initWidget: function () {
    if (this.showLogoutText) {
      this.baseStyle = isc.OBAlertIcon.getInstanceProperty('baseStyle');
      this.height = '100%';
      this.autoFit = true;
      this.showTitle = true;
      this.src = '';
      this.title = OB.I18N.getLabel('UINAVBA_LogOut');
    }
    this.Super('initWidget', arguments);
  },

  draw: function () {
    var me = this,
        ksAction;

    ksAction = function () {
      OB.Utilities.logout();
      return false; //To avoid keyboard shortcut propagation
    };
    OB.KeyboardManager.Shortcuts.set(this.keyboardShortcutId, 'Canvas', ksAction);
    this.Super("draw", arguments);

    if (!this.showLogoutText) {
      this.setPrompt(OB.I18N.getLabel('UINAVBA_EndSession'));
    }
/* Avoid declare directly "prompt: " in this widget definition.
       Declared as "setPrompt" inside "draw" function in order to solve issue https://issues.openbravo.com/view.php?id=18192 in FF */

    OB.TestRegistry.register('org.openbravo.client.application.navigationbarcomponents.QuitButton', this);
  },

  click: function () {
    var handle = this.getHandle();
    OB.Utilities.logout();
  }
});
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2010-2013 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */

isc.ClassFactory.defineClass('OBHelpAboutLinkButton', isc.Button);

isc.ClassFactory.defineClass('OBHelpAbout', isc.OBQuickRun);

// = OB Help About =
// Provides the help/about widget in the navigation bar. It displays two
// links: about and help. The help link will only be
// displayed if the current selected window has a help view.
isc.OBHelpAbout.addProperties({
  showInPortal: false,

  layoutProperties: {},

  title: OB.I18N.getLabel('UINAVBA_Help'),

  // Set to empty to prevent an icon from being displayed on the button.
  src: '',
  aboutLink: null,
  helpLink: null,
  dummyFirstField: null,
  dummyLastField: null,

  showTitle: true,

  initWidget: function () {
    OB.TestRegistry.register('org.openbravo.client.application.HelpAboutWidget', this);
    this.Super('initWidget', arguments);
  },

  doShow: function () {
    this.Super('doShow', arguments);
    var me = this,
        focusInFirstHelpItem;
    focusInFirstHelpItem = function () {
      if (me.members[0].members[1]) {
        me.members[0].members[1].focus();
      }
      if (isc.EH.getFocusCanvas() === me.members[0].members[1]) { // Sometimes the focus is not positioned in the previous step
        return;
      } else {
        setTimeout(function () {
          focusInFirstHelpItem();
        }, 10);
      }
    };
    focusInFirstHelpItem();
  },

  beforeShow: function () {
    // determine if the help should be displayed or not
    var tabPane = null,
        helpView = null;
    this.dummyFirstField = isc.OBFocusButton.create({
      getFocusTarget: function () {
        return isc.OBQuickRun.currentQuickRun.members[0].members[isc.OBQuickRun.currentQuickRun.members[0].getMembers().length - 2];
      }
    });

    this.dummyLastField = isc.OBFocusButton.create({
      getFocusTarget: function () {
        return isc.OBQuickRun.currentQuickRun.members[0].members[1];
      }
    });

    this.aboutLink = isc.OBHelpAboutLinkButton.create({
      name: 'aboutLink',
      title: OB.I18N.getLabel('UINAVBA_About'),
      keyPress: function () {
        var key = isc.EventHandler.getKey();
        if (key === 'Escape') {
          if (isc.OBQuickRun.currentQuickRun) {
            isc.OBQuickRun.currentQuickRun.doHide();
          }
        }
        return true;
      },
      action: function () {
        isc.OBQuickRun.hide();
        OB.Layout.ClassicOBCompatibility.Popup.open('About', 620, 500, OB.Application.contextUrl + 'ad_forms/about.html', '', window);
      }
    });

    this.helpLink = isc.OBHelpAboutLinkButton.create({
      name: 'helpLink',
      title: OB.I18N.getLabel('UINAVBA_Help'),
      keyPress: function () {
        var key = isc.EventHandler.getKey();
        if (key === 'Escape') {
          if (isc.OBQuickRun.currentQuickRun) {
            isc.OBQuickRun.currentQuickRun.doHide();
          }
        }
        return true;
      },
      action: function () {
        isc.OBQuickRun.hide();
        OB.Layout.ViewManager.openView(helpView.viewId, helpView);
      }
    });

    // get the selected tab
    var selectedTab = OB.MainView.TabSet.getSelectedTab();
    if (selectedTab && selectedTab.pane && selectedTab.pane.getHelpView) {
      tabPane = selectedTab.pane;
    }
    // determine if a help link should be shown or not
    // destroy the current members
    if (this.members[0].getMembers()) {
      this.members[0].destroyAndRemoveMembers(this.members[0].getMembers().duplicate());
    }
    if (!tabPane) {
      this.members[0].addMembers([this.aboutLink]);
    } else {
      helpView = tabPane.getHelpView();
      if (!helpView) {
        this.members[0].addMembers([this.aboutLink]);
      } else {
        this.members[0].addMembers([this.helpLink, this.aboutLink]);
      }
    }
    this.members[0].addMembers(this.dummyFirstField, 0);
    this.members[0].addMembers(this.dummyLastField, this.members[0].getMembers().length);
    OB.TestRegistry.register('org.openbravo.client.application.HelpAbout.HelpLink', this.helpLink);
    OB.TestRegistry.register('org.openbravo.client.application.HelpAbout.AboutLink', this.aboutLink);
  },

  doHide: function () {
    if (this.aboutLink) {
      this.aboutLink.destroy();
      this.aboutLink = null;
      this.members[0].destroyAndRemoveMembers(this.aboutLink);
    }
    if (this.helpLink) {
      this.helpLink.destroy();
      this.helpLink = null;
      this.members[0].destroyAndRemoveMembers(this.helpLink);
    }
    if (this.dummyFirstField) {
      this.dummyFirstField.destroy();
      this.dummyFirstField = null;
    }
    if (this.dummyLastField) {
      this.dummyLastField.destroy();
      this.dummyLastField = null;
    }
    this.Super('doHide', arguments);
  },

  members: [isc.VLayout.create({
    height: 1,
    initWidget: function () {
      OB.TestRegistry.register('org.openbravo.client.application.HelpAbout', this);
      this.Super('initWidget', arguments);
    }
  })],

  keyboardShortcutId: 'NavBar_OBHelpAbout'
});
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2011-2012 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */

OB.ActionButton = {};
OB.ActionButton.executingProcess = null;

isc.ClassFactory.defineClass('OBToolbarActionButton', isc.OBToolbarTextButton);

isc.OBToolbarActionButton.addProperties({
  visible: false,
  modal: true,
  contextView: null,
  labelValue: {},

  action: function () {
    this.runProcess();
  },

  runProcess: function () {
    var theView = this.view,
        record, rowNum, actionObject;

    if (!theView.isShowingForm && theView.viewGrid.getSelectedRecords() && theView.viewGrid.getSelectedRecords().length === 1) {
      // Keep current selection that might be lost in autosave
      record = theView.viewGrid.getSelectedRecord();
      rowNum = theView.viewGrid.getRecordIndex(record);
    }

    actionObject = {
      target: this,
      method: this.doAction,
      parameters: [rowNum]
    };

    if (this.autosave) {
      theView.standardWindow.doActionAfterAutoSave(actionObject);
    } else {
      OB.Utilities.callAction(actionObject);
    }
  },

  doAction: function (rowNum) {
    var theView = this.contextView,
        me = this,
        standardWindow = this.view.standardWindow,
        autosaveButton = this.autosave,
        param, allProperties, sessionProperties, callbackFunction, popupParams;
    //Modified check from 'rowNum to 'rowNum ! = null' to handle case where rowNum is 0.
    if (rowNum !== null && !theView.viewGrid.getSelectedRecord()) {
      // Current selection was lost, restore it
      theView.viewGrid.selectRecord(rowNum);
    }

    allProperties = theView.getContextInfo(false, true, false, true);
    sessionProperties = theView.getContextInfo(true, true, false, true);


    OB.ActionButton.executingProcess = this;

    for (param in allProperties) {
      // TODO: these transformations shoulnd't be needed here as soon as getContextInfo returns 
      // the transformed values.
      if (allProperties.hasOwnProperty(param) && typeof allProperties[param] === 'boolean') {
        allProperties[param] = allProperties[param] ? 'Y' : 'N';
      }
    }

    allProperties.inpProcessId = this.processId;

    // obuiapp_process definition
    if (this.newDefinition) {
      callbackFunction = function () {
        standardWindow.openProcess({
          paramWindow: true,
          processId: me.processId,
          windowId: me.windowId,
          windowTitle: me.windowTitle,
          actionHandler: me.command,
          button: me,
          buttons: me.labelValue,
          uiPattern: me.uiPattern
        });
        me.opening = false; // Activate again the button
      };

      if (!me.opening) {
        me.opening = true; // To avoid button could be clicked twice
        theView.setContextInfo(sessionProperties, callbackFunction, true);
      }
      return;
    }

    // ad_process definition handling
    if (this.modal) {
      allProperties.Command = this.command;
      callbackFunction = function () {
        var popup = OB.Layout.ClassicOBCompatibility.Popup.open('process', 900, 600, OB.Utilities.applicationUrl(me.obManualURL), '', null, true, true, true, allProperties);
        if (autosaveButton) {
          // Back to header if autosave button
          popup.activeViewWhenClosed = theView;
        }
      };
    } else {
      popupParams = {
        viewId: 'OBPopupClassicWindow',
        obManualURL: this.obManualURL,
        processId: this.id,
        id: this.id,
        popup: true,
        command: this.command,
        tabTitle: this.title,
        postParams: allProperties,
        height: 600,
        width: 900
      };
      callbackFunction = function () {
        OB.Layout.ViewManager.openView('OBPopupClassicWindow', popupParams);
      };
    }

    //Force setting context info, it needs to be forced in case the current record has just been saved.
    theView.setContextInfo(sessionProperties, callbackFunction, true);
  },

  closeProcessPopup: function (newWindow, params) {
    //Keep current view for the callback function. Refresh and look for tab message.
    var contextView = OB.ActionButton.executingProcess.contextView,
        currentView = this.view,
        afterRefresh, parsePathPart, parts;

    afterRefresh = function (doRefresh) {
      var undef, refresh = (doRefresh === undef || doRefresh),
          autosaveDone = false,
          currentRecordId, recordsAfterRefresh;

      // Refresh context view
      contextView.getTabMessage();
      contextView.toolBar.refreshCustomButtons();

      if (contextView && contextView.viewGrid && contextView.viewGrid.discardAllEdits) {
        // discard edits coming from FIC as they pollute the state and they're already
        // reloaded
        contextView.viewGrid.discardAllEdits();
      }

      if (contextView !== currentView && currentView.state === isc.OBStandardView.STATE_TOP_MAX) {
        // Executing an action defined in parent tab, current tab is maximized,
        // let's set half for each in order to see the message
        contextView.setHalfSplit();
      }
      // Refresh in order to show possible new records
      if (refresh) {
        // The selected record should be shown after the refresh, even
        // if the filter would exclude it
        // See issue https://issues.openbravo.com/view.php?id=20722
        if (currentView.parentTabId) {
          recordsAfterRefresh = currentView.newRecordsAfterRefresh[currentView.parentTabId];
        } else {
          recordsAfterRefresh = currentView.newRecordsAfterRefresh;
        }
        currentView.refresh(null, autosaveDone, recordsAfterRefresh);
      }
    };

    if (this.autosave) {
      if (currentView.parentView) {
        currentView.parentView.setChildsToRefresh();
      } else {
        currentView.setChildsToRefresh();
      }

      if (currentView.viewGrid.getSelectedRecord()) {
        // There is a record selected, refresh it and its parent
        currentView.refreshCurrentRecord(afterRefresh);
      } else {
        // No record selected, refresh parent
        currentView.refreshParentRecord(afterRefresh);
      }
    } else {
      // If the button is not autosave, do not refresh but get message.
      afterRefresh(false);
    }

    OB.ActionButton.executingProcess = null;

    if (newWindow) {
      // Split path into protocol, server, port part and the rest (pathname, query, etc)
      parsePathPart = /^((?:[A-Za-z]+:)?\/\/[^\/]+)?(\/.*)$/;
      parts = parsePathPart.exec(newWindow);
      if (parts && parts[2]) {
        newWindow = parts[2];
      }

      if (OB.Application.contextUrl && newWindow.indexOf(OB.Application.contextUrl) !== -1) {
        newWindow = newWindow.substr(newWindow.indexOf(OB.Application.contextUrl) + OB.Application.contextUrl.length - 1);
      }

      if (!newWindow.startsWith('/')) {
        newWindow = '/' + newWindow;
      }

      if (newWindow.startsWith(contextView.mapping250)) {
        // Refreshing current tab, do not open it again.
        return;
      }

      var windowParams = {
        viewId: this.title,
        tabTitle: this.title,
        obManualURL: newWindow
      };
      if (params) {
        if (params.tabTitle) {
          windowParams.tabTitle = params.tabTitle;
        }
        if (params.addToRecents !== null && params.addToRecents !== undefined) {
          windowParams.addToRecents = params.addToRecents;
        }
      }
      OB.Layout.ViewManager.openView('OBClassicWindow', windowParams);
    }
  },

  updateState: function (record, hide, context, keepNonAutosave) {
    var currentValues = isc.shallowClone(record || this.contextView.getCurrentValues() || {});
    // do not hide non autosave buttons when hidding the rest if keepNonAutosave === true
    var hideButton = hide && (!keepNonAutosave || this.autosave);

    var multiSelect = false,
        readonly, i, selection;

    if (hideButton || !record) {
      multiSelect = this.multiRecord && this.contextView.viewGrid.getSelectedRecords().length > 1;
      if (!multiSelect) {
        this.hide();
        return;
      }
    }

    context = context || this.contextView.getContextInfo(false, true, true);


    if (!multiSelect) {
      OB.Utilities.fixNull250(currentValues);

      this.visible = !this.displayIf || (context && this.displayIf(this.contextView.viewForm, currentValues, context));
      readonly = this.readOnlyIf && context && this.readOnlyIf(this.contextView.viewForm, currentValues, context);

      var buttonValue = record[this.property];
      if (buttonValue === '--') {
        buttonValue = 'CL';
      }

      // Changing button name associated with a list is not allowed in multi record buttons.
      var label = this.labelValue[buttonValue];
      if (!label) {
        if (this.realTitle) {
          label = this.realTitle;
        } else {
          label = this.title;
        }
      }
      this.realTitle = label;
      this.setTitle(label);

    } else {
      // For multi selection processes:
      //   -Button is displayed in case it should be displayed in ALL selected records
      //   -Button is readonly in case it should be readonly in ALL sected records
      selection = this.contextView.viewGrid.getSelectedRecords();
      readonly = false;
      this.visible = true;
      for (i = 0; i < selection.length; i++) {
        currentValues = selection[i];
        OB.Utilities.fixNull250(currentValues);
        this.visible = this.visible && (!this.displayIf || (context && this.displayIf(this.contextView.viewForm, currentValues, context)));
        readonly = readonly || (this.readOnlyIf && context && this.readOnlyIf(this.contextView.viewForm, currentValues, context));
      }

    }

    // Even visible is correctly set, it is necessary to execute show() or hide()
    if (this.visible) {
      this.show();
    } else {
      this.hide();
    }
    if (readonly) {
      this.disable();
    } else {
      this.enable();
    }


  }
});
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2011-2012 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */
// = Event Handler =
//
// Contains code which is called for page level events. The mouse down event
// is handled to set the correct active view.
//
(function (OB, isc) {

  if (!OB || !isc) {
    throw {
      name: 'ReferenceError',
      message: 'openbravo and isc objects are required'
    };
  }

  function EventHandler() {}

  EventHandler.prototype = {

    mouseDown: function (canvas) {
      var lastEvent = isc.EventHandler.lastEvent,
          checkName = lastEvent.nativeTarget ? lastEvent.nativeTarget.name : null,
          index = checkName ? checkName.indexOf('_') : -1;
      // this code assumes that there is a name attribute on the html element
      // which points to the formitem
      // happens with compount formitems, such as date
      // in that case the formitem name consists of the fieldname followed
      // by the 
      if (index !== -1) {
        checkName = checkName.substring(0, index);
      }

      // handle a click on a formitem
      if (isc.isA.DynamicForm(canvas) && checkName) {
        return this.processEvent(canvas.getField(checkName));
      } else {
        return this.processEvent(canvas);
      }
    },

    // at this point target can be a canvas or a formitem
    processEvent: function (target) {
      var onClickTarget = null,
          lastEvent = isc.EventHandler.lastEvent;

      // handle a special case:
      // https://issues.openbravo.com/view.php?id=17439
      // when setting the active view we loose the click
      if (lastEvent && lastEvent.eventType === 'mouseDown' && lastEvent.DOMevent && lastEvent.DOMevent.target && lastEvent.DOMevent.target.onclick) {
        onClickTarget = lastEvent.DOMevent.target;
      }

      if (!target) {
        return true;
      }
      if (target.pane && target.pane.setAsActiveView) {
        target.pane.setAsActiveView();
        return true;
      }

      // when clicking in the tabbar
      if (target.tabSet && target.tabSet.getSelectedTab() && target.tabSet.getSelectedTab().pane && target.tabSet.getSelectedTab().pane.setAsActiveView) {
        target.tabSet.getSelectedTab().pane.setAsActiveView();
        return true;
      }

      do {
        if (target.view && target.view.setAsActiveView && target.view.isVisible()) {
          // don't do this if already activec
          if (target.view.isActiveView()) {
            onClickTarget = null;
          }
          target.view.setAsActiveView();
          if (onClickTarget) {
            onClickTarget.onclick();
          }
          return true;
        }
        // a direct click in a form item
        if (isc.isA.FormItem(target)) {
          var view = OB.Utilities.determineViewOfFormItem(target);
          if (view && view.setAsActiveView) {
            view.lastFocusedItem = target;
            view.setAsActiveView();
            return true;
          }
        }
        if (target.mouseDownCancelParentPropagation) { // Added to be able to scroll the toolbar without focusing top level view
          target = null;
        } else if (!target.parentElement && target.grid) {
          target = target.grid;
        } else if (target.getClassName && target.getClassName() === 'OBPopup') {
          // If it is a popup window, do not bubble up to the header view
          // See issue https://issues.openbravo.com/view.php?id=22903
          return true;
        } else {
          target = target.parentElement;
        }
      } while (target);
      return true;
    }
  };

  OB.EventHandler = new EventHandler();
  isc.Page.setEvent(isc.EH.MOUSE_DOWN, OB.EventHandler, null, 'mouseDown');
}(OB, isc));
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use. this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2011-2012 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */

isc.ClassFactory.defineClass('OBSectionStack', isc.SectionStack);
isc.OBSectionStack.addProperties({
  visibilityMode: 'multiple',
  layoutMargin: 24,
  membersMargin: 12,
  canResizeSections: false,
  sectionHeaderClass: 'OBSectionItemButton'
});
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2011-2013 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):   Sreedhar Sirigiri (TDS), Mallikarjun M (TDS)
 ************************************************************************
 */

// Create a button to clone a sales order ('Sales Order' tab)
OB.ToolbarUtils.createCloneButton('org.openbravo.client.application.businesslogic.CloneOrderActionHandler', null, ['186', '294'], OB.I18N.getLabel('OBUIAPP_WantToCloneOrder'));
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2010-2013 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */

// This file contains declarations for 2 types:
// - Alert Manager: responsible for receiving alerts.
// - OBAlertIcon: is the alert icon shown in the navigation bar
// = Alert Manager =
//
// The Alert manager calls the server at preset intervals (50 secs) to obtain the current list 
// of alerts and to update the server side session administration.
// The Alert manager makes use of OB.RemoteCallManager to make these remote calls.
//
(function (OB, isc) {

  if (!OB || !isc) {
    throw {
      name: 'ReferenceError',
      message: 'openbravo and isc objects are required'
    };
  }

  // cache object references locally
  var ISC = isc,
      alertmgr; // Local reference to RemoveCallManager instance

  function AlertManager() {}

  AlertManager.prototype = {

    // array of functions which are called when an alert is received
    // from the server.
    listeners: [],

    delay: 50000,

    // last info
    lastResponse: null,
    lastData: null,
    lastRequest: null,

    // ** {{{ AlertManager.addListener(listener) }}} **
    //
    // Register a new listener which will be called when a new alert result is
    // received
    // from the server.
    //
    // Parameters:
    // * {{{listener}}}: a function which is called when a new alert result is
    // received.
    addListener: function (listener) {
      this.listeners[this.listeners.length] = listener;
      if (this.lastResponse) {
        // call the listener once with the last data
        listener(this.lastResponse, this.lastData, this.lastRequest, true);
      }
    },

    _notify: function (rpcResponse, data, rpcRequest) {
      var i, length = OB.AlertManager.listeners.length;
      // store info for new listeners
      OB.AlertManager.lastResponse = rpcResponse;
      OB.AlertManager.lastData = data;
      OB.AlertManager.lastRequest = rpcRequest;
      for (i = 0; i < length; i++) {
        OB.AlertManager.listeners[i](rpcResponse, data, rpcRequest);
      }
      isc.Timer.setTimeout(OB.AlertManager.call, OB.AlertManager.delay);
    },

    call: function () {
      OB.RemoteCallManager.call('org.openbravo.client.application.AlertActionHandler', {}, {
        IsAjaxCall: '1',
        ignoreForSessionTimeout: '1'
      }, OB.AlertManager._notify);
    }
  };

  // Initialize AlertManager object and let it call the system every so-many
  // secs.
  alertmgr = OB.AlertManager = new AlertManager();

  // call it ones to update the pings and start the timer
  OB.AlertManager.call();
}(OB, isc));

isc.ClassFactory.defineClass('OBAlertIcon', isc.ImgButton);

// = OBAlertIcon =
// The OBAlertIcon widget creates a button which notifies the user of any alerts
// present in the system. When an alert is found it will change appearance and
// prompt.
// The OBAlertIcon extends from the Smartclient Button.
// The OBAlertIcon registers itself as a listener in the Alert Manager.
isc.OBAlertIcon.addProperties({
  showInPortal: false,

  initWidget: function () {
    var instance = this,
        listener;

    listener = function (rpcResponse, data, rpcRequest) {
      if (data.cnt > 0) {
        OB.I18N.getLabel(instance.alertLabel, [data.cnt], instance, 'setTitle');
        instance.setIcon(instance.alertIcon);
      } else {
        OB.I18N.getLabel(instance.alertLabel, [0], instance, 'setTitle');
        instance.setIcon({});
      }
      instance.markForRedraw();
    };

    this.Super('initWidget', arguments);

    OB.I18N.getLabel(instance.alertLabel, ['-'], instance, 'setTitle');

    // call it to update the number of alerts directly after login
    OB.AlertManager.addListener(listener);
    OB.TestRegistry.register('org.openbravo.client.application.AlertButton', this);
  },

  click: function () {
    var viewDefinition = {
      i18nTabTitle: 'UINAVBA_AlertManagement'
    };
    OB.Layout.ViewManager.openView('OBUIAPP_AlertManagement', viewDefinition);
  },

  keyboardShortcutId: 'NavBar_OBAlertIcon',

  draw: function () {
    var me = this,
        ksAction;

    ksAction = function () {
      me.click();
      return false; //To avoid keyboard shortcut propagation
    };

    if (this.keyboardShortcutId) {
      OB.KeyboardManager.Shortcuts.set(this.keyboardShortcutId, 'Canvas', ksAction);
    }
    this.Super('draw', arguments);
  },
  alertLabel: 'UINAVBA_Alerts',
  autoFit: true,
  showTitle: true,
  src: '',
  overflow: 'visible'
});
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use. this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2011-2013 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */

isc.ClassFactory.defineClass('OBAlertGrid', isc.OBGrid);
isc.OBAlertGrid.addProperties({
  alertStatus: null,

  width: '100%',
  height: '100%',
  dataSource: null,
  canEdit: true,
  alternateRecordStyles: true,
  showFilterEditor: true,
  canReorderFields: false,
  canFreezeFields: false,
  canGroupBy: false,
  canAutoFitFields: false,
  selectionType: 'simple',
  //editEvent: 'click',
  editOnFocus: true,
  showCellContextMenus: true,
  selectOnEdit: false,
  dataPageSize: 100,

  arrowKeyAction: 'select',

  // keeps track if we are in objectSelectionMode or in toggleSelectionMode
  // objectSelectionMode = singleRecordSelection === true
  singleRecordSelection: false,

  dataProperties: {
    useClientFiltering: false //,
    //useClientSorting: false
  },

  gridFields: [{
    name: 'alertRule',
    title: OB.I18N.getLabel('OBUIAPP_AlertGrid_AlertRule'),
    displayField: OB.Constants.IDENTIFIER,
    canFilter: true,
    canEdit: false,
    filterOnKeypress: true,
    filterEditorType: 'OBFKFilterTextItem',
    type: '_id_19'
  }, {
    name: 'description',
    title: OB.I18N.getLabel('OBUIAPP_AlertGrid_Alert'),
    canFilter: true,
    canEdit: false,
    filterOnKeypress: true,
    filterEditorType: 'OBTextItem',
    type: '_id_10'
  }, {
    name: 'creationDate',
    title: OB.I18N.getLabel('OBUIAPP_AlertGrid_Time'),
    canFilter: true,
    canEdit: false,
    filterEditorType: 'OBMiniDateRangeItem',
    type: '_id_16'
  }, {
    name: 'comments',
    title: OB.I18N.getLabel('OBUIAPP_AlertGrid_Note'),
    canFilter: true,
    canEdit: true,
    filterOnKeypress: true,
    filterEditorType: 'OBTextItem',
    editorType: 'OBTextItem',
    editorProperties: {
      width: '90%',
      columnName: 'comments',
      disabled: false,
      updatable: true
    },
    type: '_id_10'
  }, {
    name: 'recordID',
    title: OB.I18N.getLabel('OBUIAPP_AlertGrid_Record'),
    canFilter: true,
    canEdit: false,
    clientClass: 'OBAlertGridCanvasItem_Link',
    filterOnKeypress: true,
    filterEditorType: 'OBTextItem',
    type: '_id_10',
    formatCellValueFunctionReplaced: true,
    formatCellValue: function (value, record, rowNum, colNum, grid) {
      return '';
    }
  }],

  initWidget: function () {
    // added for showing counts in the filtereditor row
    this.checkboxFieldProperties = isc.addProperties({}, this.checkboxFieldProperties || {}, {
      canFilter: true,
      //frozen: true, /* Removed due to issue https://issues.openbravo.com/view.php?id=17611 */
      canFreeze: true,
      showHover: true,
      prompt: OB.I18N.getLabel('OBUIAPP_GridSelectAllColumnPrompt'),
      filterEditorProperties: {
        textAlign: 'center'
      },
      filterEditorType: 'StaticTextItem'
    });

    this.contextMenu = this.getMenuConstructor().create({
      items: []
    });

    OB.Datasource.get('ADAlert', this, null, true);

    this.Super('initWidget', arguments);
  },

  destroy: function () {
    if (this.contextMenu) {
      this.contextMenu.destroy();
      this.contextMenu = null;
    }
    this.Super('destroy', arguments);
  },

  setDataSource: function (ds) {
    this.Super('setDataSource', [ds, this.gridFields]);
    // Some properties need to be set when the datasource is loaded to avoid errors when form is
    // open the first time.
    this.setSelectionAppearance('checkbox');

    // this extra call is needed to solve this issue:
    // https://issues.openbravo.com/view.php?id=17145
    this.refreshFields();

    this.sort('creationDate', 'descending');

    this.fetchData();
  },

  dataArrived: function (startRow, endRow) {
    this.getGridTotalRows();
    return this.Super('dataArrived', arguments);
  },

  getGridTotalRows: function () {
    var criteria = this.getCriteria() || {},
        requestProperties = {};

    if (!OB.AlertManagement.sections[this.alertStatus].expanded) {
      // fetch to the datasource with an empty criteria to get all the rows
      requestProperties.params = requestProperties.params || {};
      requestProperties.params[OB.Constants.WHERE_PARAMETER] = this.getFilterClause();
      requestProperties.clientContext = {
        alertStatus: this.alertStatus
      };
      this.dataSource.fetchData(criteria, function (dsResponse, data, dsRequest) {
        OB.AlertManagement.setTotalRows(dsResponse.totalRows, dsResponse.clientContext.alertStatus);
      }, requestProperties);

    } else {
      OB.AlertManagement.setTotalRows(this.getTotalRows(), this.alertStatus);
    }
  },

  onFetchData: function (criteria, requestProperties) {
    requestProperties = requestProperties || {};
    requestProperties.params = requestProperties.params || {};

    requestProperties.params[OB.Constants.WHERE_PARAMETER] = this.getFilterClause();
  },

  getAlertsWithFilterClause: function (alertRule) {
    var filterClause, alerts = alertRule.alerts.split(','),
        alertsNum = alerts.length,
        i, chunksOfAlerts = [],
        j, chunkSize = 1000;
    filterClause = ' and (e.alertRule.id != \'' + alertRule.alertRuleId + '\'';

    if (alertsNum <= chunkSize) {
      filterClause += ' or e.id in (' + alertRule.alerts + '))';
      return filterClause;
    }

    // there are more than 1000 alerts to include in the where clause, Oracle doesn't
    // support it, so let's split them in chunks with <=1000 elements each
    for (i = 0; i < alertsNum; i += chunkSize) {
      chunksOfAlerts.push(alerts.slice(i, i + chunkSize));
    }

    for (i = 0; i < chunksOfAlerts.length; i++) {
      filterClause += ' or e.id in (';
      for (j = 0; j < chunksOfAlerts[i].length; j++) {
        filterClause += j > 0 ? ',' : '';
        filterClause += chunksOfAlerts[i][j];
      }
      filterClause += ')';
    }
    filterClause += ')';
    return filterClause;
  },

  getFilterClause: function () {
    var i, filterClause = '',
        alertRuleIds = '',
        arlength = OB.AlertManagement.alertRules.length,
        whereClause = 'coalesce(to_char(status), \'NEW\') = upper(\'' + this.alertStatus + '\')';

    for (i = 0; i < arlength; i++) {
      if (alertRuleIds !== '') {
        alertRuleIds += ',';
      }
      alertRuleIds += '\'' + OB.AlertManagement.alertRules[i].alertRuleId + '\'';
      // if an alertRule has some alerts to filter by, add them to the where clause as:
      // alerts are of a different alertRule or only the alerts predefined
      // this only happens if the alertRule has an SQL filter expression defined
      if (OB.AlertManagement.alertRules[i].alerts) {
        filterClause += this.getAlertsWithFilterClause(OB.AlertManagement.alertRules[i]);
      }
    }
    if (alertRuleIds !== '') {
      whereClause += ' and e.alertRule.id in (' + alertRuleIds + ')';
    } else {
      whereClause += ' and 1=2';
    }
    if (filterClause !== '') {
      whereClause += filterClause;
    }
    return whereClause;
  },

  headerClick: function (fieldNum, header, autoSaveDone) {
    var field = this.fields[fieldNum];
    if (this.isCheckboxField(field) && this.singleRecordSelection) {
      this.deselectAllRecords();
      this.singleRecordSelection = false;
    }
    return this.Super('headerClick', arguments);
  },

  recordClick: function (viewer, record, recordNum, field, fieldNum, value, rawValue) {
    this.handleRecordSelection(viewer, record, recordNum, field, fieldNum, value, rawValue, false, true);
  },


  // +++++++++++++++++++++++++++++ Record Selection Handling +++++++++++++++++++++++
  // Functions based on the ob-view-grid.js Record Selection Handling.
  deselectAllRecords: function (preventUpdateSelectInfo, autoSaveDone) {
    this.allSelected = false;
    var ret = this.Super('deselectAllRecords', arguments);
    this.lastSelectedRecord = null;
    if (!preventUpdateSelectInfo) {
      this.selectionUpdated();
    }
    return ret;
  },

  selectAllRecords: function (autoSaveDone) {
    this.allSelected = true;
    var ret = this.Super('selectAllRecords', arguments);
    this.selectionUpdated();
    return ret;
  },

  updateSelectedCountDisplay: function () {
    var selection = this.getSelection();
    var selectionLength = selection.getLength();
    var newValue = '&nbsp;';
    if (selectionLength > 0) {
      newValue = String(selectionLength);
    }
    if (this.filterEditor) {
      this.filterEditor.getEditForm().setValue(this.getCheckboxField().name, newValue);
    }
  },

  // note when solving selection issues in the future also
  // consider using the selectionChanged method, but that
  // one has as disadvantage that it is called multiple times
  // for one select/deselect action
  selectionUpdated: function (record, recordList) {

    this.stopHover();
    this.updateSelectedCountDisplay();
    if (this.getSelectedRecords() && this.getSelectedRecords().length !== 1) {
      this.lastSelectedRecord = null;
    } else {
      this.lastSelectedRecord = this.getSelectedRecord();
    }
  },

  selectOnMouseDown: function (record, recordNum, fieldNum, autoSaveDone) {
    // don't change selection on right mouse down
    var EH = isc.EventHandler,
        eventType;

    // don't do anything if right-clicking on a selected record
    if (EH.rightButtonDown() && this.isSelected(record)) {
      return;
    }

    var previousSingleRecordSelection = this.singleRecordSelection;
    var currentSelectedRecordSelected = (this.getSelectedRecord() === record);
    if (this.getCheckboxFieldPosition() === fieldNum) {
      if (this.singleRecordSelection) {
        this.deselectAllRecords(true);
      }
      this.singleRecordSelection = false;
      this.Super('selectOnMouseDown', arguments);

      // handle a special case:
      // - singlerecordmode: checkbox is not checked
      // - user clicks on checkbox
      // in this case move to multi select mode and keep the record selected
      if (previousSingleRecordSelection && currentSelectedRecordSelected) {
        this.selectSingleRecord(record);
      }

      this.selectionUpdated();

      this.markForRedraw('Selection checkboxes need to be redrawn');
    } else {
      // do some checking, the handleRecordSelection should only be called
      // in case of keyboard navigation and not for real mouse clicks,
      // these are handled by the recordClick and recordDoubleClick methods
      // if this method here would also handle mouseclicks then the
      // doubleClick
      // event is not captured anymore
      eventType = EH.getEventType();
      if (!EH.isMouseEvent(eventType)) {
        this.handleRecordSelection(null, record, recordNum, null, fieldNum, null, null, true);
      }
    }
  },

  handleRecordSelection: function (viewer, record, recordNum, field, fieldNum, value, rawValue, fromSelectOnMouseDown) {
    var EH = isc.EventHandler;
    var keyName = EH.getKey();

    // do nothing, click in the editrow itself
    if ((this.getEditRow() || this.getEditRow() === 0) && this.getEditRow() === recordNum) {
      return;
    }

    // if the arrow key was pressed and no ctrl/shift pressed then
    // go to single select mode
    var arrowKeyPressed = keyName && (keyName === isc.OBViewGrid.ARROW_UP_KEY_NAME || keyName === isc.OBViewGrid.ARROW_DOWN_KEY_NAME);

    var previousSingleRecordSelection = this.singleRecordSelection;
    if (arrowKeyPressed) {
      if ((EH.ctrlKeyDown() && !EH.altKeyDown() && !EH.shiftKeyDown()) || (!EH.ctrlKeyDown() && !EH.altKeyDown() && EH.shiftKeyDown())) {
        // move to multi-select mode, let the standard do it for us
        this.singleRecordSelection = false;
      } else if (!(!EH.ctrlKeyDown() && EH.altKeyDown() && EH.shiftKeyDown())) { // 'if' statement to avoid do an action when the KS to move to a child tab is fired
        this.doSelectSingleRecord(record);
      }
    } else if (this.getCheckboxFieldPosition() === fieldNum) {
      if (this.singleRecordSelection) {
        this.deselectAllRecords(true);
      }
      // click in checkbox field is done by standard logic
      // in the selectOnMouseDown
      this.singleRecordSelection = false;
      this.selectionUpdated();
    } else if (isc.EventHandler.ctrlKeyDown() && !isc.EventHandler.altKeyDown() && !isc.EventHandler.shiftKeyDown()) {
      // only do something if record clicked and not from selectOnMouseDown
      // this method got called twice from one clicK: through recordClick
      // and
      // to selectOnMouseDown. Only handle one.
      if (!fromSelectOnMouseDown) {
        this.singleRecordSelection = false;
        // let ctrl-click also deselect records
        if (this.isSelected(record)) {
          this.deselectRecord(record);
        } else {
          this.selectRecord(record);
        }
      }
    } else if (!isc.EventHandler.ctrlKeyDown() && !isc.EventHandler.altKeyDown() && isc.EventHandler.shiftKeyDown()) {
      this.singleRecordSelection = false;
      this.selection.selectOnMouseDown(this, recordNum, fieldNum);
    } else {
      // click on the record which was already selected
      this.doSelectSingleRecord(record);
    }

    this.updateSelectedCountDisplay();

    // mark some redraws if there are lines which don't
    // have a checkbox flagged, so if we move from single record selection
    // to multi record selection
    if (!this.singleRecordSelection && previousSingleRecordSelection) {
      this.markForRedraw('Selection checkboxes need to be redrawn');
    }
  },

  //selectRecordForEdit: function(record){
  //  this.Super('selectRecordForEdit', arguments);
  //  this.doSelectSingleRecord(record);
  //},
  doSelectSingleRecord: function (record) {
    // if this record is already selected and the only one then do nothing
    // note that when navigating with the arrow key that at a certain 2 are
    // selected
    // when going into this method therefore the extra check on length === 1
    if (this.singleRecordSelection && this.getSelectedRecord() === record && this.getSelection().length === 1) {
      return;
    }
    this.singleRecordSelection = true;
    this.selectSingleRecord(record);

    // deselect the checkbox in the top
    var fieldNum = this.getCheckboxFieldPosition(),
        field = this.fields[fieldNum];
    var icon = this.checkboxFieldFalseImage || this.booleanFalseImage;
    var title = this.getValueIconHTML(icon, field);

    this.setFieldTitle(fieldNum, title);
  },

  // overridden to prevent the checkbox to be shown when only one record is selected.
  getCellValue: function (record, recordNum, fieldNum, gridBody) {
    var field = this.fields[fieldNum];
    if (!field || this.allSelected) {
      return this.Super('getCellValue', arguments);
    }
    // do all the cases which are handled in the super directly
    if (this.isCheckboxField(field)) {
      // NOTE: code copied from super class
      var icon;
      if (!this.body.canSelectRecord(record)) {
        // record cannot be selected but we want the space allocated for the
        // checkbox anyway.
        icon = '[SKINIMG]/blank.gif';
      } else if (this.singleRecordSelection && !this.allSelected) {
        // always show the false image
        icon = (this.checkboxFieldFalseImage || this.booleanFalseImage);
      } else {
        // checked if selected, otherwise unchecked
        var isSel = this.selection.isSelected(record) ? true : false;
        icon = isSel ? (this.checkboxFieldTrueImage || this.booleanTrueImage) : (this.checkboxFieldFalseImage || this.booleanFalseImage);
      }
      // if the record is disabled, make the checkbox image disabled as well
      // or if the record is new then also show disabled
      if (!record || record[this.recordEnabledProperty] === false) {
        icon = icon.replace('.', '_Disabled.');
      }

      var html = this.getValueIconHTML(icon, field);

      return html;
    } else {
      return this.Super('getCellValue', arguments);
    }
  },

  getSelectedRecords: function () {
    return this.getSelection();
  },
  // ++++++++++++++ end of Record Selection handling ++++++++++++++
  // overridden to support hover on the header for the checkbox field
  setFieldProperties: function (field, properties) {
    var localField = field;
    if (isc.isA.Number(localField)) {
      localField = this.fields[localField];
    }
    if (this.isCheckboxField(localField) && properties) {
      properties.showHover = true;
      properties.prompt = OB.I18N.getLabel('OBUIAPP_GridSelectAllColumnPrompt');
    }

    return this.Super('setFieldProperties', arguments);
  },

  cellHoverHTML: function (record, rowNum, colNum) {
    var field = this.getField(colNum),
        cellErrors, msg = '',
        i;
    if (this.isCheckboxField(field)) {
      return OB.I18N.getLabel('OBUIAPP_GridSelectColumnPrompt');
    }
  },

  makeCellContextItems: function (record, rowNum, colNum) {
    var menuItems = [];
    var grid = this;
    if (grid.alertStatus === 'Acknowledged' || grid.alertStatus === 'Suppressed') {
      menuItems.add({
        title: OB.I18N.getLabel('OBUIAPP_MoveToStatus', [OB.AlertManagement.translatedStatus.New]),
        click: function () {
          OB.AlertManagement.moveToStatus(record.id, grid.alertStatus, 'New');
        }
      });
    }
    if (grid.alertStatus === 'New' || grid.alertStatus === 'Suppressed') {
      menuItems.add({
        title: OB.I18N.getLabel('OBUIAPP_MoveToStatus', [OB.AlertManagement.translatedStatus.Acknowledged]),
        click: function () {
          OB.AlertManagement.moveToStatus(record.id, grid.alertStatus, 'Acknowledged');
        }
      });
    }
    if (grid.alertStatus === 'New' || grid.alertStatus === 'Acknowledged') {
      menuItems.add({
        title: OB.I18N.getLabel('OBUIAPP_MoveToStatus', [OB.AlertManagement.translatedStatus.Suppressed]),
        click: function () {
          OB.AlertManagement.moveToStatus(record.id, grid.alertStatus, 'Suppressed');
        }
      });
    }
    return menuItems;
  },

  // a trick to prevent a javascript error, draw the first time
  // without record components
  // this topic needs to be revisited after a certain time
  // to check if newer Smartclient components solve it
  // Note, this was not reproducable in Smartclient standard
  // https://issues.openbravo.com/view.php?id=17289
  // https://issues.openbravo.com/view.php?id=17784
  firstTimeRedrawCalled: true,
  draw: function () {
    if (this.firstTimeRedrawCalled && this.showRecordComponents) {
      this.showRecordComponents = false;
      this.Super('draw', arguments);
      this.showRecordComponents = true;
      delete this.firstTimeRedrawCalled;
      this.Super('redraw', arguments);
      return;
    }
    delete this.firstTimeRedrawCalled;
    this.Super('draw', arguments);
  }

});

isc.defineClass('OBAlertGridCanvasItem_Link', isc.OBGridLinkItem);

isc.OBAlertGridCanvasItem_Link.addProperties({
  setRecord: function () {
    this.setTitle(this.grid.formatLinkValue(this.record, this.field, this.colNum, this.rowNum, this.record[this.field.name]));
  },
  doAction: function () {
    var i, tabId, length = OB.AlertManagement.alertRules.length;
    for (i = 0; i < length; i++) {
      if (OB.AlertManagement.alertRules[i].alertRuleId === this.record.alertRule) {
        tabId = OB.AlertManagement.alertRules[i].tabId;
      }
    }
    if (tabId && tabId !== '') {
      OB.Utilities.openDirectTab(tabId, this.record.referenceSearchKey);
    }
  }
});
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use. this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2011-2013 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */

isc.ClassFactory.defineClass('OBUIAPP_AlertManagement', isc.VLayout);
isc.OBUIAPP_AlertManagement.addProperties({
  // Allow only one instance of the view.
  isSameTab: function (viewId, params) {
    return viewId === 'OBUIAPP_AlertManagement';
  },
  getBookMarkParams: function () {
    var result = {};
    result.viewId = 'OBUIAPP_AlertManagement';
    return result;
  },

  translatedStatus: {
    New: '',
    Acknowledged: '',
    Suppressed: '',
    Solved: ''
  },
  sectionStack: null,
  grids: {},
  sections: {},
  alertRules: null,
  //Section header controls:
  NewAcknowledged: null,
  NewSuppressed: null,
  AcknowledgedNew: null,
  AcknowledgedSuppressed: null,
  SuppressedNew: null,
  SuppressedAcknowledged: null,

  initWidget: function () {
    OB.AlertManagement = this;
    OB.I18N.getLabel('AlertStatus_New', null, {
      setTranslatedStatus: function (label) {
        OB.AlertManagement.translatedStatus.New = label;
        OB.AlertManagement.checkInitializeStatus();
      }
    }, 'setTranslatedStatus');
    OB.I18N.getLabel('AlertStatus_Acknowledged', null, {
      setTranslatedStatus: function (label) {
        OB.AlertManagement.translatedStatus.Acknowledged = label;
        OB.AlertManagement.checkInitializeStatus();
      }
    }, 'setTranslatedStatus');
    OB.I18N.getLabel('AlertStatus_Suppressed', null, {
      setTranslatedStatus: function (label) {
        OB.AlertManagement.translatedStatus.Suppressed = label;
        OB.AlertManagement.checkInitializeStatus();
      }
    }, 'setTranslatedStatus');
    OB.I18N.getLabel('AlertStatus_Solved', null, {
      setTranslatedStatus: function (label) {
        OB.AlertManagement.translatedStatus.Solved = label;
        OB.AlertManagement.checkInitializeStatus();
      }
    }, 'setTranslatedStatus');

    this.addMember(isc.OBToolbar.create({
      view: this,
      leftMembers: [isc.OBToolbarIconButton.create(isc.OBToolbar.REFRESH_BUTTON_PROPERTIES)],
      rightMembers: []
    }));

    this.sectionStack = isc.OBSectionStack.create();
    this.addMember(this.sectionStack);

    this.Super('initWidget', arguments);
    this.getAlertRules();
  },

  tabSelected: function (tabNum, tabPane, ID, tab) {
    if (OB.AlertManagement.grids.New) {
      // TODO: Add a more sophisticated focus logic to ensure each time the Alert Management is selected,
      // the previous focused item is selected instead of the first grid filter editor
      setTimeout(function () {
        OB.AlertManagement.grids.New.focusInFirstFilterEditor();
      }, 10);
    }
  },

  getAlertRules: function () {
    var post = {
      'eventType': 'getAlertRules'
    };

    OB.RemoteCallManager.call('org.openbravo.client.application.AlertManagementActionHandler', post, {}, function (rpcResponse, data, rpcRequest) {
      OB.AlertManagement.alertRules = data.alertRules;
      OB.AlertManagement.checkInitializeStatus();
    });
  },

  checkInitializeStatus: function () {
    if (OB.AlertManagement.translatedStatus.New !== '' && OB.AlertManagement.translatedStatus.Acknowledged !== '' && OB.AlertManagement.translatedStatus.Suppressed !== '' && OB.AlertManagement.translatedStatus.Solved !== '' && OB.AlertManagement.alertRules !== null) {
      // Sections are created after alertRules are created and status translations are set.
      // This is needed to be able to filter properly the grids of the sections.
      OB.AlertManagement.createSections();
    }
  },

  createSections: function () {
    this.grids.New = isc.OBAlertGrid.create({
      alertStatus: 'New'
    });
    this.NewAcknowledged = isc.OBAlertSectionStackControl.create({
      currentStatus: 'New',
      newStatus: 'Acknowledged',
      ID: 'NewAcknowledged'
    });
    this.NewSuppressed = isc.OBAlertSectionStackControl.create({
      currentStatus: 'New',
      newStatus: 'Suppressed',
      ID: 'NewSuppressed'
    });
    this.sections.New = {
      title: this.translatedStatus.New,
      alertStatus: 'New',
      expanded: true,
      items: [this.grids.New],
      controls: [this.NewAcknowledged, this.NewSuppressed]
    };
    this.sectionStack.addSection(this.sections.New);

    this.grids.Acknowledged = isc.OBAlertGrid.create({
      alertStatus: 'Acknowledged'
    });
    this.AcknowledgedNew = isc.OBAlertSectionStackControl.create({
      currentStatus: 'Acknowledged',
      newStatus: 'New',
      ID: 'AcknowledgedNew'
    });
    this.AcknowledgedSuppressed = isc.OBAlertSectionStackControl.create({
      currentStatus: 'Acknowledged',
      newStatus: 'Suppressed',
      ID: 'AcknowledgedSuppressed'
    });
    this.sections.Acknowledged = {
      title: this.translatedStatus.Acknowledged,
      alertStatus: 'Acknowledged',
      expanded: true,
      items: [this.grids.Acknowledged],
      controls: [this.AcknowledgedNew, this.AcknowledgedSuppressed]
    };
    this.sectionStack.addSection(this.sections.Acknowledged);

    this.grids.Suppressed = isc.OBAlertGrid.create({
      alertStatus: 'Suppressed'
    });
    this.SuppressedNew = isc.OBAlertSectionStackControl.create({
      currentStatus: 'Suppressed',
      newStatus: 'New',
      ID: 'SuppressedNew'
    });
    this.SuppressedAcknowledged = isc.OBAlertSectionStackControl.create({
      currentStatus: 'Suppressed',
      newStatus: 'Acknowledged',
      ID: 'SuppressedAcknowledged'
    });
    this.sections.Suppressed = {
      title: this.translatedStatus.Suppressed,
      alertStatus: 'Suppressed',
      expanded: false,
      items: [this.grids.Suppressed],
      controls: [this.SuppressedNew, this.SuppressedAcknowledged]
    };
    this.sectionStack.addSection(this.sections.Suppressed);

    this.grids.Solved = isc.OBAlertGrid.create({
      alertStatus: 'Solved'
    });
    this.sections.Solved = {
      title: this.translatedStatus.Solved,
      alertStatus: 'Solved',
      expanded: false,
      items: [this.grids.Solved]
    };
    this.sectionStack.addSection(this.sections.Solved);
  },

  destroy: function () {
    if (this.grids) {
      if (this.grids.New) {
        this.grids.New.destroy();
        this.grids.New = null;
      }
      if (this.grids.Acknowledged) {
        this.grids.Acknowledged.destroy();
        this.grids.Acknowledged = null;
      }
      if (this.grids.Suppressed) {
        this.grids.Suppressed.destroy();
        this.grids.Suppressed = null;
      }
      if (this.grids.Solved) {
        this.grids.Solved.destroy();
        this.grids.Solved = null;
      }
    }
    if (this.NewAcknowledged) {
      this.NewAcknowledged.destroy();
      this.NewAcknowledged = null;
    }
    if (this.NewSuppressed) {
      this.NewSuppressed.destroy();
      this.NewSuppressed = null;
    }
    if (this.AcknowledgedNew) {
      this.AcknowledgedNew.destroy();
      this.AcknowledgedNew = null;
    }
    if (this.AcknowledgedSuppressed) {
      this.AcknowledgedSuppressed.destroy();
      this.AcknowledgedSuppressed = null;
    }
    if (this.SuppressedNew) {
      this.SuppressedNew.destroy();
      this.SuppressedNew = null;
    }
    if (this.SuppressedAcknowledged) {
      this.SuppressedAcknowledged.destroy();
      this.SuppressedAcknowledged = null;
    }
    this.Super('destroy', arguments);
  },

  moveToStatus: function (alertIDs, oldStatus, newStatus) {
    var post = {
      'eventType': 'moveToStatus',
      'oldStatus': oldStatus,
      'newStatus': newStatus,
      'alertIDs': alertIDs
    };

    // persist not saved editions before moving
    this.grids[oldStatus].saveAllEdits();

    OB.RemoteCallManager.call('org.openbravo.client.application.AlertManagementActionHandler', post, {}, function (rpcResponse, data, rpcRequest) {
      OB.AlertManagement.grids[data.newStatus].invalidateCache();
      // If section has not been expanded the grid is not reloaded so the total rows is not updated.
      if (!OB.AlertManagement.sections[data.newStatus].expanded) {
        OB.AlertManagement.grids[data.newStatus].getGridTotalRows();
      }
      // Old status is always expanded to be able to select the rows
      OB.AlertManagement.grids[data.oldStatus].invalidateCache();
      OB.AlertManager.call();
    });
  },

  setTotalRows: function (totalRows, status) {
    if (OB.AlertManagement.sections[status]) {
      if (OB.AlertManagement.grids[status] && OB.AlertManagement.grids[status].dataPageSize < totalRows) {
        totalRows = '>' + OB.AlertManagement.grids[status].dataPageSize;
      }
      OB.AlertManagement.sections[status].getSectionHeader().setTitle(OB.I18N.getLabel('OBUIAPP_AlertSectionHeader', [OB.AlertManagement.translatedStatus[status], totalRows]));
    }
  },

  refresh: function () {
    var i, alertStatus = ['New', 'Acknowledged', 'Suppressed', 'Solved'];
    for (i = 0; i < 4; i++) {
      OB.AlertManagement.grids[alertStatus[i]].invalidateCache();
      if (!OB.AlertManagement.sections[alertStatus[i]].expanded) {
        OB.AlertManagement.grids[alertStatus[i]].getGridTotalRows();
      }
    }
  }
});

isc.ClassFactory.defineClass('OBAlertSectionStackControl', isc.OBLinkButtonItem);
isc.OBAlertSectionStackControl.addProperties({
  newStatus: null,
  currentStatus: null,

  initWidget: function () {
    this.setTitle("[ " + OB.I18N.getLabel('OBUIAPP_MoveSelectedToStatus', [OB.AlertManagement.translatedStatus[this.newStatus]]) + " ]");
    this.Super('initWidget', arguments);
  },

  action: function () {
    var i, alerts = '',
        selectedAlerts = OB.AlertManagement.grids[this.currentStatus].getSelection(),
        selAlertsLength = selectedAlerts.length;
    if (selAlertsLength === 0) {
      return;
    }
    for (i = 0; i < selAlertsLength; i++) {
      if (alerts !== '') {
        alerts += ',';
      }
      alerts += selectedAlerts[i].id;
    }
    OB.AlertManagement.moveToStatus(alerts, this.currentStatus, this.newStatus);
  }
});
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2011-2013 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s): ___________
 ************************************************************************
 */

// = Personalization Utilities =
// Contains utility methods for window personalization.
//
// Two important methods:
// - getPersonalizationDataFromForm: computes the personalization data structure (the fields
//  from an existing form instance, or if the form has already been personalized returns the
//  personalization data used to personalize the form
// - personalizeWindow/personalizeForm: personalize a form by applying the 
//  personalization data to it. This method is used to update the form preview as well
//  to update the real form. It is called from the standard window
//
OB.Personalization = {
  STATUSBAR_GROUPNAME: '_statusBar',
  MAIN_GROUPNAME: '_main'
};

// ** {{{OB.Personalization.getPersonalizationDataFromForm}}} **
// Creates the data structure used by the form personalizer and stored
// as personalized form information in the UI personalization record.
// If an existing personalization data is passed in then that one is
// used as the basis. This can be used to make sure that the 
// personalizationData used is up-to-date with the current form fields.
OB.Personalization.getPersonalizationDataFromForm = function (form) {
  var i, dataFields = [],
      statusBarFields, length, record, origPersonalizationData = form && form.view ? form.view.getFormPersonalization(true) : null;

  // just use the personalization data which was used on the 
  // form, we can not reconstruct it completely from the form fields
  // as we don't store extra personalization data in the form fields
  // themselves
  if (origPersonalizationData && origPersonalizationData.form) {
    dataFields = origPersonalizationData.form.fields;
  }

  // create the statusbar array so we don't use the one from the form
  if (dataFields && dataFields.length > 0) {
    statusBarFields = [];
    length = dataFields.length;
    for (i = 0; i < length; i++) {
      if (dataFields[i].parentName === OB.Personalization.STATUSBAR_GROUPNAME) {
        statusBarFields.push(dataFields[i].name);
      }
    }
  }

  // update with the form data, new fields may have been added, titles
  // may have changed etc.
  // the content of dataFields will be updated
  this.updatePersonalizationDataFromFields(dataFields, form.getFields(), statusBarFields || form.statusBarFields);

  // set the first focus field
  if (form.firstFocusedField) {
    record = dataFields.find('name', form.firstFocusedField);
    if (record) {
      record.firstFocus = true;
    }
  }

  // if there was already a personalization object, then re-use
  // everything except the fields
  if (origPersonalizationData) {
    return isc.addProperties({}, origPersonalizationData, {
      form: {
        fields: dataFields
      }
    });
  }

  // and return in the expected format
  return {
    form: {
      fields: dataFields
    }
  };
};

//** {{{OB.Personalization.updatePersonalizationDataFromFields}}} **
// will update the personalization data from a form, this to handle addition 
// of new fields in the AD, changes in required and the title and removal of
// fields.
OB.Personalization.updatePersonalizationDataFromFields = function (dataFields, fields, statusBarFields) {
  var fld, j, record, i, dataField, undef, length;

  // required and title and removal of fields
  // length is recomputed every time as fields can be removed
  // note: not factored out in a separate length attribute,
  // length changes
  for (i = 0; i < dataFields.length; i++) {
    dataField = dataFields[i];
    fld = fields.find('name', dataField.name);
    if (fld) {
      dataField.required = fld.required;
      dataField.hasDisplayLogic = fld.hasShowIf === true || (fld.showIf !== undef && !isc.isA.OBSectionItem(fld));
      // disabled extra * for now, as we have an icon for it
      //      if (false && dataField.required) {
      //        if (isc.Page.isRTL()) {
      //          dataField.title = '* ' + fld.title;       
      //        } else {
      //          dataField.title = fld.title + ' *';       
      //        }
      //      } else {
      dataField.title = fld.title;
      if (fld.sectionExpanded) {
        dataField.sectionExpanded = true;
      }
      //      }
    } else if (!dataField.isSystemFolder) {
      // field has been removed, remove it
      // can be a folder
      if (dataField.isFolder) {
        // clear all the parent Names
        for (j = 0; j < dataFields.length; j++) {
          if (dataField.name === dataFields[j].parentName) {
            delete dataFields[j].parentName;
          }
        }
      }
      dataFields.remove(dataField);
    }
  }

  // always create a status bar group
  if (!dataFields.find('name', OB.Personalization.STATUSBAR_GROUPNAME)) {
    dataFields.push({
      isFolder: true,
      isSystemFolder: true,
      canDrag: false,
      title: OB.I18N.getLabel('OBUIAPP_Personalization_StatusBar_Group'),
      name: OB.Personalization.STATUSBAR_GROUPNAME,
      isSection: true,
      displayed: true,
      _canEdit: false
    });
  }

  if (!dataFields.find('name', OB.Personalization.MAIN_GROUPNAME)) {
    dataFields.push({
      isFolder: true,
      isSystemFolder: true,
      canDrag: false,
      title: OB.I18N.getLabel('OBUIAPP_Personalization_Main_Group'),
      name: OB.Personalization.MAIN_GROUPNAME,
      isSection: true,
      displayed: true,
      _canEdit: false
    });
  }

  // iterate over the fields of the form and handle sections and fields
  length = fields.length;
  for (i = 0; i < length; i++) {
    fld = fields[i];

    if (fld.personalizable === false) {
      continue;
    }

    // already there, continue
    dataField = dataFields.find('name', fld.name);
    if (dataField) {
      // will be corrected in a later loop
      delete dataField.isStatusBarField;
      continue;
    }

    // for each field create a tree record, a tree record is identified
    // by its name
    if (isc.isA.SectionItem(fld)) {
      // section items are shown as folders which can not be dragged
      // or edited
      record = {
        isFolder: true,
        _canEdit: false,
        isSection: true,
        // the childNames are used below to resolve parent names
        childNames: fld.itemIds,
        title: fld.title,
        name: fld.name
      };
    } else {
      record = {
        title: fld.title,
        name: fld.name,
        hiddenInForm: fld.hiddenInForm,
        startRow: fld.startRow,
        colSpan: fld.colSpan,
        required: fld.required,
        hasDefaultValue: fld.hasDefaultValue,
        rowSpan: fld.rowSpan
      };
    }

    // is used below to get rid of non-displayed fields which 
    // are not part of the statusbar, explicit equals to false
    // as it might not be set
    if (fld.displayed === false) {
      record.displayed = false;
    } else {
      record.displayed = true;
    }

    // and keep what we computed
    dataFields.push(record);
  }

  // now resolve the parent names, i.e. in Smartclient a section item
  // has a set of item ids, in the tree we use (as we use 'parent' mode) the items
  // refer to the parent, so the other way
  length = dataFields.length;
  for (i = 0; i < length; i++) {
    if (dataFields[i].childNames) {
      for (j = 0; j < dataFields[i].childNames.length; j++) {
        // find is a smartclient extension
        record = dataFields.find('name', dataFields[i].childNames[j]);
        if (record && !record.parentName) {
          record.parentName = dataFields[i].name;
        }
      }
    }
  }

  // add to the status bar fields
  length = statusBarFields.length;
  for (i = 0; i < length; i++) {
    record = dataFields.find('name', statusBarFields[i]);
    if (record) {
      record.parentName = OB.Personalization.STATUSBAR_GROUPNAME;
      // these items can not be moved from the statusbar
      record.isStatusBarField = true;
      // keep track that this at one point was a 
      // status bar field, allow it to be put back there
      record.wasOnStatusBarField = true;
    }
  }

  length = dataFields.length;
  for (i = length - 1; i >= 0; i--) {
    record = dataFields[i];

    // do not consider the not-displayed ones which are not
    // part of the statusbar, these have item type
    // hidden which means that we can not visualize them, except
    // in the statusbar
    // explicit equals to false as displayed might not be set
    if (!record.isStatusBarField && !record.displayed) {
      dataFields.removeAt(i);
    } else if (!record.parentName && !record.isSystemFolder) {
      // otherwise add to the main group
      record.parentName = OB.Personalization.MAIN_GROUPNAME;
    }
  }
};

// ** {{{OB.Personalization.personalizeWindow}}} **
// Applies the data structure which contains the personalization settings to
// a complete window (an instance of ob-standard-window). 
// Also handles the case that a personalization record is deleted so that the
// form falls back to the default state
OB.Personalization.personalizeWindow = function (data, window) {
  var tabId, personalizationData, undef, form, view, i, viewsToReset = [],
      done, length;

  // no personalization, nothing to do
  if (!data) {
    return;
  }

  // keep track of the tabs which are personalized
  // is used below to de-personalize them
  length = window.views.length;
  for (i = 0; i < length; i++) {
    if (window.getFormPersonalization(window.views[i], true)) {
      viewsToReset.push({
        tabId: window.views[i].tabId
      });
    }
  }

  // iterate over the tabs
  for (tabId in data) {
    if (data.hasOwnProperty(tabId)) {
      personalizationData = data[tabId];
      view = window.getView(tabId);

      done = viewsToReset.find('tabId', tabId);
      if (done) {
        viewsToReset.remove(done);
      }

      // note, the personalization for a tab maybe null
      // view can be null if a personalization setting
      // is not in sync anymore with the window
      if (personalizationData && view) {
        OB.Personalization.personalizeForm(personalizationData, view.viewForm);
      }

      // the personalization button has 2 icons: one 2 show that there is
      // a personalization and one that doesn't
      // this can be changed, update the state
      if (view) {
        view.toolBar.updateButtonState(false);
      }
    }
  }

  // a personalization may have been removed, reset the form
  // to its original state
  length = viewsToReset.length;
  for (i = 0; i < length; i++) {
    view = window.getView(viewsToReset[i].tabId);

    // the personalization button has 2 icons: one 2 show that there is
    // a personalization and one that doesn't
    // this can be changed, update the state
    if (view) {
      view.toolBar.updateButtonState(false);
    }

    if (view.viewForm.originalStatusBarFields) {
      view.viewForm.statusBarFields = view.viewForm.originalStatusBarFields;
    }
    if (view.viewForm.originalFirstFocusedField !== undef) {
      view.viewForm.firstFocusedField = view.viewForm.originalFirstFocusedField;
    }

    // always clone the fields as the setFields changes their content
    // and you can not call setFields with content which has already
    // been passed to it
    view.viewForm.setFields(isc.shallowClone(view.viewForm._originalFields));

    // the status bar fields may have changed
    view.statusBar.updateContentTitle(view.viewForm.getStatusBarFields());

    // redraw the form for the changes
    view.viewForm.markForRedraw();
  }
};

// ** {{{OB.Personalization.personalizeForm}}} **
// Applies the data structure which contains the personalization settings to a
// form.
OB.Personalization.personalizeForm = function (data, form) {
  var persId, i, j, fld, undef, fldDef, childFld, newField, newFields = [],
      record, length, allChildFieldsHidden, statusBarFields = [];

  // work further with the fields themselves
  data = data.form.fields;

  // keep some stuff to be able to reset when the personalization settings
  // get deleted
  // explicit check on null, as it may not have been set
  if (form.originalFirstFocusedField === undef) {
    if (!form.firstFocusedField) {
      form.originalFirstFocusedField = null;
    } else {
      form.originalFirstFocusedField = form.firstFocusedField;
    }
  }
  if (!form.originalStatusBarFields) {
    form.originalStatusBarFields = isc.shallowClone(form.statusBarFields);
  }

  // iterate over the personalized data, this ensures that we follow
  // the order defined by the user
  length = data.length;
  for (i = 0; i < length; i++) {
    record = data[i];

    // original name is used when a field is visible in the status bar
    // and also on the form
    fld = form.getField(record.name);

    // use the originalFields as we are then sure
    // that we do not get ready build form items
    // but just the original simple objects
    // with properties
    fldDef = form._originalFields.find('name', record.name);
    if (!fld || !fldDef) {
      // a folder for example
      continue;
    }

    // for the preview form get rid of all non-personalizable stuff
    if (form.isPreviewForm && !fldDef.personalizable) {
      continue;
    }

    // set the first focused field
    if (record.firstFocus) {
      form.firstFocusedField = record.name;
    }

    // work with a clone
    newField = isc.shallowClone(fldDef);

    if (record.isSection) {
      newField.itemIds = [];
      // find the child items and set them
      // if all fields are hidden then don't show the section item either
      allChildFieldsHidden = true;
      for (j = 0; j < data.length; j++) {
        if (!data[j].isStatusBarField && data[j].parentName && data[j].parentName === newField.name) {
          newField.itemIds.push(data[j].name);
          allChildFieldsHidden = allChildFieldsHidden && data[j].hiddenInForm;
        }
      }

      // if all fields are hidden then don't show the section item either
      if (allChildFieldsHidden) {
        newField.hiddenInForm = true;
        newField.visible = false;
        newField.alwaysTakeSpace = false;
      } else {
        if (record.sectionExpanded) {
          newField.sectionExpanded = true;
        }
        newField.alwaysTakeSpace = true;
        delete newField.hiddenInForm;
        delete newField.visible;
      }
    } else if (record.isStatusBarField) {
      // Now all status bar fields have the hiddeninform property set to true to true, see issue 21863
      // In this context hiddeninform prevents the status bar field from showing in the form, not in the status bar
      statusBarFields.push(record.name);
      // always hide
      newField.visible = false;
      newField.alwaysTakeSpace = false;
    } else {
      // only copy the things we want to copy
      newField.startRow = record.startRow;
      newField.colSpan = record.colSpan;
      newField.rowSpan = record.rowSpan;

      if (record.hiddenInForm) {
        newField.hiddenInForm = true;
        newField.visible = false;
        newField.alwaysTakeSpace = false;
      } else {
        newField.alwaysTakeSpace = true;
        delete newField.hiddenInForm;
        delete newField.visible;
      }
    }

    newFields.push(newField);
  }

  // now add the ones we did not know about, these maybe new 
  // fields or hidden fields
  if (!form.isPreviewForm) {
    length = form.getFields().length;
    for (i = 0; i < length; i++) {
      record = data.find('name', form.getFields()[i].name);
      // use the original.fields as we are then sure
      // that we do not get ready build form items
      // but just the original simple objects
      // with properties
      fldDef = form._originalFields.find('name', form.getFields()[i].name);
      if (!record && fldDef) {
        // clone the fieldDef
        newFields.push(isc.shallowClone(fldDef));
      }
    }
  }

  // set the fields
  form.statusBarFields = statusBarFields;
  if (form.view) {
    // when resetting fields do not reuse notes data source, nullify it to
    // force new creation
    form.view.notesDataSource = null;
  }
  form.setFields(newFields);

  // and show me the stuff!
  form.markForRedraw();

  if (form.statusBar) {
    // the preview form has a direct reference to the statusbar
    form.statusBar.updateContentTitle(form.getStatusBarFields());
  } else if (form.view && form.view.statusBar) {
    // when opened directly from a form
    form.view.statusBar.updateContentTitle(form.getStatusBarFields());
  }
};
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2011-2012 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s): ___________
 ************************************************************************
 */

// = Defines the OBPersonalizationTree =
// Defines the tree shown on the left in the personalization form.
// Uses standard Smartclient features except for:
// - status bar fields which can not be used on the form can not 
//  be dragged out
// - clicking a folder opens/closes it
// - when dragging a normal field on the status bar folder then 
//  a copy is made as a normal field may exist both on the form 
//  as in the status bar
// - added a context menu to make it easy to directly update
//  item properties
// - changed styling of hidden fields 
//
isc.ClassFactory.defineClass('OBPersonalizationTreeGrid', isc.TreeGrid);

isc.OBPersonalizationTreeGrid.addProperties({
  showHeader: false,
  canReorderRecords: true,
  canAcceptDroppedRecords: true,
  leaveScrollbarGap: false,
  showCellContextMenus: true,

  // when an item gets dropped on a closed folder its icon 
  // changes
  showDropIcons: true,
  showOpenIcons: true,
  dropIconSuffix: 'open',
  closedIconSuffix: 'closed',
  openIconSuffix: 'open',
  selectionType: 'single',

  fields: [{
    name: 'title',
    canHover: true,
    showHover: true,
    treeField: true,
    showTitle: false,
    type: 'text',
    width: '100%',
    canEdit: false
  }
  // disabled for now, it can be an idea to support direct editing in the tree
  //    {name: 'colSpan', title: OB.I18N.getLabel('OBUIAPP_Personalization_Colspan'), type: 'number', editorType: 'TextItem', keyPressFilterNumeric: '[0-9]'}, 
  //    {name: 'rowSpan', title: OB.I18N.getLabel('OBUIAPP_Personalization_Rowspan'),  type: 'number', editorType: 'TextItem', keyPressFilterNumeric: '[0-9]'}, 
  //    {name: 'startRow', title: OB.I18N.getLabel('OBUIAPP_Personalization_Startrow'), type: 'boolean'}, 
  //    {name: 'hiddenInForm', title: OB.I18N.getLabel('OBUIAPP_Personalization_Hidden'), type: 'boolean'}
  ],

  initWidget: function () {
    var length = this.fields.length,
        me = this,
        changedFunction, i;

    // todo: show custom items for different types of fields
    this.nodeIcon = OB.Styles.Personalization.Icons.field;
    this.folderIcon = OB.Styles.Personalization.Icons.fieldGroup;

    // register a change notifier
    changedFunction = function () {
      me.personalizeForm.changed();
    };

    for (i = 0; i < length; i++) {
      this.fields[i].changed = changedFunction;
    }

    // hovering
    this.fields[0].hoverHTML = function (record, value) {
      return me.personalizeForm.getHoverHTML(record, null);
    };

    this.computeNodeIcons(this.fieldData);

    // create the tree, note the modeltype, idField and parentIdField
    // they determine how the tree is build from the list of nodes
    this.data = isc.Tree.create({
      modelType: 'parent',
      idField: 'name',
      parentIdField: 'parentName',
      data: this.fieldData,
      dataChanged: function () {
        me.personalizeForm.changed();
      },
      // note Tree is not a widget, it more like a datasource
      // it has no visual representation, therefore overriding init
      init: function () {
        var mainNode;
        this.Super('init', arguments);

        // open the main folder as a default
        mainNode = this.getAllNodes().find('name', OB.Personalization.MAIN_GROUPNAME);
        this.openFolder(mainNode);
      }
    });

    // does not seem to work for the root, can also
    // be done by overriding the folderDrop method, see below
    //   this.data.getRoot().canAcceptDrop = false;
    // commented, start closed
    //   this.data.openAll();
    this.Super('initWidget', arguments);
  },

  // open the folders and expands form items, needs to be called
  // after the preview form has been build
  openFolders: function () {
    var i, nodes;
    // open the folders which need to be opened
    for (i = 0, nodes = this.data.getAllNodes(); i < nodes.length; i++) {
      if (nodes[i].sectionExpanded) {
        this.openFolder(nodes[i]);
      }
    }
  },

  destroy: function () {
    if (this.data) {
      this.data.destroy();
    }
    this.Super('destroy', arguments);
  },

  // open/close a folder on folder click
  folderClick: function (viewer, folder, recordNum) {
    if (this.data.isOpen(folder)) {
      this.closeFolder(folder);
    } else {
      this.openFolder(folder);
    }
  },

  closeFolder: function (folder) {
    var fld, i, length, flds = this.personalizeForm.previewForm.getFields();

    this.Super('closeFolder', arguments);

    // find the section fld and collapse
    for (i = 0, length = flds.length; i < length; i++) {
      if (flds[i].name === folder.name && flds[i].collapseSection) {
        folder.sectionExpanded = false;
        flds[i].collapseSection();
        this.personalizeForm.changed();
        break;
      }
    }
  },

  openFolder: function (folder) {
    var fld, i, length, flds = this.personalizeForm.previewForm.getFields();

    this.Super('openFolder', arguments);

    // find the section fld and collapse
    for (i = 0, length = flds.length; i < length; i++) {
      if (flds[i].name === folder.name && flds[i].expandSection) {
        folder.sectionExpanded = true;
        flds[i].expandSection();
        this.personalizeForm.changed();
        break;
      }
    }
  },

  // overridden to:
  // - prevent a change event if a node is dropped
  // in the same location (code commented out, seems to prevent move..)
  // - set isStatusBarField flag when moved into the status bar folder
  folderDrop: function (nodes, folder, index, sourceWidget, callback) {
    var i, oldNode, oldValue, newCallback, changed, length;

    if (!nodes) {
      return;
    }

    // can not drop in the root
    if (folder && folder.name === '/') {
      return;
    }

    length = nodes.length;

    // don't allow required fields without default value 
    // to be dropped on the statusbar
    if (folder.name === OB.Personalization.STATUSBAR_GROUPNAME) {
      for (i = 0; i < length; i++) {
        if (!nodes[i].wasOnStatusBarField && nodes[i].required && !nodes[i].hasDefaultValue) {
          return;
        }
      }
    }

    //    
    //    // check if the nodes are all dropped on their current parent
    //    // in the same place they are now (note index + i is done, as
    //    // index is not an array)
    //    // if that's the case then just return to not get a datachanged
    //    // event
    //    changed = false;
    //    for (i = 0; i < nodes.length; i++) {
    //      if (nodes[i].parentName !== folder.name || 
    //          this.data.indexOf(nodes[i]) !== (index + i)) {
    //        changed = true;
    //        break;
    //      }
    //    }
    //    if (!changed) {
    //      return;
    //    }
    // folders can not be dropped outside of the main group
    for (i = 0; i < length; i++) {
      if (nodes[i].isFolder && (!folder || folder.name !== OB.Personalization.MAIN_GROUPNAME)) {
        return;
      }
      nodes[i].isStatusBarField = (folder.name === OB.Personalization.STATUSBAR_GROUPNAME);
    }

    this.Super('folderDrop', arguments);
  },

  // show hidden items in a different style
  getBaseStyle: function (record, rowNum, colNum) {
    if (record.hiddenInForm) {
      return this.baseStyle + 'Hidden';
    }
    return this.baseStyle;
  },

  // no context menu on folders
  folderContextClick: function (me, record, recordNum) {
    return false;
  },

  // Overridden as it seems that the 8.3 version
  // of SC does not call the selectionUpdated event anymore
  cellClick: function (record, rowNum, colNum) {
    this.deselectAllRecords();
    this.selectRecord(record);
  },

  // overridden to create context menu items specific 
  // for the clicked record
  cellContextClick: function (record, rowNum, colNum) {
    // select when right clicking, this can have some side effects
    // focus and menus appearing/disappearing, check if this happens
    this.deselectAllRecords();
    this.selectRecord(record);

    // create the context items for the clicked record
    this.cellContextItems = this.createCellContextItems(record);
    // continue with normal behavior
    return true;
  },

  // the menu entries when right clicking a field, different menu
  // entries are shown for status bar or normal fields
  createCellContextItems: function (record) {
    var i, menuItems = [],
        updatePropertyFunction, me = this,
        personalizeForm = this.personalizeForm,
        length, allNodes;

    updatePropertyFunction = function (record, property, value) {
      record[property] = value;

      // make sure only one record has first focus
      if (record.firstFocus) {
        allNodes = personalizeForm.fieldsTreeGrid.data.getAllNodes();
        length = allNodes.length;
        for (i = 0; i < length; i++) {
          if (allNodes[i].firstFocus) {
            allNodes[i].firstFocus = false;
          }
        }
        record.firstFocus = true;
      }

      // items may have been hidden, which changes their colour
      personalizeForm.fieldsTreeGrid.markForRedraw();

      // set the value in the properties form also
      if (property === 'hiddenInForm') {
        personalizeForm.propertiesLayout.formLayout.form.setValue('displayed', !value);
      } else {
        personalizeForm.propertiesLayout.formLayout.form.setValue(property, value);
      }

      // this will reset everything
      personalizeForm.changed();
    };

    // status status bar fields can be hidden but not removed (as they
    // do not exist on the rest of the form)
    if (record.isStatusBarField) {
      menuItems.add({
        title: OB.I18N.getLabel('OBUIAPP_Personalization_Displayed'),
        checked: !record.hiddenInForm,
        click: function () {
          updatePropertyFunction(record, 'hiddenInForm', !record.hiddenInForm);
        }
      });
    } else {
      // for normal nodes, show some properties which can be changed
      menuItems.add({
        title: OB.I18N.getLabel('OBUIAPP_Personalization_Startrow'),
        checked: record.startRow,
        click: function () {
          updatePropertyFunction(record, 'startRow', !record.startRow);
        }
      });

      if (record.wasOnStatusBarField || !record.required || record.hasDefaultValue) {
        menuItems.add({
          title: OB.I18N.getLabel('OBUIAPP_Personalization_Displayed'),
          checked: !record.hiddenInForm,
          click: function () {
            updatePropertyFunction(record, 'hiddenInForm', !record.hiddenInForm);
          }
        });
      }

      menuItems.add({
        title: OB.I18N.getLabel('OBUIAPP_Personalization_FirstFocus'),
        checked: record.firstFocus,
        click: function () {
          updatePropertyFunction(record, 'firstFocus', !record.firstFocus);
        }
      });
    }

    return menuItems;
  },

  redraw: function () {
    this.computeNodeIcons();
    this.Super('redraw', arguments);
  },

  computeNodeIcons: function (nodes) {
    var iconSuffix, node, i, data = nodes || this.data.getAllNodes(),
        length = data.length;
    for (i = 0; i < length; i++) {
      node = data[i];
      if (node.isFolder) {
        continue;
      }
      iconSuffix = '';
      if (node.required) {
        iconSuffix = 'Required';
      }
      if (node.hasDisplayLogic) {
        iconSuffix = iconSuffix + 'DisplayLogic';
      }
      if (node.hiddenInForm) {
        iconSuffix = iconSuffix + 'Hidden';
      }
      node.icon = OB.Styles.Personalization.Icons['field' + iconSuffix];
    }
  }
});
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distribfuted  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2011-2012 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */

// ** {{{OBPersonalizeFormLayout}}} **
// Builds the whole layout which contains the form layout functionality.
// The form layout functionality consists of three parts:
// 1) a pane which shows the fields in a tree structure. This makes use
// of the TreeGrid defined in ob-personalization-treegrid
// 2) a properties pane to edit layout properties for a certain field
// 3) a pane which contains the form preview
//
// In addition there is a toolbar to do save, delete and undo.
//
// The form personalizer is called from a window itself or from the 
// Window Personalization grid for a selected record.
// 
// An important concept to understand is personalizationData.
// This is the datastructure used in the tree on the left of the form
// personalizer. It contains the fields of the form but also field groups,
// status bar field and the status bar group. 
// This datastructure is stored in the Window Personalization
// table. It is read from the database or can be constructed from 
// an existing form. The personalization data has a structure like this:
// {
//    personalizationId: null,
//    canDelete: true,
//    form: {
//      fields: []
//    }
// }
// 
// This structure is like this to cater for future addition of grid (and
// other) personalization data in the same record.
// 
// The tree shown on the left has 2 types of parts, the first part is
// the status bar group the second part is the form group which holds
// the form items. fields can be moved from one group to another.
//
// Form personalization: when a standard window is created it calls the 
// server to get (the WindowSettingsActionHandler) to retrieve the 
// personalized data for the tabs of the window. The standard window 
// then calls the personalizeWindow method in the ob-personalization.js
// file.
//
// After MP2 a new function has been delivered to store the complete view
// state of a complete window. See the ob-manage-views.js file for a detailed
// description. The form layout functionality described here is integrated
// with this new functionality.
//
isc.ClassFactory.defineClass('OBPersonalizeFormLayout', isc.VLayout);

isc.OBPersonalizeFormLayout.addProperties({

  // the datastructure with personalization information
  personalizationData: null,

  // identifiers displayed in the statusbar of the form personalizer
  tabIdentifier: null,
  clientIdentifier: null,
  orgIdentifier: null,
  roleIdentifier: null,
  userIdentifier: null,

  // are used to set a personalization record on the most
  // detailed user level, is not used if personalizationId
  // is set
  clientId: null,
  orgId: null,
  roleId: null,
  userId: null,

  // maintain the state of the buttons in the toolbar
  isNew: false,
  isChanged: false,
  isSaved: false,

  // should the caller be refreshed or not
  hasBeenSaved: false,

  // the form instance shown to the user
  previewForm: null,

  // retrieved from the server
  previewFormProperties: null,

  initWidget: function () {

    this.initializing = true;

    this.createAddToolbar();
    this.createAddStatusbar();
    this.createAddMainLayout();
    this.Super('initWidget', arguments);
  },

  // everything except the toolbar and statusbar in the top, some inner 
  // parts are created later (see buildPreviewForm)
  createAddMainLayout: function () {
    var me = this,
        fieldsTabSet, leftLayout, mainLayout = isc.VLayout.create({}, OB.Styles.Personalization.MainLayout);

    this.fieldsLayout = isc.Layout.create({
      height: '100%'
    }, OB.Styles.Personalization.FieldsLayout);

    fieldsTabSet = isc.OBTabSet.create({
      height: '*',

      initWidget: function () {
        // copy the tabBarProperties as it is coming from
        // OB.Styles.Personalization.TabSet which is also used
        // by the other tabsets
        this.tabBarProperties = isc.addProperties({}, this.tabBarProperties);
        this.tabBarProperties.tabSet = this;
        this.tabBarProperties.itemClick = function (item, itemNum) {
          me.propertiesTabSet.toggleVisualState();
        };
        this.Super('initWidget', arguments);
      }
    }, OB.Styles.Personalization.TabSet);

    fieldsTabSet.addTab({
      title: OB.I18N.getLabel('OBUIAPP_Personalization_HeaderFields'),
      pane: this.fieldsLayout
    });

    this.previewTabSet = isc.OBTabSet.create(OB.Styles.Personalization.TabSet);
    this.previewTabSet.addTab({
      title: OB.I18N.getLabel('OBUIAPP_Personalization_HeaderPreview')
    });

    leftLayout = isc.VLayout.create({
      height: '100%'
    }, OB.Styles.Personalization.FormPersonalizerLeftPane);
    leftLayout.addMember(fieldsTabSet);
    leftLayout.addMember(this.createPropertiesLayout());

    this.managementLayout = isc.HLayout.create({
      height: '100%',
      width: '100%'
    }, OB.Styles.Personalization.ManagementLayout);
    this.managementLayout.addMember(leftLayout);
    this.managementLayout.addMember(this.previewTabSet);
    mainLayout.addMember(this.managementLayout);
    this.mainLayout = mainLayout;
    this.addMember(mainLayout);
  },

  // creates the properties layout which contains the form
  // with a few buttons
  createPropertiesLayout: function () {
    var NumericField, CheckboxField, propertiesLayout = isc.Layout.create(OB.Styles.Personalization.PropertiesLayout);

    // a backpointer
    propertiesLayout.personalizeForm = this;

    CheckboxField = function (props) {
      if (props) {
        isc.addProperties(this, props);
      }
    };
    CheckboxField.prototype = {
      alwaysTakeSpace: false,
      editorType: 'OBCheckboxItem',
      labelAsTitle: true,

      // HACK: when a checkbox does not have focus and you click
      // the first click is lost, does not happen in normal OBViewForm
      // TODO: research why this happens
      handleCellClick: function () {
        this.fromCellClick = true;
        var ret = this.Super('handleClick', arguments);
        delete this.fromCellClick;
        return ret;
      },
      handleClick: function () {
        if (!this.fromCellClick) {
          // cellclick will also be called
          return true;
        }
        return this.Super('handleClick', arguments);
      }
    };

    NumericField = function (props) {
      if (props) {
        isc.addProperties(this, props);
      }
    };
    NumericField.prototype = {
      showFocused: true,
      alwaysTakeSpace: false,
      required: true,
      validateOnExit: true,
      showIcons: true,
      width: 75,
      titleOrientation: 'top',
      titleSuffix: '</b>',
      titlePrefix: '<b>',
      requiredTitleSuffix: ' *</b>',
      requiredRightTitlePrefix: '<b>* ',
      rightTitlePrefix: '<b>',
      rightTitleSuffix: '</b>',
      keyPressFilter: '[1-9]',
      editorType: 'OBSpinnerItem'
    };

    propertiesLayout.formLayout = isc.VStack.create({
      align: 'center',
      overflow: 'visible',
      height: 1,
      visible: false,
      width: '100%'
    });

    propertiesLayout.formLayout.form = isc.DynamicForm.create({
      personalizeForm: this,
      overflow: 'visible',
      numCols: 2,
      width: '100%',

      titleSuffix: '</b>',
      titlePrefix: '<b>',
      requiredTitleSuffix: ' *</b>',
      requiredRightTitlePrefix: '<b>* ',
      rightTitlePrefix: '<b>',
      rightTitleSuffix: '</b>',

      errorsPreamble: '',
      showErrorIcons: false,
      showErrorStyle: true,
      showInlineErrors: true,

      fields: [
      new NumericField({
        name: 'colSpan',
        keyPressFilter: '[1-4]',
        min: 1,
        max: 4,
        title: OB.I18N.getLabel('OBUIAPP_Personalization_Colspan')
      }), new NumericField({
        name: 'rowSpan',
        keyPressFilter: '[1-9]',
        min: 1,
        max: 9,
        required: true,
        title: OB.I18N.getLabel('OBUIAPP_Personalization_Rowspan')
      }), new CheckboxField({
        name: 'startRow',
        startRow: true,
        title: OB.I18N.getLabel('OBUIAPP_Personalization_Startrow')
      }), new CheckboxField({
        name: 'displayed',
        startRow: true,
        title: OB.I18N.getLabel('OBUIAPP_Personalization_Displayed')
      }), new CheckboxField({
        name: 'firstFocus',
        startRow: true,
        title: OB.I18N.getLabel('OBUIAPP_Personalization_FirstFocus')
      })],

      // is called when a field in the tree is clicked
      setRecord: function (record) {
        var fld, i = 0,
            length = this.getFields().length;

        this.record = record;

        for (i = 0; i < length; i++) {
          fld = this.getFields()[i];
          // the field has the opposite meaning of the form
          if (fld.name === 'displayed') {
            this.setValue('displayed', !record.hiddenInForm);
          } else {
            this.setValue(fld.name, record[fld.name]);
          }
        }

        // hide some fields, static status bar fields only need the
        // hidden fields and not the other ones
        if (record.isStatusBarField) {
          this.hideItem('colSpan');
          this.hideItem('rowSpan');
          this.hideItem('firstFocus');
          this.hideItem('startRow');
        } else {
          this.showItem('colSpan');
          this.showItem('rowSpan');
          this.showItem('firstFocus');
          this.showItem('startRow');
        }

        if (!record.wasOnStatusBarField && !record.isStatusBarField && record.required && !record.hasDefaultValue) {
          this.hideItem('displayed');
        } else {
          this.showItem('displayed');
        }

        this.rememberValues();
      },

      // store the values in the record
      doSave: function () {
        var i, allNodes, length;

        // don't save if there are errors
        // could be an idea to disable the save button
        this.validate();
        if (this.hasErrors()) {
          return;
        }

        // only one field may have first focus
        // first get rid of all first focus if it was set now
        if (this.getValue('firstFocus')) {
          allNodes = this.personalizeForm.fieldsTreeGrid.data.getAllNodes();
          length = allNodes.length;
          for (i = 0; i < length; i++) {
            if (allNodes[i].firstFocus) {
              allNodes[i].firstFocus = false;
            }
          }
        }

        // now it will be set, maximum one field will have 
        // the focus now
        this.record.hiddenInForm = !this.getValue('displayed');
        this.record.startRow = this.getValue('startRow');
        this.record.colSpan = this.getValue('colSpan');
        this.record.rowSpan = this.getValue('rowSpan');
        this.record.firstFocus = this.getValue('firstFocus');

        this.rememberValues();
        this.focus();

        // items may have been hidden, which changes their colour
        // so rebuild the tree
        this.personalizeForm.fieldsTreeGrid.markForRedraw();

        // this will reset everything
        this.personalizeForm.changed();
      },

      doCancel: function () {
        this.reset();
        this.focus();
      },

      // called when a field in the form changes
      // enable the apply/cancel buttons
      itemChanged: function (item, newValue) {
        this.doSave();
      }
    });

    propertiesLayout.formLayout.addMembers(propertiesLayout.formLayout.form);

    // the empty message is shown when no field is selected on the left
    propertiesLayout.emptyMessage = isc.Layout.create({
      margin: 5,
      members: [
      isc.Label.create({
        width: '100%',
        height: 1,
        overflow: 'visible',
        contents: OB.I18N.getLabel('OBUIAPP_Personalization_PropertiesFormEmptyMessage')
      })]
    });

    propertiesLayout.addMember(propertiesLayout.formLayout);
    propertiesLayout.addMember(propertiesLayout.emptyMessage);
    propertiesLayout.hideMember(propertiesLayout.formLayout);
    propertiesLayout.showMember(propertiesLayout.emptyMessage);

    this.propertiesLayout = propertiesLayout;

    // put it all in a tabset...    
    this.propertiesTabSet = isc.OBTabSet.create(OB.Styles.Personalization.TabSet, {
      height: OB.Styles.Personalization.PropertiesTabSet.expandedHeight,
      expanded: true,

      toggleVisualState: function () {
        if (this.expanded) {
          this.setHeight(OB.Styles.Personalization.PropertiesTabSet.collapsedHeight);
          this.expanded = false;
        } else {
          this.setHeight(OB.Styles.Personalization.PropertiesTabSet.expandedHeight);
          this.expanded = true;
        }
      },

      initWidget: function () {
        this.tabBarProperties.tabSet = this;
        this.tabBarProperties.itemClick = function (item, itemNum) {
          this.tabSet.toggleVisualState();
        };
        this.Super('initWidget', arguments);
      }
    });
    this.propertiesTabSet.addTab({
      title: OB.I18N.getLabel('OBUIAPP_Personalization_HeaderProperties'),
      pane: propertiesLayout
    });

    // is called when a field in the tree is selected or unselected
    propertiesLayout.updatePropertiesDisplay = function (record) {
      var newRecord;
      if (!record) {
        this.hideMember(this.formLayout);
        this.emptyMessage.show();
        this.propertiesTabSet.setTabTitle(this.propertiesTabSet.getTab(0), OB.I18N.getLabel('OBUIAPP_Personalization_HeaderProperties'));
      } else {
        this.propertiesTabSet.setTabTitle(this.propertiesTabSet.getTab(0), record.title);
        this.formLayout.form.setRecord(record);
        this.hideMember(this.emptyMessage);
        this.showMember(propertiesLayout.formLayout);
        // set focus to the first one if we get focus
        this.formLayout.form.setFocusItem(this.formLayout.form.getFields()[0]);
      }
    };
    propertiesLayout.propertiesTabSet = this.propertiesTabSet;

    return this.propertiesTabSet;
  },

  // the status bar shows information about the personalization record
  // and it has the close button
  createAddStatusbar: function () {
    var owner = this;
    this.statusBar = isc.OBStatusBar.create({
      view: this,
      buttonBarWidth: OB.Styles.Personalization.buttonBarWidth,

      // add the close button
      addCreateButtons: function () {
        this.buttonBar.setWidth(1);
        this.buttonBar.setOverflow('visible');
        this.buttonBar.defaultLayoutAlign = 'center';
        var closeButton = isc.OBStatusBarIconButton.create({
          view: this.view,
          buttonType: 'close',
          keyboardShortcutId: 'StatusBar_Close',
          prompt: OB.I18N.getLabel('OBUIAPP_Personalization_Statusbar_Close'),
          action: function () {
            var clz = (owner.getWindow() ? owner.getWindow().getClass() : null);
            if (!clz) {
              owner.doClose();
            } else if (!clz.autoSave) {
              owner.doClose();
            } else if (clz.showAutoSaveConfirmation) {
              owner.doClose();
            } else {
              owner.saveAndClose();
            }
          }
        }, OB.Styles.Personalization.closeButtonProperties);
        this.buttonBar.addMembers([closeButton]);
      }
    });
    this.addMember(this.statusBar);
  },

  // the toolbar shows the save, delete and undo button
  createAddToolbar: function () {
    var saveButtonProperties, saveCloseButtonProperties, deleteButtonProperties, cancelButtonProperties, restoreButtonProperties, restoreLayout;

    saveButtonProperties = {
      action: function () {
        this.view.save();
      },
      disabled: true,
      buttonType: 'save',
      prompt: OB.I18N.getLabel('OBUIAPP_Personalization_Toolbar_Save'),
      updateState: function () {
        this.setDisabled(this.view.hasNotChanged());
      },
      keyboardShortcutId: 'ToolBar_Save'
    };

    saveCloseButtonProperties = {
      action: function () {
        this.view.saveAndClose();
      },
      saveDisabled: true,
      buttonType: 'savecloseX',
      prompt: OB.I18N.getLabel('OBUIAPP_Personalization_Toolbar_SaveClose'),
      updateState: function () {
        this.saveDisabled = this.view.hasNotChanged();

        if (this.saveDisabled) {
          this.buttonType = 'savecloseX';
          this.prompt = OB.I18N.getLabel('OBUIAPP_Personalization_Statusbar_Close');
        } else {
          this.buttonType = 'saveclose';
          this.prompt = OB.I18N.getLabel('OBUIAPP_Personalization_Toolbar_SaveClose');
        }
        this.resetBaseStyle();
      },
      keyboardShortcutId: 'ToolBar_SaveClose'
    };

    deleteButtonProperties = {
      action: function () {
        this.view.deletePersonalization();
      },
      disabled: true,
      buttonType: 'eliminate',
      prompt: OB.I18N.getLabel('OBUIAPP_Personalization_Toolbar_Delete'),
      updateState: function () {
        // never allow delete when opened from the maintenance window
        this.setDisabled(this.view.openedFromMaintenanceWindow || (this.view.form && (!this.view.form.view.getFormPersonalization(false) || !this.view.form.view.getFormPersonalization(false).canDelete)));
      },
      keyboardShortcutId: 'ToolBar_Eliminate'
    };

    cancelButtonProperties = {
      action: function () {
        this.view.cancel();
      },
      disabled: true,
      buttonType: 'undo',
      prompt: OB.I18N.getLabel('OBUIAPP_Personalization_Toolbar_CancelEdit'),
      updateState: function () {
        this.setDisabled(this.view.hasNotChanged());
      },
      keyboardShortcutId: 'ToolBar_Undo'
    };

    restoreButtonProperties = {
      action: function () {
        var i, standardWindow = this.view.getStandardWindow(),
            viewDefinitions = standardWindow.getClass().originalView.viewDefinition,
            length = standardWindow.views.length,
            view, viewTabDefinition;
        for (i = 0; i < length; i++) {
          view = standardWindow.views[i];
          if (view.tabId !== this.view.tabId) {
            continue;
          }
          viewTabDefinition = viewDefinitions[view.tabId];

          this.view.initializing = true;

          this.view.destroyAndRemoveMembers(this.view.mainLayout);
          this.view.mainLayout = null;
          this.view.createAddMainLayout();

          this.view.buildFieldsTreeGrid(viewTabDefinition);
          this.view.buildPreviewForm();
          this.view.fieldsTreeGrid.openFolders();

          delete this.view.initializing;
          this.view.changed();
        }
      },
      title: OB.I18N.getLabel('OBUIAPP_RestoreDefaults'),
      updateState: function () {
        //        this.setDisabled(this.view.hasNotChanged());
      }
    };

    this.toolBar = isc.OBToolbar.create({
      view: this,
      leftMembers: [isc.OBToolbarIconButton.create(saveButtonProperties), isc.OBToolbarIconButton.create(saveCloseButtonProperties), isc.OBToolbarIconButton.create(cancelButtonProperties), isc.OBToolbarIconButton.create(deleteButtonProperties)],
      rightMembers: [isc.OBToolbarTextButton.create(restoreButtonProperties)],
      refreshCustomButtons: function () {
        this.rightMembers[0].updateState();
      }
    });
    this.addMember(this.toolBar);
  },

  // save the new form layout to the server and updates the preview form
  save: function (callback) {
    var params, me = this,
        newDataFields, formPers = (this.openedFromMaintenanceWindow ? this.personalizationData : this.form.view.getFormPersonalization());

    // if there is a personalization id then use that
    // this ensures that a specific record will be updated
    // on the server
    // note the target parameter is form, in other implementations
    // it can be grid. The reason that not the whole structure is send
    // is that the call should only change the target itself (the form
    // personalization data) and not the other parts
    if (formPers && formPers.personalizationId) {
      params = {
        action: 'store',
        target: 'form',
        personalizationId: formPers.personalizationId,
        applyLevelInformation: false
      };

    } else {
      // this case is used if there is no personalization record
      // it will be created at the most detailed level: client, org, role and user
      params = {
        action: 'store',
        target: 'form',
        clientId: this.clientId,
        orgId: this.orgId,
        roleId: this.roleId,
        userId: this.userId,
        tabId: this.tabId,
        applyLevelInformation: true
      };
    }

    newDataFields = this.getPersonalizationFields();

    // store the data, the reply can contain an id and also if the current
    // user may delete the record, this is allowed if the record is on
    // user level
    OB.RemoteCallManager.call('org.openbravo.client.application.personalization.PersonalizationActionHandler', this.getPersonalizationFields(), params, function (resp, data, req) {
      var personalization;

      // if there is no personalization data then create it
      if (!me.personalizationData) {
        me.personalizationData = {};
      }

      // as the user can save, the user can also delete it
      me.personalizationData.canDelete = true;

      if (data && data.personalizationId) {
        me.personalizationData.personalizationId = data.personalizationId;
      }
      if (!me.personalizationData.form) {
        me.personalizationData.form = {};
      }
      // overwrite what we have
      me.personalizationData.form = newDataFields;

      if (!me.openedFromMaintenanceWindow) {
        // called from normal window
        me.form.view.standardWindow.updateFormPersonalization(me.form.view, me.personalizationData);
      }

      me.initializing = true;
      me.isNew = false;
      me.isSaved = true;
      me.isChanged = false;
      me.hasBeenSaved = true;
      me.setStatusBarInformation();

      // update the save, delete, undo buttons 
      // delete can get enabled if canDelete was set to true
      me.toolBar.updateButtonState();

      delete me.initializing;
      if (callback) {
        callback();
      }
    });
  },

  // called when the delete button is called
  deletePersonalization: function (confirmed) {
    var me = this,
        callback;

    // only delete if we have a personalization id
    // this should always be the case
    if (!this.personalizationData.personalizationId) {
      return;
    }

    if (!confirmed) {
      callback = function (ok) {
        if (ok) {
          me.deletePersonalization(true);
        }
      };

      isc.ask(OB.I18N.getLabel('OBUIAPP_Personalization_ConfirmDelete'), callback);
      return;
    }

    OB.RemoteCallManager.call('org.openbravo.client.application.personalization.PersonalizationActionHandler', {}, {
      personalizationId: this.personalizationData.personalizationId,
      action: 'delete'
    }, function (resp, data, req) {
      var personalization;

      me.hasBeenDeleted = true;
      // close when returned
      me.doClose(true);

      personalization = me.getStandardWindow().getClass().personalization;
      personalization[me.tabId] = null;
      if (me.getStandardWindow().getClass().personalization.forms) {
        me.getStandardWindow().getClass().personalization.forms[me.tabId] = null;
      }
    });
  },

  // the undo action, resets everything to the loaded, last-saved state
  cancel: function (confirmed) {
    var me = this,
        callback;
    if (!confirmed) {
      callback = function (ok) {
        if (ok) {
          me.cancel(true);
        }
      };

      isc.ask(OB.I18N.getLabel('OBUIAPP_Personalization_ConfirmCancel'), callback);
      return;
    }

    this.initializing = true;
    this.isChanged = false;
    this.isSaved = false;
    this.isNew = !this.personalizationData.personalizationId;

    this.destroyAndRemoveMembers(this.mainLayout);
    this.mainLayout = null;
    this.createAddMainLayout();

    this.buildFieldsTreeGrid();
    this.buildPreviewForm();
    this.setStatusBarInformation();
    this.fieldsTreeGrid.openFolders();

    delete this.initializing;
  },

  // shows the settings in the preview form
  refresh: function () {
    this.buildPreviewForm();
  },

  // called when something changes in properties, ordering of fields
  // field in a different group etc.
  // will set the changed state which enables buttons
  changed: function () {
    // nothing to do when we are building everything
    // then changed is fired a few times
    if (this.initializing) {
      return;
    }
    this.isChanged = true;
    this.isSaved = false;
    this.setStatusBarInformation();
    this.buildPreviewForm();
  },

  // used by buttons to check if the state has changed
  hasNotChanged: function () {
    return !this.isChanged;
  },

  // creates the preview form and displays it
  buildPreviewForm: function () {
    var statusBar, currentPane, i, fld, itemClick, me = this;

    this.formLayout = isc.VLayout.create({
      height: '100%',
      width: '100%'
    }, OB.Styles.Personalization.Preview);

    // add a status bar to the formlayout
    statusBar = isc.OBStatusBar.create({
      addCreateButtons: function () {}
    });
    this.formLayout.addMember(statusBar);

    // create the form and add it to the formLayout
    this.previewForm = isc.OBViewForm.create(isc.clone(OB.ViewFormProperties), this.previewFormProperties, {
      preventAllEvents: true,
      statusBar: statusBar,
      personalizeForm: this,
      isPreviewForm: true,
      autoFocus: false,

      // overridden to prevent js errors when switching views
      visibilityChanged: function () {},

      titleHoverHTML: function (item) {
        return this.personalizeForm.getHoverHTML(null, item);
      },

      itemHoverHTML: function (item) {
        return this.personalizeForm.getHoverHTML(null, item);
      },

      // overridden to always show a statusbar field with some spaces
      // even if the status bar field does not have a value (which it
      // does not have in the form preview)
      getStatusBarFields: function () {
        var statusBarFields = [
          [],
          []
        ],
            i, item, value, tmpValue, length = this.statusBarFields.length;

        for (i = 0; i < length; i++) {
          item = this.getItem(this.statusBarFields[i]);
          statusBarFields[0].push(item.getTitle());
          statusBarFields[1].push('&nbsp;&nbsp&nbsp;');
        }
        return statusBarFields;
      }

    });

    itemClick = function (item) {
      // disabled clicking in the form itself as multiple things need to be 
      // solved:
      // - the cursor needs to become a pointer
      // - when the field in a collapsed group in the tree (on the left)
      //    then the group has to expand automatically
      // - when the field is not in the viewport on the left then 
      //    it needs to be scrolled there
      // - we also need to support clicking in the status bar
      //      if (item.parentItem) {
      //        me.doHandlePreviewFormItemClick(item.parentItem);
      //      } else {
      //        me.doHandlePreviewFormItemClick(item);
      //      }
    };

    var persFields = this.getPersonalizationFields(),
        length;
    if (persFields) {
      OB.Personalization.personalizeForm({
        form: persFields
      }, this.previewForm);
    }

    // expand by default
    length = this.previewForm.getFields().length;
    for (i = 0; i < length; i++) {
      fld = this.previewForm.getFields()[i];

      fld.showFocused = false;

      // the personalizable is set in freemarker templates, for example
      // the audit and notes section are not personalizable and not shown
      // in the form preview
      if (fld.personalizable) {
        // always expand section items
        if (fld.sectionExpanded) {
          fld.expandSection();
        } else {
          // replace some methods so that clicking a field in the form
          // will select it on the left
          fld.handleClick = itemClick;
          fld.iconClick = itemClick;
          fld.handleTitleClick = itemClick;
          fld.linkButtonClick = itemClick;
        }
      }
    }

    this.formLayout.addMember(this.previewForm);

    if (this.previewTabSet.getTab(0).pane) {
      currentPane = this.previewTabSet.getTab(0).pane;
    }
    this.previewTabSet.updateTab(this.previewTabSet.getTab(0), this.formLayout);
    if (currentPane) {
      currentPane.destroy();
    }
  },

  buildFormAndTree: function () {
    var computedPersonalizationData;

    this.buildPreviewForm();

    // if no personalization data then we need to compute it from the form
    // the personalization data can also be set directly (when called from 
    // the maintenance window)
    if (!this.personalizationData || !this.personalizationData.form) {
      if (this.form) {
        computedPersonalizationData = OB.Personalization.getPersonalizationDataFromForm(this.form);
      } else {
        // create from the previewForm
        computedPersonalizationData = OB.Personalization.getPersonalizationDataFromForm(this.previewForm);
      }
      if (!this.personalizationData) {
        this.personalizationData = {};
      }

      // and copy over what got computed
      isc.addProperties(this.personalizationData, computedPersonalizationData);
    }

    // personalize the preview form, this will remove any non-personalized
    // fields, which are also present in the preview form original field
    // list. Maybe in the future we can personalize these fields also
    OB.Personalization.personalizeForm(this.personalizationData, this.previewForm);

    // new if no id
    this.isNew = !this.personalizationData.personalizationId;

    // handle changes in the AD, needs to be done before building the tree
    OB.Personalization.updatePersonalizationDataFromFields(this.personalizationData.form.fields, this.previewForm.getFields(), this.previewForm.statusBarFields || []);

    this.buildFieldsTreeGrid();

    this.setStatusBarInformation();
    this.fieldsTreeGrid.openFolders();
  },

  buildFieldsTreeGrid: function (personalizationData) {
    var i, prop, fld, length;

    personalizationData = personalizationData || this.personalizationData;

    this.fieldsLayout.destroyAndRemoveMembers(this.fieldsLayout.getMembers());
    if (this.fieldsTreeGrid) {
      this.fieldsTreeGrid.destroy();
    }

    // the tree will add properties to the objects as fieldData
    // when retrieving the data from the tree (getPersonalizationFields)
    // we only want these properties and not the original ones.
    // see the function getPersonalizationFields
    // add some default fields
    this.personalizationDataProperties = ['isStatusBarField', 'displayed', 'isSection', 'parentName', 'title', 'hiddenInForm', 'colSpan', 'rowSpan', 'required', 'sectionExpanded', 'startRow', 'name', 'hasDisplayLogic'];
    length = personalizationData.form.fields.length;
    for (i = 0; i < length; i++) {
      fld = personalizationData.form.fields[i];
      for (prop in fld) {
        if (fld.hasOwnProperty(prop) && !this.personalizationDataProperties.contains(prop)) {
          this.personalizationDataProperties.push(prop);
        }
      }
    }

    // create the tree on the left, the tree only wants the fields
    // and nothing else
    this.fieldsTreeGrid = isc.OBPersonalizationTreeGrid.create({
      // make a clone so that the original personalization data is not
      // updated, when doing cancel, the original is restored
      fieldData: isc.shallowClone(personalizationData.form.fields),
      personalizeForm: this,
      selectionUpdated: function (record, recordList) {
        this.personalizeForm.selectionUpdated(record, recordList);
      }
    });

    this.fieldsLayout.addMember(this.fieldsTreeGrid);

  },

  // is called when something is clicked in the form
  doHandlePreviewFormItemClick: function (item) {
    // select the node in the tree 
    var treeNode = this.fieldsTreeGrid.data.find('name', item.name);
    this.fieldsTreeGrid.deselectAllRecords();
    this.fieldsTreeGrid.selectRecord(treeNode);
  },

  // is called when the selection changes in the tree
  selectionUpdated: function (record, recordList) {
    if (record && !record.isSection && recordList.length === 1) {
      this.propertiesLayout.updatePropertiesDisplay(record);
    } else {
      this.propertiesLayout.updatePropertiesDisplay(null);
    }
  },

  saveAndClose: function () {
    var view = this;
    if (this.hasNotChanged()) {
      view.doClose(true);
    } else {
      view.save(function () {
        view.doClose(true);
      });
    }
  },

  getStandardWindow: function () {
    if (this.openedFromMaintenanceWindow) {
      return this.maintenanceView.standardWindow;
    } else {
      return this.form.view.standardWindow;
    }
  },

  // close the form personalizer, refresh the existing form so that 
  // the changes are shown immediately, or if called from the 
  // maintenance window refresh the record there
  doClose: function (confirmed) {
    var callback, me = this,
        window;

    // ask for confirmation
    if (this.isChanged && !confirmed) {
      callback = function (ok) {
        if (ok) {
          // do it with a small delay so that any mouse events are processed
          // by the button itself and not by the standard view below it
          me.delayCall('doClose', [true], 100);
        }
      };

      isc.ask(OB.I18N.getLabel('OBUIAPP_Personalization_ConfirmClose'), callback);
      return;
    }

    if (this.openedFromMaintenanceWindow) {
      window = this.maintenanceView.standardWindow;
    } else if (this.openedInForm) {
      if (this.hasBeenSaved || this.hasBeenDeleted) {
        // update the form in the view
        OB.Personalization.personalizeForm(me.personalizationData, this.form.view.viewForm);
      }
      window = this.form.view.standardWindow;
    }
    window.windowLayout.destroyAndRemoveMembers(this);

    // restores the tabtitle
    window.view.updateTabTitle();

    window.toolBarLayout.show();
    window.view.show();

    if (this.openedFromMaintenanceWindow) {
      this.maintenanceView.refresh();
    }
  },

  getWindow: function () {
    if (this.openedFromMaintenanceWindow) {
      return this.maintenanceView.standardWindow;
    } else if (this.openedInForm) {
      return this.form.view.standardWindow;
    }
    return null;
  },

  // called by the buttons in the toolbar of the standard maintenance form/grid
  doOpen: function (retrievedInitialData) {
    var me = this,
        window, i, j, persField, fld, tabSet, tab;

    // first get the preview form data, continue after receiving it
    if (!retrievedInitialData) {
      OB.RemoteCallManager.call('org.openbravo.client.application.personalization.PersonalizationActionHandler', {}, {
        action: 'getFormDefinition',
        tabId: this.tabId
      }, function (resp, data, req) {
        me.previewFormProperties = data;

        // copy some stuff
        me.previewFormProperties._originalFields = isc.clone(me.previewFormProperties.fields);

        me.doOpen(true);
      });
      return;
    }

    this.buildFormAndTree();

    // depending on how we opened set the information here
    if (this.openedFromMaintenanceWindow) {
      window = this.maintenanceView.standardWindow;
    } else if (this.openedInForm) {
      // opened directly from the actual form itself
      // always work on user level then
      window = this.form.view.standardWindow;

      this.roleId = OB.User.roleId;
      this.clientId = OB.User.clientId;
      this.orgId = OB.User.organizationId;
      this.userId = OB.User.id;
    }

    // hide the part from which we were opened 
    window.toolBarLayout.hide();
    window.view.hide();
    window.windowLayout.addMember(this);

    // change the tabtitle
    tabSet = OB.MainView.TabSet;
    tab = OB.MainView.TabSet.getTab(window.view.viewTabId);
    tabSet.setTabTitle(tab, OB.I18N.getLabel('OBUIAPP_Personalize_TitlePrefix', [this.tabIdentifier]));
    delete this.initializing;
  },

  // is called when hovering over tree fields and also 
  // when hovering over items in the preview form
  getHoverHTML: function (record, item) {
    if ((record && record.hasDisplayLogic) || (item && item.showIf)) {
      return OB.I18N.getLabel('OBUIAPP_Personalization_DisplayLogicPrompt');
    }
    // TODO: show information about the item being hovered...
    return null;
    //    return title + '<br/>' + 'give me more!';
  },

  // reads the data from the tree grid and returns it in the expected
  // format. Note may return null during initialization
  getPersonalizationFields: function () {
    var i, record, result = [],
        node, nodes, value, j, undef, length;
    if (!this.fieldsTreeGrid || !this.fieldsTreeGrid.data) {
      return null;
    }
    // the nodes will contain internal data from the tree
    // only get the properties we want
    nodes = this.fieldsTreeGrid.data.getAllNodes();
    length = nodes.length;
    for (i = 0; i < length; i++) {
      node = nodes[i];
      record = {};
      for (j = 0; j < this.personalizationDataProperties.length; j++) {
        value = node[this.personalizationDataProperties[j]];
        if (value !== undef) {
          record[this.personalizationDataProperties[j]] = value;
        }
      }
      result.push(record);
    }
    return {
      fields: result
    };
  },

  // sets information about the current personalization record
  // in the status bar
  setStatusBarInformation: function () {
    this.toolBar.updateButtonState(false, false, true);

    var statusBarFields = null,
        barFieldValues = [],
        barFieldTitles = [],
        label, icon = null,
        statusCode = null;
    if (this.isNew) {
      icon = this.statusBar.newIcon;
      label = 'OBUIAPP_New';
    } else if (this.isChanged) {
      icon = this.statusBar.editIcon;
      label = 'OBUIAPP_Editing';
    } else if (this.isSaved) {
      icon = this.statusBar.savedIcon;
      label = 'OBUIAPP_Saved';
    }

    if (this.clientIdentifier) {
      barFieldTitles.push(OB.I18N.getLabel('OBUIAPP_Client'));
      barFieldValues.push(this.clientIdentifier);
    }
    if (this.orgIdentifier) {
      barFieldTitles.push(OB.I18N.getLabel('OBUIAPP_Organization'));
      barFieldValues.push(this.orgIdentifier);
    }
    if (this.roleIdentifier) {
      barFieldTitles.push(OB.I18N.getLabel('OBUIAPP_Role'));
      barFieldValues.push(this.roleIdentifier);
    }
    if (this.userIdentifier) {
      barFieldTitles.push(OB.I18N.getLabel('OBUIAPP_User'));
      barFieldValues.push(this.userIdentifier);
    }
    if (this.tabIdentifier) {
      barFieldTitles.push(OB.I18N.getLabel('OBUIAPP_Tab'));
      barFieldValues.push(this.tabIdentifier);
    }

    if (barFieldTitles.length > 0) {
      statusBarFields = [];
      statusBarFields.push(barFieldTitles);
      statusBarFields.push(barFieldValues);
    }

    this.statusBar.setContentLabel(icon, label, statusBarFields, OB.I18N.getLabel('OBUIAPP_WindowPersonalization_Guidance'));
  }
});
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2011-2013 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s): ___________
 ************************************************************************
 */

// ** {{{Personalization Toolbar Buttons}}} **
// Registers buttons to open the form layout manager from a normal form/grid
// view and from the Window Personalization view.
(function () {
  var personalizationButtonProperties, windowPersonalizationTabButtonProperties;

  personalizationButtonProperties = {
    action: function () {
      var tabIdentifier, personalizeForm;

      if (!OB.Utilities.checkProfessionalLicense(
      OB.I18N.getLabel('OBUIAPP_ActivateMessagePersonalization'))) {
        return;
      }

      if (this.view === this.view.standardWindow.view) {
        tabIdentifier = this.view.tabTitle;
      } else {
        tabIdentifier = this.view.standardWindow.tabTitle + ' - ' + this.view.tabTitle;
      }

      personalizeForm = isc.OBPersonalizeFormLayout.create({
        form: this.view.viewForm,
        openedInForm: true,
        tabIdentifier: tabIdentifier,
        tabId: this.view.tabId
      });
      personalizeForm.doOpen();
    },
    disabled: false,
    buttonType: 'personalization',
    prompt: OB.I18N.getLabel('OBUIAPP_Personalization_Toolbar_Button'),
    updateState: function () {
      var propValue, undef;

      // set it 
      if (this.userWindowPersonalizationAllowed === undef) {
        propValue = OB.PropertyStore.get('OBUIAPP_WindowPersonalization_Override', this.view.standardWindow ? this.view.standardWindow.windowId : null);
        if (propValue === 'false' || propValue === 'N') {
          this.userWindowPersonalizationAllowed = false;
        } else {
          this.userWindowPersonalizationAllowed = true;
        }
      }
      if (!this.userWindowPersonalizationAllowed) {
        this.setDisabled(true);
        return;
      }

      this.show();
    },
    keyboardShortcutId: 'ToolBar_Personalization'
  };

  OB.ToolbarRegistry.registerButton(personalizationButtonProperties.buttonType, isc.OBToolbarIconButton, personalizationButtonProperties, 310, null, null, false);

  // and register the toolbar button the window personalization tab  
  windowPersonalizationTabButtonProperties = {
    action: function () {
      var personalizationData = {},
          personalizeForm, view = this.view,
          grid = view.viewGrid,
          record = grid.getSelectedRecord();
      if (record.value) {
        personalizationData = isc.JSON.decode(record.value);
      }
      personalizationData.personalizationId = record.id;
      personalizationData.canDelete = false;

      personalizeForm = isc.OBPersonalizeFormLayout.create({
        personalizationData: personalizationData,

        maintenanceView: view,
        openedFromMaintenanceWindow: true,

        tabId: record.tab,
        tabIdentifier: record['tab' + OB.Constants.FIELDSEPARATOR + OB.Constants.IDENTIFIER],
        clientId: record.visibleAtClient,
        clientIdentifier: record['visibleAtClient' + OB.Constants.FIELDSEPARATOR + OB.Constants.IDENTIFIER],
        orgId: record.visibleAtOrganization,
        orgIdentifier: record['visibleAtOrganization' + OB.Constants.FIELDSEPARATOR + OB.Constants.IDENTIFIER],
        roleId: record.visibleAtRole,
        roleIdentifier: record['visibleAtRole' + OB.Constants.FIELDSEPARATOR + OB.Constants.IDENTIFIER],
        userId: record.user,
        userIdentifier: record['user' + OB.Constants.FIELDSEPARATOR + OB.Constants.IDENTIFIER]
      });
      personalizeForm.doOpen();
    },
    disabled: false,
    buttonType: 'edit_personalization',
    prompt: OB.I18N.getLabel('OBUIAPP_Personalization_Toolbar_Edit_Button'),
    updateState: function () {
      var view = this.view,
          form = view.viewForm,
          grid = view.viewGrid,
          length, selectedRecords = grid.getSelectedRecords(),
          i;

      // only show for records which can be edited
      if (selectedRecords.length !== 1) {
        this.setDisabled(true);
        return;
      }

      if (selectedRecords[0].type && selectedRecords[0].type !== 'Form') {
        this.setDisabled(true);
        return;
      }

      length = selectedRecords.length;
      for (i = 0; i < length; i++) {
        if (!grid.isWritable(selectedRecords[i])) {
          this.setDisabled(true);
          return;
        }
        if (selectedRecords[i]._new) {
          this.setDisabled(true);
          return;
        }
      }
      if (view.isShowingForm) {
        this.setDisabled(form.isSaving || form.readOnly || view.singleRecord || !view.hasValidState() || form.isNew);
      } else {
        this.setDisabled(view.readOnly || view.singleRecord || !view.hasValidState() || !grid.getSelectedRecords() || grid.getSelectedRecords().length !== 1);
      }
    },
    keyboardShortcutId: 'ToolBar_Personalization_Edit'
  };

  // register only for the window personalization tab
  OB.ToolbarRegistry.registerButton(windowPersonalizationTabButtonProperties.buttonType, isc.OBToolbarIconButton, windowPersonalizationTabButtonProperties, 320, 'FF8081813157AED2013157BF6D810023', null, false);

}());
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2011-2013 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s): ___________
 ************************************************************************
 */

// = Manage Views =
// This file contains implementations for the 3 main actions pertaining to views: storing, deleting and 
// applying views to a window.
//
// == View state json structure ==
// The view state is stored for a complete window, i.e. for each tab of a window. The viewstate consists
// of 3 parts:
// - grid state: which columns are visible etc.
// - form state: the layout and first focus of the form
// - window state: the layout of the parent/child tabs
// 
// The view state is stored as json on the server in a structure like this:
// { 
//  viewDefinition: [
//      name: 'name',
//      isDefault: true,
//      window: {...},
//      100: {
//          form: {...},
//          grid: {...},
//          },
//      110: {
//          form: {...},
//          grid: {...},
//          }
//        ]
// }
// where 100 and 110 are tab ids.
//
// == View state stored in the UIPersonalization table ==
// On the server the view state is stored on the server in the UIPersonalization table.
// Records stored as viewstate have as type: Window and have ad_window_id set.
// 
// In the same UIPersonalization table the layout of forms is persisted as it was
// delivered in MP2. See the ob-personalize-form.js file for more information.
// Form layout records in the UIPersonalization table have type: Form and have ad_tab_id set.
//
// == Server side implementation ==
// The server side implementation of the view state saving is implemented in the 
// PersonalizationActionHandler and PersonalizationHandler classes. The first is
// called from the client, the second class (which is used by the first) contains 
// the actual logic to store and retrieve personalization settings from the database. 
//
// == Reading the state from the server ==
// When reading the viewstate from the server for a window the MP2 form layout and the newer viewstate
// are combined into one json record. 
// 
// There is one main difference between the form layout state and the
// complete view state. For the form layout state only the record on the most detailed level is read. 
// For the viewstate all records are read (as the user can choose which viewstate to apply). 
// 
// In addition the json structure read from the server side will contain information to fill the 
// comboboxes of the popups to store a view. These combos allow a user to store personalization
// records on different levels. 
// 
// The server side component which is called is the WindowSettingsActionHandler. This component is
// called from the ob-standard-window.js file in the readWindowSettings method. This action handler is 
// only called once for each specific OBStandardWindow class. The returned json object is stored in the
// Smartclient class instance (standardWindow.getClass()). 
// By storing this information on class level, only one call to the server is needed when the specific
// ADWindow is opened for the first time (during that user session). Subsequence window openings will
// read the personalization (and other settings) from the class.
// 
// The personalization json object returned from the server will consist of 3 parts:
// - forms: the form layouts stored for each tab (see the ob-personalization* files for more information)
// - views: the views, an array of viewdefinitions, one covering a complete window. Each record
//      in the array will have the following information:
//      - the window layout state
//      - view: consists of 3 parts: 
//        - name: the name to be shown in the user interface
//        - for each tab a record containing the grid and form state
//        - the window layout
//      - canEdit information (is the user authorized to change/delete the view)
//      - level information: clientId, orgId, userId, roleId, is read from the visibleAt* and user
//         property of the UIPersonalization record
//      - personalization id: the id of the personalization record
//  - formData: contains the level information at which the user can edit the views. For each level
//      (clients, orgs, roles) a 'valuemap' is contained in this object.
// ** {{{OB.Personalization.applyViewDefinition}}} **
// Apply a selected view definition to a window
OB.Personalization.applyViewDefinition = function (persId, viewDefinition, standardWindow) {
  var i, view, viewTabDefinition, length = standardWindow.views.length,
      windowDefinition = viewDefinition.window;

  // delete the current form personalization 
  // as these will be overwritten by the new settings
  standardWindow.removeAllFormPersonalizations();

  standardWindow.selectedPersonalizationId = persId;

  if (windowDefinition) {
    if (windowDefinition.activeTabId) {
      for (i = 0; i < length; i++) {
        if (standardWindow.views[i].tabId === windowDefinition.activeTabId) {
          view = standardWindow.views[i];
          break;
        }
      }
      if (view) {
        // force an active view
        if (standardWindow.activeView === view) {
          standardWindow.activeView = null;
        }
        view.setAsActiveView(true);
        if (windowDefinition.parentTabSetState && view.parentTabSet) {
          view.parentTabSet.setState(windowDefinition.parentTabSetState);
          view.parentTabSet.setHeight(windowDefinition.parentTabSetHeight);
          // in this case the visibility of the top part of the parent view has to be set
          // as it can be hidden previously
          // https://issues.openbravo.com/view.php?id=18951
          if (view.parentView && !view.parentView.members[0].isVisible() && isc.OBStandardView.STATE_BOTTOM_MAX !== windowDefinition.parentTabSetState) {
            view.parentView.members[0].show();
          }
        } else if (windowDefinition.childTabSetState && view.childTabSet) {
          // in this case the visibility of the top part of the view has to be set
          // as it can be hidden previously
          // https://issues.openbravo.com/view.php?id=18951
          if (!view.members[0].isVisible() && isc.OBStandardView.STATE_BOTTOM_MAX !== windowDefinition.childTabSetState) {
            view.members[0].show();
          }
          view.childTabSet.setState(windowDefinition.childTabSetState);
          view.childTabSet.setHeight(windowDefinition.childTabSetHeight);
        }
      }
    }
  }

  // the viewdefinition contains both the global info (form, canDelete, personalizationid)  
  // set the view state for each tab
  for (i = 0; i < length; i++) {
    view = standardWindow.views[i];
    viewTabDefinition = viewDefinition[view.tabId];
    if (viewTabDefinition) {
      if (view.childTabSet && viewTabDefinition.selectedTab >= 0) {
        view.childTabSet.selectTab(viewTabDefinition.selectedTab);
      }

      // never show the form as this gives unpredictable results 
      // if there is no record selected etc.
      if (view.isShowingForm) {
        view.switchFormGridVisibility();
      }

      if (viewTabDefinition.grid) {
        //clear grouping, will be applied later
        view.viewGrid.clearGroupBy();
        view.viewGrid.setViewState(viewTabDefinition.grid);
        if (!view.viewGrid.lazyFiltering) {
          view.viewGrid.refreshContents();
        }
      }
      if (viewTabDefinition.form) {
        OB.Personalization.personalizeForm(viewTabDefinition, view.viewForm);
      }
    }
  }
};

// ** {{{OB.Personalization.getViewDefinition}}} **
// Retrieve the view state from the window.
// The levelInformation contains the level at which to store the view. After the save the internal
// view state is stored in the standardWindow.getClass().personalization object.
OB.Personalization.getViewDefinition = function (standardWindow, name, isDefault) {
  var view, persDataByTab, personalizationData = {},
      i, formData, length = standardWindow.views.length;

  // retrieve the viewstate from the server
  for (i = 0; i < length; i++) {
    persDataByTab = {};
    view = standardWindow.views[i];

    // get the form personalization information
    formData = OB.Personalization.getPersonalizationDataFromForm(view.viewForm);
    persDataByTab.form = formData.form;

    // ahd the grid state
    persDataByTab.grid = view.viewGrid.getViewState(false, true);

    if (view.childTabSet && view.childTabSet.getSelectedTabNumber() >= 0) {
      persDataByTab.selectedTab = view.childTabSet.getSelectedTabNumber();
    }

    // and store it in the overall structure
    personalizationData[view.tabId] = persDataByTab;
  }
  personalizationData.name = name;
  if (isDefault) {
    personalizationData.isDefault = true;
  }
  if (standardWindow.activeView) {
    personalizationData.window = {
      activeTabId: standardWindow.activeView ? standardWindow.activeView.tabId : null
    };

    if (standardWindow.activeView.parentTabSet) {
      personalizationData.window.parentTabSetState = standardWindow.activeView.parentTabSet.getState();
      personalizationData.window.parentTabSetHeight = standardWindow.activeView.parentTabSet.getHeight();
    } else if (standardWindow.activeView.childTabSet) {
      personalizationData.window.childTabSetState = standardWindow.activeView.childTabSet.getState();
      personalizationData.window.childTabSetHeight = standardWindow.activeView.childTabSet.getHeight();
    }
  }
  return personalizationData;
};

// ** {{{OB.Personalization.storeViewDefinition}}} **
// Retrieve the view state from the window and stores it in the server using the specified name and id (if set).
// The levelInformation contains the level at which to store the view. After the save the internal
// view state is stored in the standardWindow.getClass().personalization object.
OB.Personalization.storeViewDefinition = function (standardWindow, levelInformation, persId, name, isDefault) {
  var params, personalizationData = OB.Personalization.getViewDefinition(standardWindow, name, isDefault);

  // if there is a personalization id then use that
  // this ensures that a specific record will be updated
  // on the server.
  // the target means that only the view property of the total
  // user interface personalization is stored.
  // also persist the level information
  if (persId) {
    params = {
      action: 'store',
      target: 'viewDefinition',
      clientId: levelInformation.clientId,
      orgId: levelInformation.orgId,
      roleId: levelInformation.roleId,
      userId: levelInformation.userId,
      personalizationId: persId,
      applyLevelInformation: true
    };

  } else {
    // this case is used if there is no personalization record
    // use the level information to store the view state
    params = {
      action: 'store',
      target: 'viewDefinition',
      clientId: levelInformation.clientId,
      orgId: levelInformation.orgId,
      roleId: levelInformation.roleId,
      userId: levelInformation.userId,
      windowId: standardWindow.windowId,
      applyLevelInformation: true
    };
  }

  // and store on the server
  OB.RemoteCallManager.call('org.openbravo.client.application.personalization.PersonalizationActionHandler', personalizationData, params, function (resp, data, req) {
    var i = 0,
        fnd = false,
        length, newView, personalization = standardWindow.getClass().personalization,
        views = personalization && personalization.views ? personalization.views : [];

    standardWindow.selectedPersonalizationId = data.personalizationId;

    // create a new structure, the same way as it is 
    // returned from the server
    newView = isc.addProperties({
      canEdit: true,
      personalizationId: data.personalizationId,
      viewDefinition: personalizationData
    }, levelInformation);

    // when returning update the in-memory entry,
    // first check if there is an existing record, if so 
    // update it
    if (views) {
      length = views.length;
      for (i = 0; i < length; i++) {
        if (views[i].personalizationId === data.personalizationId) {
          views[i] = newView;
          fnd = true;
          break;
        }
      }
    }

    // not found create a new one, take into account
    // that the initial structure maybe empty
    if (!fnd) {
      if (!standardWindow.getClass().personalization) {
        standardWindow.getClass().personalization = {};
      }
      if (!standardWindow.getClass().personalization.views) {
        standardWindow.getClass().personalization.views = [];
        views = standardWindow.getClass().personalization.views;
      }
      views.push(newView);
      if (newView.viewDefinition && newView.viewDefinition.isDefault) {
        OB.PropertyStore.set('OBUIAPP_DefaultSavedView', data.personalizationId, standardWindow.windowId);
      }

      // sort the viewdefinitions
      views.sort(function (v1, v2) {
        var t1 = v1.viewDefinition.name,
            t2 = v2.viewDefinition.name;
        if (t1 < t2) {
          return -1;
        } else if (t1 === t2) {
          return 0;
        }
        return 1;
      });

    }
  });
};

//** {{{OB.Personalization.deleteViewDefinition}}} **
// Delete the view definition from the server, also remove it from the 
// in-memory structure.
OB.Personalization.deleteViewDefinition = function (standardWindow, personalizationId) {
  OB.RemoteCallManager.call('org.openbravo.client.application.personalization.PersonalizationActionHandler', {}, {
    personalizationId: personalizationId,
    action: 'delete'
  }, function (resp, data, req) {
    var personalization = standardWindow.getClass().personalization,
        length, i, views = personalization && personalization.views ? personalization.views : [];

    if (views) {
      length = views.length;
      // remove the entry from the global list
      for (i = 0; i < length; i++) {
        if (views[i].personalizationId === personalizationId) {
          views.splice(i, 1);
          break;
        }
      }
      if (OB.PropertyStore.get('OBUIAPP_DefaultSavedView', standardWindow.windowId) === personalizationId) {
        // If the 'Default View' has been deleted, the local property pointing to it is still
        // in the browser until the following logout/login, so it should be deleted
        delete OB.Properties['OBUIAPP_DefaultSavedView' + '_' + standardWindow.windowId];
      }
    }
  });
};
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2011-2013 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s): ___________
 ************************************************************************
 */

// = Manage Views Popups =
// Contains the implementation of the popups which are called
// from the toolbar button when the user does save or delete of a view.
// There are 2 popups: one to save, and one to delete
//
// The implementation is split in 3 parts:
// - OB.Personalization.ManageViewsPopupProperties: common properties for 
//  both the save and the delete function.
// - OB.Personalization.ManageViewsPopupPropertiesDelete: properties/overrides
//  specific for the delete popup.
// - OB.Personalization.ManageViewsPopupPropertiesSave: properties specific 
//  for the save popup
// ** {{{OB.Personalization.ManageViewsPopupProperties}}} **
// The common part of the popup which allows to save or delete 
// a view. 
OB.Personalization.ManageViewsPopupProperties = {
  toggleSave: true,
  showMaximizeButton: false,
  showMinimizeButton: false,

  initWidget: function () {
    var layout, window = this,
        form, saveButton, buttonsLayout;

    // create a save button, it is enabled/disabled
    // from the form
    saveButton = isc.OBFormButton.create({
      title: this.actionLabel,
      action: function () {
        // the doAction is overridden/implemented in the 
        // specific save/delete properties
        window.doAction(this.form);
        window.closeClick();
      },
      disabled: this.toggleSave
    });

    form = isc.DynamicForm.create({
      // TODO: parts are the same as in the user-profile 
      // navigation bar component form, should be put in
      // a generic style somewhere
      autoFocus: true,
      overflow: 'visible',
      titleOrientation: 'top',
      height: 1,
      width: 1,
      titleSuffix: '</b>',
      titlePrefix: '<b>',
      requiredTitleSuffix: ' *</b>',
      requiredRightTitlePrefix: '<b>* ',
      rightTitlePrefix: '<b>',
      rightTitleSuffix: '</b>',
      numCols: 1,
      errorOrientation: 'right',
      toggleSave: this.toggleSave,
      itemChanged: function () {
        var pers = this.getValue("personalization");
        if (this.toggleSave) {
          // enable the save button when there is a 
          // personalization record chosen/name entered
          saveButton.setDisabled(!pers);
        }
      },

      handleKeyPress: function () {
        var key = isc.EH.lastEvent.keyName;
        if (key === 'Enter' && !this.saveButton.isDisabled()) {
          this.saveButton.action();
          return false;
        } else {
          return this.Super('handleKeyPress', arguments);
        }
      },

      fields: this.getFields()
    });
    saveButton.form = form;
    form.saveButton = saveButton;

    // create some layouts to put the form/buttons
    // in the popup window
    layout = isc.VLayout.create({
      defaultLayoutAlign: 'center',
      width: '100%',
      height: '100%'
    });
    this.addItem(layout);

    buttonsLayout = isc.HStack.create({}, OB.Styles.Personalization.popupButtonLayout);
    buttonsLayout.addMembers(saveButton);
    buttonsLayout.addMembers(isc.OBFormButton.create({
      title: OB.I18N.getLabel('UINAVBA_Cancel'),
      click: function () {
        window.closeClick();
      }
    }));

    layout.addMember(form);
    layout.addMember(buttonsLayout);

    this.Super('initWidget', arguments);
  },

  getFields: function () {
    // is overridden/implemented in the specific 
    // implementation below.
  }
};

//** {{{OB.Personalization.ManageViewsPopupPropertiesDelete}}} **
//Contains delete specific properties for the popup.
OB.Personalization.ManageViewsPopupPropertiesDefault = {
  title: OB.I18N.getLabel('OBUIAPP_SetDefaultView'),
  actionLabel: OB.I18N.getLabel('OBUIAPP_Apply'),
  toggleSave: true,

  getFields: function () {
    var i, value, personalization = this.standardWindow.getClass().personalization,
        views = personalization && personalization.views ? personalization.views : [],
        valueMap = {},
        flds = [],
        standardWindow = this.standardWindow,
        length, originalView = standardWindow.getClass().originalView;

    if (views) {
      length = views.length;
      for (i = 0; i < length; i++) {
        valueMap[views[i].personalizationId] = views[i].viewDefinition.name;
      }
      valueMap[originalView.personalizationId] = originalView.viewDefinition.name;
    }

    flds[0] = isc.addProperties({
      name: 'personalization',
      title: OB.I18N.getLabel('OBUIAPP_DefaultView'),
      valueMap: valueMap,
      editorType: 'select',
      addUnknownValues: false,
      required: true,
      changed: function () {
        // enable the save button when there is a change
        this.form.saveButton.setDisabled(false);
        // don't let it be disabled again
        this.form.toggleSave = false;
      }
    }, OB.Styles.Personalization.viewFieldDefaults, OB.Styles.OBFormField.DefaultComboBox);

    // set the value
    value = OB.PropertyStore.get('OBUIAPP_DefaultSavedView', this.standardWindow.windowId);
    if (value && flds[0].valueMap[value]) {
      flds[0].value = value;
    } else {
      flds[0].value = 'dummyId';
    }

    return flds;
  },

  // do the set default action
  doAction: function (form) {
    var personalizationId = form.getValue("personalization");
    OB.PropertyStore.set('OBUIAPP_DefaultSavedView', personalizationId, this.standardWindow.windowId);
  }
};

//** {{{OB.Personalization.ManageViewsPopupPropertiesDelete}}} **
// Contains delete specific properties for the popup.
OB.Personalization.ManageViewsPopupPropertiesDelete = {
  title: OB.I18N.getLabel('OBUIAPP_DeleteView'),
  actionLabel: OB.I18N.getLabel('OBUIAPP_Delete'),

  // creates one combo with the viewdefinitions which can
  // be deleted by the current user
  getFields: function () {
    var i, personalization = this.standardWindow.getClass().personalization,
        views = personalization && personalization.views ? personalization.views : [],
        valueMap = {},
        flds = [],
        standardWindow = this.standardWindow,
        length;

    if (views) {
      length = views.length;
      for (i = 0; i < length; i++) {
        if (views[i].canEdit) {
          valueMap[views[i].personalizationId] = views[i].viewDefinition.name;
        }
      }
    }

    flds[0] = isc.addProperties({
      name: 'personalization',
      title: OB.I18N.getLabel('OBUIAPP_View'),
      valueMap: valueMap,
      editorType: 'select',
      required: true,
      allowEmptyValue: true
    }, OB.Styles.Personalization.viewFieldDefaults, OB.Styles.OBFormField.DefaultComboBox);
    return flds;
  },

  // do the delete action
  doAction: function (form) {
    var standardWindow = this.standardWindow,
        personalizationId = form.getValue("personalization");
    OB.Personalization.deleteViewDefinition(standardWindow, personalizationId);
  }
};

//** {{{OB.Personalization.ManageViewsPopupPropertiesSave}}} **
//Contains delete specific properties for the popup.
OB.Personalization.ManageViewsPopupPropertiesSave = {
  title: OB.I18N.getLabel('OBUIAPP_SaveView'),

  actionLabel: OB.I18N.getLabel('OBUIAPP_Save'),

  // 3 combo fields are created: views, level and level value
  // the last 2 are only created if the user is allowed to
  // change or set views for different levels
  getFields: function () {
    var i, formData, valueMap = {},
        levelMapSet = false,
        levelMap = {
        '': ''
        },
        flds = [],
        length, standardWindow = this.standardWindow,
        personalization = standardWindow.getClass().personalization,
        views = personalization && personalization.views ? personalization.views : [];

    // create the view combo
    if (views) {
      length = views.length;
      for (i = 0; i < length; i++) {
        if (views[i].canEdit) {
          valueMap[views[i].personalizationId] = views[i].viewDefinition.name;
        }
      }
    }

    flds[0] = isc.addProperties({
      standardWindow: standardWindow,
      name: 'personalization',
      title: OB.I18N.getLabel('OBUIAPP_SaveAs'),
      valueMap: valueMap,
      editorType: 'ComboBoxItem',
      allowEmptyValue: true,
      required: true,

      // if changed, then set the level and levelvalue
      // fields to the current level of the personalization
      changed: function (form, item, value) {
        var i, levelField = form.getField('level'),
            length, levelValueField = form.getField('levelValue'),
            personalization = this.standardWindow.getClass().personalization,
            views;

        // find the personalization
        if (levelField && personalization.views) {
          // and the view, and set the level and level value
          // combos
          views = personalization.views;
          length = views.length;
          for (i = 0; i < length; i++) {
            if (views[i].personalizationId === value) {
              if (views[i].clientId) {
                levelField.storeValue('clients');
                levelValueField.storeValue(views[i].clientId);
              }
              if (views[i].orgId) {
                levelField.storeValue('orgs');
                levelValueField.storeValue(views[i].orgId);
              }
              if (views[i].roleId) {
                levelField.storeValue('roles');
                levelValueField.storeValue(views[i].roleId);
              }
              if (views[i].viewDefinition) {
                form.setValue('default', views[i].viewDefinition.isDefault);
              }
              levelField.updateValueMap(true);
              levelValueField.updateValueMap(true);
            }
          }
        }
      }
    }, OB.Styles.Personalization.viewFieldDefaults, OB.Styles.OBFormField.DefaultComboBox);

    // create the level combo
    if (personalization && personalization.formData) {
      formData = personalization.formData;
      // note the key in the levelMap (clients, orgs, roles) corresponds
      // to the property name in the formData
      if (formData.clients) {
        levelMap.clients = OB.I18N.getLabel("OBUIAPP_Client");
        levelMapSet = true;
      }
      if (formData.orgs) {
        levelMap.orgs = OB.I18N.getLabel("OBUIAPP_Organization");
        levelMapSet = true;
      }
      if (formData.roles) {
        levelMap.roles = OB.I18N.getLabel("OBUIAPP_Role");
        levelMapSet = true;
      }
    }

    // if the user is allowed to set views on different 
    // levels, then create the 2 combos
    if (levelMapSet) {
      flds[1] = isc.addProperties({
        name: 'level',
        title: OB.I18N.getLabel('OBUIAPP_Level'),
        valueMap: levelMap,
        editorType: 'select',
        defaultToFirstOption: true,
        emptyDisplayValue: OB.I18N.getLabel('OBUIAPP_User'),
        changed: function (form, item, value) {
          // if the level combo changes, then set the
          // level value map (so that it shows clients, orgs
          // or roles resp.)
          var levelValueField = form.getField('levelValue');
          levelValueField.setValueMap(formData[value]);
          levelValueField.clearValue();
        }
      }, OB.Styles.Personalization.viewFieldDefaults, OB.Styles.OBFormField.DefaultComboBox);

      flds[2] = isc.addProperties({
        name: 'levelValue',
        title: OB.I18N.getLabel('OBUIAPP_Value'),
        valueMap: {},
        editorType: 'select',
        emptyDisplayValue: OB.User.userName,
        defaultToFirstOption: true
      }, OB.Styles.Personalization.viewFieldDefaults, OB.Styles.OBFormField.DefaultComboBox);

      // and create the checkbox to let it be the default 
      // for other users
      flds[3] = isc.addProperties({
        name: 'default',
        title: OB.I18N.getLabel('OBUIAPP_DefaultView'),
        editorType: 'OBCheckboxItem'
      }, OB.Styles.Personalization.viewFieldDefaults, OB.Styles.OBFormField.DefaultCheckbox);
    }
    return flds;
  },

  doAction: function (form) {
    var name, levelInformation = {},
        persId = {},
        level = form.getValue('level'),
        levelValue = form.getValue('levelValue');

    if (level === 'clients' && levelValue) {
      levelInformation.clientId = levelValue;
    }
    if (level === 'roles' && levelValue) {
      levelInformation.roleId = levelValue;
    }
    if (level === 'orgs' && levelValue) {
      levelInformation.orgId = levelValue;
    }
    if (!levelInformation.clientId && !levelInformation.orgId && !levelInformation.roleId) {
      levelInformation.userId = OB.User.id;
    }
    persId = form.getValue("personalization");
    name = form.getField("personalization").getDisplayValue();

    // same value, the user typed in a new name
    if (name === persId) {
      persId = null;
    }

    OB.Personalization.storeViewDefinition(this.standardWindow, levelInformation, persId, name, form.getValue('default'));
  }
};
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2011-2013 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s): ___________
 ************************************************************************
 */

// = Manage views toolbar buttons =
// Registers button to open the menu which shows the available views
// and the save/delete option (if enabled).
(function () {
  var manageViewButtonProperties = {

    initWidget: function () {
      this.menu = isc.Menu.create({
        button: this,

        // overridden to get much simpler custom style name
        getBaseStyle: function (record, rowNum, colNum) {
          if (colNum === 0) {
            return this.baseStyle + 'Icon';
          }
          if (record.showSeparator) {
            return this.baseStyle + 'Separator';
          }
          return this.baseStyle;
        },

        itemClick: function (item, colNum) {
          var standardWindow = this.button.view.standardWindow;
          if (item.viewDefinition) {
            if (item.originalView) {
              standardWindow.clearLastViewPersonalization();
            }
            delete standardWindow.lastViewApplied;

            OB.Personalization.applyViewDefinition(item.personalizationId, item.viewDefinition, this.button.view.standardWindow);
          } else {
            item.doClick(this.button.view.standardWindow);
          }
        }
      }, OB.Styles.Personalization.Menu);
    },

    showMenu: function () {
      if (!OB.Utilities.checkProfessionalLicense(
      OB.I18N.getLabel('OBUIAPP_ActivateMessageWindowPersonalization'))) {
        return;
      }
      return this.Super('showMenu', arguments);
    },

    // shows the menu with the available views and the save 
    // and delete option
    action: function () {
      var data = [],
          icon, i, item, undef, view, formData, standardWindow = this.view.standardWindow,
          adminLevel = false,
          length, viewSelected = false,
          personalization = standardWindow.getClass().personalization,
          views = personalization && personalization.views ? personalization.views : [],
          canDelete = false;

      if (!OB.Utilities.checkProfessionalLicense(
      OB.I18N.getLabel('OBUIAPP_ActivateMessagePersonalization'))) {
        return;
      }

      // add the standard view, but make a copy so that it is not added
      // to the real list of editable/deletable views
      views = isc.shallowClone(views);
      views.push(standardWindow.getClass().originalView);

      if (!standardWindow.selectedPersonalizationId) {
        if (!standardWindow.lastViewApplied) {
          standardWindow.selectedPersonalizationId = standardWindow.getClass().originalView.personalizationId;
        }
      }

      // create the list of current views to show
      length = views.length;
      for (i = 0; i < length; i++) {
        view = views[i];
        canDelete = view.canEdit || canDelete;

        if (standardWindow.selectedPersonalizationId && view.personalizationId === standardWindow.selectedPersonalizationId) {
          icon = this.menu.itemIcon;
        } else {
          icon = null;
        }

        item = {
          title: view.viewDefinition.name,
          icon: icon,
          personalizationId: view.personalizationId,
          viewDefinition: view.viewDefinition
        };

        if (view.originalView) {
          item.originalView = true;
        }

        data.push(item);
      }

      // compute the menu items, only if the user is allowed
      // to personalize
      if (this.isWindowPersonalizationAllowed()) {

        if (standardWindow.getClass().personalization && standardWindow.getClass().personalization.formData) {
          formData = standardWindow.getClass().personalization.formData;
          if (formData.clients || formData.orgs || formData.roles) {
            adminLevel = true;
          }
        }

        data.push({
          title: OB.I18N.getLabel('OBUIAPP_SaveView'),
          showSeparator: data.length > 0,
          doClick: function (standardWindow) {
            var popup = isc.OBPopup.create({
              standardWindow: standardWindow
            }, OB.Personalization.ManageViewsPopupProperties, OB.Personalization.ManageViewsPopupPropertiesSave, adminLevel ? OB.Styles.Personalization.saveViewPopupLarge : OB.Styles.Personalization.saveViewPopupSmall);
            popup.show();
          }
        });

        // if there are views allow to choose a default
        if (views.length > 0) {
          data.push({
            title: OB.I18N.getLabel('OBUIAPP_SetDefaultView'),
            standardWindow: standardWindow,
            doClick: function (standardWindow) {
              var popup = isc.OBPopup.create({
                standardWindow: standardWindow
              }, OB.Personalization.ManageViewsPopupProperties, OB.Personalization.ManageViewsPopupPropertiesDefault, OB.Styles.Personalization.deleteViewPopup);
              popup.show();
            }
          });
        }

        // only show the delete option if there are deletable options        
        if (canDelete) {
          data.push({
            title: OB.I18N.getLabel('OBUIAPP_DeleteView'),
            standardWindow: standardWindow,
            doClick: function (standardWindow) {
              var popup = isc.OBPopup.create({
                standardWindow: standardWindow
              }, OB.Personalization.ManageViewsPopupProperties, OB.Personalization.ManageViewsPopupPropertiesDelete, OB.Styles.Personalization.deleteViewPopup);
              popup.show();
            }
          });
        }
      }

      if (data.length === 0) {
        // this can not really happen, the button should be disabled
        return;
      }

      this.menu.setData(data);

      this.Super('action', arguments);
    },
    disabled: false,
    buttonType: 'manageviews',
    prompt: OB.I18N.getLabel('OBUIAPP_ManageViews_Toolbar_Button'),
    updateState: function () {
      this.resetBaseStyle();

      // no items are shown in this case
      if (!this.isWindowPersonalizationAllowed() && !this.viewsToSelect()) {
        this.setDisabled(true);
      } else {
        this.setDisabled(false);
      }

      this.show();
    },

    viewsToSelect: function () {
      // standardwindow is not set during initialization
      var pers = (this.view.standardWindow ? this.view.standardWindow.getClass().personalization : null);
      return (pers && pers.views && pers.views.length > 0);
    },

    isWindowPersonalizationAllowed: function () {
      var propValue, undef, standardWindow = this.view.standardWindow,
          personalization = (standardWindow ? standardWindow.getClass().personalization : null),
          formData = (personalization ? personalization.formData : null);

      // standardwindow is not set during initialization
      // don't set the variable yet, but do not allow either
      if (!standardWindow) {
        return false;
      }

      // note: false is not cached as during initialization
      // things can be false
      if (this.userWindowPersonalizationAllowed === undef) {
        // if an admin then allow personalization
        if (formData && (formData.orgs || formData.clients || formData.roles)) {
          this.userWindowPersonalizationAllowed = true;
        } else {
          propValue = OB.PropertyStore.get('OBUIAPP_WindowPersonalization_Override', standardWindow ? standardWindow.windowId : null);
          if (propValue === 'false' || propValue === 'N') {
            return false;
          } else {
            this.userWindowPersonalizationAllowed = true;
          }
        }
      }
      return this.userWindowPersonalizationAllowed;
    },
    keyboardShortcutId: 'ToolBar_ManageViews'
  };

  OB.ToolbarRegistry.registerButton(manageViewButtonProperties.buttonType, isc.OBToolbarIconButton, manageViewButtonProperties, 320, null, null, false);

}());
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distribfuted  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2011 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */

isc.defineClass('OBPickAndExecuteDataSource', isc.OBRestDataSource);
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distribfuted  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2011-2013 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */

isc.defineClass('OBPickAndExecuteGrid', isc.OBGrid);

// == OBPickAndExecuteGrid ==
//   OBPickAndExecuteGrid is the grid that is the actual parameter of the
//   OBPickAndExecuteView class.
isc.OBPickAndExecuteGrid.addProperties({
  dataProperties: {
    useClientFiltering: false,
    useClientSorting: false
  },
  view: null,
  dataSource: null,
  showFilterEditor: true,
  showErrorIcons: false,

  // Editing
  canEdit: true,
  editEvent: isc.EH.CLICK,
  autoSaveEdits: false,

  selectionAppearance: 'checkbox',
  autoFitFieldWidths: true,
  autoFitWidthApproach: 'title',
  canAutoFitFields: false,
  minFieldWidth: 75,
  width: '100%',
  height: '100%',
  autoFitFieldsFillViewport: true,
  confirmDiscardEdits: false,
  animateRemoveRecord: false,
  removeFieldProperties: {
    width: 32
  },

  //The Cell should be validated each time the focus is changed.
  validateByCell: true,
  // default selection
  selectionProperty: 'obSelected',

  shouldFixRowHeight: function () {
    return true;
  },

  initWidget: function () {
    var i, len = this.fields.length,
        theGrid;

    this.selectedIds = [];
    this.deselectedIds = [];

    // the origSetValuesAsCriteria member is added as 'class' level
    // we only need to do it once
    if (!this.filterEditorProperties.origSetValuesAsCriteria) {

      this.filterEditorProperties.origSetValuesAsCriteria = this.filterEditorProperties.setValuesAsCriteria;

      this.filterEditorProperties.setValuesAsCriteria = function (criteria, advanced) {
        var orig = (criteria && criteria.criteria) || [],
            len = orig.length,
            crit, i;

        if (criteria._OrExpression) {
          for (i = 0; i < len; i++) {
            if (orig[i].fieldName && orig[i].fieldName === 'id') {
              continue;
            }

            if (orig[i].operator && orig[i]._constructor) {
              crit = orig[i];
              break;
            }
          }
        } else {
          crit = criteria;
        }

        this.origSetValuesAsCriteria(crit, advanced);
      };
    }

    // adding a reference to the plain field object to this grid
    // useful when working with custom field validators
    for (i = 0; i < len; i++) {
      this.fields[i].grid = this;
    }

    // required to show the funnel icon and to work
    this.filterClause = this.gridProperties.filterClause;
    this.sqlFilterClause = this.gridProperties.sqlFilterClause;
    this.lazyFiltering = this.gridProperties.lazyFiltering;
    if ((this.filterClause || this.sqlFilterClause) && this.gridProperties.filterName) {
      this.view.messageBar.setMessage(isc.OBMessageBar.TYPE_INFO, '<div><div class="' + OB.Styles.MessageBar.leftMsgContainerStyle + '">' + this.gridProperties.filterName + '<br/>' + OB.I18N.getLabel('OBUIAPP_ClearFilters') + '</div></div>', ' ');
      this.view.messageBar.hasFilterMessage = true;
    }

    this.orderByClause = this.gridProperties.orderByClause;
    this.sqlOrderByClause = this.gridProperties.sqlOrderByClause;

    this.checkboxFieldProperties = isc.addProperties({}, this.checkboxFieldProperties | {}, {
      canFilter: true,
      frozen: true,
      canFreeze: true,
      showHover: true,
      prompt: OB.I18N.getLabel('OBUIAPP_GridSelectAllColumnPrompt'),
      filterEditorType: 'StaticTextItem'
    });

    OB.TestRegistry.register('org.openbravo.client.application.process.pickandexecute.Grid', this);

    // FIXME:---
    this.editFormProperties = {
      view: this.view.buttonOwnerView
    };

    // set properties defined for the grid
    theGrid = this.view.viewProperties.fields.find(true, 'isGrid');
    if (theGrid) {
      this.viewProperties = theGrid.viewProperties;
    } else {
      window.warn('grid fiel not found!');
    }

    this.autoFitExpandField = this.getLongestFieldName();

    this.Super('initWidget', arguments);
  },

  getLongestFieldName: function () {
    var len = this.fields.length,
        maxWidth = -1,
        i, longestFieldName;
    for (i = 0; i < len; i++) {
      if (this.fields[i].displaylength > maxWidth) {
        longestFieldName = this.fields[i].name;
        maxWidth = this.fields[i].displaylength;
      }
    }
    return longestFieldName;
  },

  // when starting row editing make sure that the current
  // value and identifier are part of a valuemap
  // so that the combo shows the correct value without 
  // loading it from the backend
  rowEditorEnter: function (record, editValues, rowNum) {
    if (this.view.actionHandler !== "org.openbravo.advpaymentmngt.actionHandler.ModifyPaymentPlanActionHandler") {
      var i = 0,
          editRecord = this.getEditedRecord(rowNum),
          gridFld, identifier, formFld, value, form = this.getEditForm();

      if (editRecord) {
        // go through the fields and set the edit values
        for (i = 0; i < this.getFields().length; i++) {
          gridFld = this.getFields()[i];
          formFld = form.getField(gridFld.name);
          value = editRecord[gridFld.name];
          identifier = editRecord[gridFld.name + OB.Constants.FIELDSEPARATOR + OB.Constants.IDENTIFIER];
          if (formFld && value && identifier) {
            if (formFld.setEntry) {
              formFld.setEntry(value, identifier);
            } else {
              if (!formFld.valueMap) {
                formFld.valueMap = {};
              }
              formFld.valueMap[value] = identifier;
              form.setValue(formFld, value);
            }
          }
        }
      }
    }
    return this.Super('rowEditorEnter', arguments);
  },

  selectionChanged: function (record, state) {
    var recordIdx;

    if (this.viewProperties.selectionFn) {
      this.viewProperties.selectionFn(this, record, state);
    }

    recordIdx = this.getRecordIndex(record);

    if (!state && recordIdx !== -1) {
      this.discardEdits(recordIdx);
    }

    this.selectionUpdated(record, this.getSelectedRecords());

    this.Super('selectionChanged', arguments);
  },

  selectionUpdated: function (record, recordList) {
    var i, j, len = recordList.length,
        prevSelectedLen = this.selectedIds.length,
        recordId, found;

    // Look for deselected records (records in selectedIds not present in recordList)
    for (i = 0; i < prevSelectedLen; i++) {
      recordId = this.selectedIds[i];
      found = false;
      for (j = 0; j < len; j++) {
        if (recordId === recordList[j].id) {
          found = true;
          break;
        }
      }
      if (!found) {
        this.deselectedIds.push(recordId);
      }
    }

    this.selectedIds = [];

    for (i = 0; i < len; i++) {
      this.selectedIds.push(recordList[i].id);
      // Remove the record from deselectedIds
      this.deselectedIds.remove(recordList[i].id);
    }
    // refresh it all as multiple lines can be selected
    this.markForRedraw('Selection changed');

    this.Super('selectionUpdated', arguments);
  },

  cellEditEnd: function (editCompletionEvent, newValue, ficCallDone, autoSaveDone) {
    var rowNum = this.getEditRow(),
        colNum = this.getEditCol(),
        editField = this.getEditField(colNum),
        undef;
    if (editField.required) {
      if (newValue === null || newValue === undef) {
        this.setFieldError(rowNum, editField.name, "Invalid Value");
      } else {
        this.clearFieldError(rowNum, editField.name);
      }
    }
    this.Super('cellEditEnd', arguments);
  },

  handleFilterEditorSubmit: function (criteria, context) {
    var ids = [],
        crit = {},
        len = this.selectedIds.length,
        i, c, found;
    //saved Data will be used to retain values after fetch through filters.
    if (len > 0) {
      this.data.savedData = this.data.localData;
    }

    for (i = 0; i < len; i++) {
      ids.push({
        fieldName: 'id',
        operator: 'equals',
        value: this.selectedIds[i]
      });
    }

    if (len > 0) {

      crit._constructor = 'AdvancedCriteria';
      crit._OrExpression = true; // trick to get a really _or_ in the backend
      crit.operator = 'or';
      crit.criteria = ids;

      c = (criteria && criteria.criteria) || [];
      found = false;

      for (i = 0; i < c.length; i++) {
        if (c[i].fieldName && c[i].value !== '') {
          found = true;
          break;
        }
      }

      if (!found) {

        if (!criteria) {
          criteria = {
            _constructor: 'AdvancedCriteria',
            operator: 'and',
            criteria: []
          };
        }

        // adding an *always true* sentence
        criteria.criteria.push({
          fieldName: 'id',
          operator: 'notNull'
        });
      }
      crit.criteria.push(criteria); // original filter
    } else {
      crit = criteria;
    }

    if (this._cleaningFilter) {
      // Always refresh when cleaning the filter
      criteria.criteria.push(isc.OBRestDataSource.getDummyCriterion());
    }

    this.Super('handleFilterEditorSubmit', [crit, context]);
  },

  dataArrived: function (startRow, endRow) {
    var record, i, allRows, selectedLen = this.selectedIds.length,
        len, savedRecord, index, j, fields;
    fields = this.getFields();
    for (i = 0; i < selectedLen; i++) {
      record = this.data.findByKey(this.selectedIds[i]);
      if (record) {
        record[this.selectionProperty] = true;
        if (this.data.savedData) {
          savedRecord = this.data.savedData.find('id', this.selectedIds[i]);
          //Setting editable fields from saved Data to retain values.
          for (j = 0; j < fields.length; j++) {
            if (fields[j].canEdit !== false) {
              record[fields[j].name] = savedRecord[fields[j].name];
            }
          }
        }
      }
    }

    len = this.deselectedIds.length;
    for (i = 0; i < len; i++) {
      record = this.data.findByKey(this.deselectedIds[i]);
      if (record) {
        record[this.selectionProperty] = false;
      }
    }

    if (selectedLen === 0) {
      // push all *selected* rows into selectedIds cache
      allRows = this.data.allRows || [];
      len = allRows.length;
      for (i = 0; i < len; i++) {
        if (allRows[i][this.selectionProperty]) {
          this.selectedIds.push(allRows[i][OB.Constants.ID]);
        }
      }
    }

    this.Super('dataArrived', arguments);
  },

  recordClick: function (grid, record, recordNum, field, fieldNum, value, rawValue) {
    if (fieldNum === 0 && value.indexOf('unchecked.png') !== -1) {
      grid.endEditing();
      return false;
    }
    return this.Super('recordClick', arguments);
  },


  // Dummy "createRecordComponent" to fix issue: https://issues.openbravo.com/view.php?id=19879
  // It seems that if it is not present, Smartclient doesn't perform well the maths to calculate the editing fields width
  createRecordComponent: function (record, colNum) {
    var layout = null;
    if (colNum === 0) {
      layout = isc.Layout.create({
        width: 0,
        height: 0
      });
    }
    return layout;
  },

  getOrgParameter: function () {
    var view = this.view && this.view.buttonOwnerView,
        context, i;

    if (view) {
      context = view.getContextInfo(true, false);

      for (i in context) {
        if (context.hasOwnProperty(i) && i.indexOf('organization') !== -1) {
          return context[i];
        }
      }
    }
    return OB.User.organizationId;
  },

  onFetchData: function (criteria, requestProperties) {
    requestProperties = requestProperties || {};
    requestProperties.params = this.getFetchRequestParams(requestProperties.params);
  },

  clearFilter: function () {
    this.filterClause = null;
    this._cleaningFilter = true;
    this.Super('clearFilter', arguments);
    delete this._cleaningFilter;
  },

  getFetchRequestParams: function (params) {
    var props = this.gridProperties || {},
        view = this.view && this.view.buttonOwnerView;

    params = params || {};
    if (view) {
      isc.addProperties(params, view.getContextInfo(true, false));
    }

    params[OB.Constants.ORG_PARAMETER] = this.getOrgParameter();

    if (this.orderByClause) {
      params[OB.Constants.ORDERBY_PARAMETER] = this.orderByClause;
    }

    if (this.sqlOrderByClause) {
      params[OB.Constants.SQL_ORDERBY_PARAMETER] = this.sqlOrderByClause;
    }

    if (this.filterClause) {
      if (props.whereClause) {
        params[OB.Constants.WHERE_PARAMETER] = ' ((' + props.whereClause + ') and (' + this.filterClause + ")) ";
      } else {
        params[OB.Constants.WHERE_PARAMETER] = this.filterClause;
      }
    } else if (props.whereClause) {
      params[OB.Constants.WHERE_PARAMETER] = props.whereClause;
    } else {
      params[OB.Constants.WHERE_PARAMETER] = null;
    }

    if (this.sqlFilterClause) {
      if (props.sqlWhereClause) {
        params[OB.Constants.SQL_WHERE_PARAMETER] = ' ((' + props.sqlWhereClause + ') and (' + this.sqlFilterClause + ")) ";
      } else {
        params[OB.Constants.SQL_WHERE_PARAMETER] = this.sqlFilterClause;
      }
    } else if (props.sqlWhereClause) {
      params[OB.Constants.SQL_WHERE_PARAMETER] = props.sqlWhereClause;
    } else {
      params[OB.Constants.SQL_WHERE_PARAMETER] = null;
    }

    return params;
  },

  getFieldByColumnName: function (columnName) {
    var i, len = this.fields.length,
        colName;

    if (!this.fieldsByColumnName) {
      this.fieldsByColumnName = [];
      for (i = 0; i < len; i++) {
        colName = this.fields[i].columnName;
        if (colName) {
          this.fieldsByColumnName[colName] = this.fields[i];
        }
      }
    }

    return this.fieldsByColumnName[columnName];
  },

  setValueMap: function (field, entries) {
    var len = entries.length,
        map = {},
        i, undef;

    for (i = 0; i < len; i++) {
      if (entries[i][OB.Constants.ID] !== undef) {
        map[entries[i][OB.Constants.ID]] = entries[i][OB.Constants.IDENTIFIER];
      }
    }

    this.Super('setValueMap', [field, map]);
  },

  processColumnValue: function (rowNum, columnName, columnValue) {
    var field;
    if (!columnValue) {
      return;
    }

    if (columnValue.entries) {
      field = this.getFieldByColumnName(columnName);
      if (!field) {
        return;
      }
      this.setValueMap(field.name, columnValue.entries);
    }
  },

  processFICReturn: function (response, data, request) {
    var context = response && response.clientContext,
        rowNum = context && context.rowNum,
        grid = context && context.grid,
        columnValues, prop, value, undef;


    if (rowNum === undef || !data || !data.columnValues) {
      return;
    }

    columnValues = data.columnValues;

    for (prop in columnValues) {
      if (columnValues.hasOwnProperty(prop)) {
        grid.processColumnValue(rowNum, prop, columnValues[prop]);
      }
    }
  },

  getContextInfo: function (rowNum) {
    var view = this.view && this.view.buttonOwnerView,
        contextInfo, record, fields, len, fld, i, value, undef, type;

    if (!view) {
      return;
    }
    contextInfo = isc.addProperties({}, this.view.parentWindow.activeView.getContextInfo(false, true, false, true));
    record = isc.addProperties({}, this.getRecord(rowNum), this.getEditValues(rowNum));
    fields = this.viewProperties.fields;
    len = fields.length;

    for (i = 0; i < len; i++) {
      fld = fields[i];
      value = record[fld.name];
      if (value !== undef) {
        if (fld.type) {
          type = isc.SimpleType.getType(fld.type);
          if (type.createClassicString) {
            contextInfo[fld.inpColumnName] = type.createClassicString(value);
          } else {
            contextInfo[fld.inpColumnName] = view.convertContextValue(value, fld.type);
          }
        } else {
          contextInfo[fld.inpColumnName] = view.convertContextValue(value, fld.type);
        }
      }
    }

    return contextInfo;
  },

  retrieveInitialValues: function (rowNum, colNum, newCell, newRow, suppressFocus) {
    var requestParams, allProperties, i, record;

    allProperties = this.getContextInfo(rowNum);
    record = this.getRecord(rowNum);

    requestParams = {
      MODE: (newRow ? 'NEW' : 'EDIT'),
      PARENT_ID: null,
      TAB_ID: this.viewProperties.tabId,
      ROW_ID: (!newRow && record ? record[OB.Constants.ID] : null)
    };

    OB.RemoteCallManager.call('org.openbravo.client.application.window.FormInitializationComponent', allProperties, requestParams, this.processFICReturn, {
      grid: this,
      rowNum: rowNum,
      colNum: colNum,
      newCell: newCell,
      newRow: newRow,
      suppressFocus: suppressFocus
    });
  },

  showInlineEditor: function (rowNum, colNum, newCell, newRow, suppressFocus) {
    // retrieve the initial values only if a new row has been selected
    // see issue https://issues.openbravo.com/view.php?id=20653
    if (newRow) {
      if (this.view.actionHandler === "org.openbravo.advpaymentmngt.actionHandler.ModifyPaymentPlanActionHandler") {
        this.retrieveInitialValues(rowNum, colNum, false, false, suppressFocus);
      } else {
        this.retrieveInitialValues(rowNum, colNum, newCell, newRow, suppressFocus);
      }
    }
    this.Super('showInlineEditor', arguments);
  },

  hideInlineEditor: function (focusInBody, suppressCMHide) {
    var ret = this.Super('hideInlineEditor', arguments);
    this.validateRows();
    return ret;
  },

  validateRows: function () {
    var i, row, field, errors, editRowIndexes, editRowIDs, rowIndexID;

    if (!this.neverValidate) {
      return;
    }

    editRowIndexes = this.getAllEditRows();
    editRowIDs = this.getAllEditRows(true);

    for (i = 0; i < this.fields.length; i++) {
      field = this.fields[i];

      if (!field.validationFn) {
        continue;
      }
      for (row = 0; row < this.data.length; row++) {
        errors = this.validateCellValue(row, i, this.data[row][field.name]);
        if (!errors || isc.isA.emptyArray(errors)) {
          if (editRowIndexes.indexOf(row) !== -1) {
            rowIndexID = editRowIDs[editRowIndexes.indexOf(row)];
          } else {
            rowIndexID = row;
          }
          this.clearFieldError(editRowIDs[row], field.name);
        } else {
          this.setFieldError(row, field.name, errors[0]);
        }
      }
    }
    this.recalculateSummaries();
  },

  removeRecord: function (rowNum, record) {
    var remove = true,
        removeFn = this.viewProperties && this.viewProperties.removeFn;

    if (removeFn && isc.isA.Function(removeFn)) {
      remove = removeFn(this, rowNum, record);
    }

    if (!remove) {
      this.validateRows();
      return;
    }

    this.Super('removeRecord', arguments);

    this.validateRows();
  }
});
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distribfuted  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2011-2013 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */

isc.defineClass('OBPickAndExecuteView', isc.VLayout);

// == OBPickAndExecuteView ==
//   OBPickAndExecuteView is the view that contains the grid for the Pick &
//   Execute pattern. It is a special parameter field in OBParameterWindowView
//   consisting in a window reference.
isc.OBPickAndExecuteView.addProperties({
  // Set default properties for the OBPopup container
  showMinimizeButton: true,
  showMaximizeButton: true,
  popupWidth: '90%',
  popupHeight: '90%',
  // Set later inside initWidget
  firstFocusedItem: null,

  // Set now pure P&E layout properties
  width: '100%',
  height: '100%',
  overflow: 'auto',
  autoSize: false,

  dataSource: null,

  viewGrid: null,

  addNewButton: null,

  gridFields: [],

  initWidget: function () {
    var newButton, i, view = this;

    this.prepareGridFields(this.viewProperties.fields);

    if (this.viewProperties.showSelect) {
      this._addIconField();
    }

    if (this.viewProperties.allowDelete) {
      this._addDeleteField();
    }

    this.dataSource = this.viewProperties.dataSource;
    this.dataSource.view = this;
    this.title = this.windowTitle;

    // the datasource object is defined on viewProperties, do not destroy it
    this.dataSource.potentiallyShared = true;

    this.viewGrid = isc.OBPickAndExecuteGrid.create({
      view: this.view,
      fields: this.gridFields,
      height: '*',
      cellHeight: OB.Styles.Process.PickAndExecute.gridCellHeight,
      dataSource: this.dataSource,
      gridProperties: this.viewProperties.gridProperties,
      selectionAppearance: (this.viewProperties.showSelect ? 'checkbox' : 'rowStyle'),
      selectionType: 'simple',
      canRemoveRecords: (this.viewProperties.allowDelete ? true : false),
      saveLocally: (this.viewProperties.allowDelete || this.viewProperties.allowAdd ? true : false),
      autoSaveEdits: (this.viewProperties.allowDelete || this.viewProperties.allowAdd ? true : false),
      neverValidate: (this.viewProperties.allowDelete || this.viewProperties.allowAdd ? true : false),
      showGridSummary: this.showGridSummary
    });


    if (this.viewProperties.allowAdd) {
      this.addNewButton = isc.OBLinkButtonItem.create({
        title: '[ ' + OB.I18N.getLabel('OBUIAPP_AddNew') + ' ]',
        action: function () {
          var newValues;
          view.viewGrid.endEditing();
          if (view.viewProperties.newFn) {
            newValues = view.viewProperties.newFn(view.viewGrid);
          }
          view.viewGrid.startEditingNew(newValues);
        }
      });
    }
    OB.TestRegistry.register('org.openbravo.client.application.process.pickandexecute.button.addnew', this.addNewButton);

    this.members = [this.viewGrid, isc.HLayout.create({
      height: 1,
      overflow: 'visible',
      align: OB.Styles.Process.PickAndExecute.addNewButtonAlign,
      width: '100%',
      visibility: (this.addNewButton ? 'visible' : 'hidden'),
      members: (this.addNewButton ? [this.addNewButton] : [])
    })];

    this.Super('initWidget', arguments);
    OB.TestRegistry.register('org.openbravo.client.application.process.pickandexecute.popup', this);

    if (this.viewGrid.saveLocally) {
      // Using "disconnected" data to avoid update/remove/add operations to the back-end
      // http://www.smartclient.com/docs/8.1/a/b/c/go.html#method..DataSource.fetchData
      this.dataSource.fetchData(this.viewGrid.getFetchRequestParams(), this.viewGrid.ID + ".setData(data)");
    } else {
      this.viewGrid.fetchData();
    }
  },

  prepareGridFields: function (fields) {
    var result = isc.OBStandardView.getPrototype().prepareGridFields.apply(this, arguments),
        i, f, len = result.length;

    for (i = 0; i < len; i++) {
      if (result[i].editorProperties && result[i].editorProperties.disabled) {
        result[i].canEdit = false;
        result[i].readOnlyEditorType = 'OBTextItem';
      } else {
        result[i].validateOnExit = true;
      }

      if (result[i].showGridSummary) {
        if (!this.showGridSummary) {
          this.showGridSummary = true;
        }
      } else {
        result[i].showGridSummary = false;
      }
    }

    this.gridFields = result;
  },

  _addIconField: function () {
    if (!this.gridFields) {
      return;
    }

    this.gridFields.unshift({
      name: '_pin',
      type: 'boolean',
      title: '&nbsp;',
      canEdit: false,
      canFilter: false,
      canSort: false,
      canReorder: false,
      canHide: false,
      frozen: true,
      canFreeze: false,
      canDragResize: false,
      canGroupBy: false,
      autoExpand: false,
      width: OB.Styles.Process.PickAndExecute.pinColumnWidth,
      formatCellValue: function (value, record, rowNum, colNum, grid) {
        if (record[grid.selectionProperty]) {
          return '<img class="' + OB.Styles.Process.PickAndExecute.iconPinStyle + '" src="' + OB.Styles.Process.PickAndExecute.iconPinSrc + '" />';
        }
        return '';
      },
      formatEditorValue: function (value, record, rowNum, colNum, grid) {
        return this.formatCellValue(arguments);
      }
    });
  },

  _addDeleteField: function () {
    if (!this.gridFields) {
      return;
    }
    this.gridFields.unshift({
      name: '_delete',
      type: 'boolean',
      title: '&nbsp;',
      canEdit: false,
      canFilter: false,
      canSort: false,
      canReorder: false,
      canHide: false,
      canFreeze: false,
      canDragResize: false,
      canGroupBy: false,
      autoExpand: false,
      align: 'center',
      cellAlign: 'center',
      isRemoveField: true,
      //width: 32, // No effect
      formatCellValue: function (value, record, rowNum, colNum, grid) {
        var src = OB.Styles.Process.PickAndExecute.iconDeleteSrc,
            srcWithoutExt = src.substring(0, src.lastIndexOf('.')),
            srcExt = src.substring(src.lastIndexOf('.') + 1, src.length),
            onmouseover = 'this.src=\'' + srcWithoutExt + '_Over.' + srcExt + '\'',
            onmousedown = 'this.src=\'' + srcWithoutExt + '_Down.' + srcExt + '\'',
            onmouseout = 'this.src=\'' + src + '\'';
        return '<img class="' + OB.Styles.Process.PickAndExecute.iconDeleteStyle + '" onmouseover="' + onmouseover + '" onmousedown="' + onmousedown + '" onmouseout="' + onmouseout + '" src="' + src + '" />';
      },
      formatEditorValue: function (value, record, rowNum, colNum, grid) {
        return this.formatCellValue(arguments);
      }
    });
  },

  // dummy required by OBStandardView.prepareGridFields
  setFieldFormProperties: function () {}
});
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distribfuted  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2012-2013 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */

isc.defineClass('OBParameterWindowView', isc.VLayout);

// == OBParameterWindowView ==
//   OBParameterWindowView is the view that represents parameter windows, this
//   is, Process Definition with Standard UIPattern. It contains a series of 
//   parameters (fields) and, optionally, a grid.
isc.OBParameterWindowView.addProperties({
  // Set default properties for the OBPopup container
  showMinimizeButton: true,
  showMaximizeButton: true,
  popupWidth: '90%',
  popupHeight: '90%',
  // Set later inside initWidget
  firstFocusedItem: null,

  // Set now pure P&E layout properties
  width: '100%',
  height: '100%',
  overflow: 'auto',
  autoSize: false,

  dataSource: null,

  viewGrid: null,

  addNewButton: null,

  gridFields: [],
  members: [],

  initWidget: function () {
    var i, field, items = [],
        buttonLayout = [],
        okButton, newButton, cancelButton, view = this,
        newShowIf, params;

    // Buttons

    function actionClick() {
      var hasErrors = false,
          grid, fields, selection, len, allRows, lineNumbers, i, j, record, undef;
      view.messageBar.hide();
      if (view.grid && view.grid.viewGrid) {
        grid = view.grid.viewGrid;
        fields = grid.getFields();
        selection = grid.getSelectedRecords() || [];
        len = selection.length;
        allRows = grid.data.allRows || grid.data.localData || grid.data;
        for (i = 0; i < len; i++) {
          record = grid.getEditedRecord(grid.getRecordIndex(selection[i]));
          for (j = 0; j < fields.length; j++) {
            if (fields[j].required) {
              if (record[fields[j].name] === null || record[fields[j] === undef]) {
                hasErrors = true;
                if (lineNumbers === undef) {
                  lineNumbers = grid.getRecordIndex(selection[i]).toString();
                } else {
                  lineNumbers = lineNumbers + "," + grid.getRecordIndex(selection[i]).toString();
                }
              }
            }
          }
        }
      }
      if (!hasErrors) {
        if (view.validate()) {
          view.doProcess(this._buttonValue);
        } else {
          // If the messageBar is visible, it means that it has been set due to a custom validation inside view.validate()
          // so we don't want to overwrite it with the generic OBUIAPP_ErrorInFields message
          if (!view.messageBar.isVisible()) {
            view.messageBar.setMessage(isc.OBMessageBar.TYPE_ERROR, null, OB.I18N.getLabel('OBUIAPP_ErrorInFields'));
          }
        }
      } else {
        view.messageBar.setMessage(isc.OBMessageBar.TYPE_ERROR, null, OB.I18N.getLabel('OBUIAPP_FillMandatoryFields') + " " + lineNumbers);
      }
    }

    okButton = isc.OBFormButton.create({
      title: OB.I18N.getLabel('OBUIAPP_Done'),
      realTitle: '',
      _buttonValue: 'DONE',
      click: actionClick
    });

    if (this.popup) {
      buttonLayout.push(isc.LayoutSpacer.create({}));
    }

    if (this.buttons && !isc.isA.emptyObject(this.buttons)) {
      for (i in this.buttons) {
        if (this.buttons.hasOwnProperty(i)) {

          newButton = isc.OBFormButton.create({
            title: this.buttons[i],
            realTitle: '',
            _buttonValue: i,
            click: actionClick
          });
          buttonLayout.push(newButton);
          OB.TestRegistry.register('org.openbravo.client.application.process.pickandexecute.button.' + i, newButton);

          // pushing a spacer
          if (this.popup) {
            buttonLayout.push(isc.LayoutSpacer.create({
              width: 32
            }));
          }
        }
      }
    } else {
      buttonLayout.push(okButton);
      OB.TestRegistry.register('org.openbravo.client.application.process.pickandexecute.button.ok', okButton);
      if (this.popup) {
        buttonLayout.push(isc.LayoutSpacer.create({
          width: 32
        }));
      }
    }

    if (this.popup) {
      cancelButton = isc.OBFormButton.create({
        title: OB.I18N.getLabel('OBUISC_Dialog.CANCEL_BUTTON_TITLE'),
        realTitle: '',
        click: function () {
          view.closeClick();
        }
      });
      buttonLayout.push(cancelButton);
      buttonLayout.push(isc.LayoutSpacer.create({}));
      OB.TestRegistry.register('org.openbravo.client.application.process.pickandexecute.button.cancel', cancelButton);
    }

    if (!this.popup) {
      this.toolBarLayout = isc.OBToolbar.create({
        view: this,
        leftMembers: [{}],
        rightMembers: buttonLayout
      });
      // this.toolBarLayout.addMems(buttonLayout);
      this.members.push(this.toolBarLayout);
    }

    // Message bar
    this.messageBar = isc.OBMessageBar.create({
      visibility: 'hidden',
      view: this
    });
    this.members.push(this.messageBar);

    newShowIf = function (item, value, form, values) {
      var currentValues = isc.shallowClone(values || form.view.getCurrentValues()),
          context = {},
          originalShowIfValue = false;

      OB.Utilities.fixNull250(currentValues);

      try {
        if (isc.isA.Function(this.originalShowIf)) {
          originalShowIfValue = this.originalShowIf(item, value, form, currentValues, context);
        } else {
          originalShowIfValue = isc.JSON.decode(this.originalShowIf);
        }
      } catch (_exception) {
        isc.warn(_exception + ' ' + _exception.message + ' ' + _exception.stack);
      }
      return originalShowIfValue;
    };

    // Parameters
    if (this.viewProperties.fields) {
      for (i = 0; i < this.viewProperties.fields.length; i++) {
        field = this.viewProperties.fields[i];
        field = isc.addProperties({
          view: this
        }, field);

        if (field.showIf) {
          field.originalShowIf = field.showIf;
          field.showIf = newShowIf;
        }
        if (field.isGrid) {
          this.grid = isc.OBPickAndExecuteView.create(field);
        } else {
          items.push(field);
        }
      }

      if (items.length !== 0) {
        // create form if there items to include
        this.theForm = isc.DynamicForm.create({
          paramWindow: this,
          width: '99%',
          titleSuffix: '',
          requiredTitleSuffix: '',
          autoFocus: true,
          titleOrientation: 'top',
          numCols: 4,
          showErrorIcons: false,
          colWidths: ['*', '*', '*', '*'],
          itemChanged: function (item, newValue) {
            var affectedParams, i, field;

            this.paramWindow.handleReadOnlyLogic();

            // Check validation rules (subordinated fields), when value of a
            // parent field is changed, all its subordinated are reset
            affectedParams = this.paramWindow.dynamicColumns[item.name];
            if (!affectedParams) {
              return;
            }
            for (i = 0; i < affectedParams.length; i++) {
              field = this.getField(affectedParams[i]);
              if (field && field.setValue) {
                field.setValue(null);
              }
            }
          }
        });

        this.theForm.setItems(items);
        this.members.push(this.theForm);
      }
    }
    if (this.grid) {
      this.members.push(this.grid);
    }


    if (this.popup) {
      this.firstFocusedItem = okButton;
      this.popupButtons = isc.HLayout.create({
        align: 'center',
        width: '100%',
        height: OB.Styles.Process.PickAndExecute.buttonLayoutHeight,
        members: [isc.HLayout.create({
          width: 1,
          overflow: 'visible',
          styleName: this.buttonBarStyleName,
          height: this.buttonBarHeight,
          defaultLayoutAlign: 'center',
          members: buttonLayout
        })]
      });
      this.members.push(this.popupButtons);
      this.closeClick = function () {
        this.closeClick = function () {
          return true;
        }; // To avoid loop when "Super call"
        this.parentElement.parentElement.closeClick(); // Super call
      };
    }
    this.loading = OB.Utilities.createLoadingLayout(OB.I18N.getLabel('OBUIAPP_PROCESSING'));
    this.loading.hide();
    this.members.push(this.loading);
    this.Super('initWidget', arguments);

    params = {
      processId: this.processId
    };

    if (this.sourceView) {
      params.context = this.sourceView.getContextInfo(false, true, true, true);
    }

    OB.RemoteCallManager.call('org.openbravo.client.application.process.DefaultsProcessActionHandler', {}, params, function (rpcResponse, data, rpcRequest) {
      view.handleDefaults(data);
    });
  },

  handleResponse: function (refresh, message, responseActions, retryExecution) {
    var window = this.parentWindow,
        tab = OB.MainView.TabSet.getTab(this.viewTabId),
        i;

    // change title to done
    if (tab) {
      tab.setTitle(OB.I18N.getLabel('OBUIAPP_ProcessTitle_Done', [this.tabTitle]));
    }

    this.showProcessing(false);
    if (message) {
      if (this.popup) {
        if (!retryExecution) {
          if (message.title) {
            this.buttonOwnerView.messageBar.setMessage(message.severity, message.title, message.text);
          } else {
            this.buttonOwnerView.messageBar.setMessage(message.severity, message.text);
          }
        } else {
          // Popup has no message bar, showing the message in a warn popup
          isc.warn(message.text);
        }
      } else {
        if (message.title) {
          this.messageBar.setMessage(message.severity, message.title, message.text);
        } else {
          this.messageBar.setMessage(message.severity, message.text);
        }
      }
    }

    if (!retryExecution) {
      this.disableFormItems();
    } else {
      // Show again all toolbar buttons so the process
      // can be called again
      if (this.toolBarLayout) {
        for (i = 0; i < this.toolBarLayout.children.length; i++) {
          if (this.toolBarLayout.children[i].show) {
            this.toolBarLayout.children[i].show();
          }
        }
      }
      if (this.popupButtons) {
        this.popupButtons.show();
      }
    }

    if (responseActions) {
      OB.Utilities.Action.executeJSON(responseActions, null, null, this);
    }

    if (this.popup && !retryExecution) {
      this.buttonOwnerView.setAsActiveView();

      if (refresh) {
        window.refresh();
      }

      this.closeClick = function () {
        return true;
      }; // To avoid loop when "Super call"
      this.parentElement.parentElement.closeClick(); // Super call
    }
  },

  disableFormItems: function () {
    var i, params;
    if (this.theForm && this.theForm.getItems) {
      params = this.theForm.getItems();
      for (i = 0; i < params.length; i++) {
        if (params[i].disable) {
          params[i].disable();
        }
      }
    }
  },

  // dummy required by OBStandardView.prepareGridFields
  setFieldFormProperties: function () {},

  validate: function () {
    var viewGrid, validForm;
    if (this.theForm) {
      validForm = this.theForm.validate();
      if (!validForm) {
        return validForm;
      }
    }

    if (this.grid) {
      viewGrid = this.grid.viewGrid;

      viewGrid.endEditing();
      return !viewGrid.hasErrors();
    }
    return true;
  },

  showProcessing: function (processing) {
    var i;
    if (processing) {
      if (this.theForm) {
        this.theForm.hide();
      }
      if (this.grid) {
        this.grid.hide();
      }
      if (this.popupButtons) {
        this.popupButtons.hide();
      }

      if (this.toolBarLayout) {
        for (i = 0; i < this.toolBarLayout.children.length; i++) {
          if (this.toolBarLayout.children[i].hide) {
            this.toolBarLayout.children[i].hide();
          }
        }
      }

      this.loading.show();
    } else {
      if (this.theForm) {
        this.theForm.show();
      }
      if (this.grid) {
        this.grid.show();
      }
      this.loading.hide();
    }
  },
  doProcess: function (btnValue) {
    var i, tmp, view = this,
        grid, allProperties = (this.sourceView && this.sourceView.getContextInfo(false, true, false, true)) || {},
        selection, len, allRows, params, tab;
    // activeView = view.parentWindow && view.parentWindow.activeView,  ???.
    this.showProcessing(true);

    // change tab title to show executing...
    tab = OB.MainView.TabSet.getTab(this.viewTabId);
    if (tab) {
      tab.setTitle(OB.I18N.getLabel('OBUIAPP_ProcessTitle_Executing', [this.tabTitle]));
    }

    if (this.grid) {
      // TODO: Support for multiple grids
      grid = this.grid.viewGrid;
      selection = grid.getSelectedRecords() || [];
      len = selection.length;
      allRows = grid.data.allRows || grid.data.localData || grid.data;
      allProperties._selection = [];
      allProperties._allRows = [];

      for (i = 0; i < len; i++) {
        tmp = isc.addProperties({}, selection[i], grid.getEditedRecord(grid.getRecordIndex(selection[i])));
        allProperties._selection.push(tmp);
      }

      len = (allRows && allRows.length) || 0;
      // Only send _allRows if all rows are cached
      if (!(grid.data.resultSize) || (len < grid.data.resultSize)) {
        for (i = 0; i < len; i++) {
          tmp = isc.addProperties({}, allRows[i], grid.getEditedRecord(grid.getRecordIndex(allRows[i])));
          allProperties._allRows.push(tmp);
        }
      }
    }

    allProperties._buttonValue = btnValue || 'DONE';

    allProperties._params = this.getContextInfo();

    OB.RemoteCallManager.call(this.actionHandler, allProperties, {
      processId: this.processId,
      windowId: this.windowId
    }, function (rpcResponse, data, rpcRequest) {
      view.handleResponse(true, (data && data.message), (data && data.responseActions), (data && data.retryExecution));
    });
  },

  handleDefaults: function (defaults) {
    var i, field, def;
    if (!this.theForm) {
      return;
    }

    for (i in defaults) {
      if (defaults.hasOwnProperty(i)) {
        def = defaults[i];
        field = this.theForm.getItem(i);
        if (field) {
          if (isc.isA.Object(def)) {
            if (def.identifier && def.value) {
              field.valueMap = field.valueMap || {};
              field.valueMap[def.value] = def.identifier;
              field.setValue(def.value);
            }
          } else {
            field.setValue(def);
          }
        }
      }
    }

    this.handleReadOnlyLogic();

    // redraw to execute display logic
    this.theForm.markForRedraw();
  },

  // Checks params with readonly logic enabling or disabling them based on it
  handleReadOnlyLogic: function () {
    var form, fields, i, field;

    form = this.theForm;
    if (!form) {
      return;
    }

    fields = form.getFields();
    for (i = 0; i < fields.length; i++) {
      field = form.getField(i);
      if (field.readOnlyIf && field.setDisabled) {
        field.setDisabled(field.readOnlyIf(form.getValues()));
      }
    }
  },

  getContextInfo: function () {
    var result = {},
        params, i;
    if (!this.theForm) {
      return result;
    }

    if (this.theForm && this.theForm.getItems) {
      params = this.theForm.getItems();
      for (i = 0; i < params.length; i++) {
        result[params[i].name] = params[i].getValue();
      }
    }

    return result;
  }
});
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2011-2012 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */

OB.RM = OB.RM || {};

/**
 * Check that entered return quantity is less than original inout qty.
 */
OB.RM.RMOrderQtyValidate = function (item, validator, value, record) {
  if (!isc.isA.Number(value)) {
    return false;
  }
  // Check if record has related shipment to skip check.
  if (record.goodsShipmentLine === null || record.goodsShipmentLine === '') {
    return value !== null && value > 0;
  }
  var movementQty = record.movementQuantity !== null ? new BigDecimal(String(record.movementQuantity)) : BigDecimal.prototype.ZERO,
      returnedQty = record.returnQtyOtherRM !== null ? new BigDecimal(String(record.returnQtyOtherRM)) : BigDecimal.prototype.ZERO,
      newReturnedQty = new BigDecimal(String(value));
  if ((value !== null) && (newReturnedQty.compareTo(movementQty.subtract(returnedQty))) <= 0 && (value > 0)) {
    return true;
  } else {
    item.grid.view.messageBar.setMessage(isc.OBMessageBar.TYPE_ERROR, null, OB.I18N.getLabel('OBUIAPP_RM_OutOfRange', [movementQty.subtract(returnedQty).toString()]));
    return false;
  }
};

/**
 * Set quantity, storage bin and condition of the goods.
 */
OB.RM.RMOrderSelectionChange = function (grid, record, state) {
  var contextInfo = null;
  if (state) {
    contextInfo = grid.view.parentWindow.activeView.getContextInfo(false, true, true, true);
    if (!record.returnReason) {
      record.returnReason = contextInfo.inpcReturnReasonId;
    }
  }
};
/**
 * Check that entered received quantity is less than pending qty.
 */
OB.RM.RMReceiptQtyValidate = function (item, validator, value, record) {
  if ((value !== null) && (value <= record.pending) && (value > 0)) {
    return true;
  } else {
    item.grid.view.messageBar.setMessage(isc.OBMessageBar.TYPE_ERROR, null, OB.I18N.getLabel('OBUIAPP_RM_ReceivingMoreThanPending', [record.pending]));
    return false;
  }
};

/**
 * Set quantity, storage bin and condition of the goods.
 */
OB.RM.RMReceiptSelectionChange = function (grid, record, state) {
  var contextInfo = null;
  if (state) {
    record.receiving = record.pending;
    contextInfo = grid.view.parentWindow.activeView.getContextInfo(false, true, true, true);
    record.storageBin = contextInfo.ReturnLocator;
    if (!record.conditionGoods) {
      record.conditionGoods = contextInfo.inpmConditionGoodsId;
    }
  }
};

/**
 * Check that entered shipped quantity is less than pending qty.
 */
OB.RM.RMShipmentQtyValidate = function (item, validator, value, record) {
  var orderLine = record.orderLine,
      pendingQty = record.pending,
      selectedRecords = item.grid.getSelectedRecords(),
      selectedRecordsLength = selectedRecords.length,
      editedRecord = null,
      i;
  // check value is positive and below available qty and pending qty
  if (value === null || value < 0 || value > record.pending || value > record.availableQty) {
    if (record.pending < record.availableQty) {
      item.grid.view.messageBar.setMessage(isc.OBMessageBar.TYPE_ERROR, null, OB.I18N.getLabel('OBUIAPP_RM_MoreThanPending', [record.pending]));
    } else {
      item.grid.view.messageBar.setMessage(isc.OBMessageBar.TYPE_ERROR, null, OB.I18N.getLabel('OBUIAPP_RM_MoreThanAvailable', [record.availableQty]));
    }
    return false;
  }
  // check shipped total quantity for the order line is below pending qty.
  for (i = 0; i < selectedRecordsLength; i++) {
    editedRecord = isc.addProperties({}, selectedRecords[i], item.grid.getEditedRecord(selectedRecords[i]));
    if (editedRecord.orderLine === orderLine) {
      pendingQty -= editedRecord.movementQuantity;
      if (pendingQty < 0) {
        item.grid.view.messageBar.setMessage(isc.OBMessageBar.TYPE_ERROR, null, OB.I18N.getLabel('OBUIAPP_RM_TooMuchShipped', [record.pending]));
        return false;
      }
    }
  }
  return true;
};

/**
 * Set quantity
 */
OB.RM.RMShipmentSelectionChange = function (grid, record, state) {
  var contextInfo = null,
      orderLine = record.orderLine,
      shippedQty = BigDecimal.prototype.ZERO,
      selectedRecords = grid.getSelectedRecords(),
      pending = new BigDecimal(String(record.pending)),
      availableQty = new BigDecimal(String(record.availableQty)),
      editedRecord = null,
      i;
  if (state) {
    // calculate already shipped qty on grid
    for (i = 0; i < selectedRecords.length; i++) {
      editedRecord = isc.addProperties({}, selectedRecords[i], grid.getEditedRecord(selectedRecords[i]));
      if (editedRecord.orderLine === orderLine && selectedRecords[i].id !== record.id) {
        shippedQty = shippedQty.add(new BigDecimal(String(editedRecord.movementQuantity)));
      }
    }
    pending = pending.subtract(shippedQty);
    if (pending.compareTo(availableQty) < 0) {
      record.movementQuantity = pending.toString();
    } else {
      record.movementQuantity = availableQty.toString();
    }
  }
};
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2012 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */

OB.Reservation = OB.Reservation || {};

/**
 * Check that entered quantity to reserve is available in the selected record
 * and that total reserved quantity is below the needed quantity
 */
OB.Reservation.QuantityValidate = function (item, validator, value, record) {
  var availableQty = isc.isA.Number(record.availableQty) ? new BigDecimal(String(record.availableQty)) : BigDecimal.prototype.ZERO,
      releasedQty = isc.isA.Number(record.released) ? new BigDecimal(String(record.released)) : BigDecimal.prototype.ZERO,
      reservedinothersQty = isc.isA.Number(record.reservedinothers) ? new BigDecimal(String(record.reservedinothers)) : BigDecimal.prototype.ZERO,
      quantity = null,
      reservedQty = BigDecimal.prototype.ZERO,
      totalQty = isc.isA.Number(record.reservationQuantity) ? new BigDecimal(String(record.reservationQuantity)) : BigDecimal.prototype.ZERO,
      selectedRecords = item.grid.getSelectedRecords(),
      selectedRecordsLength = selectedRecords.length,
      editedRecord = null,
      i;

  if (!isc.isA.Number(value)) {
    return false;
  }
  if (value === null || value < 0) {
    return false;
  }
  quantity = new BigDecimal(String(value));
  if (quantity.compareTo(availableQty.subtract(reservedinothersQty)) > 0) {
    isc.warn(OB.I18N.getLabel('OBUIAPP_Res_MoreQtyThanAvailable', [record.availableQty, record.reservedinothers]));
    return false;
  }
  if (quantity.compareTo(releasedQty) < 0) {
    isc.warn(OB.I18N.getLabel('OBUIAPP_Res_LessThanReleased', [record.released]));
    return false;
  }
  for (i = 0; i < selectedRecordsLength; i++) {
    editedRecord = isc.addProperties({}, selectedRecords[i], item.grid.getEditedRecord(selectedRecords[i]));
    if (isc.isA.Number(editedRecord.quantity)) {
      reservedQty = reservedQty.add(new BigDecimal(String(editedRecord.quantity)));
    }
  }
  if (reservedQty.compareTo(totalQty) > 0) {
    isc.warn(OB.I18N.getLabel('OBUIAPP_Res_MoreThanReservationQty', [totalQty.toString()]));
    return false;
  }
  // get reservation quantity and released quantity to check totals
  return true;
};

OB.Reservation.PrereservationQuantityValidate = function (item, validator, value, record) {
  var reservedQty = isc.isA.Number(record.reservedQty) ? new BigDecimal(String(record.reservedQty)) : BigDecimal.prototype.ZERO,
      purchasedQty = isc.isA.Number(record.purchasedQty) ? new BigDecimal(String(record.purchasedQty)) : BigDecimal.prototype.ZERO,
      receivedQty = isc.isA.Number(record.receivedQty) ? new BigDecimal(String(record.receivedQty)) : BigDecimal.prototype.ZERO,
      pendingQty = purchasedQty.subtract(receivedQty),
      orderedQuantity = isc.isA.Number(record.orderedQuantity) ? new BigDecimal(String(record.orderedQuantity)) : BigDecimal.prototype.ZERO,
      deliveredQuantity = isc.isA.Number(record.deliveredQuantity) ? new BigDecimal(String(record.deliveredQuantity)) : BigDecimal.prototype.ZERO,
      otherReservedQty = isc.isA.Number(record.otherReservedQty) ? new BigDecimal(String(record.otherReservedQty)) : BigDecimal.prototype.ZERO,
      solTotalReserved = BigDecimal.prototype.ZERO,
      totalQty = BigDecimal.prototype.ZERO,
      selectedRecords = item.grid.getSelectedRecords(),
      selectedRecordsLength = selectedRecords.length,
      editedRecord = null,
      i;


  if (!isc.isA.Number(value)) {
    return false;
  }
  if (value === null || value < 0) {
    return false;
  }
  reservedQty = new BigDecimal(String(value));
  solTotalReserved = reservedQty.add(otherReservedQty);
  if (solTotalReserved.compareTo(orderedQuantity) > 0) {
    isc.warn(OB.I18N.getLabel('OBUIAPP_Res_MoreThanOrderedQty', [record.orderedQuantity, record.otherReservedQty]));
    return false;
  }

  for (i = 0; i < selectedRecordsLength; i++) {
    editedRecord = isc.addProperties({}, selectedRecords[i], item.grid.getEditedRecord(selectedRecords[i]));
    if (isc.isA.Number(editedRecord.reservedQty)) {
      totalQty = totalQty.add(new BigDecimal(String(editedRecord.reservedQty)));
    }
  }
  if (totalQty.compareTo(pendingQty) > 0) {
    isc.warn(OB.I18N.getLabel('OBUIAPP_Res_MoreThanPendingQty', [solTotalReserved.toString()]));
    return false;
  }
  return true;
};
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2011 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */

OB.Styles.OBApplicationMenu = {
  Icons: {
    folderOpened: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/application-menu/iconFolderOpened.png',
    folderClosed: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/application-menu/iconFolderClosed.png',
    window: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/application-menu/iconWindow.png',
    process: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/application-menu/iconProcess.png',
    processManual: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/application-menu/iconProcess.png',
    report: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/application-menu/iconReport.png',
    task: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/application-menu/iconTask.png',
    form: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/application-menu/iconForm.png',
    externalLink: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/application-menu/iconExternalLink.png',
    view: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/application-menu/iconForm.png',
    document: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/application-menu/iconDocument.png'
  }
};


isc.OBApplicationMenuTreeChild.addProperties({
  styleName: 'OBApplicationMenuTree',
  baseStyle: 'OBApplicationMenuTreeItemCell',
  bodyStyleName: 'OBApplicationMenuTreeBody',
  iconBodyStyleName: 'OBApplicationMenuTreeIconBody',
  tableStyle: "OBApplicationMenuTreeTable"
});


isc.OBApplicationMenuTree.addProperties({
  styleName: 'OBApplicationMenuTree',
  baseStyle: 'OBApplicationMenuTreeItemCell',
  bodyStyleName: 'OBApplicationMenuTreeBody',
  iconBodyStyleName: 'OBApplicationMenuTreeIconBody',
  tableStyle: "OBApplicationMenuTreeTable",
  hideButtonLineStyle: 'OBNavBarComponentHideLine',
  submenuOffset: 0,
  submenuImage: {
    src: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/application-menu/subMenu.png',
    height: 7,
    width: 4
  },
  submenuDisabledImage: {
    src: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/application-menu/subMenu_Disabled.png',
    height: 7,
    width: 4
  },
  drawStyle: function () {
    //this.setStyleName(this.styleName);
  },
  showStyle: function () {
    this.menuButton.parentElement.setStyleName('OBNavBarComponentSelected');
  },
  hideStyle: function () {
    this.menuButton.parentElement.setStyleName('OBNavBarComponent');
  }
});


isc.OBApplicationMenuButton.addProperties({
  baseStyle: 'OBNavBarTextButton',
  showMenuButtonImage: false,
  align: 'center',
  height: 26,
  iconHeight: 6,
  iconWidth: 10,
  iconSpacing: 10,
  iconAlign: 'left',
  iconOrientation: 'right',
  nodeIcons: {
    Window: OB.Styles.OBApplicationMenu.Icons.window,
    Process: OB.Styles.OBApplicationMenu.Icons.process,
    ProcessManual: OB.Styles.OBApplicationMenu.Icons.processManual,
    Report: OB.Styles.OBApplicationMenu.Icons.report,
    Task: OB.Styles.OBApplicationMenu.Icons.task,
    Form: OB.Styles.OBApplicationMenu.Icons.form,
    ExternalLink: OB.Styles.OBApplicationMenu.Icons.externalLink,
    Folder: OB.Styles.OBApplicationMenu.Icons.folderOpened,
    View: OB.Styles.OBApplicationMenu.Icons.view
  },
  icon: {
    src: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/navbar/iconOpenDropDown.png'
  },
  showMenuStyle: function () {
    this.parentElement.setStyleName('OBNavBarComponentSelected');
  }
});
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2010-2012 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */


isc.OBTabBarButtonMain.addProperties({
  src: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/blank/blank.gif',
  showSelectedIcon: true,
  showRollOverIcon: true,
  align: 'right',
  width: 1,
  overflow: 'visible',
  capSize: 9,
  titleStyle: 'OBTabBarButtonMainTitle'
});

isc.OBTabSetMain.addProperties({
  tabBarConstructor: isc.OBTabBarMain,
  tabBarPosition: 'top',
  tabBarAlign: 'left',
  width: '100%',
  height: '*',
  overflow: 'hidden',

  // get rid of the margin around the content of a pane
  paneMargin: 0,
  paneContainerMargin: 0,
  paneContainerPadding: 0,
  showPaneContainerEdges: false,

  useSimpleTabs: true,
  tabBarThickness: 30,

  styleName: 'OBTabSetMain',
  simpleTabBaseStyle: 'OBTabBarButtonMain',
  paneContainerClassName: 'OBTabSetMainContainer',

  tabProperties: {
    margin: 0,
    padding: 0
  },

  closeTabIcon: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/tab/tabBarButtonMain_CloseIcon.png',
  closeTabIconSize: 18,

  //symmetricScroller:true,
  scrollerSrc: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/tab/tabBarButtonMain_OverflowIcon.png',
  pickerButtonSrc: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/tab/tabBarButtonMain_OverflowIconPicker.png'
});

isc.OBTabBarMain.addProperties({
  styleName: 'OBTabBarMain'
});


isc.OBTabBarButtonChild.addProperties({
  src: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/blank/blank.gif',
  showSelectedIcon: true,
  showRollOverIcon: true,
  align: 'right',
  width: 1,
  overflow: 'visible',
  capSize: 14,
  titleStyle: 'OBTabBarButtonChildTitle'
});

isc.OBTabSetChild.addProperties({
  tabBarConstructor: isc.OBTabBarChild,
  tabBarPosition: 'top',
  tabBarAlign: 'left',
  width: '100%',
  height: '*',
  overflow: 'hidden',

  // get rid of the margin around the content of a pane
  paneMargin: 0,
  paneContainerMargin: 0,
  paneContainerPadding: 0,
  showPaneContainerEdges: false,

  useSimpleTabs: true,
  tabBarThickness: 38,
  styleName: 'OBTabSetChild',
  simpleTabBaseStyle: 'OBTabBarButtonChild',
  paneContainerClassName: 'OBTabSetChildContainer',

  scrollerSrc: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/tab/tabBarButtonChild_OverflowIcon.png',
  pickerButtonSrc: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/tab/tabBarButtonChild_OverflowIconPicker.png'
});

isc.OBTabBarChild.addProperties({
  styleName: 'OBTabBarChild'
});
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2010-2013 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */

/* =====================================================================
 * Styling properties for:
 * 1) OB Form items
 * 2) OBImageItem
 * 3) SectionItem Button Styles
 * 3) Attachments Styles
 * 4) Image Popup Styles
 =======================================================================*/

/* =====================================================================
 * FormItem styling properties
 =======================================================================*/
isc.OBViewForm.addProperties({
  styleName: 'OBViewForm',
  width: '100%',
  overflow: 'visible',
  //cellBorder: 1, // debug layout
  cellPadding: 0
});

isc.OBFormContainerLayout.addProperties({
  styleName: 'OBFormContainerLayout'
});

isc.OBFormButton.addProperties({
  baseStyle: 'OBFormButton',
  titleStyle: 'OBFormButtonTitle'
});

OB.Styles.OBFormField = {};
OB.Styles.OBFormField.DefaultTextItem = {
  errorOrientation: 'left',
  height: 21,
  width: '100%',
  cellStyle: 'OBFormField',
  titleStyle: 'OBFormFieldLabel',
  textBoxStyle: 'OBFormFieldInput'
};

isc.OBTextItem.addProperties(isc.addProperties({}, OB.Styles.OBFormField.DefaultTextItem));

isc.OBTimeItem.addProperties(isc.addProperties({}, OB.Styles.OBFormField.DefaultTextItem));

isc.OBFKFilterTextItem.addProperties(isc.addProperties({}, OB.Styles.OBFormField.DefaultTextItem));

isc.OBEncryptedItem.addProperties(isc.addProperties({}, OB.Styles.OBFormField.DefaultTextItem));

isc.OBClientClassCanvasItem.addProperties(isc.addProperties({}, OB.Styles.OBFormField.DefaultTextItem));

isc.OBTextAreaItem.addProperties(isc.addProperties({}, OB.Styles.OBFormField.DefaultTextItem));
isc.OBTextAreaItem.addProperties({
  initStyle: function () {
    //To adapt the height this code is used because height: '*' doesn't work properly (conflicts with OBSectionItem).
    var rowSpan = 1;
    var singleRowHeight = this.getHeight();
    var multipleRowHeight = singleRowHeight + 24; // 24px = title height + form item padding defined in CSS
    if (this.rowSpan) {
      rowSpan = this.rowSpan;
    }
    var newHeight = singleRowHeight + (rowSpan - 1) * multipleRowHeight;
    this.setHeight(newHeight);
  }
});

isc.OBRichTextItem.addProperties(isc.addProperties({}, OB.Styles.OBFormField.DefaultTextItem));

isc.OBRichTextItem.addProperties({
  styleCanvasProperties: {
    styleName: 'OBFormFieldInput',
    editorStyleName: 'OBFormFieldInput',
    editAreaStyleName: 'OBFormFieldStatic',
    editAreaBackgroundColor: 'transparent'
  }
});

isc.OBRichTextItem.addProperties({
  initStyle: function () {
    var rowSpan = 4;
    var singleRowHeight = this.height;
    var multipleRowHeight = singleRowHeight + 24; // 24px = title height + form item padding defined in CSS
    this.canvasProperties = isc.addProperties({}, this.canvasProperties || {}, this.styleCanvasProperties);

    if (this.rowSpan) {
      rowSpan = this.rowSpan;
    }
    var newHeight = singleRowHeight + (rowSpan - 1) * multipleRowHeight;
    if (!this.colSpan) {
      this.colSpan = 2;
    }
    this.height = newHeight;
    this.overflow = "hidden";
    this.showEdges = true;
    // Standard control group options include
    // "fontControls", "formatControls", "styleControls" and "colorControls"
    this.controlGroups = ["fontControls", "styleControls"];

  }
});

isc.OBSpinnerItem.addProperties(isc.addProperties({}, OB.Styles.OBFormField.DefaultTextItem));
isc.OBSpinnerItem.INCREASE_ICON = isc.addProperties(isc.OBSpinnerItem.INCREASE_ICON, {
  width: 21,
  height: 11,
  showRollOver: true,
  showFocused: false,
  showDown: true,
  imgOnly: true,
  src: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/form/spinnerControlIncrease.png'
});
isc.OBSpinnerItem.DECREASE_ICON = isc.addProperties(isc.OBSpinnerItem.DECREASE_ICON, {
  width: 21,
  height: 10,
  showRollOver: true,
  showFocused: false,
  showDown: true,
  imgOnly: true,
  src: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/form/spinnerControlDecrease.png'
});

isc.OBPopUpTextAreaItem.addProperties({
  errorOrientation: 'left',
  cellStyle: 'OBFormField',
  titleStyle: 'OBFormFieldLabel',
  textBoxStyle: 'OBFormFieldStatic'
});

OB.Styles.OBFormField.DefaultComboBox = {
  cellStyle: 'OBFormField',
  titleStyle: 'OBFormFieldLabel',
  textBoxStyle: 'OBFormFieldSelectInput',
  pendingTextBoxStyle: null,
  //'OBFormFieldSelectInputPending',
  controlStyle: 'OBFormFieldSelectControl',
  pickerIconStyle: 'OBFormFieldSelectPickerIcon',
  pickListBaseStyle: 'OBFormFieldPickListCell',
  // tallbasestyle is used when the cellheight is different
  // from the standard
  pickListTallBaseStyle: 'OBFormFieldPickListCell',
  pickerIconSrc: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/form/comboBoxPicker.png',
  height: 21,
  pickerIconWidth: 21,
  pickerIconHeight: 21,

  // note the menu-rollover.png which is the background for selected rows
  // is 20
  pickListCellHeight: 22,

  quickRunWidth: 267,
  // fixes issue https://issues.openbravo.com/view.php?id=15105
  quickRunPickListCellHeight: 22,
  pickListHeight: 200,
  autoSizePickList: true,

  pickListProperties: {
    showShadow: false,
    shadowDepth: 5,
    bodyStyleName: 'OBPickListBody'
  },

  errorOrientation: 'left'
};

isc.OBListItem.addProperties(isc.addProperties({}, OB.Styles.OBFormField.DefaultComboBox));

isc.OBFKItem.addProperties(isc.addProperties({}, OB.Styles.OBFormField.DefaultComboBox));

isc.OBFKItem.addProperties({
  newTabIconSrc: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/form/ico-to-new-tab.png',
  newTabIconSize: 8
});

isc.OBYesNoItem.addProperties(isc.addProperties({}, OB.Styles.OBFormField.DefaultComboBox));

OB.Styles.OBFormField.DefaultCheckbox = {
  cellStyle: 'OBFormField',
  titleStyle: 'OBFormFieldLabel',
  textBoxStyle: 'OBFormFieldLabel',
  showValueIconOver: true,
  showValueIconFocused: true,
  showFocused: true,
  defaultValue: false,
  checkedImage: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/form/checked.png',
  uncheckedImage: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/form/unchecked.png'
};

isc.OBCheckboxItem.addProperties(isc.addProperties({}, OB.Styles.OBFormField.DefaultCheckbox));

OB.Styles.OBFormField.DefaultSearch = {
  cellStyle: 'OBFormField',
  titleStyle: 'OBFormFieldLabel',
  textBoxStyle: 'OBFormFieldInput',
  pickerIconHeight: 21,
  pickerIconWidth: 21,
  height: 21,
  // align the button directly to the field
  pickerIconHspace: 0,
  pickerIconSrc: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/form/search_picker.png',
  clearIcon: {
    showRollOver: true,
    showDown: true,
    height: 21,
    width: 21,
    hspace: 0,
    src: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/form/clearField.png',
    prompt: OB.I18N.getLabel('OBUIAPP_ClearIconPrompt')
  },
  newTabIconSrc: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/form/ico-to-new-tab.png',
  newTabIconSize: 8
};

isc.OBSearchItem.addProperties(isc.addProperties({}, OB.Styles.OBFormField.DefaultSearch));

isc.OBLinkItem.addProperties(isc.addProperties({}, OB.Styles.OBFormField.DefaultSearch));

isc.OBLinkButtonItem.addProperties({
  width: 1,
  //To allow button be just text width
  align: 'left',
  baseStyle: 'OBLinkButtonItem',
  showDown: true,
  showFocused: true,
  showFocusedAsOver: false,
  showRollOver: true,
  autoFit: true,
  height: 1,
  overflow: 'visible'
});

isc.OBDateChooser.addProperties({
  headerStyle: 'OBDateChooserButton',
  weekendHeaderStyle: 'OBDateChooserWeekendButton',
  baseNavButtonStyle: 'OBDateChooserNavButton',
  baseWeekdayStyle: 'OBDateChooserWeekday',
  baseWeekendStyle: 'OBDateChooserWeekend',
  baseBottomButtonStyle: 'OBDateChooserBottomButton',
  alternateWeekStyles: false,
  firstDayOfWeek: 1,

  showEdges: true,

  edgeImage: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/form/dateChooser-popup.png',
  edgeSize: 6,
  edgeTop: 26,
  edgeBottom: 5,
  edgeOffsetTop: 1,
  edgeOffsetRight: 5,
  edgeOffsetLeft: 5,
  edgeOffsetBottom: 5,

  todayButtonHeight: 20,

  headerHeight: 24,

  edgeCenterBackgroundColor: '#FFFFFF',
  backgroundColor: null,

  showShadow: false,
  shadowDepth: 6,
  shadowOffset: 5,

  showDoubleYearIcon: false,
  prevYearIcon: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/form/dateChooser-doubleArrow_left.png',
  prevYearIconWidth: 16,
  prevYearIconHeight: 16,
  nextYearIcon: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/form/dateChooser-doubleArrow_right.png',
  nextYearIconWidth: 16,
  nextYearIconHeight: 16,
  prevMonthIcon: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/form/dateChooser-arrow_left.png',
  prevMonthIconWidth: 16,
  prevMonthIconHeight: 16,
  nextMonthIcon: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/form/dateChooser-arrow_right.png',
  nextMonthIconWidth: 16,
  nextMonthIconHeight: 16
});

OB.Styles.OBFormField.DefaultDateInput = {
  cellStyle: 'OBFormField',
  titleStyle: 'OBFormFieldLabel',
  textBoxStyle: 'OBFormFieldInput',
  errorOrientation: 'left',

  pickerIconHSpace: '0',

  textFieldProperties: {
    type: 'OBTextField',
    textBoxStyle: 'OBFormFieldDateInput'
  },

  height: 25,

  pickerIconWidth: 21,
  pickerIconHeight: 21,
  pickerIconSrc: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/form/date_control.png'
};

isc.OBDateItem.addProperties(isc.addProperties({}, OB.Styles.OBFormField.DefaultDateInput));
isc.OBDateItem.addProperties({
  textAlign: 'left'
});

isc.OBDateTimeItem.addProperties(isc.addProperties({}, OB.Styles.OBFormField.DefaultDateInput));

isc.OBTimeItemGrid.addProperties({
  baseStyle: 'OBFormFieldPickListCell',
  bodyStyleName: 'OBPickListBody',
  className: 'scrollingMenu',
  characterWidth: 6,
  height: 178
});

isc.OBNumberItem.addProperties({
  cellStyle: 'OBFormField',
  titleStyle: 'OBFormFieldLabel',
  textBoxStyle: 'OBFormFieldNumberInput',
  errorOrientation: 'left'
});

/* =====================================================================
 * Date range filter item and dialog
 =======================================================================*/

isc.OBDateRangeDialog.addProperties({
  // rounded frame edges
  showEdges: true,
  edgeImage: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/popup/border.png',
  customEdges: null,
  edgeSize: 2,
  edgeTop: 27,
  edgeBottom: 2,
  edgeOffsetTop: 2,
  edgeOffsetRight: 2,
  edgeOffsetBottom: 2,
  showHeaderBackground: false,
  // part of edges
  showHeaderIcon: true,
  isModal: true,
  showModalMask: true,
  dragAppearance: 'target',

  // clear backgroundColor and style since corners are rounded
  backgroundColor: null,
  border: null,
  styleName: 'OBPopup',
  edgeCenterBackgroundColor: '#FFFFFF',
  bodyColor: 'transparent',
  bodyStyle: 'OBPopupBody',
  headerStyle: 'OBPopupHeader',

  layoutMargin: 0,
  membersMargin: 0,

  showShadow: false,
  shadowDepth: 5,
  width: 420,
  height: 170
});

isc.OBDateRangeDialog.changeDefaults('headerDefaults', {
  layoutMargin: 0,
  height: 25
});

isc.OBDateRangeDialog.changeDefaults('headerLabelDefaults', {
  wrap: false,
  width: '100%',
  inherentWidth: true,
  styleName: 'OBPopupHeaderText',
  align: isc.Canvas.CENTER
});

isc.OBDateRangeDialog.changeDefaults('buttonLayoutDefaults', {
  align: 'center'
});

isc.OBDateRangeDialog.changeDefaults('closeButtonDefaults', {
  baseStyle: 'OBPopupIconClose',
  src: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/popup/close.png',
  width: 24,
  height: 20
});

isc.OBDateRangeDialog.changeDefaults('headerIconProperties', {
  styleName: 'OBPopupHeaderIcon',
  src: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/popup/iconHeader.png',
  width: 20,
  height: 16
});

isc.OBDateRangeDialog.addProperties({
  clearButtonConstructor: isc.OBFormButton,
  cancelButtonConstructor: isc.OBFormButton,
  okButtonConstructor: isc.OBFormButton,
  okButtonTitle: OB.I18N.getLabel('OBUISC_Dialog.OK_BUTTON_TITLE'),
  clearButtonTitle: OB.I18N.getLabel('OBUIAPP_Clear'),
  cancelButtonTitle: OB.I18N.getLabel('OBUISC_Dialog.CANCEL_BUTTON_TITLE'),
  headerTitle: OB.I18N.getLabel('OBUIAPP_SelectDateRange')
});

isc.OBMiniDateRangeItem.changeDefaults('pickerIconDefaults', {
  width: 21,
  height: 21,
  src: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/form/date_control.png'
});

isc.OBMiniDateRangeItem.addProperties({
  cellStyle: 'OBFormField',
  titleStyle: 'OBFormFieldLabel',
  textBoxStyle: 'OBFormFieldInput',
  showFocused: true,
  fromDateOnlyPrefix: OB.I18N.getLabel('OBUIAPP_fromDateOnlyPrefix'),
  toDateOnlyPrefix: OB.I18N.getLabel('OBUIAPP_toDateOnlyPrefix'),
  pickerIconPrompt: OB.I18N.getLabel('OBUIAPP_pickerIconPrompt')
});

isc.DateRangeItem.changeDefaults('dateRangeFormDefaults', {
  titleSuffix: '</b>',
  titlePrefix: '<b>',
  requiredTitleSuffix: ' *</b>',
  requiredRightTitlePrefix: '<b>* ',
  rightTitlePrefix: '<b>',
  rightTitleSuffix: '</b>'
});

isc.DateRangeItem.addProperties({
  cellStyle: 'OBFormField',
  titleStyle: 'OBFormFieldLabel',
  textBoxStyle: 'OBFormFieldInput',
  titleOrientation: 'left',
  fromTitle: OB.I18N.getLabel('OBUIAPP_From'),
  toTitle: OB.I18N.getLabel('OBUIAPP_To')
});

isc.RelativeDateItem.addProperties({
  cellStyle: 'OBFormField',
  titleStyle: 'OBFormFieldLabel',
  textBoxStyle: 'OBFormFieldSelectInput',
  controlStyle: 'OBFormFieldSelectControl'
});

isc.RelativeDateItem.changeDefaults('quantityFieldDefaults', {
  cellStyle: 'OBFormField',
  titleStyle: 'OBFormFieldLabel',
  textBoxStyle: 'OBFormFieldSelectInput',
  controlStyle: 'OBFormFieldSelectControl',
  width: 65
});

isc.RelativeDateItem.changeDefaults('valueFieldDefaults', {
  cellStyle: 'OBFormField',
  titleStyle: 'OBFormFieldLabel',
  textBoxStyle: 'OBFormFieldSelectInput',
  textBoxStyleNormal: 'OBFormFieldSelectInput',
  textBoxStyleError: 'OBFormFieldSelectInputError',
  controlStyle: 'OBFormFieldSelectControl',
  pickerIconSrc: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/form/comboBoxPicker.png',
  pickerIconWidth: 21,
  pickerIconHeight: 21,
  calendarIconSrc: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/form/date_control.png',
  calendarIconWidth: 21,
  calendarIconHeight: 21,
  calendarIconHspace: 0
});

isc.RelativeDateItem.changeDefaults('calculatedDateFieldDefaults', {
  canFocus: false,
  disabled: true,
  showDisabled: false,
  width: 85
});

/* =====================================================================
 * OBImageItem
 =======================================================================*/

isc.OBImageItem.addProperties({
  cellStyle: 'OBFormField',
  titleStyle: 'OBFormFieldLabel'
});

isc.OBImageCanvas.addProperties({
  height: '0px',
  // Hack to avoid second line be desplaced in Firefox and IE
  zoomInCursorSrc: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/system/zoomIn.cur',
  zoomOutCursorSrc: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/system/zoomOut.cur',
  imageNotAvailableSrc: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/form/imageNotAvailable.png',
  imageNotAvailableHeight: 49,
  imageNotAvailableWidth: 57
});

isc.OBImageItemSmallImageContainer.addProperties({
  styleName: 'OBFormFieldImageInput',
  height: 21,
  width: '100%',
  align: 'center',
  defaultLayoutAlign: 'center',
  initWidgetStyle: function () {
    //To adapt the height this code is used because the automatic height doesn't fill empty rows.
    var rowSpan = 1;
    var singleRowHeight = this.getHeight();
    var multipleRowHeight = singleRowHeight + 24; // 24px = title height + form item padding defined in CSS
    if (this.imageItem.rowSpan) {
      rowSpan = this.imageItem.rowSpan;
    }
    var newHeight = singleRowHeight + (rowSpan - 1) * multipleRowHeight;
    this.setHeight(newHeight);
  }
});

isc.OBImageItemSmallImage.addProperties({
  styleName: 'OBImageItemSmallImage',
  imageType: 'stretch'
});

isc.OBImageItemBigImage.addProperties({
  styleName: 'OBImageItemBigImage',
  zoomInCursorSrc: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/system/zoomIn.cur',
  zoomOutCursorSrc: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/system/zoomOut.cur',
  align: 'center'
});

isc.OBImageItemButton.addProperties({
  showRollOver: true,
  showDisabled: true,
  showDown: true,
  showFocusedAsOver: true,
  width: 21,
  height: 21,
  uploadIconSrc: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/form/upload_icon.png',
  eraseIconSrc: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/form/erase_icon.png',
  initWidgetStyle: function () {
    if (this.buttonType === 'upload') {
      this.setSrc(this.uploadIconSrc);
    } else if (this.buttonType === 'erase') {
      this.setSrc(this.eraseIconSrc);
    }
  }
});

/* =====================================================================
 * SectionItem Button Styles
 =======================================================================*/

isc.OBSectionItem.addProperties({
  sectionHeaderClass: 'OBSectionItemButton',
  height: 24
});

isc.ClassFactory.defineClass('OBSectionItemButton', isc.ImgSectionHeader);
isc.OBSectionItemButton.changeDefaults('backgroundDefaults', {
  showRollOver: true,
  showDown: false,
  showDisabled: false,
  showDisabledIcon: false,
  showRollOverIcon: false,
  src: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/form/sectionItem-bg.png',
  icon: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/form/sectionItem-ico.png',
  iconSize: 12,
  capSize: 12,
  titleStyle: 'OBSectionItemButton_Title_',
  backgroundColor: 'transparent'
});
isc.OBSectionItemButton.addProperties({
  focusChanged: function () { // "ImgSectionHeader" is not a StatefulCanvas so -Focused- status should be done programmatically
    if (this.background) {
      if (this.containsFocus()) {
        this.background.setSrc(this.background.src.replace(/(\.)(png)$/, '_Focused.png'));
        this.background.setIcon(this.background.icon.replace(/(\.)(png)$/, '_Focused.png'));
      } else {
        this.background.setSrc(this.background.src.replace(/(_Focused)(\.)(png)$/, '.png'));
        this.background.setIcon(this.background.icon.replace(/(_Focused)(\.)(png)$/, '.png'));
      }
    }
    this.Super("focusChanged", arguments);
  }
});

/* =====================================================================
 * Attachments Styles
 =======================================================================*/

isc.OBAttachmentsSubmitPopup.addProperties({
  hlayoutTopMargin: 10,
  height: 30,
  width: 450,
  align: 'center'
});

/* =====================================================================
  * Image Popup Styles
  =======================================================================*/

isc.OBImageSelector.addProperties({
  hlayoutTopMargin: 10,
  hlayoutBottomMargin: 10,
  height: 50,
  width: 450,
  align: 'center'
});
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2013 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */

isc.OBCalendarTabSet.addProperties({
  tabBarProperties: {
    simpleTabBaseStyle: 'OBTabBarButtonMain',
    paneContainerClassName: 'OBTabSetMainContainer',
    buttonConstructor: isc.OBTabBarButton,

    buttonProperties: {
      // prevent the orange hats
      customState: 'Inactive',

      src: '',
      capSize: 14,
      titleStyle: 'OBTabBarButtonMainTitle'
    }
  },
  tabBarPosition: 'top',
  tabBarAlign: 'left',
  width: '100%',
  height: '100%',
  overflow: 'hidden',

  showTabPicker: false,

  // get rid of the margin around the content of a pane
  paneMargin: 0,
  paneContainerMargin: 0,
  paneContainerPadding: 0,
  showPaneContainerEdges: false,

  useSimpleTabs: true,
  tabBarThickness: 30,
  styleName: 'OBTabSetMain',
  simpleTabBaseStyle: 'OBTabBarButtonMain',
  paneContainerClassName: 'OBTabSetMainContainer',

  scrollerSrc: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/tab/tabBarButtonMain_OverflowIcon.png',
  pickerButtonSrc: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/tab/tabBarButtonMain_OverflowIconPicker.png'
});


isc.OBCalendar.addProperties({
  workdayBaseStyle: 'OBCalendarGridCellWorkday',
  selectedCellStyle: 'OBCalendarGridCellSelected'
});

OB.Styles.OBCalendar = {
  eventWindowStyle: 'OBEventWindow',
  addEventButton: {
    src: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/form/add_icon.png',
    // It doesn't exist yet
    width: 21,
    height: 21
  },
  dayView_baseStyle: 'OBCalendarGridCell',
  weekView_baseStyle: 'OBCalendarGridCell',
  weekView_headerBaseStyle: 'OBCalendarGridHeaderCell',
  monthView_baseStyle: 'OBCalendarGridCell',
  monthView_headerBaseStyle: 'OBCalendarGridHeaderCell'
};

isc.OBCalendar.changeDefaults('datePickerButtonDefaults', {
  src: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/form/date_control.png',
  width: 21,
  height: 21
});

isc.OBCalendar.changeDefaults('previousButtonDefaults', {
  src: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/statusbar/iconButton-previous.png',
  width: 20,
  height: 20
});

isc.OBCalendar.changeDefaults('nextButtonDefaults', {
  src: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/statusbar/iconButton-next.png',
  width: 20,
  height: 20
});

isc.OBCalendar.changeDefaults('controlsBarDefaults', {
  layoutTopMargin: 6
});
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2010-2013 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */

// Styling properties for a generic grid (ob-grid.js)
isc.OBGrid.addProperties({
  editFailedBaseStyle: null,
  // is done through the additional csstext
  editFailedCSSText: 'background-color: red; border-right-color: red; border-bottom-color: red;',
  bodyStyleName: 'OBGridBody',
  baseStyle: 'OBGridCell',
  baseStyleEdit: 'OBGridCellEdit',
  // for use in ob-view-grid.js while editing a cell
  recordStyleError: 'OBGridCellError',
  recordStyleSelectedViewInActive: 'OBGridCellSelectedViewInactive',
  headerBaseStyle: 'OBGridHeaderCell',
  headerBarStyle: 'OBGridHeaderBar',
  headerTitleStyle: 'OBGridHeaderCellTitle',
  emptyMessageStyle: 'OBGridNotificationText',
  emptyMessageLinkStyle: 'OBGridNotificationTextLink',
  cellPadding: 0,
  /* Set in the CSS */
  cellAlign: 'center',
  leaveHeaderMenuButtonSpace: false,
  sortAscendingImage: {
    src: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/grid/gridHeader_sortAscending.png',
    width: 7,
    height: 11
  },
  sortDescendingImage: {
    src: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/grid/gridHeader_sortDescending.png',
    width: 7,
    height: 11
  },
  headerMenuButtonConstructor: 'OBGridHeaderImgButton',
  headerButtonConstructor: 'ImgButton',
  headerMenuButtonWidth: 17,
  headerMenuButtonSrc: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/grid/gridHeaderMenuButton.png',
  hoverWidth: 200,
  editLinkColumnWidth: 56,

  summaryRowConstructor: 'OBGridSummary',
  summaryRowDefaults: {
    showRollOver: false
  },
  summaryRowHeight: 22,
  groupSummaryStyle: 'OBGridSummaryCell',
  summaryRowStyle: 'OBGridSummaryCell',
  summaryRowStyle_min: 'OBGridSummaryCell_min',
  summaryRowStyle_max: 'OBGridSummaryCell_max',
  summaryRowStyle_sum: 'OBGridSummaryCell_sum',
  summaryRowStyle_avg: 'OBGridSummaryCell_avg',
  summaryRowStyle_count: 'OBGridSummaryCell_count',
  groupNodeStyle: 'OBGridSummaryCell',

  progressIconDefaults: {
    width: 16,
    height: 16,
    visibility: 'hidden',
    src: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/grid/gridButton-progress.gif' /* Generated @ http://www.ajaxload.info/ */
    /* Indicator type: 'Snake' - Background color: #FFE1C0 - Transparent background - Foreground color: #333333 */
  }
});

isc.OBGrid.addClassProperties({

  defaultColumnWidths: [50, 100, 200],

  getDefaultColumnWidth: function (length) {
    if (length <= 1) {
      return isc.OBGrid.defaultColumnWidths[0];
    } else if (length <= 30) {
      return isc.OBGrid.defaultColumnWidths[1];
    } else if (length <= 60) {
      return isc.OBGrid.defaultColumnWidths[2];
    }
    return 200;
  }
});

isc.OBGrid.changeDefaults('filterEditorDefaults', {
  height: 22,
  styleName: 'OBGridFilterBase',
  baseStyle: 'OBGridFilterCell'
});

isc.OBGrid.changeDefaults('filterEditorProperties', {
  filterImg: {
    src: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/grid/funnel-icon.png'
  }
});

isc.OBGrid.changeDefaults('sorterDefaults', {
  // baseStyle / titleStyle is auto-assigned from headerBaseStyle
  showFocused: false,
  //  src: '[SKIN]ListGrid/header.png',
  src: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/grid/gridHeader_bg.png',
  baseStyle: 'OBGridSorterButton'
});

isc.OBGrid.changeDefaults('headerButtonDefaults', {
  showTitle: true,
  showDown: true,
  showFocused: false,
  // baseStyle / titleStyle is auto-assigned from headerBaseStyle
  src: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/grid/gridHeader_bg.png'
});

isc.OBGrid.changeDefaults('headerMenuButtonDefaults', {
  showDown: false,
  showTitle: true
  //src: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/grid/gridHeader_bg.png'
});

// Styling properties for the header button of a generic grid (ob-grid.js)
isc.OBGridHeaderImgButton.addProperties({
  showFocused: false,
  showRollOver: false,
  showFocusedAsOver: false,
  showDown: false
});

// Styling properties for the buttons of the grid in 'grid mode' (ob-view-grid.js)
isc.OBGridToolStripIcon.addProperties({
  width: 21,
  height: 19,
  showRollOver: true,
  showDown: true,
  showDisabled: false,
  showFocused: false,
  showFocusedAsOver: true,
  baseStyle: 'OBGridToolStripIcon',
  genericIconSrc: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/grid/gridButton.png',
  /* Can be: edit - form - cancel - save */
  initWidgetStyle: function () {
    var fileExt = this.genericIconSrc.substring(this.genericIconSrc.lastIndexOf('.'), this.genericIconSrc.length);
    var filePath = this.genericIconSrc.substring(0, this.genericIconSrc.length - fileExt.length) + '-';
    this.setSrc(filePath + this.buttonType + fileExt);
  },
  setErrorState: function (error) {
    var fileExt = this.genericIconSrc.substring(this.genericIconSrc.lastIndexOf('.'), this.genericIconSrc.length);
    var filePath = this.genericIconSrc.substring(0, this.genericIconSrc.length - fileExt.length) + '-';
    if (error) {
      this.setSrc(filePath + this.buttonType + '-error' + fileExt);
    } else {
      this.setSrc(filePath + this.buttonType + fileExt);
    }
  }
});

isc.OBGridToolStripSeparator.addProperties({
  width: 1,
  height: 11,
  baseStyle: 'OBGridToolStripSeparator',
  imageType: 'normal',
  src: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/grid/gridButton-separator.png'
});

isc.OBGridButtonsComponent.addProperties({
  // note this height should be the same as the recordComponentHeight defined above
  height: 21,
  width: '100%',
  overflow: 'hidden',
  align: 'center',
  defaultLayoutAlign: 'center',
  styleName: 'OBGridToolStrip',
  layoutLeftMargin: -2,
  layoutRightMargin: 0,
  membersMargin: 4
});

isc.OBGridLinkButton.addProperties({
  baseStyle: 'OBGridLinkButton',
  showDown: true,
  showFocused: true,
  showFocusedAsOver: true,
  showRollOver: true,
  autoFit: true,
  height: 1,
  overflow: 'visible'
});

/******************************/

isc.OBViewGrid.addProperties({
  // note should be the same as the height of the OBGridButtonsComponent
  recordComponentHeight: 21,
  cellHeight: 25,
  bodyStyleName: 'OBViewGridBody'
});

isc.OBViewGrid.changeDefaults('editLinkFieldProperties', {
  filterEditorProperties: {
    textBoxStyle: 'OBGridFilterStaticText',
    textAlign: 'center'
  }
});

isc.OBViewGrid.changeDefaults('checkboxFieldDefaults', {
  filterEditorProperties: {
    textBoxStyle: 'OBGridFilterStaticText',
    nonClickableTextBoxStyle: 'OBGridFilterStaticText',
    clickableTextBoxStyle: 'OBGridFilterStaticTextLink',
    textAlign: 'center'
  }
});

/******************************/

isc.OBAlertGrid.addProperties({
  bodyStyleName: 'OBAlertGridBody'
});

/******************************/

isc.OBGridFormButton.addProperties({
  baseStyle: 'OBGridFormButton',
  titleStyle: 'OBFormButtonTitle',

  width: 1,
  height: 21,
  overflow: 'visible'
});

isc.OBGridFormLabel.addProperties({
  wrap: false,
  baseStyle: 'OBGridFormLabel'
});
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2010-2012 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */

isc.OBToolbar.addProperties({
  width: '100%',
  height: 45,
  leftMargin: 6,
  rightMargin: 4,
  leftMembersMargin: 4,
  rightMembersMargin: 12
});

isc.OBToolbarIconButton.addProperties({
  width: 30,
  height: 28,
  menuButtonImage: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/toolbar/iconButton-menu-unfold.png' /** There is a CSS hack to avoid showing it when no menu available. this.menuButtonImage inside initWidget doesn't run **/
});

isc.OBToolbarTextButton.addProperties({
  height: 30,
  autoFit: true
});
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2011-2012 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */


isc.OBMessageBar.addProperties({
  styleName: 'OBMessageBar_tip',
  width: '100%',
  height: 40,
  overflow: 'visible',
  setTypeStyle: function (type) {
    this.mainIcon.setSrc('');
    this.closeIcon.setSrc('');
    this.setStyleName('OBMessageBar_' + type);
    this.mainIcon.setSrc(OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/messagebar/mainIcon-' + type + (isc.Page.isRTL() ? "-RTL" : "") + '.png');
    this.text.setStyleName('OBMessageBarDescriptionText OBMessageBarDescriptionText_' + type);
    this.closeIcon.setSrc(OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/messagebar/closeIcon-' + type + '.png');
  }
});

isc.OBMessageBarMainIcon.addProperties({
  src: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/messagebar/mainIcon-tip.png',
  width: 47
});

isc.OBMessageBarDescriptionText.addProperties({
  styleName: 'OBMessageBarDescriptionText OBMessageBarDescriptionText_tip',
  width: '*'
});

isc.OBMessageBarCloseIcon.addProperties({
  baseStyle: 'OBMessageBarCloseIcon',
  width: 12,
  // 10 + 2 of the margin set in the CSS
  height: 12,
  // 10 + 2 of the margin set in the CSS
  align: 'left',
  showRollOver: true,
  showDown: false,
  showFocused: false,
  overflow: 'visible',
  src: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/messagebar/closeIcon-tip.png'
});

OB.Styles.MessageBar = {
  leftMsgContainerStyle: "OBMessageBarLeftMsgContainer",
  rightMsgContainerStyle: "OBMessageBarRightMsgContainer",
  rightMsgTextStyle: "OBMessageBarRightMsgText"
};
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2011-2012 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */


isc.OBStatusBar.addProperties({
  styleName: "OBStatusBar",
  width: '100%',
  height: 30,
  buttonBarWidth: 130,
  leaveScrollbarGap: false,
  overflow: 'hidden',

  statusLabelStyle: 'OBStatusBarTextLabel_Status',
  titleLabelStyle: 'OBStatusBarTextLabel_Title',
  titleLinkStyle: 'OBStatusBarTextLink_Title',
  titleLinkImageSrc: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/form/ico-to-new-tab.png',
  titleLinkImageWidth: 8,
  titleLinkImageHeight: 8,
  fieldLabelStyle: 'OBStatusBarTextLabel_Field',
  separatorLabelStyle: 'OBStatusBarTextLabel_Separator',
  labelOverflowHidden: true,

  savedIconDefaults: {
    height: 14,
    width: 14,
    src: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/statusbar/ico-saved.png'
  },

  newIconDefaults: {
    height: 14,
    width: 14,
    src: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/statusbar/ico-new.png'
  },

  editIconDefaults: {
    height: 14,
    width: 14,
    src: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/statusbar/ico-edit.png'
  },

  iconButtonGroupSpacerWidth: 5
});

isc.OBStatusBarLeftBar.addProperties({
  baseStyle: 'OBStatusBarLeftBar',
  width: '*',
  membersMargin: 5,
  layoutLeftMargin: 7,
  defaultLayoutAlign: 'center',
  align: 'left',
  overflow: 'hidden'
});

isc.OBStatusBarTextLabel.addProperties({
  wrap: false,
  width: 1,
  height: 1,
  overflow: 'visible',
  baseStyle: "OBStatusBarTextLabel"
});

isc.OBStatusBarIconButtonBar.addProperties({
  styleName: "OBStatusBarIconButtonBar",
  align: 'right',
  defaultLayoutAlign: 'center',
  overflow: 'visible',
  membersMargin: 4,
  layoutLeftMargin: 3
});

isc.OBStatusBarIconButton.addProperties({
  imageType: 'center',
  showRollOver: true,
  showDown: true,
  showFocused: false,
  genericIconSrc: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/statusbar/iconButton.png',
  /* Can be: previous - next - maximize - minimize - restore - close */
  initWidgetStyle: function () {
    var fileExt = this.genericIconSrc.substring(this.genericIconSrc.lastIndexOf('.'), this.genericIconSrc.length);
    var filePath = this.genericIconSrc.substring(0, this.genericIconSrc.length - fileExt.length) + '-';
    var buttonType = this.buttonType;
    if (isc.Page.isRTL()) {
      if (buttonType === 'next') {
        buttonType = 'previous';
      } else if (buttonType === 'previous') {
        buttonType = 'next';
      }
    }
    this.setSrc(filePath + buttonType + fileExt);
  }
});
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2010-2012 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */


/* OBPopup */

isc.OBPopup.addProperties({
  // rounded frame edges
  showEdges: true,
  edgeImage: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/popup/border.png',
  customEdges: null,
  edgeSize: 2,
  edgeTop: 27,
  edgeBottom: 2,
  edgeOffsetTop: 2,
  edgeOffsetRight: 2,
  edgeOffsetBottom: 2,
  showHeaderBackground: false,
  // part of edges
  showHeaderIcon: true,

  // clear backgroundColor and style since corners are rounded
  backgroundColor: null,
  border: null,
  styleName: 'OBPopup',
  edgeCenterBackgroundColor: '#FFFFFF',
  bodyColor: 'transparent',
  bodyStyle: 'OBPopupBody',
  headerStyle: 'OBPopupHeader',

  layoutMargin: 0,
  membersMargin: 0,

  showShadow: false,
  shadowDepth: 5
});

isc.OBPopup.changeDefaults('headerDefaults', {
  layoutMargin: 0,
  height: 25
});

isc.OBPopup.changeDefaults('headerLabelDefaults', {
  styleName: 'OBPopupHeaderText',
  align: isc.Canvas.CENTER
});

isc.OBPopup.changeDefaults('resizerDefaults', {
  src: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/popup/resizer.png'
});

isc.OBPopup.changeDefaults('headerIconDefaults', {
  styleName: 'OBPopupHeaderIcon',
  src: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/popup/iconHeader.png',
  width: 20,
  height: 16
});

isc.OBPopup.changeDefaults('restoreButtonDefaults', {
  baseStyle: 'OBPopupIconRestore',
  src: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/popup/restore.png',
  width: 24,
  height: 20
});

isc.OBPopup.changeDefaults('closeButtonDefaults', {
  baseStyle: 'OBPopupIconClose',
  src: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/popup/close.png',
  width: 24,
  height: 20
});

isc.OBPopup.changeDefaults('maximizeButtonDefaults', {
  baseStyle: 'OBPopupIconMaximize',
  src: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/popup/maximize.png',
  width: 24,
  height: 20
});

isc.OBPopup.changeDefaults('minimizeButtonDefaults', {
  baseStyle: 'OBPopupIconMinimize',
  src: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/popup/minimize.png',
  width: 24,
  height: 20
});

/* OBPopupHTMLFlow */

isc.OBPopupHTMLFlow.addProperties({
  styleName: 'OBPopupHTMLFlow'
});
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2012 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */

OB.Styles.Process = {};

OB.Styles.Process.PickAndExecute = {
  pinColumnWidth: 26,
  gridCellHeight: 25,
  iconPinSrc: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/process/iconPin.png',
  iconPinStyle: 'OBProcessIconPinImg',
  iconDeleteSrc: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/process/iconDelete.png',
  iconDeleteStyle: 'OBProcessIconDeleteImg',
  addNewButtonAlign: 'left',
  buttonLayoutHeight: 80
};
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2010-2012 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */

/* Changes the skin of isc.Dialog */

isc.Dialog.addProperties({
  // rounded frame edges
  showEdges: true,
  edgeImage: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/popup/border.png',
  customEdges: null,
  edgeSize: 2,
  edgeTop: 27,
  edgeBottom: 2,
  edgeOffsetTop: 2,
  edgeOffsetRight: 2,
  edgeOffsetBottom: 2,
  showHeaderBackground: false,
  // part of edges
  showHeaderIcon: true,
  isModal: true,
  showModalMask: true,
  dragAppearance: 'target',

  // clear backgroundColor and style since corners are rounded
  backgroundColor: null,
  border: null,
  styleName: 'OBPopup',
  edgeCenterBackgroundColor: '#FFFFFF',
  bodyColor: 'transparent',
  bodyStyle: 'OBPopupBody',
  headerStyle: 'OBPopupHeader',
  messageStyle: 'OBDialogLabel',

  layoutMargin: 0,
  membersMargin: 0,

  showShadow: false,
  shadowDepth: 5
});

isc.Dialog.changeDefaults('toolbarDefaults', {
  buttonConstructor: 'OBFormButton'
});

isc.Dialog.changeDefaults('headerDefaults', {
  layoutMargin: 0,
  height: 25
});

isc.Dialog.changeDefaults('headerLabelDefaults', {
  wrap: false,
  width: '100%',
  inherentWidth: true,
  styleName: 'OBPopupHeaderText',
  align: isc.Canvas.CENTER
});

isc.Dialog.changeDefaults('resizerDefaults', {
  src: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/popup/resizer.png'
});

isc.Dialog.changeDefaults('headerIconDefaults', {
  styleName: 'OBPopupHeaderIcon',
  src: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/popup/iconHeader.png',
  width: 20,
  height: 16
});

isc.Dialog.changeDefaults('restoreButtonDefaults', {
  baseStyle: 'OBPopupIconRestore',
  src: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/popup/restore.png',
  width: 24,
  height: 20
});

isc.Dialog.changeDefaults('closeButtonDefaults', {
  baseStyle: 'OBPopupIconClose',
  src: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/popup/close.png',
  width: 24,
  height: 20
});

isc.Dialog.changeDefaults('maximizeButtonDefaults', {
  baseStyle: 'OBPopupIconMaximize',
  src: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/popup/maximize.png',
  width: 24,
  height: 20
});

isc.Dialog.changeDefaults('minimizeButtonDefaults', {
  baseStyle: 'OBPopupIconMinimize',
  src: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/popup/minimize.png',
  width: 24,
  height: 20
});
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2011-2013 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */

isc.ClassFactory.defineClass('OBQuickLaunchRecentLinkButton', isc.Button);

isc.OBQuickLaunchRecentLinkButton.addProperties({
  recentObject: null,
  prefixLabel: null,
  action: function () {
    if (this.recentObject.viewId) {
      OB.Layout.ViewManager.openView(this.recentObject.viewId, this.recentObject);
    } else {
      OB.Layout.ViewManager.openView('OBClassicWindow', this.recentObject);
    }

    if (isc.OBQuickRun.currentQuickRun) {
      isc.OBQuickRun.currentQuickRun.doHide();
    }
  },
  initWidget: function () {
    if (this.prefixLabel.length > 0) {
      this.title = OB.I18N.getLabel(this.prefixLabel) + ' ' + this.recentObject.tabTitle;
    } else {
      this.title = this.recentObject.tabTitle;
    }

    if (this.recentObject.icon) {
      if (this.recentObject.icon === 'Process') {
        this.setIcon(this.nodeIcons.Process);
      } else if (this.recentObject.icon === 'Report') {
        this.setIcon(this.nodeIcons.Report);
      } else if (this.recentObject.icon === 'Form') {
        this.setIcon(this.nodeIcons.Form);
      } else {
        this.setIcon(this.nodeIcons.Window);
      }
    }
  }
});


isc.ClassFactory.defineClass('OBQuickLaunch', isc.OBQuickRun);

isc.OBQuickLaunch.addProperties({
  showInPortal: false,

  draw: function () {
    this.Super("draw", arguments);
    if (this.itemPrompt) {
      this.setPrompt(this.itemPrompt); // itemPrompt declared at quick-launch.js.ftl
/* Avoid declare directly "prompt: " in this widget definition.
         Declared as "setPrompt" inside "draw" function to solve issue https://issues.openbravo.com/view.php?id=18192 in FF */
    }
  },

  beforeShow: function () {
    var valueField = this.members[2].getField('value'),
        recent = OB.RecentUtilities.getRecentValue(this.recentPropertyName);

    if (recent && recent.length > 0) {
      var newFields = [];
      var index = 0,
          recentIndex, length = recent.length;
      for (recentIndex = 0; recentIndex < length; recentIndex++) {
        if (recent[recentIndex]) {
          newFields[index] = isc.OBQuickLaunchRecentLinkButton.create({
            recentObject: recent[recentIndex],
            prefixLabel: this.prefixLabel,
            nodeIcons: this.nodeIcons
          });
          newFields[index].recentPropertyName = this.recentPropertyName;
          index++;
        }
      }
      if (this.members[1].getMembers()) {
        this.members[1].destroyAndRemoveMembers(this.members[1].getMembers().duplicate());
      }

      this.members[1].setMembers(newFields);

      if (this.separatorHeight) {
        this.members[1].layoutBottomMargin = this.separatorHeight;
        this.members[1].setLayoutMargin();
      }

      this.layout.showMember(this.members[1]);
    }

    if (valueField.pickList) {
      valueField.pickList.deselectAllRecords();
      valueField.pickList.clearLastHilite();
      valueField.pickList.scrollRecordIntoView(0);
    }
    valueField.setValue(null);
    valueField.setElementValue('', null);
  },

  // handle the case that someone entered a url in the quick launch
  doHide: function () {
    if (this.members[2].getField('value').getValue() && this.members[2].getField('value').getValue().contains('?')) {
      var params = OB.Utilities.getUrlParameters(this.members[2].getField('value').getValue());
      if (params && params.tabId) {
        OB.Utilities.openDirectTab(params.tabId, params.recordId, params.command);
      }
    }
    if (this.members[1].getMembers()) {
      this.members[1].destroyAndRemoveMembers(this.members[1].getMembers().duplicate());
    }

    this.Super('doHide', arguments);
  },

  initWidget: function () {
    var dummyFirstField, dummyLastField;
    dummyFirstField = isc.OBFocusButton.create({
      getFocusTarget: function () {
        return this.parentElement.members[this.parentElement.members.length - 2];
      }
    });

    dummyLastField = isc.OBFocusButton.create({
      getFocusTarget: function () {
        var firstFocusableItem;
        if (this.parentElement.members[1].members.length > 0) {
          firstFocusableItem = this.parentElement.members[1].members[0];
        } else {
          firstFocusableItem = this.parentElement.members[this.parentElement.members.length - 2];
        }
        return firstFocusableItem;
      }
    });

    this.members = [dummyFirstField, isc.VLayout.create({
      // To allow height grow with its contents
      height: 1,
      visibility: 'hidden'
    }), isc.DynamicForm.create({
      autoFocus: true,
      width: '100%',
      titleSuffix: '',
      fields: [{
        name: 'value',
        cellStyle: OB.Styles.OBFormField.DefaultComboBox.cellStyle,
        titleStyle: OB.Styles.OBFormField.DefaultComboBox.titleStyle,
        textBoxStyle: OB.Styles.OBFormField.DefaultComboBox.textBoxStyle,
        pendingTextBoxStyle: OB.Styles.OBFormField.DefaultComboBox.pendingTextBoxStyle,
        controlStyle: OB.Styles.OBFormField.DefaultComboBox.controlStyle,
        pickListBaseStyle: OB.Styles.OBFormField.DefaultComboBox.pickListBaseStyle,
        pickListTallBaseStyle: OB.Styles.OBFormField.DefaultComboBox.pickListTallBaseStyle,
        pickerIconStyle: OB.Styles.OBFormField.DefaultComboBox.pickerIconStyle,
        pickerIconSrc: OB.Styles.OBFormField.DefaultComboBox.pickerIconSrc,
        height: OB.Styles.OBFormField.DefaultComboBox.height,
        pickerIconWidth: OB.Styles.OBFormField.DefaultComboBox.pickerIconWidth,
        // fixes issue https://issues.openbravo.com/view.php?id=15105
        pickListCellHeight: OB.Styles.OBFormField.DefaultComboBox.quickRunPickListCellHeight,
        recentPropertyName: this.recentPropertyName,

        getControlTableCSS: function () {
          // prevent extra width settings, super class
          // sets width to 0 on purpose
          return 'cursor:default;';
        },

        selectOnFocus: true,
        textMatchStyle: 'substring',
        width: OB.Styles.OBFormField.DefaultComboBox.quickRunWidth,

        // client filtering does not always work great...
        pickListProperties: {
          textMatchStyle: 'substring',
          selectionType: 'single',
          bodyStyleName: OB.Styles.OBFormField.DefaultComboBox.pickListProperties.bodyStyleName
        },
        pickListHeaderHeight: 0,

        // this is to prevent this issue:
        // http://forums.isomorphic.com/showthread.php?t=17949&goto=newpost
        autoSizePickList: false,

        getPickListFilterCriteria: function () {
          // only filter on identifier
          var criteria = {};
          criteria[OB.Constants.IDENTIFIER] = this.getDisplayValue();
          return criteria;
        },
        pickListFields: [{
          showValueIconOnly: true,
          name: 'icon',
          valueIcons: {
            Process: this.nodeIcons.Process,
            Report: this.nodeIcons.Report,
            Form: this.nodeIcons.Form,
            Window: this.nodeIcons.Window
          }
        }, {
          name: OB.Constants.IDENTIFIER,
          displayField: OB.Constants.IDENTIFIER,
          valueField: OB.Constants.ID
        }],
        autoFetchData: true,
        titleOrientation: 'top',
        title: OB.I18N.getLabel(this.titleLabel),
        editorType: 'comboBox',

        // local filtering enabled, remove the Id filter
        // explicitly from the criteria list, see getPickListFilter
        filterLocally: true,
        fetchDelay: 50,

        optionDataSource: OB.Datasource.get(this.dataSourceId),
        valueField: OB.Constants.ID,

        emptyPickListMessage: OB.I18N.getLabel('OBUISC_ListGrid.emptyMessage'),

        command: this.command,

        pickValue: function (theValue) {
          this.Super('pickValue', arguments);

          if (this.getSelectedRecord()) {
            var record = this.getSelectedRecord();
            var viewValue = record.viewValue;
            isc.OBQuickRun.currentQuickRun.doHide();
            var openObject = isc.addProperties({}, record);
            if (record.optionType && record.optionType === 'tab') {
              openObject = OB.Utilities.openView(record.windowId, viewValue, record[OB.Constants.IDENTIFIER], null, this.command, record.icon, record.readOnly, record.singleRecord, null, record.editOrDeleteOnly);
              if (openObject) {
                OB.RecentUtilities.addRecent(this.recentPropertyName, openObject);
              }
              return;
            } else if (record.optionType && record.optionType === 'external') {
              openObject = {
                viewId: 'OBExternalPage',
                id: viewValue,
                contentsUrl: viewValue,
                tabTitle: record[OB.Constants.IDENTIFIER]
              };
            } else if (record.optionType && record.optionType === 'process') {
              var viewName = record.modal ? 'OBClassicPopupModal' : 'OBPopupClassicWindow';
              openObject = {
                viewId: viewName,
                processId: record.processId,
                id: record.processId,
                obManualURL: viewValue,
                popup: true,
                command: 'BUTTON' + record.processId,
                tabTitle: record[OB.Constants.IDENTIFIER]
              };
            } else if (record.optionType && record.optionType === 'processManual') {
              openObject = {
                viewId: 'OBClassicWindow',
                processId: record.processId,
                id: record.processId,
                obManualURL: viewValue,
                command: 'DEFAULT',
                tabTitle: record[OB.Constants.IDENTIFIER]
              };
            } else if (record.optionType && record.optionType === 'processDefinition') {
              openObject = {
                viewId: 'processDefinition_' + record.processId,
                tabTitle: record[OB.Constants.IDENTIFIER]
              };
            } else if (record.viewId) {
              openObject = record;
            } else if (record.formId) {
              openObject = {
                viewId: 'OBClassicWindow',
                formId: record.formId,
                id: viewValue,
                obManualURL: viewValue,
                command: this.command,
                tabTitle: record[OB.Constants.IDENTIFIER]
              };
            } else {
              openObject = {
                viewId: 'OBClassicWindow',
                id: viewValue,
                obManualURL: viewValue,
                command: this.command,
                tabTitle: record[OB.Constants.IDENTIFIER]
              };
            }
            openObject.singleRecord = record.singleRecord;
            openObject.readOnly = record.readOnly;

            openObject.icon = record.icon;

            openObject = isc.addProperties({}, record, openObject);

            OB.Layout.ViewManager.openView(openObject.viewId, openObject);

            OB.RecentUtilities.addRecent(this.recentPropertyName, openObject);

            this.setValue(null);
          }
        },

        handleKeyPress: function () {
          var result = this.Super('handleKeyPress', arguments);

          var key = isc.EH.lastEvent.keyName;
          if (key === 'Escape' || key === 'Enter') {
            if (isc.OBQuickRun.currentQuickRun) {
              isc.OBQuickRun.currentQuickRun.doHide();
            }
          }
          return result;
        }
      }]
    }), dummyLastField];

    var ret = this.Super('initWidget', arguments);

    // register the field in the registry
    var suggestionField = this.members[2].getField('value');
    OB.TestRegistry.register(this.recentPropertyName + '_RECENTFORM', this.members[1]);
    OB.TestRegistry.register(this.recentPropertyName + '_FORM', this.members[2]);
    OB.TestRegistry.register(this.recentPropertyName + '_BUTTON', this);
    OB.TestRegistry.register(this.recentPropertyName + '_FIELD', suggestionField);

    return ret;
  }

});
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2010-2013 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */

/* =====================================================================
 * Styling properties for:
 * 1) Main layout
 * 2) Main components (navbar flyout, main grid, form)
 * 3) Changes to standard isc.Dialog buttons
 =======================================================================*/

if (isc.Menu && isc.Browser.isFirefox && isc.Browser.version >= 16) {
  // To fix issue: http://forums.smartclient.com/showthread.php?t=24978
  isc.Menu.addProperties({
    fixedRecordHeights: true
  });
}

/* =====================================================================
 * Main layout styling properties
 =======================================================================*/
// note main layout styling is done a bit differently 
// as this needs to be set when the layout gets created
// Styling of the main layout containing everything
OB.Styles.TopLayout = {
  width: '100%',
  height: '1',
  styleName: 'OBTopLayout',
  overflow: 'visible',
  layoutTopMargin: 4,
  layoutBottomMargin: 10
};

OB.Styles.TopLayout.LeftSpacer = {
  width: 0
};

// The toolbar showing the navigation bar components
OB.Styles.TopLayout.NavBar = {
  overflow: 'visible',
  defaultLayoutAlign: 'center',
  styleName: 'OBNavBarToolStrip',
  width: 1,
  layoutLeftMargin: 1,
  separatorSize: 0,
  height: 28
};

OB.Styles.TopLayout.MiddleSpacer = {
  width: '100%'
};

OB.Styles.TopLayout.LogosContainer = {
  width: 1,
  align: 'right',
  layoutLeftMargin: 10,
  layoutRightMargin: 10,
  membersMargin: 20,
  defaultLayoutAlign: 'center'
};


/* =====================================================================
 * Main components styling properties
 =======================================================================*/

isc.OBPopup.addProperties({
  width: 600,
  height: 500
});

isc.OBStandardWindow.addProperties({
  toolBarHeight: 40
});


/* =====================================================================
 * Loading prompt
 =======================================================================*/
OB.Styles.LoadingPrompt = {
  mainLayoutStyleName: 'OBLoadingPromptModalMask',
  loadingTextStyleName: 'OBLoadingPromptLabel',
  loadingImage: {
    src: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/system/windowLoading.gif',
    width: 220,
    height: 16
  } /* Generated @ http://www.ajaxload.info/ */
  /* Indicator type: 'Bar' - Background color: #7F7F7F - Transparent background - Foreground color: #FFFFFF */
};

/* =====================================================================
 * Width of the active bar on the left in the main view
 =======================================================================*/
OB.Styles.ActiveBar = {
  width: 6,
  activeStyleName: 'OBViewActive',
  inActiveStyleName: 'OBViewInActive'
};

/* =====================================================================
 * Changed styling of the standard dialogs
 =======================================================================*/

isc.addProperties(isc.Dialog.Warn.toolbarDefaults, {
  buttonConstructor: isc.OBFormButton,
  styleName: 'OBDialogButtonToolBar'
});

isc.Dialog.changeDefaults("messageStackProperties", {
  defaultLayoutAlign: 'center'
});

isc.ListGrid.addProperties({
  alternateRecordStyles: true
});

// this can be removed after this has been solved:
// http://forums.smartclient.com/showthread.php?p=59150#post59150
isc._original_confirm = isc.confirm;
isc.confirm = function (message, callback, properties) {
  // override to set the styling
  var i;
  if (properties && properties.buttons) {
    for (i = 0; i < properties.buttons.length; i++) {
      properties.buttons[i].baseStyle = 'OBFormButton';
      properties.buttons[i].titleStyle = 'OBFormButtonTitle';
      properties.buttons[i].buttonConstructor = isc.OBFormButton;
    }
  }
  isc._original_confirm(message, callback, properties);
};

// override the standard show prompt to show a more custom Openbravo
// loading prompt
// note the loading image is set in the index.html
isc._orginal_showPrompt = isc.showPrompt;
isc.showPrompt = function (prompt) {
  var width, height, top, left, props = {},
      dialog = isc.Dialog.Prompt,
      modalTarget;
  if (OB.OBModalTarget) {
    props = {
      showEdges: false,
      showModalMask: true,
      isModal: true,
      hiliteBodyColor: null,
      bodyColor: null,
      bodyStyle: 'OBLoadingPromptBody'
    };
    props.isModal = true;
    modalTarget = OB.OBModalTarget;
    props.modalTarget = modalTarget;
    isc.Dialog.OBModalTarget = null;

    // find the top/left position, center in the modalTarget
    width = dialog.getVisibleWidth();
    height = dialog.getVisibleHeight();
    left = modalTarget.getPageLeft() + ((modalTarget.getWidth() - width) / 2) + modalTarget.getScrollLeft();
    top = modalTarget.getPageTop() + ((modalTarget.getHeight() - height) / 2) + modalTarget.getScrollTop();
    props.left = Math.round(left);
    props.top = Math.max(Math.round(top), 0);
    props.autoCenter = false;
  }

  isc._orginal_showPrompt(prompt, props);
};
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2011-2013 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */

// The quick run widget is used for flyouts in the navigation bar
isc.OBQuickRun.addProperties({

  // ** {{{ baseStyle }}} **
  // The base style for the quick run launch button. All other styles are
  // derived
  // from this base style.
  baseStyle: 'OBNavBarImgButton'
});

// Styling properties for the help/about navigation bar component
isc.OBHelpAbout.addProperties({
  baseStyle: 'OBNavBarTextButton',
  iconHeight: 6,
  iconWidth: 10,
  iconSpacing: 10,
  icon: {
    src: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/navbar/iconOpenDropDown.png'
  },
  iconOrientation: 'right'
});

isc.OBUserProfile.addProperties({
  baseStyle: 'OBNavBarTextButton',

  // ** {{{ icon settings }}} **
  //
  // The green triangle icon on the right of the button.
  iconHeight: 6,
  iconWidth: 10,
  iconSpacing: 10,
  icon: {
    src: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/navbar/iconOpenDropDown.png'
  },
  iconOrientation: 'right'
});

// Styling properties for the quick launch and quick create components
// See also isc.OBQuickRun styling properties
isc.OBQuickLaunch.addProperties({
  // todo: it is nicer to move this to a style but then this issue occurs:
  // https://issues.openbravo.com/view.php?id=13786
  width: 57,
  separatorHeight: 10,

  layoutProperties: {
    width: 250,
    membersMargin: 0 // use custom attribute "separatorHeight" instead
  },

  nodeIcons: {
    Window: OB.Styles.OBApplicationMenu.Icons.window,
    Process: OB.Styles.OBApplicationMenu.Icons.process,
    Report: OB.Styles.OBApplicationMenu.Icons.report,
    Form: OB.Styles.OBApplicationMenu.Icons.form
  },

  createNew_src: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/navbar/iconCreateNew.png',
  quickLaunch_src: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/navbar/iconQuickLaunch.png'
});

// Styling properties for the logout button in the navbar
isc.OBLogout.addProperties({
  baseStyle: 'OBNavBarImgButton',
  height: 14,
  width: 36,
  src: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/navbar/iconClose.png',
  showTitle: false,
  imageType: 'normal',
  layoutAlign: 'center',
  overflow: 'visible',
  showRollOver: false,
  showFocused: false,
  showDown: false
});


isc.OBQuickLaunchRecentLinkButton.addProperties({
  width: 1,
  //To allow button be just text width
  align: 'left',
  baseStyle: 'OBQuickLaunchRecentLinkButton',
  showDown: true,
  showFocused: true,
  showFocusedAsOver: false,
  showRollOver: true,
  autoFit: true,
  height: 1,
  overflow: 'visible'
});

isc.OBHelpAboutLinkButton.addProperties({
  width: 1,
  //To allow button be just text width
  align: 'left',
  baseStyle: 'OBHelpAboutLinkButton',
  showDown: true,
  showFocused: true,
  showFocusedAsOver: false,
  showRollOver: true,
  autoFit: true,
  height: 1,
  overflow: 'visible'
});


isc.OBAlertIcon.addProperties({
  baseStyle: 'OBNavBarTextButton',
  alertIcon: {
    src: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/navbar/iconAlert.png'
  },
  iconOrientation: 'left',
  iconWidth: 11,
  iconHeight: 13
});
$LAB.script('/openbravo/org.openbravo.client.kernel/OBUIAPP_MainLayout/Application').wait(function(){var _exception; try{
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2010-2012 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */
// = ViewManager =
//
// The ViewManager manages the views displayed in the tabs of the main layout.
// It is called to restore a previous state which is maintained by the History 
// manager. View types which are not yet defined on the client are loaded
// from the server. 
//
(function (OB, isc) {

  if (!OB || !isc) {
    throw {
      name: 'ReferenceError',
      message: 'openbravo and isc objects are required'
    };
  }

  // cache object references locally
  var L = OB.Layout,
      ISC = isc,
      vmgr; // Local reference to ViewManager instance

  function ViewManager() {
    // keep the last 5 opened views
    this.recentManager.recentNum = 5;
  }

  ViewManager.prototype = {

    // if true then certain functions are disabled
    inStateHandling: false,

    recentManager: new OB.RecentUtilitiesClass(),

    // ** {{ ViewManager.views }} **
    // Collection of opened views
    views: {
      cache: [],

      getViewTabID: function (vName, params) {
        var len = this.cache.length,
            i, item;
        for (i = len; i > 0; i--) {
          item = this.cache[i - 1];
          if (item.instance.isSameTab && item.instance.isSameTab(vName, params)) {
            return item.viewTabId;
          }
        }
        return null;
      },

      getTabNumberFromViewParam: function (param, value) {
        var numberOfTabs = OB.MainView.TabSet.tabs.length,
            viewParam = '',
            result = null,
            i;
        for (i = 0; i < numberOfTabs; i++) {
          viewParam = OB.MainView.TabSet.getTabPane(i)[param];
          if (viewParam === value) {
            result = i;
          }
        }
        return result;
      },

      push: function (instanceDetails) {
        this.cache.push(instanceDetails);
      },

      removeTab: function (viewTabId) {
        var len = this.cache.length,
            i, item, removed;
        for (i = len; i > 0; i--) {
          item = this.cache[i - 1];
          if (item.viewTabId === viewTabId) {
            removed = this.cache.splice(i - 1, 1);
            return;
          }
        }
      }
    },

    findLoadingTab: function (params) {
      var i, length;
      if (!params.loadingTabId) {
        return null;
      }
      length = OB.MainView.TabSet.tabs.length;
      for (i = 0; i < length; i++) {
        var pane = OB.MainView.TabSet.tabs[i].pane;
        if (pane.viewTabId && pane.isLoadingTab && pane.viewTabId === params.loadingTabId) {
          return OB.MainView.TabSet.tabs[i];
        }
      }
      return null;
    },

    createLoadingTab: function (viewId, params, viewTabId) {
      // open a loading tab
      params = params || {};
      var layout = OB.Utilities.createLoadingLayout();
      // is used to prevent history updating
      layout.isLoadingTab = true;
      viewTabId = viewTabId || params.currentViewTabId || '_' + new Date().getTime();
      params.loadingTabId = viewTabId;
      this.createTab(viewId, viewTabId, layout, params);
      return params;
    },

    fetchView: function (viewId, callback, clientContext, params, useLoadingTab) {
      var rpcMgr = ISC.RPCManager,
          reqObj, request;

      if (useLoadingTab) {
        params = this.createLoadingTab(viewId, params);
      }

      reqObj = {
        params: {
          viewId: viewId
        },
        callback: callback,
        clientContext: clientContext,
        evalResult: true,
        httpMethod: 'GET',
        useSimpleHttp: true,
        actionURL: OB.Application.contextUrl + 'org.openbravo.client.kernel/OBUIAPP_MainLayout/View'
      };
      request = rpcMgr.sendRequest(reqObj);
    },

    addRecentDocument: function (params) {
      vmgr.recentManager.addRecent('OBUIAPP_RecentDocumentsList', isc.addProperties({
        icon: OB.Styles.OBApplicationMenu.Icons.window
      }, params));
    },

    createTab: function (viewName, viewTabId, viewInstance, params) {
      var tabTitle;

      if (params.i18nTabTitle) {
        // note call to I18N is done below after the tab
        // has been created
        tabTitle = '';
      } else {
        tabTitle = params.tabTitle || viewInstance.tabTitle || params.tabId || viewName;
      }

      var tabDef = {
        ID: viewTabId,
        title: tabTitle,
        canClose: true,
        viewName: viewName,
        params: params,
        pane: viewInstance
      };

      // let the params override tab properties like canClose
      tabDef = isc.addProperties(tabDef, params);

      // let the viewinstance decide if it can be closed
      // see https://issues.openbravo.com/view.php?id=15953
      if (viewInstance.notClosable) {
        tabDef.canClose = false;
      }

      // Adding to the MainView tabSet
      OB.MainView.TabSet.addTab(tabDef, params.tabPosition);

      if (params.i18nTabTitle) {
        tabTitle = '';
        // note the callback calls the tabSet
        // with the tabid to set the label
        OB.I18N.getLabel(params.i18nTabTitle, null, {
          setTitle: function (label) {
            OB.MainView.TabSet.setTabTitle(viewTabId, label);
          }
        }, 'setTitle');
      }

      // tell the viewinstance what tab it is on
      // note do not use tabId on the viewInstance
      // as tabId is used by the classic ob window
      // local variable is: viewTabId
      if (viewInstance.setViewTabId) {
        viewInstance.setViewTabId(viewTabId);
      } else {
        viewInstance.viewTabId = viewTabId;
      }

      // Adding a reference to opened views collection
      vmgr.views.push({
        viewName: viewName,
        params: params,
        instance: viewInstance,
        viewTabId: viewTabId
      });

      // the select tab event will update the history
      OB.MainView.TabSet.selectTab(viewTabId);
    },

    // ** {{{ ViewManager.openView(viewName, params) }}} **
    //
    // Shows a new tab in the {{{ Main Layout }}}
    //
    // Parameters:
    // * {{{viewName}}} is a String of the view implementation, e.g. {{{
    // OBClassicWindow }}}
    // * {{{params}}} is an Object with the parameters passed to the
    // implementation to initialize an instance, e.g. {{{ {tabId: '100'} }}}
    // * {{{state}}} is an Object which can contain more complex state
    // information
    // to initialize an instance.
    //
    openView: function (viewName, params, state, direct) {
      var recentObjProperties;
      params = params || {};

      // only add closable views to the recent items, this prevents the workspace
      // view from being displayed, explicitly doing !== false to catch 
      // views which don't have this set at all
      // don't store OBPopupClassicWindow in the viewmanager 
      // don't store direct links to a target tab, this should be set in a different
      // property
      if (!params.targetTabId && params.canClose !== false && !vmgr.inStateHandling && params.viewId !== 'OBPopupClassicWindow') {
        if (params.i18nTabTitle && !params.tabTitle) {
          params.tabTitle = OB.I18N.getLabel(params.i18nTabTitle);
        }
        if (!params.viewId) {
          params.viewId = viewName;
        }
        //If recents receives null in params the tab is not added to the recent list
        recentObjProperties = null;
        if (params.addToRecents === undefined || params.addToRecents === null || params.addToRecents === true) {
          // add and set a default icon
          recentObjProperties = isc.addProperties({
            icon: OB.Styles.OBApplicationMenu.Icons.window
          }, params);
        }
        vmgr.recentManager.addRecent('OBUIAPP_RecentViewList', recentObjProperties);
      }

      //
      // Returns the function implementation of a View
      //

      function getView(viewName, params, state, direct) {

        if (!viewName) {
          throw {
            name: 'ParameterRequired',
            message: 'View implementation name is required'
          };
        }

        //
        // Shows a view in a tab in the {{{ TabSet }}} or external
        //

        function showTab(viewName, params, state, direct) {

          // will as a default display a loading tab when loading the 
          // view from the server or creating a new instance
          // different cases:
          // 1) view is not open and class not loaded (open view and show loading bar)
          // 2) view is not open but class was loaded (open view and show loading bar)
          // 3) view is open and class is loaded (show loading bar in open view)          
          var viewTabId, tabTitle, loadingTab = vmgr.findLoadingTab(params),
              loadingPane, currentPane, tabSet = OB.MainView.TabSet,
              parent, i;

          params = params || {};

          if (loadingTab) {
            viewTabId = loadingTab.pane.viewTabId;
          } else if (!params.popup && viewName !== 'OBPopupClassicWindow' && !params.showsItself) {
            viewTabId = vmgr.views.getViewTabID(viewName, params);
            if (viewTabId) {
              // tab exists, replace its contents
              loadingPane = OB.Utilities.createLoadingLayout();

              // make sure it gets found in the next round
              params.loadingTabId = viewTabId;
              loadingPane.viewTabId = viewTabId;

              // is used to prevent history updating
              loadingPane.isLoadingTab = true;

              tabSet.updateTab(viewTabId, loadingPane);

              // and show it
              tabSet.selectTab(viewTabId);
            } else {
              // create a completely new tab
              // first create a loading tab and then call again
              // in another thread
              params = vmgr.createLoadingTab(viewName, params, viewTabId);
            }

            // make a clone to prevent params being updated in multiple threads
            // happens for the myob tab in special cases
            // https://issues.openbravo.com/view.php?id=18548
            params = isc.shallowClone(params);

            // use a canvas to make use of the fireOnPause possibilities
            // but don't forget to destroy it afterwards...
            var cnv = isc.Canvas.create({
              openView: function () {
                vmgr.openView(viewName, params, null, direct);
                // delete so that at the next opening a new loading layout
                // is created
                delete params.loadingTabId;
                this.destroy();
              }
            });
            cnv.fireOnPause('openView', cnv.openView, null, cnv);
            return;
          }

          // always create a new instance anyway as parameters
          // may have changed
          var viewInstance = ISC[viewName].create(params);

          if (state && viewInstance.setViewState) {
            viewInstance.setViewState(state);
          }

          if (direct) {
            // set directly opened tab and all its ancestors as directNavigation
            if (params && params.id) {
              var tabId = params.id;

              if (viewInstance.view && viewInstance.view.tabId === tabId) {
                viewInstance.view.directNavigation = true;
              } else if (viewInstance.views) {
                for (i = 0; viewInstance.views.length; i++) {
                  if (viewInstance.views[i].tabId === tabId) {
                    viewInstance.views[i].directNavigation = true;
                    parent = viewInstance.views[i].parentView;
                    while (parent) {
                      parent.directNavigation = true;
                      parent = parent.parentView;
                    }
                    break;
                  }
                }
              }
            }
          }

          // is not shown in a tab, let it show itself in a different way
          // but first get rid of the loading tab
          if (viewInstance && viewInstance.show && viewInstance.showsItself) {
            if (loadingTab) {
              delete params.loadingTabId;
              tabSet.removeTab(loadingTab.ID);
            }
            viewInstance.show();
            return;
          }

          // eventhough there is already an open tab
          // still refresh it
          if (viewTabId !== null) {

            // refresh the view
            tabSet.updateTab(viewTabId, viewInstance);

            // and show it
            // only select a non myob tab
            if (viewInstance.getClassName() !== 'OBMyOpenbravoImplementation') {
              tabSet.selectTab(viewTabId);
            }

            // tell the viewinstance what tab it is on
            // note do not use tabId on the viewInstance
            // as tabId is used by the classic ob window
            // local variable is: viewTabId (with uppercase ID)
            // function call and other variable uses camelcase Id
            if (viewInstance.setViewTabId) {
              viewInstance.setViewTabId(viewTabId);
            } else {
              viewInstance.viewTabId = viewTabId;
            }

            // update the cache
            vmgr.views.removeTab(viewTabId, false);
            vmgr.views.push({
              viewName: viewName,
              params: params,
              instance: viewInstance,
              viewTabId: viewTabId
            });
            // note after this the viewTabId is not anymore viewInstance.ID +
            // '_tab'
            // but this is not a problem, it should be unique that's the most
            // important part
            // the select tab event will update the history
            if (tabSet.getSelectedTab() && tabSet.getSelectedTab().pane.viewTabId === viewTabId) {
              OB.Layout.HistoryManager.updateHistory();
            } else if (viewInstance.getClassName() !== 'OBMyOpenbravoImplementation') {
              // only select a non myob tab
              tabSet.selectTab(viewTabId);
            }

            return;
          }

          // Creating an instance of the view implementation
          viewTabId = viewInstance.ID + '_tab';

          if (viewInstance) {
            vmgr.createTab(viewName, viewTabId, viewInstance, params);
          }
        }

        //
        // Function used by the {{ ISC.RPCManager }} after receiving the view
        // implementation from the back-end
        //          

        function fetchViewCallback(response, data, request) {
          // if the window is in development it's name is always unique
          // and has changed
          if (vmgr.loadedWindowClassName) {
            viewName = vmgr.loadedWindowClassName;
          }
          if (!ISC[viewName]) {
            throw {
              name: 'ReferenceError',
              message: 'The view ' + viewName + ' not defined'
            };
          }
          showTab(viewName, params, null, direct);
        }
        if (isc[viewName]) {
          showTab(viewName, params, null, direct);
        } else {
          vmgr.fetchView(viewName, fetchViewCallback, null, params, true);
        }
      }
      getView(viewName, params, state, direct);
    },

    // ** {{{ ViewManager.restoreState(state, data) }}} **
    //
    // Restores the state of the main layout using the passed in state object.
    // This state object contains view id's and book marked parameters.
    // The data object contains extra (more complex) state information which 
    // can not be bookmarked.
    //
    restoreState: function (newState, data) {

      var viewId, tabSet = OB.MainView.TabSet,
          tabsLength, i, tabObject, hasChanged = false,
          stateData, requestViewsRestoreState;

      if (vmgr.inStateHandling) {
        return;
      }

      vmgr.inStateHandling = true;

      // create an empty layout
      if (!newState) {
        OB.MainView.TabSet.removeTabs(OB.MainView.TabSet.tabs);
        vmgr.views.cache = [];
        vmgr.inStateHandling = false;
        return;
      }

      // do some comparison
      tabsLength = newState.bm.length;
      hasChanged = OB.MainView.TabSet.tabs.length !== tabsLength;
      // same length, compare individual tabs
      if (!hasChanged) {
        for (i = 0; i < tabsLength; i++) {
          tabObject = OB.MainView.TabSet.getTabObject(i);

          // changed if the view id is different
          if (newState.bm[i].viewId !== tabObject.viewName) {
            hasChanged = true;
          } else if (tabObject.pane.isEqualParams) {
            // or if the bookmark params are not the same
            hasChanged = hasChanged || !tabObject.pane.isEqualParams(newState.bm[i].params);
          }
        }
      }

      isc.Log.logDebug('Changed ' + hasChanged, 'OB');

      // changes occured, start from scratch again, recreating each view
      if (hasChanged) {
        // stop if tabSet removed failed because a tab has incorrect data
        if (!OB.MainView.TabSet.removeTabs(OB.MainView.TabSet.tabs)) {
          vmgr.inStateHandling = false;
          return;
        }

        vmgr.views.cache = [];

        // handles the case that not all views are there
        // view implementations are requested async resulting
        // in a wrong tab order, therefore only get the views
        // in the correct order, continuing when a new view 
        // arrives
        // see here:
        // https://issues.openbravo.com/view.php?id=15146
        requestViewsRestoreState = function (rpcResponse) {
          var clientContext = rpcResponse.clientContext;
          var currentIndex = clientContext.currentIndex;
          var data = clientContext.data;
          var newState = clientContext.newState;
          var tabsLength = clientContext.tabsLength;
          var i, viewId;

          if (currentIndex < tabsLength) {
            for (i = currentIndex; i < tabsLength; i++) {

              // ignore the first tab, or the tabs opened without view id
              if (!newState.bm[i].viewId) {
                continue;
              }
              // not defined get the view!
              if (!isc[newState.bm[i].viewId]) {
                viewId = newState.bm[i].viewId;
                clientContext.currentIndex = i + 1;
                vmgr.fetchView(viewId, requestViewsRestoreState, clientContext, newState.bm[i].params);
                return;
              }
            }
          }
          // everything is here, open the views
          for (i = 0; i < tabsLength; i++) {

            if (data && data[i]) {
              stateData = data[i];
            }

            // ignore the first tab, or the tabs opened without view id
            if (!newState.bm[i].viewId) {
              continue;
            }

            vmgr.openView(newState.bm[i].viewId, newState.bm[i].params, stateData);
          }
          OB.MainView.TabSet.selectTab(newState.st);
          vmgr.inStateHandling = false;
        };

        for (i = 0; i < tabsLength; i++) {

          if (data && data[i]) {
            stateData = data[i];
          }

          // ignore the first tab, or the tabs opened without view id
          if (!newState.bm[i].viewId) {
            continue;
          }

          if (!isc[newState.bm[i].viewId]) {
            var clientContext = {};

            viewId = newState.bm[i].viewId;
            clientContext.currentIndex = i + 1;
            clientContext.data = data;
            clientContext.newState = newState;
            clientContext.tabsLength = tabsLength;
            vmgr.fetchView(viewId, requestViewsRestoreState, clientContext, newState.bm[i].params);
            return;
          }

          vmgr.openView(newState.bm[i].viewId, newState.bm[i].params, stateData);
        }
      }

      OB.MainView.TabSet.selectTab(newState.st);

      vmgr.inStateHandling = false;
    },

    createAddStartTab: function () {
      var error, historyId = isc.History.getCurrentHistoryId();
      if (historyId) {
        try {
          OB.Layout.HistoryManager.restoreHistory(historyId, isc.History.getHistoryData(historyId));
          return;
        } catch (exception) {
          // ignore all errors
        }
      }

      // todo: this call in a way assumes that there is a myob module installed
      // it is nicer to somehow set the page to load in a different way
      // this can be done if an smartclient problem has been solved
      // see this forum post:
      // http://forums.smartclient.com/showthread.php?p=53077
      var viewId = 'OBMyOpenbravoImplementation';
      var viewParams = {
        tabTitle: OB.I18N.getLabel('OBUIAPP_MyOpenbravo'),
        myOB: true,
        canClose: false
      };
      // check if there is already a start page, only open it if not
      var viewTabId = this.views.getViewTabID(viewId, viewParams);
      if (!viewTabId) {
        this.openView(viewId, viewParams, null);
      }

      // check if a tabId was passed as a url param
      // only do this if there is no other history
      if (!historyId) {
        var urlParams = OB.Utilities.getUrlParameters();
        if (urlParams.tabId) {
          OB.Utilities.openDirectTab(urlParams.tabId, urlParams.recordId, urlParams.command);
        }
      }
    }
  };

  // Initialize ViewManager object
  vmgr = L.ViewManager = OB.ViewManager = new ViewManager();
}(OB, isc));
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2010-2013 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */

// = ClassicOBCompatibility =
//
// The ClassicOBCompatibility handles the interaction between the classic OB window
// and the {{{Main View}}}. This includes opening views from the linked items display,
// from direct links in other tabs.
//
(function (OB, isc) {

  if (!OB || !isc) {
    throw {
      name: 'ReferenceError',
      message: 'openbravo and isc objects are required'
    };
  }

  // cache object references locally
  var O = OB,
      L = OB.Layout,
      M = OB.MainView,
      ISC = isc,
      cobcomp;

  function ClassicOBCompatibility() {}

  ClassicOBCompatibility.prototype = {

    // ** {{{ openLinkedItem(tabId, recordId) }}} **
    //
    // Opens a window from the linked item view.
    //
    // Parameters:
    // * {{{tabId}}} id of the tab to open
    // * {{{recordId}}} the record to show
    //
    openLinkedItem: function (tabId, recordId) {
      var doOpenClassicWindow;
      doOpenClassicWindow = function (response, data, request) {

        if (!data.recordId || data.recordId.length === 0) {
          L.ViewManager.openView('OBClassicWindow', {
            tabTitle: data.tabTitle,
            windowId: data.windowId,
            tabId: data.tabId,
            mappingName: data.mappingName,
            command: 'DEFAULT'
          });
        } else {
          L.ViewManager.openView('OBClassicWindow', {
            tabTitle: data.tabTitle,
            windowId: data.windowId,
            tabId: data.tabId,
            mappingName: data.mappingName,
            keyParameter: data.keyParameter,
            recordId: data.recordId,
            command: 'DIRECT'
          });
        }
      };

      OB.RemoteCallManager.call('org.openbravo.client.application.ComputeWindowActionHandler', {}, {
        'tabId': tabId,
        'recordId': recordId
      }, doOpenClassicWindow);
    },

    // ** {{{ sendDirectLink(action, form) }}} **
    //
    // Shows a new tab with the clicked link content
    //
    // Parameters:
    // * {{{action}}} is a String with the Command action to call the servlet,
    // e.g. {{{ JSON }}}
    // * {{{form}}} is an Object of the form from where it has been submitted
    //
    sendDirectLink: function (action, form) {

      //
      // Returns a form field and value as a javascript object composed by name and value fields
      //

      function inputValueForms(name, field) {
        var result = {};
        if (!field || name.toString().replace(/^\s*/, '').replace(/\s*$/, '') === '') {
          return result;
        }
        if (!field.type && field.length > 1) {
          field = field[0];
        }
        if (field.type) {
          if (field.type.toUpperCase().indexOf('SELECT') !== -1) {
            if (field.selectedIndex === -1) {
              return result;
            } else {
              var length = field.options.length,
                  fieldsCount;
              for (fieldsCount = 0; fieldsCount < length; fieldsCount++) {
                if (field.options[fieldsCount].selected) {
                  result.name = name;
                  result.value = field.options[fieldsCount].value;
                }
              }
              return result;
            }
          } else if (field.type.toUpperCase().indexOf('RADIO') !== -1 || field.type.toUpperCase().indexOf('CHECK') !== -1) {
            if (!field.length) {
              if (field.checked) {
                result.name = name;
                result.value = field.value;
                return result;
              } else {
                return result;
              }
            } else {
              var total = field.length,
                  i;
              for (i = 0; i < total; i++) {
                if (field[i].checked) {
                  result.name = name;
                  result.value = field[i].value;
                }
              }
              return result;
            }
          } else {
            result.name = name;
            result.value = field.value;
            return result;
          }
        }

        return result;
      }

      //
      // Returns a JSON of all the form fields. Also adds Command and IsAjaxCall
      // parameters to communicate with the classic OB class
      //

      function getXHRParamsObj(action, formObject) {
        var paramsObj = {},
            i, length = formObject.elements.length;

        paramsObj.Command = action;
        paramsObj.IsAjaxCall = '1';

        for (i = 0; i < length; i++) {
          if (formObject.elements[i].type) {
            var param = inputValueForms(formObject.elements[i].name, formObject.elements[i]);

            if (param && param.name !== 'Command') {
              paramsObj[param.name] = param.value;
            }
          }
        }
        return paramsObj;
      }

      //
      // Function used by the {{ ISC.RPCManager }} after receiving the
      // target address from the back-end
      //

      function fetchSendDirectLinkCallback(response, data) {
        OB.Utilities.openView(data.windowId, data.tabId, data.tabTitle, data.recordId);
      }

      //
      // Fetch the target address from the server. After fetching
      // the implementation, stores a reference in the cache
      //

      function fetchSendDirectLink(action, formObject) {
        var paramsObj = getXHRParamsObj(action, formObject);
        // hardcode the reference link url
        // formObject.action.toString();
        // hardcode to prevent this issue with chrome:
        // https://issues.openbravo.com/view.php?id=13837
        var actionURL = OB.Application.contextUrl + 'utility/ReferencedLink.html';

        var rpcMgr = ISC.RPCManager;
        var reqObj = {
          params: paramsObj,
          callback: fetchSendDirectLinkCallback,
          evalResult: true,
          httpMethod: 'GET',
          useSimpleHttp: true,
          actionURL: actionURL
        };
        var request = rpcMgr.sendRequest(reqObj);
      }
      fetchSendDirectLink(action, form);
    },

    setTabInformation: function (windowId, tabId, recordId, mode, obManualURL, title) {
      var tabNumber = null,
          tabSet, tabPane;
      tabSet = M.TabSet;
      if (windowId) {
        tabNumber = L.ViewManager.views.getTabNumberFromViewParam('windowId', windowId);
      } else if (obManualURL) {
        tabNumber = L.ViewManager.views.getTabNumberFromViewParam('obManualURL', obManualURL);
      } else if (tabId) {
        tabNumber = L.ViewManager.views.getTabNumberFromViewParam('tabId', tabId);
      }

      if (!tabNumber) {
        tabNumber = tabSet.getTabNumber(tabSet.getSelectedTab());
      }

      if (tabNumber === null) {
        return false;
      }

      tabPane = tabSet.getTabPane(tabNumber);

      tabSet.setTabTitle(tabNumber, title);
      tabPane.updateTabInformation(windowId, tabId, recordId, mode, obManualURL, title);
    },

    Keyboard: {
      getMDIKS: function () {
        var key, auxKey, action, funcParam, keyMap, ClassicKeyJSON = [],
            LKS = O.KeyboardManager.Shortcuts,
            i, j, isCanvasShortcut, length = LKS.list.length;

        for (i = 0; i < length; i++) {
          auxKey = '';
          isCanvasShortcut = false;

          if (LKS.list[i].execLevel) {
            for (j = 0; j < LKS.list[i].execLevel.length; j++) {
              if (LKS.list[i].execLevel[j] === 'Canvas') {
                isCanvasShortcut = true;
                break;
              }
            }
          }

          if (isCanvasShortcut) {
            if (LKS.list[i].keyComb.ctrl === true) {
              if (auxKey.length > 0) {
                auxKey += '+';
              }
              auxKey += 'ctrlKey';
            }
            if (LKS.list[i].keyComb.alt === true) {
              if (auxKey.length > 0) {
                auxKey += '+';
              }
              auxKey += 'altKey';
            }
            if (LKS.list[i].keyComb.shift === true) {
              if (auxKey.length > 0) {
                auxKey += '+';
              }
              auxKey += 'shiftKey';
            }
            if (LKS.list[i].keyComb.key !== null) {
              key = LKS.list[i].keyComb.key;
            }

            action = LKS.list[i].action;
            funcParam = LKS.list[i].funcParam;

            // Special keys nomenclature adaptation from Smartclient way to
            // classic utils.js way
            keyMap = {
              'Backspace': 'BACKSPACE',
              'Tab': 'TAB',
              'Enter': 'ENTER',
              'Space': 'SPACE',
              'Insert': 'INSERT',
              'End': 'END',
              'Home': 'HOME',
              'Page_Up': 'REPAGE',
              'Page_Down': 'AVPAGE',
              'Arrow_Left': 'LEFTARROW',
              'Arrow_Right': 'RIGHTARROW',
              'Arrow_Up': 'UPARROW',
              'Arrow_Down': 'DOWNARROW',
              '+': 'NUMBERPOSITIVE',
              '-': 'NUMBERNEGATIVE',
              '.': 'NUMBERDECIMAL',
              'Escape': 'ESCAPE',
              'f1': 'F1',
              'f2': 'F2',
              'f3': 'F3',
              'f4': 'F4',
              'f5': 'F5',
              'f6': 'F6',
              'f7': 'F7',
              'f8': 'F8',
              'f9': 'F9',
              'f10': 'F10',
              'f11': 'F11',
              'f12': 'F12'
            };

            key = keyMap[key] || key;

            ClassicKeyJSON.push({
              'key': key,
              'auxKey': auxKey,
              'action': action,
              'funcParam': funcParam
            });
          }
        }

        return ClassicKeyJSON;
      },

      executeKSFunction: function (func, funcParam) {
        func(funcParam);
      }
    },

    Popup: {
      secString: 'dbXE8hjGuKyMefVf',

      // ** {{{ Popup.open(name, width, height, url, title, theOpener) }}} **
      //
      // Shows a new popup with content
      //
      // Parameters:
      // * {{{name}}} type: String - the name of the window. Used to manage
      // window.open target
      // * {{{width}}} type: String | Number - the width of the popup. It can be
      // set as a String as a %
      // * {{{height}}} type: String | Number - the height of the popup. It can
      // be set as a String as a %
      // * {{{url}}} type: String - the url to be opened in the popup
      // * {{{title}}} type: String - the title to be displayed in the popup
      // * {{{theOpener}}} type: Window Object - the window object of the opener of the popup. Used in window.open to allow IE know which is the opener
      // * {{{showMinimizeControl}}} type: Boolean - to specify if the popup should show the minimize control or not. The default value is "true" if it is not specified
      // * {{{showMaximizeControl}}} type: Boolean - to specify if the popup should show the maximize control or not. The default value is "true" if it is not specified
      // * {{{showCloseControl}}} type: Boolean - to specify if the popup should show the close control or not. The default value is "true" if it is not specified
      // * {{{postParams}}} type: Object - parameters to be sent to the url using POST instead of GET
      // * {{{isModal}}} type: Boolean - to specify if the popup should be modal or not. The default value is "true" if it is not specified
      // * {{{show}}} type: Boolean - to specify if the popup should be shown or not. The default value is "true" if it is not specified
      // 
      // returns the created OBClassicPopupWindow
      open: function (name, width, height, url, title, theOpener, showMinimizeControl, showMaximizeControl, showCloseControl, postParams, isModal, show) {
        var urlCharacter = (url && url.indexOf('?') !== -1) ? '&' : '?';

        if (showMinimizeControl !== false) {
          showMinimizeControl = true;
        }
        if (showMaximizeControl !== false) {
          showMaximizeControl = true;
        }
        if (showCloseControl !== false) {
          showCloseControl = true;
        }
        if (isModal !== false) {
          isModal = true;
        }
        if (show !== false) {
          show = true;
        }
        var _htmlCode, _navUserAgent = navigator.userAgent.toUpperCase();
        if (OB.Utilities.isIE9Strict || _navUserAgent.indexOf("MSIE") === -1) { // IE >= 9 (Strict) or any other browser
          _htmlCode = '<html><head></head><body style="margin: 0; padding: 0; border: none;">' + '<iframe id="MDIPopupContainer" name="MDIPopupContainer" style="margin: 0; padding: 0; border: none; width: 100%; height: 100%;"></iframe>' + '<iframe name="frameMenu" scrolling="no" src="' + OB.Application.contextUrl + 'utility/VerticalMenu.html?Command=HIDE" id="paramFrameMenuLoading" style="margin: 0px; padding: 0px; border: 0px; height: 0px; width: 0px;"></iframe>' + '</body></html>';
        } else { // IE <= 8
          _htmlCode = '<html><head></head><frameset cols="*, 0%" rows="*" frameborder="no" border="0" framespacing="0">' + '<frame id="MDIPopupContainer" name="MDIPopupContainer"></frame>' + '<frame name="frameMenu" scrolling="no" src="' + OB.Application.contextUrl + 'utility/VerticalMenu.html?Command=HIDE" id="paramFrameMenuLoading"></frame>' + '</frameset><body></body></html>';
        }
        var cPopup = isc.OBClassicPopup.create({
          ID: name + '_' + cobcomp.Popup.secString,
          width: width,
          height: height,
          showMinimizeButton: showMinimizeControl,
          showMaximizeButton: showMaximizeControl,
          showCloseButton: showCloseControl,
          isModal: isModal,
          showModalMask: isModal,
          theOpener: theOpener,
          areParamsSet: false,
          isFramesetDraw: false,
          isLoaded: false,
          htmlCode: _htmlCode,
          popupURL: url + urlCharacter + 'IsPopUpCall=1'
        });
        cPopup.show();
        if (!show) {
          cPopup.hide();
        }
        if (cPopup.getIframeHtmlObj) {
          cPopup.getIframeHtmlObj().name = 'OBClassicPopup_iframe'; //To be used in automated tests: https://issues.openbravo.com/view.php?id=16786
        }
        cobcomp.Popup.postOpen(cPopup, postParams);
        OB.Utilities.registerClassicPopupInTestRegistry(url, cPopup);
        return cPopup;
      },

      // ** {{{ Popup.postOpen(cPopup, postParams) }}} **
      //
      // Actions to be performed once the popup is draw.
      //
      // Parameters:
      // * {{{cPopup}}} type: Canvas - the drawn popup
      // * {{{postParams}}} type: Object - parameters to be sent to the url using POST instead of GET
      postOpen: function (cPopup, postParams) {
        if (!cPopup.isFramesetDraw) {
          cPopup.getIframeHtmlObj().contentWindow.document.write(cPopup.htmlCode);
          cPopup.isFramesetDraw = true;
        }
        if (!cPopup.getIframeHtmlObj().contentWindow.frames[0].document.body) {
          setTimeout(function () {
            cobcomp.Popup.postOpen(cPopup, postParams);
          }, 50);
          return true;
        }
        if (navigator.userAgent.toUpperCase().indexOf('MSIE') !== -1) {
          //  In IE (non-Strict) if window.open is executed against a frame, the target frame doesn't know which is its opener
          if (typeof cPopup.getIframeHtmlObj().contentWindow.frames[0].opener === 'undefined') {
            cPopup.getIframeHtmlObj().contentWindow.frames[0].opener = cPopup.theOpener;
            if (typeof cPopup.getIframeHtmlObj().contentWindow.frames[0].opener === 'undefined') {
              setTimeout(function () {
                cobcomp.Popup.postOpen(cPopup, postParams);
              }, 50);
              return true;
            }
          }
        }
        var wName = cPopup.ID;
        wName = wName.substring(0, wName.lastIndexOf(cobcomp.Popup.secString) - 1);
        if (!cPopup.areParamsSet) {
          if (!postParams) {
            cPopup.getIframeHtmlObj().contentWindow.frames[0].location.href = cPopup.popupURL;
            if (OB.Utilities.isIE9Strict) {
              // In IE9 Strict, when the location.href or .src is defined, the previous defined opener is lost, and it should be defined again
              cPopup.getIframeHtmlObj().contentWindow.frames[0].opener = cPopup.theOpener;
              var setOpenerInterval;
              setOpenerInterval = setInterval(

              function () {
                if (!cPopup.getIframeHtmlObj()) {
                  clearInterval(setOpenerInterval);
                } else if (cPopup.getIframeHtmlObj().contentWindow.frames[0].document.readyState === 'complete') {
                  if (!cPopup.getIframeHtmlObj().contentWindow.frames[0].opener) {
                    cPopup.getIframeHtmlObj().contentWindow.frames[0].opener = cPopup.theOpener;
                  }
                  if (cPopup.getIframeHtmlObj().contentWindow.frames[0].window.MDIPopupId !== wName) {
                    cPopup.getIframeHtmlObj().contentWindow.document.getElementById('MDIPopupContainer').name = wName;
                    cPopup.getIframeHtmlObj().contentWindow.frames[0].window.checkWindowInMDIPopup();
                  }
                }
              }, 100);
            }
          } else {
            // Create a form and POST parameters as input hidden values
            var doc = cPopup.getIframeHtmlObj().contentWindow.frames[0].document,
                frm = doc.createElement('form'),
                i;
            frm.setAttribute('method', 'post');
            frm.setAttribute('action', cPopup.popupURL);
            for (i in postParams) {
              if (postParams.hasOwnProperty(i)) {
                var inp = doc.createElement('input');
                inp.setAttribute('type', 'hidden');
                inp.setAttribute('name', i);
                inp.setAttribute('value', postParams[i]);
                frm.appendChild(inp);
              }
            }
            doc.body.appendChild(frm);
            frm.submit();
          }
          cPopup.getIframeHtmlObj().contentWindow.frames[0].name = wName;
          cPopup.getIframeHtmlObj().contentWindow.document.getElementById('MDIPopupContainer').name = wName;
          cPopup.areParamsSet = true;
        }
        if (cPopup.areParamsSet && cPopup.getIframeHtmlObj().contentWindow.frames[0].name !== wName) {
          setTimeout(function () {
            cobcomp.Popup.postOpen(cPopup, postParams);
          }, 50);
        }
        cPopup.isLoaded = true;
      },

      // ** {{{ Popup.close(name) }}} **
      //
      // Closes a popup
      //
      // Parameters:
      // * {{{name}}} type: String - the name of the window
      close: function (name, cancelEvent) {
        var activateView;

        name = name + '_' + cobcomp.Popup.secString;
        activateView = window[name].activeViewWhenClosed;
        window[name].closeClick();

        if (!cancelEvent && activateView) {
          activateView.setAsActiveView();
        }
      },

      // ** {{{ Popup.getPopup(name) }}} **
      //
      // Get the popup instance.
      //
      // Parameters:
      // * {{{name}}} type: String - the name of the window
      getPopup: function (name) {
        return window[name + '_' + cobcomp.Popup.secString];
      },

      // ** {{{ Popup.close(name, width, height) }}} **
      //
      // Resizes a poup
      //
      // Parameters:
      // * {{{name}}} type: String - the name of the window
      // * {{{width}}} type: Number - width to resize to
      // * {{{height}}} type: Number - height to resize to
      resize: function (name, width, height) {
        name = name + '_' + cobcomp.Popup.secString;
        window[name].resizeTo(width, height);
      },

      // ** {{{ Popup.setTitle(name, title) }}} **
      //
      // Sets the window title
      //
      // Parameters:
      // * {{{name}}} type: String - the name of the window
      // * {{{title}}} type: String - the title of the window
      setTitle: function (name, title) {
        name = name + '_' + cobcomp.Popup.secString;
        window[name].setTitle(title);
      },

      // ** {{{ Popup.isLoaded(name) }}} **
      //
      // Function to know if a popup is already opened (and ready) or not
      //
      // Parameters:
      // * {{{name}}} type: String - the name of the window
      isLoaded: function (name) {
        name = name + '_' + cobcomp.Popup.secString;
        if (window[name].isLoaded) {
          return true;
        } else {
          return false;
        }
      },


      /** Upgrading process pop ups **/
      standardUpgrading: function () {
        var actionButton = isc.addProperties({}, isc.Dialog.OK, {
          getTitle: function () {
            return '<b>' + OB.I18N.getLabel('OBUIAPP_LogOut') + '</b>';
          },
          click: function () {
            this.topElement.cancelClick();
            OB.Utilities.logout(true);
          }
        });

        isc.confirm(OB.I18N.getLabel('OBUIAPP_UpgradeDesc'), {
          isModal: true,
          showModalMask: true,
          title: OB.I18N.getLabel('OBUIAPP_UpgradeTitle'),
          toolbarButtons: [actionButton, isc.Dialog.CANCEL]
        });
      },

      openAPRMPopup: function () {
        var actionButton = isc.addProperties({}, isc.Dialog.OK, {
          getTitle: function () {
            return '<b>' + OB.I18N.getLabel('OBUIAPP_UpgradeRunAPRMBtn') + '</b>';
          },
          click: function () {
            this.topElement.cancelClick();
            OB.Layout.ViewManager.openView('OBClassicWindow', {
              command: "DEFAULT",
              formId: "E4F4AAC7DD6D4FBDA3AF973B7767F374",
              icon: "Form",
              id: "/org.openbravo.erputil.aprmigrationtool.ad_forms/MigrationTool.html",
              obManualURL: "/org.openbravo.erputil.aprmigrationtool.ad_forms/MigrationTool.html",
              tabTitle: OB.I18N.getLabel('APRMT_MigrationToolTitle'),
              viewId: "OBClassicWindow"
            });
          }
        });

        isc.confirm(OB.I18N.getLabel('OBUIAPP_UpgradeRunAPRMDesc'), {
          isModal: true,
          showModalMask: true,
          title: OB.I18N.getLabel('OBUIAPP_UpgradeRunAPRMTitle'),
          toolbarButtons: [actionButton, isc.Dialog.CANCEL]
        });
      },

      openConfigScriptPopup: function (scripts) {
        var actionButton = isc.addProperties({}, isc.Dialog.OK, {
          click: function () {
            this.topElement.cancelClick();
          }
        });

        isc.confirm(OB.I18N.getLabel('OBUIAPP_UpgradeScriptDesc', [scripts]), {
          isModal: true,
          showModalMask: true,
          title: OB.I18N.getLabel('OBUIAPP_UpgradeScriptTitle'),
          toolbarButtons: [actionButton]
        });
      },

      openSuccessUpgradePopup: function () {
        var actionButton = isc.addProperties({}, isc.Dialog.OK, {
          click: function () {
            this.topElement.cancelClick();
            OB.PropertyStore.set('isUpgrading', 'N', null, false, true);
          }
        });

        isc.confirm(OB.I18N.getLabel('OBUIAPP_UpgradeEndDesc'), {
          isModal: true,
          showModalMask: true,
          title: OB.I18N.getLabel('OBUIAPP_UpgradeEndTitle'),
          toolbarButtons: [actionButton]
        });
      },

      /** Particular windows * */
      // ** {{{ Popup.openInstancePurpose() }}} **
      //
      // Opens directly the "Instance Purpose" window inside a popup
      openInstancePurpose: function () {
        cobcomp.Popup.open('InstancePurpose', 600, 500, OB.Application.contextUrl + 'ad_forms/InstancePurpose.html', '', window, false, false, true);
      },

      // ** {{{ Popup.openHeartbeat() }}} **
      //
      // Opens directly the "Heartbeat" window inside a popup
      openHeartbeat: function () {
        cobcomp.Popup.open('Heartbeat', 600, 500, OB.Application.contextUrl + 'ad_forms/Heartbeat.html', '', window, false, false, true);
      },

      // ** {{{ Popup.openRegistration() }}} **
      //
      // Opens directly the "Registration" window inside a popup
      openRegistration: function () {
        cobcomp.Popup.open('Registration', 600, 500, OB.Application.contextUrl + 'ad_forms/Registration.html', '', window, false, false, true);
      }
    }
  };

  // Initialize ClassicOBCompatibility object
  cobcomp = L.ClassicOBCompatibility = new ClassicOBCompatibility();
}(OB, isc));

isc.ClassFactory.defineClass('OBUIAPP_RegistrationView', isc.Layout).addProperties({
  initWidget: function () {
    OB.Layout.ClassicOBCompatibility.Popup.openRegistration();

    this.Super('initWidget', arguments);
  }
});
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License+
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2010-2012 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */

// = History Manager =
//
// Keeps track of the state of the user interface and handle the back button 
// in a correct way. The state is stored in the url in the address field 
// of the browser. Every user action related to the tabs can result in an 
// update of the history state: select a tab, open a tab, close a tab etc.
// The history manager makes use of the smartclient isc.History object to 
// actually update the address in the address bar and to get called when
// the user presses the back or forward button.
//
(function (OB, isc) {

  if (!OB || !isc) {
    throw {
      name: 'ReferenceError',
      message: 'openbravo and isc objects are required'
    };
  }

  // cache object references locally
  var L = OB.Layout,
      QUOTE_REPLACE = '__',
      ISC = isc,
      historyMgr;

  function HistoryManager() {}

  HistoryManager.prototype = {

    // ** {{{ updateHistory }}} **
    //
    // Stores the current state of the main layout as a bookmark. This method
    // is called when new tabs are opened, tabs are closed, a tab is selected
    // or another history changing event occurs. Each
    // tab in the layout is asked for its bookMarkParams which represent the
    // state of that tab. The combined state is passed to the smartclient
    // History object.
    //
    updateHistory: function () {

      var state = {},
          stateStr, data, i, tabsLength, tab, tabObject;

      if (L.ViewManager.inStateHandling) {
        return;
      }

      // the selected tab, note short name to
      // help with browser url restriction
      state.st = OB.MainView.TabSet.getSelectedTabNumber();

      // then for each tab store the book mark parameters
      // note name is abbreviated to help with browser url restriction
      state.bm = [];
      tabsLength = OB.MainView.TabSet.tabs.length;
      data = [];
      for (i = 0; i < tabsLength; i++) {
        tab = OB.MainView.TabSet.tabs[i];

        state.bm[i] = {};

        // get the original tab object
        tabObject = OB.MainView.TabSet.getTabObject(tab);

        state.bm[i] = {
          viewId: tabObject.viewName
        };

        // store the bookmark parameters
        if (tabObject.pane && tabObject.pane.getBookMarkParams) {
          state.bm[i].params = tabObject.pane.getBookMarkParams();
          if (!state.bm[i].params.tabTitle) {
            state.bm[i].params.tabTitle = tabObject.title;
          }
        }

        // let tabs store extra data
        if (tabObject.pane && tabObject.pane.getState) {
          data[i] = tabObject.pane.getState();
        }
      }

      // now encode the state as a json string
      // which is used as a the id in the url
      stateStr = isc.JSON.encode(state, {
        prettyPrint: false,
        strictQuoting: false
      });

      // smartclient fails if there is a " in the string, replace them all
      stateStr = stateStr.replace(/"/g, QUOTE_REPLACE);

      // some browsers have this limitation
      if (stateStr.length > 2083) {
        isc.Log.logWarn('History string length > 2083, not storing history');
        return;
      }

      if (tabsLength === 0) {
        stateStr = null;
      }

      // only store state if something changed
      if (stateStr !== isc.History.getCurrentHistoryId()) {
        isc.Log.logDebug('Updating history ' + stateStr, 'OB');

        isc.History.addHistoryEntry(stateStr, 'Openbravo History', data);
      }
    },

    // ** {{ restoreHistory }} **
    // The call back called by the smartclient history manager when the user
    // presses the back or forward button or moves through the history in
    // general.
    // Parameters:
    // * {{{id}}} type: JSON String, contains the complete state as a json
    // string
    // * {{{data}}} type: String, extra parameter passed in by Smartclient, not
    // used
    restoreHistory: function (id, data) {
      var correctedId, state;
      isc.Log.logDebug('Restoring history ' + id, 'OB');

      if (!id) {
        // don't do anything in this case
        return;
      }

      // see the QUOTE_REPLACE constant
      correctedId = id.replace(/__/g, '"');
      state = isc.JSON.decode(correctedId);

      L.ViewManager.restoreState(state, data);
    }
  };

  // Initialize the HistoryManager object
  historyMgr = L.HistoryManager = new HistoryManager();

  // and register the callback
  isc.History.registerCallback('OB.Layout.HistoryManager.restoreHistory(id, data)');

}(OB, isc));
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2011-2012 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */

isc.OBPersonalizationTreeGrid.addProperties({
  bodyStyleName: 'OBGridBody',
  baseStyle: 'OBPersonalizationTreeGridCell',
  styleName: 'OBFormPersonalizationFieldsTreeGrid',

  showOpener: false,
  // eventhough showOpener is false, still space is taken for an opener
  // icon, set to a small number, should be > 0 (otherwise it it not used)
  // this setting of 2 makes the drag indicator to be 2 pixels to the right also
  openerIconSize: 2,

  width: '100%',
  indentSize: 10
});


OB.Styles.Personalization = {};

OB.Styles.Personalization.Menu = {
  styleName: 'OBPersonalizationPullDownMenu',
  baseStyle: 'OBPersonalizationPullDownMenuCell',
  bodyStyleName: 'OBPersonalizationPullDownMenuBody',
  tableStyle: "OBPersonalizationPullDownMenuTable",
  iconBodyStyleName: 'OBPersonalizationPullDownMenuBody',
  iconWidth: 4,
  iconHeight: 8,
  itemIcon: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/personalization/iconSelectedView.png',
  bodyBackgroundColor: null
};

OB.Styles.Personalization.saveViewPopupSmall = {
  width: 250,
  height: 150
};

OB.Styles.Personalization.saveViewPopupLarge = {
  width: 250,
  height: 280
};

OB.Styles.Personalization.popupButtonLayout = {
  layoutTopMargin: 20,
  membersMargin: 10,
  width: '100%',
  align: 'center',
  overflow: 'visible',
  height: 1
};

OB.Styles.Personalization.viewFieldDefaults = {
  width: 200
};

OB.Styles.Personalization.deleteViewPopup = {
  width: 250,
  height: 150
};

OB.Styles.Personalization.buttonBarWidth = 30;

OB.Styles.Personalization.Icons = {
  fieldGroup: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/personalization/iconFolder.png',
  field: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/personalization/item.png',
  fieldDisplayLogic: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/personalization/itemDisplayLogic.png',
  fieldDisplayLogicHidden: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/personalization/itemDisplayLogicHidden.png',
  fieldHidden: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/personalization/itemHidden.png',
  fieldRequired: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/personalization/itemRequired.png',
  fieldRequiredDisplayLogic: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/personalization/itemRequiredDisplayLogic.png',
  fieldRequiredDisplayLogicHidden: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/personalization/itemRequiredDisplayLogicHidden.png',
  fieldRequiredHidden: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/personalization/itemRequiredHidden.png'
};

OB.Styles.Personalization.closeButtonProperties = {
  width: 18,
  height: 18
};

OB.Styles.Personalization.FormPersonalizerLeftPane = {
  width: 200
};

OB.Styles.Personalization.FieldsLayout = {
  styleName: 'OBFieldsPane'
};

OB.Styles.Personalization.Preview = {
  styleName: 'OBFormPersonalizerPreviewPanel'
};

OB.Styles.Personalization.PropertiesTabSet = {
  expandedHeight: 175,
  collapsedHeight: 35
};

OB.Styles.Personalization.PropertiesLayout = {
  styleName: 'OBFormPersonalizerPropertiesPane'
};

// used to display a tab header above sections of the personalization form
OB.Styles.Personalization.TabSet = {
  tabBarProperties: {
    styleName: 'OBTabBarChild',
    simpleTabBaseStyle: 'OBTabBarButtonChild',
    paneContainerClassName: 'OBTabSetChildContainer',
    buttonConstructor: isc.OBTabBarButton,

    buttonProperties: {
      // prevent the orange hats
      customState: 'Inactive',

      src: '',
      capSize: 14,
      titleStyle: 'OBTabBarButtonChildTitle'
    }
  },
  tabBarPosition: 'top',
  tabBarAlign: 'left',
  width: '100%',
  height: '100%',
  overflow: 'hidden',

  showTabPicker: false,

  // get rid of the margin around the content of a pane
  paneMargin: 0,
  paneContainerMargin: 0,
  paneContainerPadding: 0,
  showPaneContainerEdges: false,

  useSimpleTabs: true,
  tabBarThickness: 38,
  styleName: 'OBTabSetChild',
  simpleTabBaseStyle: 'OBTabBarButtonChild',
  paneContainerClassName: 'OBTabSetChildContainer',

  scrollerSrc: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/tab/tabBarButtonChild_OverflowIcon.png',
  pickerButtonSrc: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/tab/tabBarButtonChild_OverflowIconPicker.png'
};
isc.defineClass("PeriodControlStatus_Field",isc.Label);isc.PeriodControlStatus_Field.addProperties({height:1,width:100,initWidget:function(){if(this.record&&this.record.periodStatus){this.createField(this.record.periodStatus);}this.Super("initWidget",arguments);},createField:function(a){var b="#C0C0C0",c,d="center";
if(a==="O"){b="#00FF00";c="";}else{if(a==="C"){b="#FF0000";c="";}else{if(a==="P"){b="#FF0000";c="";}else{if(a==="N"){b="#C2C2A3";c="";}else{c="periodControlStatus not supported";}}}}this.setBackgroundColor(b);this.setAlign(d);}});isc.defineClass("PeriodStatus_Field",isc.Label);isc.PeriodStatus_Field.addProperties({height:1,width:100,initWidget:function(){if(this.record&&this.record.status){this.createField(this.record.status);
}this.Super("initWidget",arguments);},createField:function(a){var b="#C0C0C0",c,d="center";if(a==="O"){b="#00FF00";c="";}else{if(a==="C"){b="#FF0000";c="";}else{if(a==="P"){b="#FF0000";c="";}else{if(a==="M"){b="#FFA319";c="";}else{if(a==="N"){b="#C2C2A3";c="";}else{c="periodStatus not supported";}}}}}this.setBackgroundColor(b);
this.setAlign(d);}});OB=OB||{};OB.OpenClose={execute:function(b,f){var d,g=b.button.contextView.viewGrid.getSelectedRecords(),e=[],c=f.getView(b.adTabId).messageBar,j,h,a=true;j=function(n,m,l){var k=n.status,i=l.clientContext.view.getView(b.adTabId);i.messageBar.setMessage(m.message.severity,null,m.message.text);
b.button.closeProcessPopup();};for(d=0;d<g.length;d++){e.push(g[d].id);}isc.OpenClosePeriodProcessPopup.create({recordIdList:e,view:f,params:b}).show();},openClose:function(b,a){b.actionHandler="org.openbravo.client.application.event.OpenClosePeriodHandler";b.adTabId=a.activeView.tabId;b.processId="A832A5DA28FB4BB391BDE883E928DFC5";
OB.OpenClose.execute(b,a);}};isc.defineClass("OpenClosePeriodProcessPopup",isc.OBPopup);isc.OpenClosePeriodProcessPopup.addProperties({width:320,height:200,title:null,showMinimizeButton:false,showMaximizeButton:false,mainform:null,okButton:null,cancelButton:null,getActionList:function(b){var c={recordIdList:this.recordIdList},d,a=this;
c.action="ACTION_COMBO";OB.RemoteCallManager.call("org.openbravo.client.application.event.OpenClosePeriodHandler",c,{},function(e,g,f){if(e){d=b.getField("Action");if(e.data){a.setTitle("Process Request");d.closePeriodStepId=e.data.nextStepId;d.setValueMap(e.data.actionComboBox.valueMap);d.setDefaultValue(e.data.actionComboBox.defaultValue);
}}});},initWidget:function(){OB.TestRegistry.register("org.openbravo.client.application.OpenClosePeriod.popup",this);var c=this.recordIdList,a=this.view,b=this.params;this.mainform=isc.DynamicForm.create({numCols:2,colWidths:["50%","50%"],fields:[{name:"Action",title:OB.I18N.getLabel("Action"),height:20,width:255,required:true,type:"_id_17",closePeriodStepId:null,defaultToFirstOption:true}]});
this.okButton=isc.OBFormButton.create({title:OB.I18N.getLabel("OK"),popup:this,action:function(){var e,d;e=function(j,i,h){var g=j.status,f=h.clientContext.originalView.getView(b.adTabId);if(i.message){f.messageBar.setMessage(i.message.severity,null,i.message.text);}h.clientContext.popup.closeClick();
h.clientContext.originalView.refresh(false,false);};d=this.popup.mainform.getItem("Action").getValue();OB.RemoteCallManager.call(b.actionHandler,{closePeriodStepId:this.popup.mainform.getItem("Action").closePeriodStepId,recordIdList:c,action:d},{},e,{originalView:this.popup.view,popup:this.popup});}});
OB.TestRegistry.register("org.openbravo.client.application.OpenClosePeriod.popup.okButton",this.okButton);this.cancelButton=isc.OBFormButton.create({title:OB.I18N.getLabel("Cancel"),popup:this,action:function(){this.popup.closeClick();}});this.getActionList(this.mainform);this.items=[isc.VLayout.create({defaultLayoutAlign:"center",align:"center",width:"100%",layoutMargin:10,membersMargin:6,members:[isc.HLayout.create({defaultLayoutAlign:"center",align:"center",layoutMargin:30,membersMargin:6,members:this.mainform}),isc.HLayout.create({defaultLayoutAlign:"center",align:"center",membersMargin:10,members:[this.okButton,this.cancelButton]})]})];
this.Super("initWidget",arguments);}});
OB=OB||{};OB.ProductCharacteristics={execute:function(b,f){var e,g=b.button.contextView.viewGrid.getSelectedRecords(),c,d=f.getView(b.adTabId).messageBar,j,h,a=true;j=function(l,k,i){this.view=f;isc.UpdateInvariantCharacteristicsPopup.create({productId:k.productId,characteristicList:k.productCharList,actionHandler:"org.openbravo.client.application.event.UpdateInvariantCharacteristicsHandler",view:f}).show();
};c=g[0].id;OB.RemoteCallManager.call(b.actionHandler,{productId:c,action:b.action},{},j);},updateInvariants:function(b,a){b.actionHandler="org.openbravo.client.application.event.UpdateInvariantCharacteristicsHandler";b.adTabId=a.activeView.tabId;b.processId="A832A5DA28FB4BB391BDE883E928DFC5";b.action="INITIALIZE";
OB.ProductCharacteristics.execute(b,a);}};isc.defineClass("UpdateInvariantCharacteristicsPopup",isc.OBPopup);isc.UpdateInvariantCharacteristicsPopup.addProperties({width:320,height:200,title:"Update Characteristics",canDragResize:false,showMinimizeButton:false,showMaximizeButton:false,productId:null,actionHandler:null,characteristicCombos:null,okButton:null,cancelButton:null,initWidget:function(){OB.TestRegistry.register("org.openbravo.client.application.UpdateInvariantCharacteristics.popup",this);
var a=this.view,c=this.params,b;this.characteristicCombos=[];for(b=0;b<this.characteristicList.length;b++){this.characteristicCombos[b]=isc.DynamicForm.create({fields:[{id:this.characteristicList[b].id,name:this.characteristicList[b].name,title:this.characteristicList[b].name,valueMap:this.characteristicList[b].valueMap,defaultValue:this.characteristicList[b].selectedValue,existingProdChValue:this.characteristicList[b].existingProdChValue,height:20,width:255,required:false,type:"_id_17"}]});
}this.okButton=isc.OBFormButton.create({title:OB.I18N.getLabel("OK"),popup:this,action:function(){var j,g,d={},e,h,f={};j=function(l,k,i){i.clientContext.popup.closeClick();i.clientContext.popup.view.refresh(false,false);if(k.message){i.clientContext.popup.view.view.messageBar.setMessage(k.message.severity,null,k.message.text);
}};for(e=0;e<this.popup.items[0].members[0].members.length;e++){h=this.popup.items[0].members[0].members[e];d[h.fields[0].id]=h.values[h.fields[0].name];f[h.fields[0].id]=h.fields[0].existingProdChValue;}OB.RemoteCallManager.call(this.popup.actionHandler,{productId:this.popup.productId,updatedValues:d,existingProdChValues:f,action:"UPDATE"},{},j,{originalView:this.popup.view,popup:this.popup});
}});OB.TestRegistry.register("org.openbravo.client.application.UpdateInvariantCharacteristics.popup.okButton",this.okButton);this.cancelButton=isc.OBFormButton.create({title:OB.I18N.getLabel("Cancel"),popup:this,action:function(){this.popup.closeClick();}});this.items=[isc.VLayout.create({defaultLayoutAlign:"center",align:"center",width:"100%",layoutMargin:10,membersMargin:6,members:[isc.VLayout.create({defaultLayoutAlign:"right",align:"right",layoutMargin:30,membersMargin:6,members:this.characteristicCombos}),isc.HLayout.create({defaultLayoutAlign:"center",align:"center",membersMargin:10,members:[this.okButton,this.cancelButton]})]})];
this.Super("initWidget",arguments);}});
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2010-2013 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */
// = My Openbravo =
//
// Implements the My Openbravo widget.
//
isc.defineClass('OBMyOpenbravo', isc.HLayout);

isc.OBMyOpenbravo.addProperties({
  showLeftColumnInPortal: false,

  // added to prevent the close button from being displayed
  // see https://issues.openbravo.com/view.php?id=15953
  notClosable: true,

  // ** {{{ OBMyOpenbravo.getBookMarkParams() }}} **
  //
  // Parameters:
  // * {{{}}}: 
  getBookMarkParams: function () {
    var result = {};
    result.myOB = this.myOB;
    // are passed on to the tab
    result.canClose = false;
    return result;
  },

  // ** {{{ OBMyOpenbravo.getBookMarkParams() }}} **
  //
  // Used for creating bookmarks in recent quick launch/menu
  isEqualParams: function (params) {
    // if the params are for a my ob return true
    if (params.myOB === this.myOB) {
      return true;
    }
    // a non my ob tab
    return false;
  },

  // ** {{{ OBMyOpenbravo.isSameTab() }}} **
  //
  // Returns true if the passed tab info corresponds to this instance,
  // if so then it is not re-opened. Calls isEqualParams.
  //
  // Parameters:
  // * {{{viewId}}}: the id of the view used by the view-manager 
  // * {{{params}}}: the parameters used to create the main tab 
  isSameTab: function (viewId, params) {
    return this.isEqualParams(params);
  },

  // makes sure that only one MyOB tab is loaded, see equalParams
  // implementation above
  myOB: true,

  // the widgetinstances already created for the user
  widgets: [],

  // the allowed widget types the user may/can create
  availableWidgetClasses: [],

  // reference back to the portalLayout creating the widget
  portalLayout: null,

  // reference to the left column layout
  leftColumnLayout: null,

  isReloading: false,

  // Admin Mode
  enableAdminMode: false,
  adminModeValueMap: {},
  isValueMapTranslated: false,
  // Are the names of the levels translated?
  adminMode: false,
  adminLevel: '',
  adminLevelValue: '',
  createLeftColumnLayout: function () {
    var me = this,
        i, recentViewsLayout, recentViewsLinksLayout, recentDocumentsLayout, recentDocumentsLinksLayout, addWidgetLayout, adminOtherMyOBLayout, refreshLayout;

    if (OB.User.isPortal && OB.Application.licenseType === 'C') {
      this.addMember(isc.HLayout.create({
        width: '100%',
        align: 'center',
        layoutTopMargin: '30%',
        members: [isc.Dialog.create({
          width: 350,
          height: 150,
          canDragReposition: false,
          canDragResize: false,
          showCloseButton: false,
          showMaximizeButton: false,
          showMinimizeButton: false,
          title: OB.I18N.getLabel('OBUIAPP_AlertGrid_Note'),
          initWidget: function () {
            this.icon = this.warnIcon;
            this.Super('initWidget', arguments);
          },
          message: OB.I18N.getLabel('OBUIAPP_ActivateMessage', [OB.I18N.getLabel('OBUIAPP_ActivateMessagePortal')])
        })]
      }));
      return false;
    }

    if (OB.User.isPortal && !this.showLeftColumnInPortal) {
      this.addMember(isc.VLayout.create({
        width: 14
      }));
      return false;
    }

    recentViewsLayout = isc.VLayout.create({});
    recentViewsLayout.addMember(isc.Label.create({
      height: 1,
      overflow: 'visible',
      baseStyle: OB.Styles.OBMyOpenbravo.recentViewsLayout.baseStyle,
      contents: OB.I18N.getLabel('OBKMO_RecentViews')
    }));

    recentViewsLinksLayout = isc.VLayout.create({
      height: 1,
      overflow: 'visible'
    });
    recentViewsLayout.addMember(recentViewsLinksLayout);
    this.setRecentList(recentViewsLinksLayout);

    OB.PropertyStore.addListener(function (propertyName, currentValue, newValue) {
      if (propertyName === 'OBUIAPP_RecentViewList') {
        me.setRecentList(recentViewsLinksLayout);
      }
    });

    recentDocumentsLayout = isc.VLayout.create({});
    recentDocumentsLayout.addMember(isc.Label.create({
      height: 1,
      overflow: 'visible',
      baseStyle: OB.Styles.OBMyOpenbravo.recentDocumentsLayout.baseStyle,
      contents: OB.I18N.getLabel('OBKMO_RecentDocuments')
    }));

    recentDocumentsLinksLayout = isc.VLayout.create({
      height: 1,
      overflow: 'visible'
    });
    recentDocumentsLayout.addMember(recentDocumentsLinksLayout);
    this.setRecentDocumentsList(recentDocumentsLinksLayout);

    OB.PropertyStore.addListener(function (propertyName, currentValue, newValue) {
      if (propertyName === 'OBUIAPP_RecentDocumentsList') {
        me.setRecentDocumentsList(recentDocumentsLinksLayout);
      }
    });

    var actionTitle = isc.VLayout.create({
      height: 1,
      overflow: 'visible'
    });
    actionTitle.addMember(isc.Label.create({
      height: 1,
      overflow: 'visible',
      baseStyle: OB.Styles.OBMyOpenbravo.actionTitle.baseStyle,
      contents: OB.I18N.getLabel('OBKMO_Manage_MyOpenbravo')
    }));

    refreshLayout = isc.VLayout.create({
      height: 1,
      overflow: 'visible'
    });
    refreshLayout.addMember(isc.Label.create({
      styleName: OB.Styles.OBMyOpenbravo.refreshLayout.styleName,
      width: '100%',
      height: 1,
      overflow: 'visible',
      contents: OB.I18N.getLabel('OBKMO_WMO_Refresh'),
      action: function () {
        OB.MyOB.reloadWidgets();
      }
    }));

    // the available widget classes the user may/can create
    addWidgetLayout = isc.VLayout.create({
      height: 1,
      overflow: 'visible'
    });
    addWidgetLayout.addMember(isc.Label.create({
      styleName: OB.Styles.OBMyOpenbravo.addWidgetLayout.styleName,
      width: '100%',
      height: 1,
      overflow: 'visible',
      contents: OB.I18N.getLabel('OBKMO_AddWidget') + ' »',
      addWidgetLayout: addWidgetLayout,
      doOpen: function () {
        this.setContents(OB.I18N.getLabel('OBKMO_AddWidget') + ' «');
        this.addWidgetLayout.addMember(isc.OBMyOBAddWidgetDialog.create({
          myParent: this
        }));
      },
      doBeforeClose: function () { // Invoked directly from widget dialog 'destroy' function
        this.setContents(OB.I18N.getLabel('OBKMO_AddWidget') + ' »');
      },
      isOpened: function () {
        if (this.addWidgetLayout.getMembers().length >= 2) {
          return true;
        } else {
          return false;
        }
      },
      action: function () {
        if (this.isOpened()) {
          this.addWidgetLayout.getMembers()[1].destroy();
        } else {
          this.doOpen();
        }
      }
    }));

    if (this.enableAdminMode) {
      adminOtherMyOBLayout = isc.VLayout.create({
        height: 1,
        overflow: 'visible'
      });
      adminOtherMyOBLayout.addMember(isc.Label.create({
        styleName: OB.Styles.OBMyOpenbravo.adminOtherMyOBLayout.styleName,
        height: 1,
        width: '100%',
        overflow: 'visible',
        contents: OB.I18N.getLabel('OBKMO_AdminOtherMyOpenbravos') + ' »',
        adminOtherMyOBLayout: adminOtherMyOBLayout,
        doOpen: function () {
          this.setContents(OB.I18N.getLabel('OBKMO_AdminOtherMyOpenbravos') + ' «');
          this.adminOtherMyOBLayout.addMember(isc.OBMyOBAdminModeDialog.create({
            myParent: this
          }));
        },
        doBeforeClose: function () { // Invoked directly from widget dialog 'destroy' function
          this.setContents(OB.I18N.getLabel('OBKMO_AdminOtherMyOpenbravos') + ' »');
        },
        isOpened: function () {
          if (this.adminOtherMyOBLayout.getMembers().length >= 2) {
            return true;
          } else {
            return false;
          }
        },
        action: function () {
          if (this.isOpened()) {
            this.adminOtherMyOBLayout.getMembers()[1].destroy();
          } else {
            this.doOpen();
          }
        }
      }));
    }

    // the left layout containing the recent views and available widgets
    this.leftColumnLayout = isc.VStack.create({
      styleName: OB.Styles.OBMyOpenbravo.leftColumnLayout.styleName,
      width: 210,
      height: '100%',
      overflow: 'auto',
      // Changed from 'visible' to 'auto' due to issue https://issues.openbravo.com/view.php?id=17870
      leaveScrollbarGap: true,
      members: [recentViewsLayout, recentDocumentsLayout, isc.LayoutSpacer.create({
        height: 5
      }), actionTitle, refreshLayout, addWidgetLayout]
    });

    if (this.enableAdminMode) {
      this.leftColumnLayout.addMember(adminOtherMyOBLayout);
    }
    this.leftColumnLayout.addMember(isc.VLayout.create({
      height: 10
    }));

    this.leftColumnLayout.recentViewsLayout = recentViewsLayout;
    this.leftColumnLayout.recentDocumentsLayout = recentDocumentsLayout;
    this.leftColumnLayout.addWidgetLayout = addWidgetLayout;
    this.leftColumnLayout.adminOtherMyOBLayout = adminOtherMyOBLayout;
    this.leftColumnLayout.refreshLayout = refreshLayout;

    this.addMember(this.leftColumnLayout);
  },

  createPortalLayout: function () {
    if (OB.User.isPortal && OB.Application.licenseType === 'C') {
      return false;
    }

    // the portallayout containing the widgets
    this.portalLayout = isc.PortalLayout.create({
      styleName: OB.Styles.OBMyOpenbravo.portalLayout.styleName,
      numColumns: 2,
      width: '*',
      showColumnMenus: false,
      canResizeColumns: false,
      canResizePortlets: false,
      membersMargin: OB.Styles.OBMyOpenbravo.portalLayout.membersMargin,
      columnBorder: 0,
      overflow: 'auto',
      height: '100%',
      leaveScrollbarGap: true,
      sendEvents: false,

      // the Column is an autochild of the PortalLayout with the
      // child name of 'column', the properties of the Column
      // can be set like this using the AutoChild concept of SC
      columnProperties: {
        membersMargin: OB.Styles.OBMyOpenbravo.portalLayout.columnProperties.membersMargin,
        canAcceptDrop: true,
        overflow: 'visible',

        // is used to prevent dropping on the left or right 
        // of a widget
        // the Row is an autochild of Column, the 
        // rowProperties are used to set properties of Row
        rowProperties: {
          isHDrop: function () {
            return false;
          }
        },

        // after dropping create the widget here
        getDropComponent: function (dragTarget, position) {
          var component;
          if (dragTarget.createWidgetInstance) {
            component = dragTarget.createWidgetInstance(this.colNum, position);
          } else {
            component = dragTarget;
          }
          this.addPortlet(component, position);
        },

        // copied from Column (portal) to set fixed row heights based
        // on the portlets height, see the NOTE line below
        addPortlet: function (portlet, position) {
          var eventType = '';

          // offset position to be position within rows
          if (this.showColumnHeader) {
            position += 1;
          }

          var rows = this.getMembers();
          if (rows === null) {
            position = 0;
          } else if (position > rows.length) {
            position = rows.length;
          }

          // Copy explicit user-specified height across to the generated row (and always
          // fill that row)
          // NOTE: this was the original line in the super class
          //        var userHeight = portlet._userHeight;
          var userHeight = portlet.height;
          if (userHeight !== null) {
            portlet.setHeight('100%');
          }

          var dynamicProperties = {};
          if (userHeight !== null) {
            dynamicProperties.height = userHeight;
          }
          var portalRow = this.makePortalRow(dynamicProperties);

          this.addMember(portalRow, position);
          portalRow.addMember(portlet);
          portlet.portalRow = portalRow;

          if (this.portalLayout.sendEvents && OB.MyOB && !OB.MyOB.isReloading) {
            eventType = portlet.dbInstanceId ? 'WIDGET_MOVED' : 'WIDGET_ADDED';
            OB.MyOB.notifyEvent(eventType);
          }
        },

        getTotalHeight: function () {
          var rows = this.getMembers(),
              widget, i, height = 0,
              row;
          for (i = 0; i < rows.length; i++) {
            row = rows[i];
            widget = row.getMembers()[0];
            if (widget.getClass().getClassName() === '') {
              continue;
            }
            height += widget.height;
          }
          return height;
        },

        removeAllRows: function () {
          while (this.getMembers().length > 0) {
            this.getMembers()[0].destroy();
          }
        }
      }
    });

    this.addMember(this.portalLayout);
  },


  initWidget: function (args) {
    this.createLeftColumnLayout();
    this.createPortalLayout();

    this.Super('initWidget', args);

    OB.MyOB = this;

    // tell each column their index number
    // is used when dragging/dropping 
    if (this.portalLayout) {
      this.portalLayout.members[0].colNum = 0;
      this.portalLayout.members[1].colNum = 1;
      this.portalLayout.sendEvents = true;
      this.reloadWidgets();
    }
  },

  setRecentList: function (layout) {
    var recentList, newRecent, handleClickFunction, recentIndex = 0,
        recent, lbl, newIcon, entryLayout, icon, destroyFunction;

    // start with a fresh content
    layout.destroyAndRemoveMembers(layout.members);

    // reads the list of recents and displays them
    recentList = OB.Layout.ViewManager.recentManager.getRecentValue('OBUIAPP_RecentViewList');
    if (recentList && recentList.length > 0) {

      handleClickFunction = function () {
        if (this.recent.viewId) {
          OB.Layout.ViewManager.openView(this.recent.viewId, this.recent);
        } else {
          OB.Layout.ViewManager.openView('OBClassicWindow', this.recent);
        }
      };

      destroyFunction = function () {
        this.destroyAndRemoveMembers(this.members);
        this.Super('destroy', arguments);
      };

      for (; recentIndex < recentList.length; recentIndex++) {
        if (recentList[recentIndex]) {
          recent = recentList[recentIndex];
          icon = null;
          if (recent.icon) {
            if (recent.icon === 'Process') {
              icon = OB.Styles.OBMyOpenbravo.recentViewsLayout.nodeIcons.Process;
            } else if (recent.icon === 'Report') {
              icon = OB.Styles.OBMyOpenbravo.recentViewsLayout.nodeIcons.Report;
            } else if (recent.icon === 'Form') {
              icon = OB.Styles.OBMyOpenbravo.recentViewsLayout.nodeIcons.Form;
            } else if (recent.icon === 'Window') {
              icon = OB.Styles.OBMyOpenbravo.recentViewsLayout.nodeIcons.Window;
            } else {
              icon = recent.icon; // icon is already a path
            }
          } else {
            icon = OB.Styles.OBMyOpenbravo.recentViewsLayout.nodeIcons.Window;
          }

          // if the recent was added through quick create then repair this
          // https://issues.openbravo.com/view.php?id=16132
          if (recent.command === 'NEW') {
            recent.command = 'DEFAULT';
          }

          lbl = isc.Label.create({
            contents: recent.tabTitle,
            recent: recent,
            width: '100%',
            updateRecent: true,
            baseStyle: OB.Styles.OBMyOpenbravo.recentViewsLayout.Label.baseStyle,
            handleClick: handleClickFunction,
            iconOrientation: 'left',
            icon: icon
          });

          entryLayout = isc.HLayout.create({
            defaultLayoutAlign: 'center',
            width: '100%',
            destroy: destroyFunction
          });
          entryLayout.addMember(lbl);
          // if a standard window then show the new icon
          if (recent.windowId && !recent.singleRecord && !recent.readOnly && !recent.editOrDeleteOnly) {
            // make a copy
            newRecent = isc.addProperties({}, recent);
            newRecent.command = 'NEW';

            newIcon = isc.ImgButton.create({

              align: 'left',
              showRollOver: true,

              showTitle: false,

              showHover: true,
              prompt: OB.I18N.getLabel('OBKMO_CreateNew'),

              // todo move this to styling
              width: 11,
              height: 11,
              src: OB.Styles.OBMyOpenbravo.recentViewsLayout.newIcon.src,

              recent: newRecent,
              click: handleClickFunction
            });
            entryLayout.addMember(newIcon);
          }
          layout.addMember(entryLayout);
        }
      }
      layout.markForRedraw();
    }
  },

  setRecentDocumentsList: function (layout) {
    var recentList, newRecent, recentIndex = 0,
        recent, lbl, newIcon, entryLayout, icon, handleClickFunction;

    // start with a fresh content
    layout.destroyAndRemoveMembers(layout.members);

    // reads the list of recents and displays them
    recentList = OB.Layout.ViewManager.recentManager.getRecentValue('OBUIAPP_RecentDocumentsList');
    if (recentList && recentList.length > 0) {

      handleClickFunction = function () {
        OB.Layout.ViewManager.openView(this.recent.viewId, this.recent);
      };

      for (; recentIndex < recentList.length; recentIndex++) {
        if (recentList[recentIndex]) {
          recent = recentList[recentIndex];
          recent.command = 'DEFAULT';

          lbl = isc.Label.create({
            contents: OB.Utilities.truncTitle(recent.recentTitle, 18),
            recent: recent,
            wrap: true,
            width: '100%',
            showHover: true,
            showPrompt: true,
            prompt: recent.tabTitle + ' - ' + recent.recentTitle,
            baseStyle: OB.Styles.OBMyOpenbravo.recentDocumentsLayout.Label.baseStyle,
            handleClick: handleClickFunction,
            iconOrientation: 'left',
            icon: OB.Styles.OBMyOpenbravo.recentDocumentsLayout.Label.icon
          });

          entryLayout = isc.HLayout.create({
            defaultLayoutAlign: 'center',
            width: '100%'
          });
          entryLayout.addMember(lbl);
          layout.addMember(entryLayout);
        }
      }
      layout.markForRedraw();
    }
  },

  // ** {{{ OBMyOpenbravo.addWidget(widgetProperties) }}} **
  //
  // Will check if the widget class is already present, if so then
  // it is instantiated. If not then the widgetClass is loaded from the
  // server and when loaded, the instance is created.
  //
  // Parameters:
  // * {{{widgetProperties}}}: properties used to create an instance of the widget
  // like the widgetClassName, height and title 
  addWidget: function (widgetProperties) {
    var i, widgetInstance;

    // if not there yet load it
    if (!isc.ClassFactory.getClass(widgetProperties.widgetClassName)) {
      var rpcMgr = isc.RPCManager;
      var reqObj = {
        data: isc.JSONEncoder.create({}).encode(widgetProperties),
        callback: this.widgetLoadCallback,
        evalResult: true,
        clientContext: {
          widgetManager: this,
          widgetProperties: widgetProperties
        },
        httpMethod: 'POST',
        useSimpleHttp: true,
        actionURL: OB.Application.contextUrl + 'org.openbravo.client.kernel/OBMYOB_MyOpenbravo/MyOpenbravoWidgetComponent'
      };
      rpcMgr.sendRequest(reqObj);
    } else {
      var localWidgetProperties = isc.addProperties({}, widgetProperties);
      for (i = 0; i < this.availableWidgetClasses.length; i++) {
        if (this.availableWidgetClasses[i].widgetClassId === widgetProperties.widgetClassId) {
          localWidgetProperties.showMaximizeButton = this.availableWidgetClasses[i].showMaximizeButton;
          localWidgetProperties.menuItems = this.availableWidgetClasses[i].menuItems;
          localWidgetProperties.fieldDefinitions = this.availableWidgetClasses[i].fieldDefinitions;
          if (!localWidgetProperties.aboutFieldDefinitions) {
            localWidgetProperties.aboutFieldDefinitions = this.availableWidgetClasses[i].aboutFieldDefinitions;
          }
          if (!localWidgetProperties.parameters) {
            localWidgetProperties.parameters = isc.addProperties({}, widgetProperties.parameters);
          }
          break;
        }
      }
      widgetInstance = isc.ClassFactory.newInstance(widgetProperties.widgetClassName, localWidgetProperties);
      widgetInstance.widgetManager = this;
      this.portalLayout.addPortlet(widgetInstance, localWidgetProperties.colNum, localWidgetProperties.rowNum);
    }
  },

  // ** {{{ OBMyOpenbravo.widgetLoadCallback(rpcResponse, data, rpcRequest) }}} **
  //
  // Is called when the widget class has been loaded from the backend, method
  // will call the addWidget method again (as now the class is loaded).
  //
  widgetLoadCallback: function (rpcResponse, data, rpcRequest) {
    var widgetProperties = rpcRequest.clientContext.widgetProperties;
    var widgetManager = rpcRequest.clientContext.widgetManager;

    // something went wrong, give it up
    if (!isc.ClassFactory.getClass(widgetProperties.widgetClassName)) {
      return;
    }
    widgetManager.addWidget(widgetProperties);
  },

  notifyEvent: function (eventType) {
    var post;
    if (!eventType) {
      return;
    }

    this.updateWidgetsCache();

    post = {
      'eventType': eventType,
      'widgets': OB.MyOB.widgets,
      'context': {
        'adminMode': OB.MyOB.adminMode
      }
    };

    if (OB.MyOB.adminMode) {
      post.context.availableAtLevel = OB.MyOB.adminLevel.toUpperCase();
      post.context.availableAtLevelValue = OB.MyOB.adminLevelValue;
    }

    OB.RemoteCallManager.call('org.openbravo.client.myob.MyOpenbravoActionHandler', post, {}, function (rpcResponse, data, rpcRequest) {
      OB.MyOB.eventResponseHandler(rpcResponse, data, rpcRequest);
    });
  },

  eventResponseHandler: function (rpcResponse, data, rpcRequest) {
    var i, j, adminLevel, adminLevelValue, publishMessage, levelKey, levelValueKey;

    if (!data || !data.message || !data.context || !data.widgets) {
      isc.Log.logError('Response does not contain required data for processing');
      return;
    }

    this.updateWidgetsCache(data.eventType, data.widgets);

    if (data.eventType === 'RELOAD_WIDGETS') {

      this.updateClassesCache(data.availableWidgetClasses);

      for (i = 0; i < this.widgets.length; i++) {
        this.addWidget(this.widgets[i]);
      }

      this.isReloading = false;
      this.portalLayout.sendEvents = !this.adminMode;

      this.notifyEvent('WIDGET_MOVED');
    }

    if (data.eventType === 'PUBLISH_CHANGES') {
      if (data.message.type === 'Success') {
        publishMessage = OB.I18N.getLabel('OBKMO_PublishSuccessful');
      } else {
        publishMessage = OB.I18N.getLabel('OBKMO_PublishError');
      }

      if (OB.MyOB.adminModeValueMap.level.system) {
        publishMessage = publishMessage.replace('_level_ _levelvalue_', OB.MyOB.adminModeValueMap.level.system.toUpperCase());
      } else {
        levelKey = data.context.availableAtLevel.toLowerCase();
        levelValueKey = data.context.availableAtLevelValue;
        adminLevel = OB.MyOB.adminModeValueMap.level[levelKey];
        adminLevelValue = OB.MyOB.adminModeValueMap.levelValue[levelKey][levelValueKey];
        publishMessage = publishMessage.replace('_level_', adminLevel);
        publishMessage = publishMessage.replace('_levelvalue_', adminLevelValue);
      }

      OB.MyOB.setUserMode();

      isc.say(publishMessage, {
        title: OB.I18N.getLabel('OBKMO_PublishTitle'),
        isModal: true,
        showModalMask: true
      });
    }

    if (data.message && data.message.type !== 'Success') {
      // isc.warn(data.message.message); Note: Notify the user?
      isc.Log.logWarn(data.message.message);
    }
  },

  updateClassesCache: function (cache) {
    var i, classDef;

    if (!cache || !isc.isAn.Array(cache)) {
      isc.Log.logError('Trying to update classes cache without without a valid argument');
      return;
    }

    this.availableWidgetClasses = [];

    for (i = 0; i < cache.length; i++) {
      classDef = null;
      if (cache[i].indexOf('isc') === 0) {
        // It's a class definition using: isc.defineClass()
        eval('(' + cache[i] + ')');
      } else {
        if (window.JSON) {
          try {
            classDef = JSON.parse(cache[i]);
          } catch (e) {
            isc.Log.logError(e.message);
            continue;
          }
        } else {
          classDef = eval('(' + cache[i] + ')');
        }
        if (classDef) {
          this.availableWidgetClasses.push(classDef);
        }
      }
    }
  },

  // ** {{{ updateWidgetsCache }} **
  //
  // Is called when an widget is added/removed from the layout
  // The widgets cache is refreshed before sending the event notification to the backend
  //
  updateWidgetsCache: function (eventType, responseWidgets) {
    var columns = this.portalLayout.getMembers(),
        i, j, k, newWidget, col, rows, row, widget, newObj;

    this.widgets = []; // clear cache
    if (eventType === 'RELOAD_WIDGETS' && isc.isAn.Array(responseWidgets)) {
      this.widgets = responseWidgets.duplicate();
      this.sortWidgetsCache();
      if (window.start) {
        // Qunit is present, we are running the tests
        // This makes the synchronization of unit tests possible
        start();
      }
      return;
    }

    for (i = 0; i < columns.length; i++) {
      col = columns[i];
      rows = col.getMembers();
      for (j = 0; j < rows.length; j++) {
        row = rows[j];
        widget = row.getMembers()[0]; // One widget per row
        if (widget.getClass().getClassName() === 'LayoutSpacer') {
          continue;
        }

        newWidget = {};

        if (eventType === 'WIDGET_ADDED' && isc.isAn.Array(responseWidgets)) {
          for (k = 0; k < responseWidgets.length; k++) {
            if (widget.isSameWidget(responseWidgets[k], true)) {
              widget.setDbInstanceId(responseWidgets[k].dbInstanceId);
              break;
            }
          }
        }

        newWidget.ID = widget.ID;
        newWidget.dbInstanceId = widget.dbInstanceId || '';
        newWidget.colNum = i;
        newWidget.rowNum = j;
        newWidget.parameters = widget.parameters;
        newWidget.title = widget.title;
        newWidget.widgetClassName = widget.widgetClassName;
        newWidget.widgetClassId = widget.widgetClassId;
        this.widgets.push(newWidget);
      }
    }
    this.sortWidgetsCache();
  },

  sortWidgetsCache: function () {
    var col0 = 0,
        col1 = 0,
        i;

    if (this.widgets.length < 2) {
      return;
    }

    this.widgets.sort(function (a, b) {

      if (a.priority < b.priority) {
        return -1;
      } else if (a.priority === b.priority) {
        if (a.colNum < b.colNum) {
          return -1;
        } else if (a.colNum === b.colNum) {
          if (a.rowNum < b.rowNum) {
            return -1;
          } else if (a.rowNum === b.rowNum) {
            return 0;
          } else {
            return 1;
          }
        } else {
          return 1;
        }
      }
      return 1;
    });

    for (i = 0; i < this.widgets.length; i++) {
      if (this.widgets[i].colNum === 0) {
        this.widgets[i].rowNum = col0++;
      } else {
        this.widgets[i].rowNum = col1++;
      }
    }
  },

  getNextWidgetPosition: function () {
    var height0 = this.portalLayout.getMembers()[0].getTotalHeight(),
        height1 = this.portalLayout.getMembers()[1].getTotalHeight(),
        pos = {},
        rows;

    pos.colNum = height0 <= height1 ? 0 : 1;
    rows = this.portalLayout.getMembers();

    if (rows) {
      pos.rowNum = this.portalLayout.getMembers()[pos.colNum].getMembers().length;
    } else {
      pos.rowNum = 0;
    }

    return pos;
  },

  setAdminMode: function (level, levelValue) {
    var leftColumn = this.leftColumnLayout,
        levelLabel, levelValueLabel;

    this.adminMode = true;
    this.portalLayout.sendEvents = false;
    this.adminLevel = level.getValue();
    this.adminLevelValue = levelValue.getValue ? levelValue.getValue() : '';

    leftColumn.recentViewsLayout.hide();
    leftColumn.refreshLayout.hide();
    leftColumn.recentDocumentsLayout.hide();
    //set this values before destroy because after that there will be undefined
    levelLabel = level.getDisplayValue();
    levelValueLabel = levelValue.getDisplayValue ? levelValue.getDisplayValue() : '';
    leftColumn.adminOtherMyOBLayout.getMembers()[1].destroy(); // remove DynamicForm
    leftColumn.adminOtherMyOBLayout.hide();
    if (!leftColumn.addWidgetLayout.getMember(0).isOpened()) {
      leftColumn.addWidgetLayout.getMember(0).doOpen();
    }
    leftColumn.addMember(isc.OBMyOBPublishChangesDialog.create({
      levelLabel: levelLabel,
      levelValueLabel: levelValueLabel
    }));
    this.reloadWidgets();
  },

  setUserMode: function () {
    var leftColumn = this.leftColumnLayout,
        publishDialog;

    this.adminMode = false;
    this.adminLevel = '';
    this.adminLevelValue = '';

    leftColumn.recentViewsLayout.show();
    leftColumn.recentDocumentsLayout.show();
    leftColumn.refreshLayout.show();
    leftColumn.adminOtherMyOBLayout.show();

    publishDialog = leftColumn.getMembers()[leftColumn.getMembers().length - 1];
    if (publishDialog.getClass().getClassName() === 'OBMyOBPublishChangesDialog') {
      publishDialog.destroy();
    }

    this.reloadWidgets();

    this.portalLayout.sendEvents = true;
  },

  reloadWidgets: function () {

    if (this.isReloading) {
      return;
    }

    this.portalLayout.sendEvents = false;
    this.isReloading = true;
    this.portalLayout.getMembers()[0].removeAllRows();
    this.portalLayout.getMembers()[1].removeAllRows();
    this.notifyEvent('RELOAD_WIDGETS');
  }
});


isc.defineClass('OBMyOpenbravoImplementation', isc.OBMyOpenbravo);

isc.defineClass('OBMyOBDialog', isc.Window).addProperties({
  width: '100%',
  form: null,
  title: '',
  autoSize: true,
  headerControls: ['headerLabel', 'closeButton'],
  canDragResize: false,
  buttonsLayout: null,
  loadingLabel: null,
  actionHandler: 'org.openbravo.client.myob.MyOpenbravoActionHandler',

  initWidget: function () {
    this.buttonsLayout = isc.VStack.create({
      layoutTopMargin: 10,
      layoutBottomMargin: 5,
      align: 'center',
      defaultLayoutAlign: 'center',
      overflow: 'visible',
      height: 1,
      width: '100%'
    });

    this.loadingLabel = isc.Label.create({
      height: 20,
      contents: OB.I18N.getLabel('OBUIAPP_Loading')
    });

    this.addItem(this.loadingLabel);

    this.Super('initWidget', arguments);
  },

  closeClick: function () {
    this.destroy();
  }
});

isc.defineClass('OBMyOBAddWidgetDialog', isc.OBMyOBDialog).addProperties({
  myParent: null,
  canDragReposition: false,

  initWidget: function () {
    var post = {
      'ID': this.ID,
      'eventType': 'GET_AVAILABLE_WIDGET_CLASSES',
      'widgets': [],
      'context': {
        'adminMode': OB.MyOB.adminMode
      }
    };

    if (OB.MyOB.adminMode) {
      post.context.availableAtLevel = OB.MyOB.adminLevel.toUpperCase();
      post.context.availableAtLevelValue = OB.MyOB.adminLevelValue;
    }

    this.Super('initWidget', arguments);

    OB.RemoteCallManager.call(this.actionHandler, post, {}, function (rpcResponse, data, rpcRequest) {
      if (data && data.ID && window[data.ID]) {
        window[data.ID].createDialogContents(rpcResponse, data, rpcRequest);
      }
    });
  },

  destroy: function () {
    this.myParent.doBeforeClose();
    this.Super('destroy', arguments);
  },

  createDialogContents: function (rpcResponse, data, rpcRequest) {
    var i, widgetClasses, availableWidgetsMap = {};

    if (data && data.availableWidgetClasses) {
      OB.MyOB.updateClassesCache(data.availableWidgetClasses);
      widgetClasses = OB.MyOB.availableWidgetClasses;
      for (i = 0; i < widgetClasses.length; i++) {
        availableWidgetsMap[i] = widgetClasses[i].title;
      }
    }

    if (this.loadingLabel) {
      this.loadingLabel.destroy();
    }

    this.form = isc.DynamicForm.create({
      width: '100%',
      height: 1,
      numCols: 1,
      titleSuffix: '',
      requiredTitleSuffix: '',
      autoDraw: false,
      titleOrientation: 'top',
      fields: [{
        name: 'widget',
        width: '*',
        errorOrientation: 'left',
        cellStyle: OB.Styles.OBMyOBAddWidgetDialog.cellStyle,
        titleStyle: OB.Styles.OBMyOBAddWidgetDialog.titleStyle,
        textBoxStyle: OB.Styles.OBMyOBAddWidgetDialog.textBoxStyle,
        pendingTextBoxStyle: OB.Styles.OBFormField.DefaultComboBox.pendingTextBoxStyle,
        controlStyle: OB.Styles.OBMyOBAddWidgetDialog.controlStyle,
        pickListBaseStyle: OB.Styles.OBMyOBAddWidgetDialog.pickListBaseStyle,
        pickListTallBaseStyle: OB.Styles.OBMyOBAddWidgetDialog.pickListTallBaseStyle,
        pickerIconSrc: OB.Styles.OBMyOBAddWidgetDialog.pickerIconSrc,
        height: OB.Styles.OBMyOBAddWidgetDialog.height,
        pickListCellHeight: OB.Styles.OBMyOBAddWidgetDialog.pickListCellHeight,
        pickerIconWidth: OB.Styles.OBMyOBAddWidgetDialog.pickerIconWidth,
        pickListProperties: {
          bodyStyleName: OB.Styles.OBMyOBAddWidgetDialog.pickListProperties.bodyStyleName
        },
        title: OB.I18N.getLabel('OBKMO_WidgetLabel'),
        titleSuffix: '',
        requiredTitleSuffix: '',
        type: 'select',
        valueMap: availableWidgetsMap,
        changed: function (form, item, value) {
          if (value) {
            form.parentElement.parentElement.buttonsLayout.getMember(0).setDisabled(false);
          }
        }
      }]
    });

    this.addItem(this.form);

    this.buttonsLayout.addMember(isc.OBFormButton.create({
      autoFit: true,
      title: OB.I18N.getLabel('OBKMO_AddLabel'),
      form: this.form,
      dialog: this,
      draw: function () {
        if (!this.form.getItem('widget').getValue()) {
          this.setDisabled(true);
        }
        this.Super('draw', arguments);
      },
      click: function () {

        if (!this.form.getItem('widget').getValue()) {
          return;
        }

        var index = parseInt(this.form.getItem('widget').getValue(), 10),
            widgetInstanceProperties = isc.addProperties({}, OB.MyOB.availableWidgetClasses[index]),
            position = OB.MyOB.getNextWidgetPosition();

        widgetInstanceProperties.colNum = position.colNum;
        widgetInstanceProperties.rowNum = position.rowNum;

        OB.MyOB.addWidget(widgetInstanceProperties);
        this.dialog.form.reset();
        this.setDisabled(true);
      }
    }));
    this.addItem(this.buttonsLayout);
  }
});

isc.defineClass('OBMyOBAdminModeDialog', isc.OBMyOBDialog).addProperties({
  myParent: null,
  canDragReposition: false,

  destroy: function () {
    this.myParent.doBeforeClose();
    this.Super('destroy', arguments);
  },

  initWidget: function () {
    var valueMap = isc.addProperties({}, OB.MyOB.adminModeValueMap.level),
        prop, formFields = [];

    this.Super('initWidget', arguments);

    if (this.loadingLabel) {
      this.loadingLabel.destroy();
    }

    if (!OB.MyOB.isValueMapTranslated) {
      for (prop in valueMap) {
        if (valueMap.hasOwnProperty(prop)) {
          OB.MyOB.adminModeValueMap.level[prop] = OB.I18N.getLabel(valueMap[prop]);
        }
      }
      OB.MyOB.isValueMapTranslated = true;
    }
    formFields.push({
      name: 'level',
      title: OB.I18N.getLabel('OBKMO_AdminLevelLabel'),
      type: 'select',
      width: '*',
      errorOrientation: 'left',
      cellStyle: OB.Styles.OBMyOBAdminModeDialog.cellStyle,
      titleStyle: OB.Styles.OBMyOBAdminModeDialog.titleStyle,
      textBoxStyle: OB.Styles.OBMyOBAdminModeDialog.textBoxStyle,
      pendingTextBoxStyle: OB.Styles.OBFormField.DefaultComboBox.pendingTextBoxStyle,
      controlStyle: OB.Styles.OBMyOBAdminModeDialog.controlStyle,
      pickListBaseStyle: OB.Styles.OBMyOBAdminModeDialog.pickListBaseStyle,
      pickListTallBaseStyle: OB.Styles.OBMyOBAdminModeDialog.pickListTallBaseStyle,
      pickerIconSrc: OB.Styles.OBMyOBAdminModeDialog.pickerIconSrc,
      height: OB.Styles.OBMyOBAdminModeDialog.height,
      pickListCellHeight: OB.Styles.OBMyOBAdminModeDialog.pickListCellHeight,
      pickerIconWidth: OB.Styles.OBMyOBAdminModeDialog.pickerIconWidth,
      pickListProperties: {
        bodyStyleName: OB.Styles.OBMyOBAdminModeDialog.pickListProperties.bodyStyleName
      },
      valueMap: OB.MyOB.adminModeValueMap.level,
      changed: function (form, item, value) {
        var levelValue = this.form.getField('levelValue');
        if (levelValue) {
          levelValue.setValueMap(OB.MyOB.adminModeValueMap.levelValue[this.getValue()]);
          levelValue.setDisabled(false);
          form.parentElement.parentElement.buttonsLayout.getMember(0).setDisabled(true);
        } else if (value) {
          form.parentElement.parentElement.buttonsLayout.getMember(0).setDisabled(false);
        }
      }
    });

    if (!valueMap.system) {
      formFields.push({
        name: 'levelValue',
        title: OB.I18N.getLabel('OBKMO_AdminValueLabel'),
        type: 'select',
        width: '*',
        errorOrientation: 'left',
        cellStyle: OB.Styles.OBMyOBAdminModeDialog.cellStyle,
        titleStyle: OB.Styles.OBMyOBAdminModeDialog.titleStyle,
        textBoxStyle: OB.Styles.OBMyOBAdminModeDialog.textBoxStyle,
        pendingTextBoxStyle: OB.Styles.OBFormField.DefaultComboBox.pendingTextBoxStyle,
        controlStyle: OB.Styles.OBMyOBAdminModeDialog.controlStyle,
        pickListBaseStyle: OB.Styles.OBMyOBAdminModeDialog.pickListBaseStyle,
        pickListTallBaseStyle: OB.Styles.OBMyOBAdminModeDialog.pickListTallBaseStyle,
        pickerIconSrc: OB.Styles.OBMyOBAdminModeDialog.pickerIconSrc,
        height: OB.Styles.OBMyOBAdminModeDialog.height,
        pickListCellHeight: OB.Styles.OBMyOBAdminModeDialog.pickListCellHeight,
        pickerIconWidth: OB.Styles.OBMyOBAdminModeDialog.pickerIconWidth,
        pickListProperties: {
          bodyStyleName: OB.Styles.OBMyOBAdminModeDialog.pickListProperties.bodyStyleName
        },
        addUnknownValues: false,
        setDisabled: function (value) {
          if (value) {
            this.title = '';
          } else {
            this.title = OB.I18N.getLabel('OBKMO_AdminValueLabel');
          }
          this.Super('setDisabled', arguments);
        },
        init: function () {
          this.Super('init', arguments);
          if (!this.getValue()) {
            this.setDisabled(true);
          }
        },
        changed: function (form, item, value) {
          if (value) {
            form.parentElement.parentElement.buttonsLayout.getMember(0).setDisabled(false);
          }
        }
      });
    }

    this.form = isc.DynamicForm.create({
      width: '100%',
      height: 1,
      titleSuffix: '',
      requiredTitleSuffix: '',
      numCols: 1,
      titleOrientation: 'top',
      fields: formFields
    });

    this.addItem(this.form);

    this.buttonsLayout.addMember(isc.OBFormButton.create({
      title: OB.I18N.getLabel('OBKMO_AdminEdit'),
      form: this.form,
      dialog: this,
      draw: function () {
        if (!this.form.getItem('level').getValue()) {
          this.setDisabled(true);
        }
        this.Super('draw', arguments);
      },
      click: function () {
        var level = this.form.getField('level'),
            levelValue = this.form.getField('levelValue');

        if (level.getValue() === 'system') {
          OB.MyOB.setAdminMode(level, {});
        } else if (level.getValue() && levelValue.getValue()) {
          OB.MyOB.setAdminMode(level, levelValue);
        }
      }
    }));
    this.addItem(this.buttonsLayout);
  },

  closeClick: function () {
    OB.MyOB.leftColumnLayout.recentViewsLayout.show();
    OB.MyOB.leftColumnLayout.adminOtherMyOBLayout.show();
    this.Super('closeClick', arguments);
  }
});

isc.defineClass('OBMyOBPublishChangesDialog', isc.OBMyOBDialog).addProperties({
  levelLabel: '',
  levelValueLabel: '',
  canDragReposition: false,

  initWidget: function () {
    var htmlContents = '',
        label = OB.I18N.getLabel('OBKMO_PublishLabel');
    this.Super('initWidget', arguments);

    if (this.loadingLabel) {
      this.loadingLabel.destroy();
    }

    if (OB.MyOB.adminLevel === 'system') {
      label = label.replace('_level_', this.levelLabel.toUpperCase());
      label = label.replace(': _levelvalue_', '');
    } else {
      label = label.replace('_level_', this.levelLabel);
      label = label.replace('_levelvalue_', '<b>' + this.levelValueLabel + '</b>');
    }


    htmlContents = '<p style=\'padding: 2px 3px 5px 3px; margin: 0px;\'>' + label + '</p>' + '<p style=\'color:red; padding: 7px 3px 5px 3px; margin: 0px;\'>' + OB.I18N.getLabel('OBKMO_PublishWarning') + '</p>';

    this.form = isc.HTMLFlow.create({
      height: 1,
      width: '100%',
      styleName: OB.Styles.OBMyOBPublishChangesDialog.form.styleName,
      contents: htmlContents
    });

    this.addItem(this.form);

    this.buttonsLayout.addMember(isc.OBFormButton.create({
      autoFit: true,
      title: OB.I18N.getLabel('OBKMO_Publish'),
      form: this.form,
      dialog: this,
      click: function () {
        OB.MyOB.notifyEvent('PUBLISH_CHANGES');
      }
    }));

    this.buttonsLayout.addMember(isc.VLayout.create({
      height: 5
    }));

    this.buttonsLayout.addMember(isc.OBFormButton.create({
      title: OB.I18N.getLabel('UINAVBA_Cancel'),
      form: this.form,
      dialog: this,
      click: function () {
        this.dialog.closeClick();
      }
    }));
    this.addItem(this.buttonsLayout);
  },

  closeClick: function () {
    OB.MyOB.setUserMode();
    this.Super('closeClick', arguments);
  }
});
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2011-2012 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */

// = OBGettingStartedView =
// Implements the Getting Started view
isc.defineClass('OBGettingStartedView', isc.VLayout);

isc.OBGettingStartedView.addProperties({
  width: '100%',
  height: '100%',
  iframe: null,
  initWidget: function (args) {

    if (!args.contentsURL) {
      isc.Log.logError('contentsURL parameter is required');
    }

    this.iframe = isc.HTMLFlow.create({
      width: '100%',
      height: '100%',
      contentsType: 'page',
      contentsURL: (args.contentsURL ? args.contentsURL : 'about:blank')
    });
    this.addMember(this.iframe);
    this.Super('initWidget', arguments);
  }
});
$LAB.script('/openbravo/org.openbravo.client.kernel/OBMYOB_MyOpenbravo/MyOpenbravo').wait(function(){var _exception; try{
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2010-2013 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */

// = OBWidget Definition =
//
// == OBWidgetMenu ==
// Defines the menu handling
//
isc.defineClass('OBWidgetMenu', isc.Menu).addProperties({
  portlet: null,
  fields: ['icon', 'title'],

  // overridden to get reliable custom style name
  getBaseStyle: function (record, rowNum, colNum) {
    var name = this.getField(colNum).name;
    return this.baseStyle + name.substr(0, 1).toUpperCase() + name.substr(1) + 'Field';
  },


  // overridden to let the menu to expand to the left, within the widget
  // TODO: how to handle RTL?
  placeNear: function (left, top) {
    var newLeft = left - this.width + this.menuButton.getVisibleWidth();
    // don't show left from the portlet, in that extremely rare
    // case use the old left
    if (newLeft < this.portlet.getPageLeft()) {
      newLeft = left;
    }
    return this.Super('placeNear', [newLeft, top]);
  }
});

//
// == OBWidgetMenuItem ==
//
isc.defineClass('OBWidgetMenuItem', isc.MenuButton).addProperties({
  widget: null,
  menu: null,

  title: '',

  editFormLayout: null,
  windowContents: null,
  menuItems: null,

  initWidget: function (args) {
    this.widget = args.portlet;
    this.menuItems = this.widget.menuItems;
    this.menu = isc.OBWidgetMenu.create({
      portlet: this.widget
    });
    this.Super('initWidget', args);
  },

  showMenu: function () {
    var me = this,
        menuItems, i, baseMenuItem;

    baseMenuItem = {
      title: '',
      widget: me.widget,
      isSeparator: false,
      iconHeight: 0,
      iconWidth: 0,
      click: null
    };

    this.menu.menuButton = this;

    menuItems = [{
      title: OB.I18N.getLabel('OBKMO_WMO_EditSettings'),
      widget: this.widget,
      enableIf: function (target, menu, item) {
        // already in edit mode
        if (this.widget.widgetMode === this.widget.EDIT_MODE) {
          return false;
        }
        return this.widget.fieldDefinitions.length > 0;
      },
      click: function (target, item, menu) {
        this.widget.switchMode();
      }
    }, {
      isSeparator: true
    }, {
      title: OB.I18N.getLabel('OBKMO_WMO_Refresh'),
      iconHeight: 0,
      iconWidth: 0,
      widget: this.widget,
      click: function (target, item, menu) {
        this.widget.refresh();
      }
    }, {
      title: OB.I18N.getLabel('OBKMO_WMO_DeleteThisWidget'),
      widget: this.widget,
      enableIf: function (target, menu, item) {
        if (OB.User.isPortal) {
          return false;
        } else {
          return this.widget.canDelete;
        }
      },
      click: function (target, item, menu) {
        this.widget.closeClick();
      }
    }];
    if (isc.isAn.Array(this.menuItems) && this.menuItems.length > 0) {
      for (i = 0; i < this.menuItems.length; i++) {
        if (this.menuItems[i].isSeparator) {
          menuItems.push({
            isSeparator: true
          });
          continue;
        }

        if (!this.widget[this.menuItems[i].click]) {
          isc.Log.logWarn('Method: ' + this.menuItems[i].click + ' not defined for widget: ' + this.widget);
        }

        menuItems.push(isc.addProperties({}, baseMenuItem, {
          title: this.menuItems[i].title,
          click: this.widget[this.menuItems[i].click]
        }));
      }
    }
    menuItems.push({
      isSeparator: true
    });
    menuItems.push({
      title: OB.I18N.getLabel('OBKMO_WMO_About'),
      iconHeight: 0,
      iconWidth: 0,
      widget: this.widget,
      click: function (target, item, menu) {
        this.widget.showAbout();
      }
    });

    this.menu.setData(menuItems);
    return this.Super('showMenu', arguments);
  }
});

//
// == OBWidget ==
//
// Implements the base class from where all MyOpenbravo widgets extend.
//
isc.defineClass('OBWidget', isc.Portlet).addProperties({

  CONTENT_MODE: 'content',
  EDIT_MODE: 'edit',

  canResizeRows: false,
  showMaximizeButton: false,
  showMinimizeButton: false,
  showCloseButton: false,
  closeConfirmationMessage: OB.I18N.getLabel('OBKMO_DeleteThisWidgetConfirmation'),
  destroyOnClose: true,

  canDelete: true,
  dbInstanceId: '',

  // Parameters handling
  dbFilterProperty: 'obkmoWidgetInstance',
  entityName: 'OBKMO_WidgetInstance',

  autoSize: false,

  fieldDefinitions: [],
  parameters: {},


  headerProperties: {
    defaultLayoutAlign: 'center'
  },

  // note: dragappearance target gives strange results if one attempts to 
  // drag a widget outside of the portallayout, this because actually
  // the target is dragged and not a separate layout  
  dragAppearance: 'outline',
  dragRepositionStart: function () {
    // keep the widget in the portallayout
    this.keepInParentRect = OB.MyOB.portalLayout.getPageRect();
    return true;
  },

  // set by my openbravo  
  widgetManager: null,

  widgetMode: null,

  // viewForm if widget widget is embedded into a generated window
  viewForm: null,

  initWidget: function (args) {
    var widget = this,
        headerControls = ['headerLabel'];

    // when widget placed inside generated window
    if (this.inWidgetInFormMode) {
      this.showHeader = false;
      this.canDragReposition = false;
      this.height = '0px'; // together with overflow:visible to get height up-to rowspan
    } else {
      // set the headercontrols in initWidget otherwise only  
      // one menubutton gets created for all widgets
      this.menuButton = isc.OBWidgetMenuItem.create({
        portlet: this
      });

      headerControls.push(this.menuButton);

      if (args.showMaximizeButton) {
        headerControls.push('maximizeButton');
      }

      this.headerControls = headerControls;
    }

    this.editFormLayout = this.createEditFormLayout();
    this.windowContents = this.createWindowContents();

    // if not all mandatory params are set then edit mode
    // otherwise content mode
    if (!this.allRequiredParametersSet()) {
      this.widgetMode = this.EDIT_MODE;
    } else {
      this.widgetMode = this.CONTENT_MODE;
    }
    this.toMode(this.widgetMode);

    this.src = null;
    this.items = [this.windowContents, this.editFormLayout];
    this.Super('initWidget', arguments);
  },

  confirmedClosePortlet: function (ok) {
    if (ok) {
      this.Super('confirmedClosePortlet', arguments);
      OB.MyOB.notifyEvent('WIDGET_REMOVED');
    }
  },

  // ** {{{ OBMyOpenbravo.switchMode() }}} **
  //
  // Switches the widget from edit to content mode and vice versa.
  // Edit mode is the edit parameters mode, content mode shows the 
  // normal content of the widget. 
  switchMode: function () {
    if (this.widgetMode === this.CONTENT_MODE) {
      this.toMode(this.EDIT_MODE);
    } else {
      this.refresh();
      this.toMode(this.CONTENT_MODE);
    }
  },

  toMode: function (targetMode) {
    if (targetMode === this.EDIT_MODE) {
      this.windowContents.hide();
      this.editFormLayout.editForm.clearValues();
      this.editFormLayout.editForm.setValues(isc.addProperties({}, this.parameters));
      this.editFormLayout.show();
      this.widgetMode = this.EDIT_MODE;
    } else {
      this.windowContents.show();
      this.editFormLayout.hide();
      this.widgetMode = this.CONTENT_MODE;
    }
  },

  // ** {{{ OBMyOpenbravo.createEditFormLayout() }}} **
  //
  // Creates the edit form layout used to edit parameters.
  createEditFormLayout: function () {
    var formLayout, theForm, buttonLayout, widget = this,
        i, fieldDefinition, items = [];

    formLayout = isc.VStack.create({
      defaultLayoutAlign: 'center',
      overflow: 'visible',
      height: 1,
      width: '100%'
    });

    // no fields, stop here
    if (this.fieldDefinitions.length === 0) {
      return formLayout;
    }

    theForm = isc.DynamicForm.create({
      width: '99%',
      height: '100%',
      titleSuffix: '',
      requiredTitleSuffix: '',
      autoFocus: true,
      titleOrientation: 'top',
      numCols: 2,
      colWidths: ['*', '*']
    });

    // set the initial values
    theForm.values = isc.addProperties({}, this.parameters);

    // create the fields    
    for (i = 0; i < this.fieldDefinitions.length; i++) {
      fieldDefinition = this.fieldDefinitions[i];

      // handle it when there are fieldProperties
      if (fieldDefinition.fieldProperties) {
        fieldDefinition = isc.addProperties(fieldDefinition, fieldDefinition.fieldProperties);
        delete fieldDefinition.fieldProperties;
      }

      var formItem = isc.addProperties({}, fieldDefinition);

      items.push(formItem);
    }
    theForm.setItems(items);

    formLayout.addMember(theForm);
    formLayout.editForm = theForm;

    buttonLayout = isc.HStack.create({
      layoutTopMargin: 10,
      membersMargin: 10,
      align: 'center',
      overflow: 'visible',
      height: 1,
      width: '100%'
    });

    buttonLayout.addMembers(isc.OBFormButton.create({
      autoFit: true,
      // note reusing label from navba, is fine as these are 
      // moved to client.app later
      title: OB.I18N.getLabel('UINAVBA_Save'),
      click: function () {
        if (theForm.validate(true)) {
          widget.setParameters(isc.addProperties(widget.parameters, theForm.getValues()));
          theForm.rememberValues();
          widget.saveParameters();
        }
      }
    }));
    buttonLayout.addMembers(isc.OBFormButton.create({
      autoFit: true,
      // note reusing label from navba, is fine as these are 
      // moved to client.app later
      title: OB.I18N.getLabel('UINAVBA_Cancel'),
      click: function () {
        if (widget.allRequiredParametersSet()) {
          widget.switchMode();
        } else {
          isc.warn(OB.I18N.getLabel('OBKMO_NotAllParametersSet'));
        }
      }
    }));
    formLayout.addMembers(buttonLayout);

    return formLayout;
  },

  allRequiredParametersSet: function () {
    var i, fieldDefinition;
    for (i = 0; i < this.fieldDefinitions.length; i++) {
      fieldDefinition = this.fieldDefinitions[i];
      if (fieldDefinition.required && !this.parameters[fieldDefinition.name] && this.parameters[fieldDefinition.name] !== false) {
        return false;
      }
    }
    return true;
  },

  // ** {{{ OBMyOpenbravo.createWindowContents() }}} **
  //
  // Creates the Canvas which implements the normal content
  // of the window. Must be overridden by the implementing subclass.
  createWindowContents: function () {
    return isc.Label.create({
      contents: 'Implement the createWindowContents method in the subclass!'
    });
  },

  // ** {{{ OBMyOpenbravo.evaluateContents() }}} **
  //
  // Evaluates the str and replaces all parameters which have the form
  // ${parameter} with a value read from the javascript context. The 
  // parameters of this widget are also set as values. 
  evaluateContents: function (str) {
    return str.evalDynamicString(this, this.parameters);
  },

  // ** {{{ OBMyOpenbravo.setParameters(parameters) }}} **
  //
  // Is called when the edit parameters form is saved, the parameters 
  // object is passed in. The default implementation sets the parameters
  // of the widget.
  setParameters: function (parameters) {
    this.parameters = parameters;
  },

  //
  // ** {{{ OBWidget.refresh }}} **
  //
  // The refresh is called from the widget menu. The OBWidget subclass needs to
  // implement this method and handle the refresh of its contents
  //
  refresh: function () {
    isc.Log.logInfo('The subclass needs to implement this method');
  },

  //
  // ** {{{ OBWidget.showAbout }}} **
  //
  // The showAbout is called from the widget menu. 
  //
  showAbout: function () {
    isc.OBAboutPopupWindow.create({
      title: OB.I18N.getLabel('OBKMO_WMO_About') + ' ' + this.title,
      aboutFieldDefinitions: this.aboutFieldDefinitions
    }).show();
  },

  //
  // ** {{{ OBWidget.isSameWidget }}} **
  //
  // Returns true if the object passed as parameter is the same instance.
  // 
  // Parameters:
  // {{widget}} an object to which you want to compare
  // {{isNew}} If this flag is true, the comparison is based on the ID of the
  // client side object, otherwise the dbInstanceId is used
  isSameWidget: function (widget, isNew) {
    if (!widget) {
      return false;
    }

    if (!isNew) {
      return this.dbInstanceId === widget.dbInstanceId;
    }

    return this.ID === widget.ID;
  },

  setDbInstanceId: function (instanceId) {
    this.dbInstanceId = instanceId;
    this.refresh();
  },

  saveParameters: function () {
    var post, i, param, paramObj, fieldDef;

    if (isc.isA.emptyObject(this.parameters)) {
      return;
    }
    if (OB.MyOB.adminMode && !this.dbInstanceId) {
      this.switchMode();
      return;
    }
    post = {
      ID: this.ID,
      dbInstanceId: this.dbInstanceId,
      dbFilterProperty: this.dbFilterProperty,
      action: 'SAVE',
      entityName: this.entityName,
      parameters: []
    };

    for (param in this.parameters) {
      if (this.parameters.hasOwnProperty(param)) {
        for (i = 0; i < this.fieldDefinitions.length; i++) {
          fieldDef = this.fieldDefinitions[i];
          if (param === fieldDef.name) {
            paramObj = {};
            paramObj.name = param;
            paramObj.parameterId = fieldDef.parameterId;
            paramObj.value = this.parameters[param];
            post.parameters.push(paramObj);
          }
        }
      }
    }
    OB.RemoteCallManager.call('org.openbravo.client.application.ParametersActionHandler', post, {}, function (rpcResponse, data, rpcRequest) {
      if (data && data.ID && window[data.ID]) {
        window[data.ID].saveParametersResponseHandler(rpcResponse, data, rpcRequest);
      }
    });
  },

  saveParametersResponseHandler: function (rpcReponse, data, rpcRequest) {
    if (data && data.message) {
      if (data.message.type !== 'Success') {
        isc.Log.logError(data.message.message);
      }
    }
    this.switchMode();
  }
});
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2010-2012 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */

// = OBUrlWidget =
//
// A widget which gets its contents directly from an url.
//
isc.defineClass('OBUrlWidget', isc.OBWidget).addProperties({
  contentSource: null,
  createWindowContents: function () {
    if (!this.contentSource) {
      this.contentSource = this.evaluateContents(this.parameters.src);
    }

    if (this.contentSource.indexOf('butler.openbravo.com') !== -1) {
      this.contentSource = document.location.protocol + this.contentSource.substring(this.contentSource.indexOf('//'));
    }

    if (this.contentSource.indexOf('google.com/calendar') !== -1) {
      this.contentSource = this.contentSource.replace("account", OB.User.email);
    }

    return isc.HTMLFlow.create({
      contentsType: 'page',
      contentsURL: this.contentSource,
      height: '100%',
      width: '100%'
    });
  },
  refresh: function () {
    if (this.parameters.src) {
      this.contentSource = this.evaluateContents(this.parameters.src);
    }
    this.windowContents.setContentsURL(this.contentSource);
  }
});
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2010-2012 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */

// = OBShowParameterWidget =
//
// A widget which can be used to show parameter values and content.
//
isc.defineClass('OBShowParameterWidget', isc.OBWidget).addProperties({
  setParameters: function (parameters) {
    this.Super('setParameters', arguments);
    var oldForm = this.displayForm;
    this.windowContents.destroyAndRemoveMembers(this.displayForm);
    this.windowContents.addMember(this.createDisplayForm());
    oldForm.destroy();
  },

  createWindowContents: function () {
    var layout = isc.VLayout.create({
      width: '100%',
      height: '100%',
      defaultLayoutAlign: 'center'
    });
    layout.addMember(isc.Label.create({
      contents: OB.I18N.getLabel('OBKMO_ParameterValues'),
      height: 1,
      overflow: 'visible'
    }));
    layout.addMember(isc.LayoutSpacer.create({
      height: 10
    }));
    layout.addMember(this.createDisplayForm());
    return layout;
  },

  customAction: function () {
    isc.say('Custom Action!', {
      isModal: true,
      showModalMask: true
    });
  },

  createDisplayForm: function () {
    var item, i, theForm, items = [],
        values = {};

    theForm = isc.DynamicForm.create({
      width: '100%',
      height: '100%',
      wrapItemTitles: false
    });

    for (i in this.parameters) {
      if (this.parameters.hasOwnProperty(i)) {
        items.push({
          name: i,
          title: i,
          type: 'text',
          width: '100%',
          editorType: 'StaticTextItem'
        });
        // get the display value
        // TODO: handle missing values somehow
        item = this.editFormLayout.editForm.getItem(i);
        if (item) {
          values[i] = item.mapValueToDisplay(this.parameters[i]);
        } else {
          values[i] = this.parameters[i];
        }
      }
    }
    theForm.setItems(items);
    theForm.setValues(values);

    this.displayForm = theForm;

    return theForm;
  }
});
/*global $LAB,internetConnection */

/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2010-2012 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */
// = OBCommunityBrandingWidget =
//
// Implements the community branding widget.
//
isc.defineClass('OBCommunityBrandingWidget', isc.OBWidget).addProperties({
  bodyColor: '#e9e9e9',
  versionText: OB.Application.versionDescription,
  headerLabel: null,

  createWindowContents: function () {
    var layout = isc.VStack.create({
      height: '100%',
      width: '100%',
      styleName: '',
      resizeTo: function () {
        var emptySize;
        if (this.separator) {
          emptySize = Math.round((this.width - 155) / 2);
          this.separator.width = emptySize;
        }
        this.Super('resizeTo', arguments);
      }
    });

    if (!OB.Application.brandingWidget) {
      // set a global pointer to ourselves
      OB.Application.brandingWidget = this;
    }

    layout.addMember(OB.Utilities.createLoadingLayout());

    var post = {
      'eventType': 'GET_COMMUNITY_BRANDING_URL',
      'context': {
        'adminMode': 'false'
      },
      'widgets': []
    };

    var me = this;
    var haveInternet = false;
    /*
     * The following LAB.wait(callback) call does not reliably call the callout in case no
     * internet connection is present (so schedule timeout to use local fallback content after 10s)
     */
    var timerNoInternet = setTimeout(function () {
      me.setOBContent(false);
    }, 10000);
    $LAB.script(document.location.protocol + OB.Application.butlerUtilsUrl).wait(function () {
      haveInternet = (typeof internetConnection !== 'undefined');
      // callback did fire so clear timer as its no longer needed
      clearTimeout(timerNoInternet);

      if (haveInternet) {
        OB.RemoteCallManager.call('org.openbravo.client.myob.MyOpenbravoActionHandler', post, {}, function (response, data, request) {
          var communityBrandingUrl = data.url;
          me.setOBContent(haveInternet, communityBrandingUrl);
        });
      } else {
        me.setOBContent(false);
      }
    });

    return layout;
  },

  setOBContent: function (haveInternet, communityBrandingUrl) {
    var url, params = {},
        emptySize, toolTip, purposeStack;

    if (haveInternet) {
      url = document.location.protocol + communityBrandingUrl;
    } else {
      url = OB.Application.contextUrl + OB.Application.communityBrandingStaticUrl;
      params = {
        'uimode': 'MyOB'
      };
    }

    var layout = this.windowContents;

    // remove Loading...
    var loadingBar = layout.members[this.windowContents.members.length - 1];

    this.versionLabel = isc.Label.create({
      contents: this.versionText,
      height: '22px',
      width: '100%',
      styleName: 'OBWidgetCommunityBranding',
      align: 'center'
    });

    var content = isc.HTMLFlow.create({
      contentsType: 'page',
      contentsURL: url,
      contentsURLParams: params,
      height: '324px'
    });

    toolTip = isc.Label.create({
      contents: '',
      height: '5px',
      width: '155px',
      styleName: this.getPurposeStyleClass(),
      prompt: OB.I18N.getLabel('OBKMO_InstancePurpose')
    });

    emptySize = (layout.width - 155) / 2;

    layout.separator = isc.Label.create({
      contents: '',
      height: '5px',
      width: emptySize
    });

    purposeStack = isc.HStack.create({
      height: '24px',
      width: '100%'
    });
    purposeStack.addMembers(layout.separator);
    purposeStack.addMembers(toolTip);
    purposeStack.addMembers(layout.separator);

    layout.destroyAndRemoveMembers(loadingBar);

    layout.addMember(purposeStack);
    layout.addMember(this.versionLabel);
    layout.addMember(content);
  },

  update: function () {
    //FIXME: too expensive
    OB.MyOB.reloadWidgets();
    //    this.versionLabel.clear();
    //    this.versionLabel.contents = this.versionText;
    //    this.versionLabel.styleName = this.getPurposeStyleClass();
    //    this.versionLabel.draw();
  },

  getPurposeStyleClass: function () {
    var purposeCode = OB.Application.purpose;
    if (purposeCode === 'D') {
      return 'OBWidgetCommunityBrandingDevelopment';
    } else if (purposeCode === 'P') {
      return 'OBWidgetCommunityBrandingProduction';
    } else if (purposeCode === 'T') {
      return 'OBWidgetCommunityBrandingTesting';
    } else if (purposeCode === 'E') {
      return 'OBWidgetCommunityBrandingEvaluation';
    } else {
      return 'OBWidgetCommunityBrandingUnknown';
    }
  },

  confirmedClosePortlet: function (ok) {

    if (!ok) {
      this.Super('confirmedClosePortlet', arguments);
      return;
    }

    if (OB.Application.brandingWidget !== this) {
      this.Super('confirmedClosePortlet', arguments);
      return;
    }

    if (OB.Application.licenseType === 'C' || OB.Application.isTrial || OB.Application.isGolden) {
      isc.warn(OB.I18N.getLabel('OBUIAPP_ActivateMessage', [OB.I18N.getLabel('OBKMO_ActivateMessage')]), {
        isModal: true,
        showModalMask: true,
        toolbarButtons: [isc.Dialog.OK]
      });
      return;
    }
    this.Super('confirmedClosePortlet', arguments);
  }
});
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2013 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */

isc.ClassFactory.defineClass('OBCalendarWidget', isc.OBWidget);

isc.OBCalendarWidget.addProperties({
  widgetId: null,
  widgetInstanceId: null,

  createWindowContents: function () {
    var layout, calendarProps;
    this.calendarProps = new Function('return ' + this.parameters.calendarProps)();
    if (!this.calendarProps.isMultiCalendar && this.parameters.legendId) {
      this.calendarProps.legendId = this.parameters.legendId;
    }
    calendarProps = this.calendarProps;

    if (!calendarProps) {
      return isc.VStack.create({
        members: [
        isc.Label.create({
          contents: 'This widget must have a parameter "calendarProps" (DB Column Name) with a fixed value pointing to the object with the calendar properties'
        })]
      });
    }

    if (this.viewMode === 'maximized' && calendarProps.maximizedDefaultViewName) {
      calendarProps.defaultViewName = calendarProps.maximizedDefaultViewName;
    } else if (calendarProps.restoredDefaultViewName) {
      calendarProps.defaultViewName = calendarProps.restoredDefaultViewName;
    }

    layout = isc.VStack.create({
      height: '100%',
      width: '100%',
      styleName: ''
    });

    if (calendarProps.isMultiCalendar) {
      layout.addMember(isc.OBMultiCalendar.create({
        calendarProps: calendarProps
      }));
    } else {
      layout.addMember(isc.OBMultiCalendarCalendar.create(isc.addProperties(calendarProps, {})));
    }

    return layout;
  },

  refresh: function () {
    this.members[1].members[0].members[0].initComponents();
  },

  maximize: function () {
    OB.Layout.ViewManager.openView('OBCalendarWidgetView', {
      tabTitle: this.title,
      widgetInstanceId: this.dbInstanceId,
      widgetId: this.widgetId,
      parameters: this.parameters,
      menuItems: this.menuItems
    });
  }
});

isc.ClassFactory.defineClass('OBCalendarWidgetView', isc.PortalLayout);

isc.OBCalendarWidgetView.addProperties({
  //Set PortalLayout common parameters
  numColumns: 1,
  showColumnMenus: false,
  canDropComponents: false,

  initWidget: function (args) {
    var widgetInstance, i;
    this.Super('initWidget', arguments);

    if (isc['_' + this.widgetId]) {
      widgetInstance = isc['_' + this.widgetId].create(isc.addProperties({
        viewMode: 'maximized',
        title: this.tabTitle,
        widgetInstanceId: this.widgetInstanceId,
        widgetId: this.widgetId,
        dbInstanceId: this.widgetInstanceId,
        parameters: this.parameters,
        menuItems: this.menuItems,
        canDelete: false
      }));
      this.addPortlet(widgetInstance);
    } else {
      //If the instance doesn't exist, just close the tab
      for (i = 0; i < OB.MainView.TabSet.tabs.length; i++) {
        if (OB.MainView.TabSet.tabs[i].title === 'OBCalendarWidgetView') {
          OB.MainView.TabSet.removeTabs(i);
          break;
        }
      }
    }

  },

  isSameTab: function (viewName, params) {
    return this.widgetInstanceId === params.widgetInstanceId;
  }
});
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2011-2012 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */
// = OBAboutPopup =
//
// Implements the About Popup
//
isc.defineClass('OBAboutPopupWindow', isc.OBPopup).addProperties({
  canDragReposition: true,
  canDragResize: true,
  dismissOnEscape: true,
  showMaximizeButton: false,
  showMinimizeButton: false,
  autoCenter: true,
  isModal: true,
  showModalMask: true,
  autoDraw: false,

  aboutFieldDefinitions: [],

  initWidget: function (args) {

    var aboutFieldDefinitions = args.aboutFieldDefinitions;
    this.aboutPopupWindowLayout = this.createPopupWindowLayout();
    this.items = [this.aboutPopupWindowLayout];

    this.Super('initWidget', arguments);
  },

  createPopupWindowLayout: function () {
    var verticalLayout, htmlContentsWidget, htmlContentsModule, urlRegex, url, theSections, htmlFlowWidget, htmlFlowModule;

    verticalLayout = isc.VLayout.create({
      defaultLayoutAlign: 'center',
      overflow: 'visible',
      height: 500,
      width: '100%'
    });

    if (this.aboutFieldDefinitions.authorUrl) {
      urlRegex = /((\http?:\/\/)|(\https?:\/\/))/;
      url = this.aboutFieldDefinitions.authorUrl.match(urlRegex);
      if (!url) {
        this.aboutFieldDefinitions.authorUrl = 'http://' + this.aboutFieldDefinitions.authorUrl;
      }
    }

    htmlContentsWidget = '<tr>  ' + '<td class="OBWidgetAboutLabels" colspan="1">' + OB.I18N.getLabel("OBKMO_Widget_Title") + '</td>  ' + '<td class="OBWidgetAboutLabels" colspan="1">' + OB.I18N.getLabel("OBKMO_Widget_Superclass") + '</td>  ' + '</tr> ' + '<tr>  ' + '<td class="OBWidgetAboutFields" colspan="1">' + this.aboutFieldDefinitions.title + '</td> ' + '<td class="OBWidgetAboutFields" colspan="1">' + this.aboutFieldDefinitions.superclassTitle + '</td> ' + '</tr> ';
    htmlContentsWidget += '<tr>  ' + '<td class="OBWidgetAboutLabels" colspan="1">' + OB.I18N.getLabel("OBKMO_Author_Message") + '</td>  ' + '<td class="OBWidgetAboutLabels" colspan="1">' + OB.I18N.getLabel("OBKMO_Data_Access_Level") + '</td>  ' + '</tr> ' + '<tr>  ' + '<td class="OBWidgetAboutFields" colspan="1">' + this.aboutFieldDefinitions.authorMsg + '</td> ' + '<td class="OBWidgetAboutFields" colspan="1">' + this.aboutFieldDefinitions.dataAccessLevel + '</td> ' + '</tr> ';
    htmlContentsWidget += '<tr>  ' + '<td class="OBWidgetAboutLabels" colspan="1">' + OB.I18N.getLabel("OBKMO_Author_URL") + '</td>  ' + '<td class="OBWidgetAboutLabels" colspan="1">' + OB.I18N.getLabel("OBKMO_Enabled_For_All_Users") + '</td> ' + '</tr> ' + '<tr>  ' + '<td class="OBWidgetAboutFields" colspan="1"><a href=' + this.aboutFieldDefinitions.authorUrl + ' target="_blank">' + this.aboutFieldDefinitions.authorUrl + '</a></td> ' + '<td class="OBWidgetAboutFields" colspan="1">' + this.aboutFieldDefinitions.enabledAllUsers + '</td> ' + '</tr> ';
    htmlContentsWidget += '<tr>  ' + '<td class="OBWidgetAboutLabels" colspan="1">' + OB.I18N.getLabel("OBKMO_Widget_Description") + '</td> ' + '</tr> ' + '<tr>  ' + '<td class="OBWidgetAboutFields" colspan="1">' + this.aboutFieldDefinitions.description + '</td> ' + '</tr> ';

    htmlContentsModule = '<tr>  ' + '<td class="OBWidgetAboutLabels" colspan="1">' + OB.I18N.getLabel("OBKMO_Module_Name") + '</td>  ' + '<td class="OBWidgetAboutLabels" colspan="1">' + OB.I18N.getLabel("OBKMO_License_Type") + '</td>  ' + '</tr> ' + '<tr>  ' + '<td class="OBWidgetAboutFields" colspan="1">' + this.aboutFieldDefinitions.moduleName + '</td> ' + '<td class="OBWidgetAboutFields" colspan="1">' + this.aboutFieldDefinitions.moduleLicenseType + '</td> ' + '</tr> ';
    htmlContentsModule += '<tr>  ' + '<td class="OBWidgetAboutLabels" colspan="1">' + OB.I18N.getLabel("OBKMO_Module_Version") + '</td>  ' + '<td class="OBWidgetAboutLabels" colspan="1">' + OB.I18N.getLabel("OBKMO_Update_Information") + '</td>  ' + '</tr> ' + '<tr>  ' + '<td class="OBWidgetAboutFields" colspan="1">' + this.aboutFieldDefinitions.moduleVersion + '</td> ' + '<td class="OBWidgetAboutFields" colspan="1">' + this.aboutFieldDefinitions.moduleUpdateInfo + '</td> ' + '</tr> ';
    htmlContentsModule += '<tr>  ' + '<td class="OBWidgetAboutLabels" colspan="1">' + OB.I18N.getLabel("OBKMO_Maturity_Status") + '</td>  ' + '<td class="OBWidgetAboutLabels" colspan="1">' + OB.I18N.getLabel("OBKMO_License_Text") + '</td>  ' + '</tr> ' + '<tr>  ' + '<td class="OBWidgetAboutFields" colspan="1" style="vertical-align:top">' + this.aboutFieldDefinitions.moduleStatus + '</td> ' + '<td class="OBWidgetAboutFields" colspan="1">' + this.aboutFieldDefinitions.moduleLicenseText + '</td> ' + '</tr> ';
    htmlContentsModule += '<tr>  ' + '<td class="OBWidgetAboutLabels" colspan="1">' + OB.I18N.getLabel("OBKMO_Java_Package") + '</td>  ' + '<td class="OBWidgetAboutLabels" colspan="1">' + OB.I18N.getLabel("OBKMO_Author") + '</td>  ' + '</tr> ' + '<tr>  ' + '<td class="OBWidgetAboutFields" colspan="1">' + this.aboutFieldDefinitions.moduleJavaPackage + '</td> ' + '<td class="OBWidgetAboutFields" colspan="1">' + this.aboutFieldDefinitions.moduleAuthor + '</td> ' + '</tr> ';
    htmlContentsModule += '<tr>  ' + '<td class="OBWidgetAboutLabels" colspan="1">' + OB.I18N.getLabel("OBKMO_Type") + '</td>  ' + '<td class="OBWidgetAboutLabels" colspan="1">' + OB.I18N.getLabel("OBKMO_DB_Prefix") + '</td>  ' + '</tr> ' + '<tr>  ' + '<td class="OBWidgetAboutFields" colspan="1">' + this.aboutFieldDefinitions.moduleType + '</td> ' + '<td class="OBWidgetAboutFields" colspan="1">' + this.aboutFieldDefinitions.moduleDBPrefix + '</td> ' + '</tr> ';


    htmlFlowWidget = isc.HTMLFlow.create({
      contents: '<html> ' + ' <table width="100%" style="table-layout:fixed"> ' + ' <col width="50%"> ' + ' <col width="50%"> ' + '  <body> ' + htmlContentsWidget + ' </body> ' + ' </table> ' + '</html> '
    });

    htmlFlowModule = isc.HTMLFlow.create({
      overflow: 'auto',
      contents: '<html> ' + ' <table width="100%" style="table-layout:fixed"> ' + ' <col width="50%"> ' + ' <col width="50%""> ' + '  <body> ' + htmlContentsModule + ' </body> ' + ' </table> ' + '</html> '
    });

    theSections = isc.SectionStack.create({
      visibilityMode: 'multiple'
    });

    isc.SectionStack.addProperties({
      sectionHeaderClass: 'OBSectionItemButton',
      headerHeight: 22
    });

    theSections.addSection({
      title: OB.I18N.getLabel('OBKMO_WidgetSection'),
      expanded: true,
      items: [htmlFlowWidget]
    });

    theSections.addSection({
      title: OB.I18N.getLabel('OBKMO_ParentModuleSection'),
      expanded: false,
      items: [htmlFlowModule]
    });

    verticalLayout.addMember(theSections);

    return verticalLayout;
  }
});
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2011-2012 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */

// = OBGettingStartedWidget =
//
// Getting Started widget
//
isc.defineClass('OBGettingStartedWidget', isc.OBWidget).addProperties({
  contentSource: null,
  widgetContentUrl: 'https://butler.openbravo.com/heartbeat-server/org.openbravo.butler.communitybranding/CommunityBranding.html' + '?uimode=gettingStarted&language=' + OB.Application.language_string,
  createWindowContents: function () {
    var loc = document.location;

    this.contentSource = this.widgetContentUrl + '&appurl=' + encodeURIComponent(loc.protocol + '//' + loc.hostname + (loc.port ? ':' + loc.port : '') + OB.Application.contextUrl) + '&nocache=' + Math.random();

    return isc.HTMLFlow.create({
      contentsType: 'page',
      contentsURL: this.contentSource,
      height: '100%',
      width: '100%'
    });
  },
  refresh: function () {
    this.windowContents.setContentsURL(this.contentSource);
  }
});
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use. this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2011-2012 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */

// == OBWidgetInFormItem ==
// Allows placing of workspace widget into a generated form
isc.ClassFactory.defineClass('OBWidgetInFormItem', isc.CanvasItem);

isc.OBWidgetInFormItem.addProperties({
  widgetInstance: null,
  autoDestroy: true,

  cellStyle: 'OBFormField',
  titleStyle: 'OBFormFieldLabel',
  widgetProperties: {
    height: '0px',
    inWidgetInFormMode: true
  },

  createCanvas: function () {
    var widgetProperties, i, w, widgetClass, widgetParameters, locAvailWidgetClasses;

    locAvailWidgetClasses = OB.MyOB.availableWidgetClasses;
    for (i = 0; i < locAvailWidgetClasses.length; i++) {
      w = locAvailWidgetClasses[i];
      if (w.widgetClassId === this.widgetClassId) {
        widgetClass = w.widgetClassName;
        widgetParameters = w.parameters;
      }
    }

    // make a local copy which can be changed
    widgetProperties = isc.addProperties({}, this.widgetProperties);

    // add link to form so widget can possibly use it
    widgetProperties.viewForm = this.form;

    widgetProperties.parameters = widgetParameters;

    if (!widgetClass && this.isPreviewFormItem) {
      widgetClass = isc.OBWidget;
      widgetProperties.createWindowContents = function () {
        return isc.Label.create({
          width: 1,
          height: 1,
          contents: '&nbsp;'
        });
      };
    }

    this.widgetInstance = isc.ClassFactory.newInstance(widgetClass, widgetProperties);
    return this.widgetInstance;
  },

  // called via processFICReturn
  refresh: function () {
    // refresh widget, passing special parameter which is link to formValues for currently displayed record
    if (this.widgetInstance) {
      this.widgetInstance.parameters.formValues = this.form.values;
      this.widgetInstance.refresh();
    }
  }
});
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2010-2012 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */

isc.OBWidgetMenu.addProperties({
  // menu in standard SC
  baseStyle: 'OBWidgetMenuCell',
  //normal in standard SC
  styleName: 'OBWidgetMenu',
  //normal in standard SC
  bodyStyleName: 'OBWidgetMenuBody',
  //menuTable in standard SC
  tableStyle: 'OBWidgetMenuTable',
  iconBodyStyleName: 'OBWidgetMenuTable'
});

isc.OBWidgetMenuItem.addProperties({
  showIcon: false,
  showOver: true,
  showRollOver: true,
  showRollOverIcon: true,
  showDown: false,
  showFocused: false,
  showFocusedAsOver: false,
  iconWidth: 18,
  iconHeight: 18,
  iconSpacing: 2,
  width: 18,
  height: 18,
  menuButtonImage: OB.Styles.skinsPath + 'Default/org.openbravo.client.myob/images/widget/edit.png',
  baseStyle: 'OBWidgetMenuButton',
  overflow: 'visible'
});


isc.OBWidget.addProperties({
  headerStyle: 'OBWidgetHeader',
  bodyStyle: 'OBWidgetBody',
  bodyColor: "transparent",
  showEdges: true,
  edgeImage: OB.Styles.skinsPath + 'Default/org.openbravo.client.myob/images/widget/window.png',
  customEdges: null,
  edgeSize: 2,
  edgeTop: 29,
  edgeBottom: 2,
  edgeOffsetTop: 2,
  edgeOffsetRight: 2,
  edgeOffsetBottom: 2,
  edgeOffsetLeft: 2,
  //part of edges
  showHeaderBackground: false,
  showHeaderIcon: true,

  // clear backgroundColor and style since corners are rounded
  backgroundColor: null,
  border: null,
  edgeCenterBackgroundColor: "#FFFFFF",

  layoutMargin: 0,
  membersMargin: 0,

  showFooter: false,

  showShadow: false,
  shadowDepth: 5
});

isc.OBWidget.changeDefaults('headerDefaults', {
  layoutMargin: 0,
  height: 27
});

isc.OBWidget.changeDefaults('headerLabelDefaults', {
  wrap: false,
  width: '100%',
  inherentWidth: true,
  styleName: 'OBWidgetHeaderText',
  align: isc.Canvas.LEFT
});

isc.OBWidget.changeDefaults('restoreButtonDefaults', {
  baseStyle: 'OBWidgetIconRestore',
  src: OB.Styles.skinsPath + 'Default/org.openbravo.client.myob/images/widget/restore.png',
  width: 24,
  height: 20
});

isc.OBWidget.changeDefaults('closeButtonDefaults', {
  baseStyle: 'OBWidgetIconClose',
  src: OB.Styles.skinsPath + 'Default/org.openbravo.client.myob/images/widget/close.png',
  width: 24,
  height: 20
});

isc.OBWidget.changeDefaults('maximizeButtonDefaults', {
  baseStyle: 'OBWidgetIconMaximize',
  src: OB.Styles.skinsPath + 'Default/org.openbravo.client.myob/images/widget/maximize.png',
  width: 24,
  height: 20
});

isc.OBWidget.changeDefaults('minimizeButtonDefaults', {
  baseStyle: 'OBWidgetIconMinimize',
  src: OB.Styles.skinsPath + 'Default/org.openbravo.client.myob/images/widget/minimize.png',
  width: 24,
  height: 20
});


isc.OBWidgetInFormItem.changeDefaults("widgetProperties", {
  edgeImage: OB.Styles.skinsPath + 'Default/org.openbravo.client.myob/images/form/border.png',
  edgeSize: 1,
  edgeTop: 1,
  edgeBottom: 1,
  edgeOffsetTop: 1,
  edgeOffsetRight: 1,
  edgeOffsetBottom: 1,
  edgeOffsetLeft: 1
});
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2011-2012 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */

isc.OBMyOpenbravo.addProperties({
  styleName: 'OBMyOpenbravo'
});

OB.Styles.OBMyOpenbravo = {
  recentViewsLayout: {
    baseStyle: 'OBMyOBRecentViews',
    nodeIcons: {
      Window: OB.Styles.OBApplicationMenu.Icons.window,
      Process: OB.Styles.OBApplicationMenu.Icons.process,
      Report: OB.Styles.OBApplicationMenu.Icons.report,
      Form: OB.Styles.OBApplicationMenu.Icons.form
    },
    Label: {
      baseStyle: 'OBMyOBRecentViewsEntry'
    },
    newIcon: {
      src: OB.Styles.skinsPath + 'Default/org.openbravo.client.myob/images/management/iconCreateNew.png'
    }
  },
  recentDocumentsLayout: {
    baseStyle: 'OBMyOBRecentViews',
    Label: {
      baseStyle: 'OBMyOBRecentViewsEntry',
      icon: OB.Styles.OBApplicationMenu.Icons.document
    }
  },
  actionTitle: {
    baseStyle: 'OBMyOBRecentViews'
  },
  refreshLayout: {
    styleName: 'OBMyOBLeftColumnLink'
  },
  addWidgetLayout: {
    styleName: 'OBMyOBLeftColumnLink'
  },
  adminOtherMyOBLayout: {
    styleName: 'OBMyOBLeftColumnLink'
  },
  leftColumnLayout: {
    styleName: 'OBMyOBLeftColumn'
  },
  portalLayout: {
    styleName: 'OBMyOBPortal',
    membersMargin: 22,
    columnProperties: {
      membersMargin: 18
    }
  }
};

OB.Styles.OBMyOBAddWidgetDialog = {
  cellStyle: 'OBFormField',
  titleStyle: 'OBFormFieldLabel',
  textBoxStyle: 'OBFormFieldSelectInput',
  pendingTextBoxStyle: null,
  //'OBFormFieldSelectInputPending',
  controlStyle: 'OBFormFieldSelectControl',
  pickListBaseStyle: 'OBFormFieldPickListCell',
  pickListTallBaseStyle: 'OBFormFieldPickListCell',
  pickerIconSrc: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/form/comboBoxPicker.png',
  height: 21,
  pickerIconWidth: 21,
  pickListCellHeight: 22,
  pickListProperties: {
    bodyStyleName: 'OBPickListBody'
  }
};

OB.Styles.OBMyOBAdminModeDialog = {
  cellStyle: 'OBFormField',
  titleStyle: 'OBFormFieldLabel',
  textBoxStyle: 'OBFormFieldSelectInput',
  pendingTextBoxStyle: null,
  //'OBFormFieldSelectInputPending',
  controlStyle: 'OBFormFieldSelectControl',
  pickListBaseStyle: 'OBFormFieldPickListCell',
  pickListTallBaseStyle: 'OBFormFieldPickListCell',
  pickerIconSrc: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/form/comboBoxPicker.png',
  height: 21,
  pickerIconWidth: 21,
  pickListCellHeight: 22,
  pickListProperties: {
    bodyStyleName: 'OBPickListBody'
  }
};

OB.Styles.OBMyOBPublishChangesDialog = {
  form: {
    styleName: 'OBMyOBPublishLegend'
  }
};


// MyOpenbravo dialogs (left menu)
isc.OBMyOBDialog.addProperties({
  styleName: 'OBMyOBDialog',
  headerStyle: 'OBMyOBDialogHeader',
  bodyStyle: "OBMyOBDialogBody",
  showEdges: true,
  edgeImage: OB.Styles.skinsPath + 'Default/org.openbravo.client.myob/images/dialog/window.png',
  customEdges: null,
  edgeSize: 6,
  edgeTop: 23,
  edgeBottom: 6,
  edgeOffsetTop: 2,
  edgeOffsetRight: 5,
  edgeOffsetBottom: 5,
  showHeaderBackground: false,
  // part of edges
  showHeaderIcon: true,

  border: null,

  layoutMargin: 0,
  membersMargin: 0,

  showFooter: false,

  showShadow: false,
  shadowDepth: 5
});

isc.OBMyOBDialog.changeDefaults('headerDefaults', {
  layoutMargin: 0,
  height: 24
});

isc.OBMyOBDialog.changeDefaults('headerLabelDefaults', {
  styleName: 'OBMyOBDialogHeaderText',
  align: isc.Canvas.CENTER
});

isc.OBMyOBDialog.changeDefaults("closeButtonDefaults", {
  src: OB.Styles.skinsPath + 'Default/org.openbravo.client.myob/images/dialog/headerIcons/close.png',
  showRollOver: true,
  showDown: false,
  width: 15,
  height: 15
});
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2011-2013 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */
// = OBSelectorPopupWindow =
// The selector popup window shown when clicking the picker icon. Contains 
// a selection grid and cancel/ok buttons.
//
isc.ClassFactory.defineClass('OBSelectorPopupWindow', isc.OBPopup);

isc.OBSelectorPopupWindow.addProperties({
  canDragReposition: true,
  canDragResize: true,
  dismissOnEscape: true,
  showMaximizeButton: true,
  multiselect: false,

  defaultSelectorGridField: {
    canFreeze: true,
    canGroupBy: false
  },

  initWidget: function () {
    var selectorWindow = this,
        okButton, cancelButton, operator, i;

    this.setFilterEditorProperties(this.selectorGridFields);

    okButton = isc.OBFormButton.create({
      title: OB.I18N.getLabel('OBUISC_Dialog.OK_BUTTON_TITLE'),
      click: function () {
        selectorWindow.setValueInField();
      }
    });
    cancelButton = isc.OBFormButton.create({
      title: OB.I18N.getLabel('OBUISC_Dialog.CANCEL_BUTTON_TITLE'),
      click: function () {
        selectorWindow.closeClick();
      }
    });

    OB.Utilities.applyDefaultValues(this.selectorGridFields, this.defaultSelectorGridField);

    if (this.selector.popupTextMatchStyle === 'substring') {
      operator = 'iContains';
    } else {
      operator = 'iStartsWith';
    }

    for (i = 0; i < this.selectorGridFields.length; i++) {
      this.selectorGridFields[i].canSort = (this.selectorGridFields[i].canSort === false ? false : true);
      if (this.selectorGridFields[i].disableFilter) {
        this.selectorGridFields[i].canFilter = false;
      } else {
        this.selectorGridFields[i].canFilter = true;
      }
    }
    if (!this.dataSource.fields || !this.dataSource.fields.length || this.dataSource.fields.length === 0) {
      this.dataSource.fields = this.selectorGridFields;
      this.dataSource.init();
    }
    this.selectorGrid = isc.OBGrid.create({

      selector: this.selector,
      selectionAppearance: this.selectionAppearance,

      // drawAllMaxCells is set to 0 to prevent extra reads of data
      // Smartclient will try to read until drawAllMaxCells has been reached
      drawAllMaxCells: 0,

      dataProperties: {
        useClientFiltering: false,
        useClientSorting: false
      },

      width: this.selectorGridProperties.width,
      height: this.selectorGridProperties.height,
      alternateRecordStyles: this.selectorGridProperties.alternateRecordStyles,
      dataSource: this.dataSource,
      showFilterEditor: true,
      sortField: this.displayField,

      onFetchData: function (criteria, requestProperties) {
        requestProperties = requestProperties || {};
        requestProperties.params = this.getFetchRequestParams(requestProperties.params);
      },

      getFetchRequestParams: function (params) {
        params = params || {};
        if (this.selector) {
          isc.OBSelectorItem.prepareDSRequest(params, this.selector);
        }

        params._requestType = 'Window';

        if (this.getSelectedRecord()) {
          params._targetRecordId = this.targetRecordId;
        }
        return params;
      },

      dataArrived: function () {
        var record, rowNum, i, selectedRecords = [],
            ds, ids;
        this.Super('dataArrived', arguments);
        // check if a record has been selected, if
        // not take the one
        // from the selectorField
        // by doing this when data arrives the selection
        // will show up
        // when the record shows in view
        if (this.selector.selectorWindow.multiselect) {
          ds = this.data;
          ids = this.selector.selectorWindow.selectedIds;
          for (i = 0; i < ids.length; i++) {
            selectedRecords.push(ds.find(OB.Constants.ID, ids[i]));
          }
          this.selectRecords(selectedRecords);
        } else {
          if (this.targetRecordId) {
            record = this.data.find(this.selector.valueField, this.targetRecordId);
            rowNum = this.getRecordIndex(record);
            this.selectSingleRecord(record);
            // give grid time to draw
            this.fireOnPause('scrollRecordIntoView', this.scrollRecordIntoView, [rowNum, true], this);
            delete this.targetRecordId;
          } else if (this.data.lengthIsKnown() && this.data.getLength() === 1) {
            // only one record, select that one straight away
            this.selectSingleRecord(0);
          } else {
            this.selectSingleRecord(null);
          }
        }
      },
      fields: this.selectorGridFields,
      recordDoubleClick: function () {
        selectorWindow.setValueInField();
      },

      handleFilterEditorSubmit: function (criteria, context) {
        var ids = [],
            crit = {},
            len, i, c, found, fixedCriteria;
        if (!selectorWindow.multiselect) {
          this.Super('handleFilterEditorSubmit', arguments);
          return;
        }

        if (criteria && criteria.criteria) {
          fixedCriteria = [];
          // remove from criteria dummy one created to preserve selected items
          for (i = 0; i < criteria.criteria.length; i++) {
            if (!criteria.criteria[i].dummyCriteria && criteria.criteria[i].fieldName !== '_selectorDefinitionId') {
              fixedCriteria.push(criteria.criteria[i]);
            }
          }
          criteria.criteria = fixedCriteria;
        }

        len = this.selector.selectorWindow.selectedIds.length;
        for (i = 0; i < len; i++) {
          ids.push({
            fieldName: 'id',
            operator: 'equals',
            value: this.selector.selectorWindow.selectedIds[i]
          });
        }

        if (len > 0) {
          crit._constructor = 'AdvancedCriteria';
          crit._OrExpression = true; // trick to get a really _or_ in the backend
          crit.operator = 'or';
          crit.criteria = ids;

          c = (criteria && criteria.criteria) || [];
          found = false;

          for (i = 0; i < c.length; i++) {
            if (c[i].fieldName && c[i].fieldName !== '_selectorDefinitionId' && c[i].value !== '') {
              found = true;
              break;
            }
          }

          if (!found) {
            if (!criteria) {
              criteria = {
                _constructor: 'AdvancedCriteria',
                operator: 'and',
                criteria: []
              };
            }

            // adding an *always true* sentence
            criteria.criteria.push({
              fieldName: 'id',
              operator: 'notNull',
              dummyCriteria: true
            });
          }
          crit.criteria.push(criteria); // original filter
        } else {
          crit = criteria;
        }
        this.Super('handleFilterEditorSubmit', [crit, context]);
      },
      selectionChanged: function (record, state) {
        if (this.selector.selectorWindow.selectedIds) {
          if (state) {
            this.selector.selectorWindow.selectId(record[OB.Constants.ID]);
          } else {
            this.selector.selectorWindow.selectedIds.remove(record[OB.Constants.ID]);
          }
          this.markForRedraw('Selection changed');
        }

        this.Super('selectionChanged', arguments);
      }
    });

    this.items = [this.selectorGrid, isc.HLayout.create({
      styleName: this.buttonBarStyleName,
      height: this.buttonBarHeight,
      defaultLayoutAlign: 'center',
      members: [isc.LayoutSpacer.create({}), okButton, isc.LayoutSpacer.create({
        width: this.buttonBarSpace
      }), cancelButton, isc.LayoutSpacer.create({})]
    })];
    this.Super('initWidget', arguments);
  },

  setFilterEditorProperties: function (gridFields) {
    var type, selectorWindow = this,
        keyPressFunction, clickFunction, i, gridField;

    keyPressFunction = function (item, form, keyName, characterValue) {
      if (keyName === 'Escape') {
        selectorWindow.hide();
        return false;
      }
      return true;
    };

    clickFunction = function (form, item, icon) {
      item.setValue(null);
      selectorWindow.selectorGrid.focusInFilterEditor(item);
      selectorWindow.selectorGrid.filterByEditor();
    };

    for (i = 0; i < gridFields.length; i++) {
      gridField = gridFields[i];

      type = isc.SimpleType.getType(gridField.type);

      if (type.filterEditorType && !gridField.filterEditorType) {
        gridField.filterEditorType = type.filterEditorType;
      }

      gridField.canFilter = (gridField.canFilter === false ? false : true);
      gridField.filterOnKeypress = (gridField.filterOnKeypress === false ? false : true);

      if (!gridField.filterEditorProperties) {
        gridField.filterEditorProperties = {
          required: false
        };
      } else {
        gridField.filterEditorProperties.required = false;
      }

      gridField.filterEditorProperties.keyPress = keyPressFunction;

      if (!gridField.filterEditorProperties.icons) {
        gridField.filterEditorProperties.icons = [];
      }

      gridField.filterEditorProperties.showLabel = false;
      gridField.filterEditorProperties.showTitle = false;
      gridField.filterEditorProperties.selectorWindow = selectorWindow;
      gridField.filterEditorProperties.textMatchStyle = selectorWindow.selector.popupTextMatchStyle;
    }
  },

  closeClick: function () {
    this.hide(arguments);
    this.selector.focusInItem();
  },

  hide: function () {
    this.Super('hide', arguments);
    //focus is now moved to the next item in the form automatically
    if (!this.selector.form.getFocusItem()) {
      this.selector.focusInItem();
    }
  },

  show: function (applyDefaultFilter) {
    // draw now already otherwise the filter does not work the
    // first time    
    var ret = this.Super('show', arguments);
    if (applyDefaultFilter) {
      this.selectorGrid.setFilterEditorCriteria(this.defaultFilter);
      this.selectorGrid.filterByEditor();
    }
    if (this.selectorGrid.isDrawn()) {
      this.selectorGrid.focusInFilterEditor();
    } else {
      isc.Page.setEvent(isc.EH.IDLE, this.selectorGrid, isc.Page.FIRE_ONCE, 'focusInFilterEditor');
    }

    if (this.selector.getValue()) {
      this.selectorGrid.selectSingleRecord(this.selectorGrid.data.find(this.valueField, this.selector.getValue()));
    } else {
      this.selectorGrid.selectSingleRecord(null);
    }

    return ret;
  },

  open: function () {
    var selectorWindow = this,
        callback, data;

    data = {
      '_selectorDefinitionId': this.selectorDefinitionId || this.selector.selectorDefinitionId
    };

    // on purpose not passing the third boolean param
    if (this.selector && this.selector.form && this.selector.form.view && this.selector.form.view.getContextInfo) {
      isc.addProperties(data, this.selector.form.view.getContextInfo(false, true));
    } else if (this.view && this.view.sourceView && this.view.sourceView.getContextInfo) {
      isc.addProperties(data, this.view.sourceView.getContextInfo(false, true));
    }

    callback = function (resp, data, req) {
      selectorWindow.fetchDefaultsCallback(resp, data, req);
    };
    OB.RemoteCallManager.call('org.openbravo.userinterface.selector.SelectorDefaultFilterActionHandler', data, data, callback);
  },

  fetchDefaultsCallback: function (rpcResponse, data, rpcRequest) {
    var defaultFilter = {};
    if (data) {
      defaultFilter = {}; // Reset filter
      isc.addProperties(defaultFilter, data);
    }

    // adds the selector id to filter used to get filter information
    defaultFilter._selectorDefinitionId = this.selector.selectorDefinitionId;
    this.defaultFilter = defaultFilter;
    this.selectorGrid.targetRecordId = this.selector.getValue();
    this.show(true);
  },

  setValueInField: function () {
    if (this.multiselect) {
      this.selector.setSelectedRecords(this.selectorGrid.getSelectedRecords());
    } else {
      this.selector.setValueFromRecord(this.selectorGrid.getSelectedRecord(), true);
    }
    this.hide();
  }
});

// = Selector Item =
// Contains the OBSelector Item. This widget consists of two main parts:
// 1) a combo box with a picker icon
// 2) a popup window showing a search grid with data
//
isc.ClassFactory.defineClass('OBSelectorItem', isc.ComboBoxItem);

isc.ClassFactory.mixInInterface('OBSelectorItem', 'OBLinkTitleItem');

isc.OBSelectorItem.addProperties({
  hasPickList: true,
  popupTextMatchStyle: 'startswith',
  suggestionTextMatchStyle: 'startswith',
  showOptionsFromDataSource: true,

  // https://issues.openbravo.com/view.php?id=18739
  selectOnFocus: false,
  // still do select on focus initially
  doInitialSelectOnFocus: true,

  // Setting this to false results in the picklist to be shown 
  // on focus, specific SC logic
  //  addUnknownValues: false,
  // ** {{{ selectorGridFields }}} **
  // the definition of the columns in the popup window
  selectorGridFields: [{
    title: OB.I18N.getLabel('OBUISC_Identifier'),
    name: OB.Constants.IDENTIFIER
  }],

  // Do not fetch data upon creation
  // http://www.smartclient.com/docs/8.1/a/b/c/go.html#attr..ComboBoxItem.optionDataSource
  fetchMissingValues: false,

  autoFetchData: false,
  showPickerIcon: true,
  //  selectors should not be validated on change, only after its content has been deleted
  //  and after an option of the combo has been selected
  //  see issue 19956 (https://issues.openbravo.com/view.php?id=19956)
  validateOnChange: false,
  completeOnTab: true,
  // note validateonexit does not work when completeOnTab is true
  // setting it anyway, the this.validate() is called in the blur
  validateOnExit: true,

  pickListProperties: {
    fetchDelay: 400,
    showHeaderContextMenu: false,
    dataProperties: {
      useClientFiltering: false
    }
  },

  hidePickListOnBlur: function () {
    // when the form gets redrawn the focus may not be in
    // the item but it is still the item which gets the focus
    // after redrawing
    if (this.form && this.form._isRedrawing && this.form.getFocusItem() === this) {
      return;
    }

    this.Super('hidePickListOnBlur', arguments);
  },

  setUpPickList: function (show, queueFetches, request) {
    this.pickListProperties.canResizeFields = true;
    // drawAllMaxCells is set to 0 to prevent extra reads of data
    // Smartclient will try to read until drawAllMaxCells has been reached
    this.pickListProperties.drawAllMaxCells = 0;
    // Set the pickListWidth just before being shown.
    this.setPickListWidth();
    this.Super('setUpPickList', arguments);
  },

  // don't do update value in all cases, updatevalue results in a data source request
  // to the server, so only do updatevalue when the user changes information
  // https://issues.openbravo.com/view.php?id=16611
  updateValue: function () {
    if (this.form && this.form.grid && (this.form.grid._storingUpdatedEditorValue || this.form.grid._showingEditor || this.form.grid._hidingInlineEditor)) {
      // prevent updatevalue while the form is being shown or hidden
      return;
    }
    this.Super('updateValue', arguments);
  },

  setValue: function (val) {
    var i, displayedVal;

    if (val && this.valueMap) {
      displayedVal = this.valueMap[val];
      for (i in this.valueMap) {
        if (this.valueMap.hasOwnProperty(i)) {
          if (this.valueMap[i] === displayedVal && i !== val) {
            // cleaning up valueMap: there are 2 values that display the same info, keep just the one for
            // the current value
            delete this.valueMap[i];
            break;
          }
        }
      }
    } else { //Select by default the first option in the picklist, if possible
      this.selectFirstPickListOption();
    }

    if (this._clearingValue) {
      this._editorEnterValue = null;
    }

    this.Super('setValue', arguments);
  },

  selectFirstPickListOption: function () {
    var firstRecord;
    if (this.pickList) {
      if (this.pickList.data && (this.pickList.data.totalRows > 0)) {
        firstRecord = this.pickList.data.get(0);
        this.pickList.selection.selectSingle(firstRecord);
        this.pickList.clearLastHilite();
        this.pickList.scrollRecordIntoView(0);
      }
    }
  },

  // changed handles the case that the user removes the value using the keyboard
  // this should do the same things as setting the value through the pickvalue
  changed: function (form, item, newValue) {
    var identifier;
    // only do the identifier actions when clearing
    // in all other cases pickValue is called
    if (!newValue) {
      this.setValueFromRecord(null);
    }
    if (OB.Utilities.isUUID(newValue)) {
      identifier = this.mapValueToDisplay(newValue);
    } else {
      identifier = newValue;
    }

    // check if the whole item identifier has been entered
    // see issue https://issues.openbravo.com/view.php?id=22821
    if (OB.Utilities.isUUID(this.mapDisplayToValue(identifier)) && this._notUpdatingManually !== true) {
      this.fullIdentifierEntered = true;
    } else {
      delete this.fullIdentifierEntered;
    }

    //Setting the element value again to align the cursor position correctly.
    //Before setting the value check if the identifier is part of the value map or the full identifier is entered.
    //If it fails set newValue as value.
    if ((this.valueMap && this.valueMap[newValue] === identifier && identifier.trim() !== '') || this.fullIdentifierEntered) {
      this.setElementValue(identifier);
    } else {
      this.setElementValue(newValue);
    }
  },

  setPickListWidth: function () {
    var extraWidth = 0,
        fieldWidth = this.getVisibleWidth();
    if (this.pickListFields.length > 1) {
      extraWidth = 150 * (this.pickListFields.length - 1);
    }

    this.pickListWidth = (fieldWidth < 150 ? 150 : fieldWidth) + extraWidth;
  },

  enableShortcuts: function () {
    var ksAction_ShowPopup;

    ksAction_ShowPopup = function (caller) {
      caller.openSelectorWindow();
      return false; //To avoid keyboard shortcut propagation
    };
    OB.KeyboardManager.Shortcuts.set('Selector_ShowPopup', ['OBSelectorItem', 'OBSelectorItem.icon'], ksAction_ShowPopup);
  },

  init: function () {
    this.enableShortcuts();
    this.icons = [{
      selector: this,
      src: this.popupIconSrc,
      width: this.popupIconWidth,
      height: this.popupIconHeight,
      hspace: this.popupIconHspace,
      keyPress: function (keyName, character, form, item, icon) {
        var response = OB.KeyboardManager.Shortcuts.monitor('OBSelectorItem.icon', this.selector);
        if (response !== false) {
          response = this.Super('keyPress', arguments);
        }
        return response;
      },
      click: function (form, item, icon) {
        item.openSelectorWindow();
      }
    }];

    if (this.disabled) {
      // TODO: disable, remove icons
      this.icons = null;
    }
    if (!this.showSelectorGrid) {
      this.icons = null;
    }

    if (this.showSelectorGrid && !this.form.isPreviewForm) {
      this.selectorWindow = isc.OBSelectorPopupWindow.create({
        // solves issue: https://issues.openbravo.com/view.php?id=17268
        title: (this.form && this.form.grid ? this.form.grid.getField(this.name).title : this.title),
        dataSource: this.optionDataSource,
        selector: this,
        valueField: this.valueField,
        displayField: this.displayField,
        selectorGridFields: isc.shallowClone(this.selectorGridFields)
      });
    }

    this.optionCriteria = {
      _selectorDefinitionId: this.selectorDefinitionId
    };

    return this.Super('init', arguments);
  },

  setValueFromRecord: function (record, fromPopup) {
    var currentValue = this.getValue(),
        identifierFieldName = this.name + OB.Constants.FIELDSEPARATOR + OB.Constants.IDENTIFIER,
        i;
    this._notUpdatingManually = true;
    if (!record) {
      this.storeValue(null);
      this.form.setValue(this.name + OB.Constants.FIELDSEPARATOR + this.displayField, null);
      this.form.setValue(identifierFieldName, null);

      // make sure that the grid does not display the old identifier
      if (this.form.grid && this.form.grid.getEditForm()) {
        this.form.grid.setEditValue(this.form.grid.getEditRow(), this.name, null);
        this.form.grid.setEditValue(this.form.grid.getEditRow(), identifierFieldName, '');
        this.form.grid.setEditValue(this.form.grid.getEditRow(), this.name + OB.Constants.FIELDSEPARATOR + this.displayField, '');
      }
    } else {
      this.handleOutFields(record);
      this.storeValue(record[this.valueField]);
      this.form.setValue(this.name + OB.Constants.FIELDSEPARATOR + this.displayField, record[this.displayField]);
      this.form.setValue(identifierFieldName, record[OB.Constants.IDENTIFIER]);
      if (!this.valueMap) {
        this.valueMap = {};
      }

      this.valueMap[record[this.valueField]] = record[this.displayField].replace(/[\n\r]/g, '');
      this.updateValueMap();
    }

    if (this.form && this.form.handleItemChange) {
      this._hasChanged = true;
      this.form.handleItemChange(this);
    }

    // only jump to the next field if the value has really been set
    // do not jump to the next field if the event has been triggered by the Tab key,
    // to prevent a field from being skipped (see https://issues.openbravo.com/view.php?id=21419)
    if (currentValue && this.form.focusInNextItem && isc.EH.getKeyName() !== 'Tab') {
      this.form.focusInNextItem(this.name);
    }
    delete this._notUpdatingManually;
  },

  blur: function (form, item) {
    var selectedRecord;
    // Handles the case where the user has entered the whole item identifier and has moved out of the 
    // selector field by clicking on another field, instead of pressing the tab key. in that case the change
    // was not being detected and if the selector had some callouts associated they were not being executed
    // See issue https://issues.openbravo.com/view.php?id=22821
    if (this.fullIdentifierEntered) {
      selectedRecord = this.pickList.getSelectedRecord();
      this.setValueFromRecord(selectedRecord);
      delete this.fullIdentifierEntered;
    }
  },

  handleOutFields: function (record) {
    var i, j, outFields = this.outFields,
        form = this.form,
        grid = this.grid,
        item, value, fields, numberFormat;

    if ((!form || (form && !form.fields)) && (!grid || (grid && !grid.fields))) {
      // not handling out fields
      return;
    }

    fields = form.fields || grid.fields;
    for (i in outFields) {
      if (outFields.hasOwnProperty(i)) {
        if (outFields[i].suffix) {
          // when it has a suffix
          if (record) {
            value = record[i];
            if (typeof value === 'undefined') {
              form.hiddenInputs[this.outHiddenInputPrefix + outFields[i].suffix] = '';
              continue;
            }
            if (isc.isA.Number(value)) {
              if (outFields[i].formatType && outFields[i].formatType !== '') {
                value = OB.Utilities.Number.JSToOBMasked(value, OB.Format.formats[outFields[i].formatType], OB.Format.defaultDecimalSymbol, OB.Format.defaultGroupingSymbol, OB.Format.defaultGroupingSize);
              } else {
                value = value.toString().replace('.', OB.Format.defaultDecimalSymbol);
              }
            }
            form.hiddenInputs[this.outHiddenInputPrefix + outFields[i].suffix] = value;
            item = form.getItem(outFields[i].fieldName);
            if (item && item.valueMap) {
              item.valueMap[value] = record[outFields[i].fieldName + OB.Constants.FIELDSEPARATOR + OB.Constants.IDENTIFIER];
            }
          } else {
            form.hiddenInputs[this.outHiddenInputPrefix + outFields[i].suffix] = null;
          }
        } else {
          // it does not have a suffix
          for (j = 0; j < fields.length; j++) {
            if (fields[j].name !== '' && fields[j].name === outFields[i].fieldName) {
              if (record) {
                value = record[i];
                if (typeof value === 'undefined') {
                  continue;
                }
              } else {
                value = null;
              }
              fields[j].setValue(value);
            }
          }
        }
      }
    }
  },

  openSelectorWindow: function () {
    // always refresh the content of the grid to force a reload
    // if the organization has changed
    if (this.selectorWindow.selectorGrid) {
      this.selectorWindow.selectorGrid.invalidateCache();
    }
    this.selectorWindow.open();
  },

  keyPress: function (item, form, keyName, characterValue) {
    var response = OB.KeyboardManager.Shortcuts.monitor('OBSelectorItem', this);
    if (response !== false) {
      response = this.Super('keyPress', arguments);
    }
    return response;
  },

  pickValue: function (value) {
    // get the selected record before calling the super, as this super call
    // will deselect the record
    var selectedRecord = this.pickList.getSelectedRecord(),
        ret = this.Super('pickValue', arguments);
    this.setValueFromRecord(selectedRecord);
    delete this.fullIdentifierEntered;
    return ret;
  },

  filterDataBoundPickList: function (requestProperties, dropCache) {
    requestProperties = requestProperties || {};
    requestProperties.params = requestProperties.params || {};

    isc.OBSelectorItem.prepareDSRequest(requestProperties.params, this);

    // sometimes the value is passed as a filter criteria remove it
    if (this.getValueFieldName() && requestProperties.params[this.getValueFieldName()]) {
      requestProperties.params[this.getValueFieldName()] = null;
    }

    // do not prevent the count operation
    requestProperties.params[isc.OBViewGrid.NO_COUNT_PARAMETER] = 'true';

    if (this.form.getFocusItem() !== this && !this.form.view.isShowingForm && this.getEnteredValue() === '' && this.savedEnteredValue) {
      this.setElementValue(this.savedEnteredValue);
      delete this.savedEnteredValue;
    } else if (this.form && this.form.view && this.form.view.isShowingForm && this.savedEnteredValue) {
      if (this.getEnteredValue() !== '') {
        this.setElementValue(this.savedEnteredValue + this.getEnteredValue());
      } else {
        this.setElementValue(this.savedEnteredValue);
      }
      delete this.savedEnteredValue;
    }

    var criteria = this.getPickListFilterCriteria(),
        i;
    for (i = 0; i < criteria.criteria.length; i++) {
      if (criteria.criteria[i].fieldName === this.displayField) {
        // for the suggestion box it is one big or
        requestProperties.params[OB.Constants.OR_EXPRESSION] = 'true';
      }
    }

    return this.Super('filterDataBoundPickList', [requestProperties, dropCache]);
  },

  getPickListFilterCriteria: function () {
    var crit = this.Super('getPickListFilterCriteria', arguments),
        operator;
    this.pickList.data.useClientFiltering = false;
    var criteria = {
      operator: 'or',
      _constructor: 'AdvancedCriteria',
      criteria: []
    };

    // add a dummy criteria to force a fetch
    criteria.criteria.push(isc.OBRestDataSource.getDummyCriterion());

    // only filter if the display field is also passed
    // the displayField filter is not passed when the user clicks the drop-down button
    // display field is passed on the criteria.
    var displayFieldValue = null,
        i;
    if (crit.criteria) {
      for (i = 0; i < crit.criteria.length; i++) {
        if (crit.criteria[i].fieldName === this.displayField) {
          displayFieldValue = crit.criteria[i].value;
        }
      }
    } else if (crit[this.displayField]) {
      displayFieldValue = crit[this.displayField];
    }
    if (displayFieldValue !== null) {
      if (this.textMatchStyle === 'substring') {
        operator = 'iContains';
      } else {
        operator = 'iStartsWith';
      }
      for (i = 0; i < this.extraSearchFields.length; i++) {
        criteria.criteria.push({
          fieldName: this.extraSearchFields[i],
          operator: operator,
          value: displayFieldValue
        });
      }
      criteria.criteria.push({
        fieldName: this.displayField,
        operator: operator,
        value: displayFieldValue
      });
    }
    return criteria;
  },

  mapValueToDisplay: function (value) {
    var ret = this.Super('mapValueToDisplay', arguments);
    if (ret === value && this.isDisabled()) {
      if (!this.valueMap || (this.valueMap && !this.valueMap[value])) {
        return '';
      }
    }
    // if value is null then don't set it in the valueMap, this results 
    // in null being displayed in the combobox
    if (ret === value && value) {
      if (!this.valueMap) {
        this.valueMap = {};
        this.valueMap[value] = '';
        return '';
      } else if (!this.valueMap[value] && OB.Utilities.isUUID(value)) {
        return '';
      }
    }
    if (value && value !== '' && ret === '' && !OB.Utilities.isUUID(value)) {
      this.savedEnteredValue = value;
    }
    return ret;
  },

  mapDisplayToValue: function (value) {
    if (value === '') {
      return null;
    }
    return this.Super('mapDisplayToValue', arguments);
  },

  destroy: function () {
    // Explicitly destroy the selector window to avoid memory leaks
    if (this.selectorWindow) {
      this.selectorWindow.destroy();
      this.selectorWindow = null;
    }

    // Sometimes, internal _columnSizer member of pickList is leaked
    if (this.pickList && this.pickList.members && this.pickList.members.length > 0 && this.pickList.members[0]._columnSizer) {
      this.pickList.members[0]._columnSizer.destroy();
    }

    this.Super('destroy', arguments);
  }
});

isc.OBSelectorItem.addClassMethods({
  // Prepares requestProperties adding contextInfo, this is later used in backed
  // to prepare filters 
  prepareDSRequest: function (params, selector) {
    // on purpose not passing the third boolean param
    if (selector.form && selector.form.view && selector.form.view.getContextInfo) {
      isc.addProperties(params, selector.form.view.getContextInfo(false, true));
    } else if (selector.view && selector.view.sourceView && selector.view.sourceView.getContextInfo) {
      isc.addProperties(params, selector.view.sourceView.getContextInfo(false, true));
    }

    if (selector.form && selector.form.view && selector.form.view.standardWindow) {
      isc.addProperties(params, {
        windowId: selector.form.view.standardWindow.windowId,
        tabId: selector.form.view.tabId,
        moduleId: selector.form.view.moduleId
      });
    }

    // Include the windowId in the params if possible
    if (selector.form && selector.form.view && selector.form.view.standardProperties && selector.form.view.standardProperties.inpwindowId) {
      params.windowId = selector.form.view.standardProperties.inpwindowId;
    }

    // also add the special ORG parameter
    if (params.inpadOrgId) {
      params[OB.Constants.ORG_PARAMETER] = params.inpadOrgId;
    }

    // adds the selector id to filter used to get filter information
    params._selectorDefinitionId = selector.selectorDefinitionId;

    // add field's default filter expressions
    params.filterClass = 'org.openbravo.userinterface.selector.SelectorDataSourceFilter';

    // the additional where clause
    params[OB.Constants.WHERE_PARAMETER] = selector.whereClause;

    // and sort according to the display field
    // initially
    params[OB.Constants.SORTBY_PARAMETER] = selector.displayField;

    // Parameter windows
    if (selector.form.paramWindow) {
      params._processDefinitionId = selector.form.paramWindow.processId;
      params._selectorFieldId = selector.paramId;
      isc.addProperties(params, selector.form.paramWindow.getContextInfo());
    }
  }
});

isc.ClassFactory.defineClass('OBSelectorLinkItem', isc.StaticTextItem);

isc.ClassFactory.mixInInterface('OBSelectorLinkItem', 'OBLinkTitleItem');

isc.OBSelectorLinkItem.addProperties({
  canFocus: true,
  showFocused: true,
  wrap: false,
  clipValue: true,

  // show the complete displayed value, handy when the display value got clipped
  itemHoverHTML: function (item, form) {
    return this.getDisplayValue(this.getValue());
  },

  setValue: function (value) {
    var ret = this.Super('setValue', arguments);
    // in this case the clearIcon needs to be shown or hidden
    if (!this.disabled && !this.required) {
      if (value) {
        this.showIcon(this.instanceClearIcon);
      } else {
        this.hideIcon(this.instanceClearIcon);
      }
    }
    return ret;
  },

  click: function () {
    this.showPicker();
    return false;
  },

  keyPress: function (item, form, keyName, characterValue) {
    var response = OB.KeyboardManager.Shortcuts.monitor('OBSelectorLinkItem', this);
    if (response !== false) {
      response = this.Super('keyPress', arguments);
    }
    return response;
  },

  showPicker: function () {
    if (this.isFocusable()) {
      this.focusInItem();
    }
    this.selectorWindow.open();
  },

  setValueFromRecord: function (record) {
    // note this.displayfield already contains the prefix of the property name
    if (!record) {
      this.setValue(null);
      this.form.setValue(this.displayField, null);
    } else {
      this.setValue(record[this.gridValueField]);
      this.form.setValue(this.displayField, record[this.gridDisplayField]);
      if (!this.valueMap) {
        this.valueMap = {};
      }
      this.valueMap[record[this.gridValueField]] = record[this.gridDisplayField].replace(/[\n\r]/g, '');
      this.updateValueMap();
    }
    this.handleOutFields(record);
    if (this.form && this.form.handleItemChange) {
      this._hasChanged = true;
      this.form.handleItemChange(this);
    }
  },

  handleOutFields: function (record) {
    var i, j, outFields = this.outFields,
        form = this.form,
        grid = this.grid,
        item, value, fields = form.fields || grid.fields;
    for (i in outFields) {
      if (outFields.hasOwnProperty(i)) {
        if (outFields[i].suffix) {
          if (record) {
            value = record[i];
            if (isc.isA.Number(value)) {
              value = OB.Utilities.Number.JSToOBMasked(value, OB.Format.defaultNumericMask, OB.Format.defaultDecimalSymbol, OB.Format.defaultGroupingSymbol, OB.Format.defaultGroupingSize);
            }
            form.hiddenInputs[this.outHiddenInputPrefix + outFields[i].suffix] = value;
          } else {
            form.hiddenInputs[this.outHiddenInputPrefix + outFields[i].suffix] = null;
          }
        } else {
          // it does not have a suffix
          for (j = 0; j < fields.length; j++) {
            if (fields[j].name !== "" && fields[j].name === outFields[i].fieldName) {
              value = record ? record[i] : null;
              fields[j].setValue(value);
            }
          }
        }
      }
    }
  },

  enableShortcuts: function () {
    var ksAction_ShowPopup;

    ksAction_ShowPopup = function (caller) {
      caller.showPicker();
      return false; //To avoid keyboard shortcut propagation
    };
    OB.KeyboardManager.Shortcuts.set('SelectorLink_ShowPopup', 'OBSelectorLinkItem', ksAction_ShowPopup);
  },

  init: function () {
    this.enableShortcuts();
    if (this.disabled) {
      this.showPickerIcon = false;
    }

    this.instanceClearIcon = isc.shallowClone(this.clearIcon);
    this.instanceClearIcon.showIf = function (form, item) {
      if (item.disabled) {
        return false;
      }
      if (item.required) {
        return false;
      }
      if (form && form.view && form.view.readOnly) {
        return false;
      }
      if (item.getValue()) {
        return true;
      }
      return false;
    };

    this.instanceClearIcon.click = function () {
      this.formItem.setValue(null);
      this.formItem.form.itemChangeActions();
    };

    this.icons = [this.instanceClearIcon];
    this.icons[0].formItem = this;

    if (this.disabled) {
      // TODO: disable, remove icons
      this.icons = null;
    }

    if (!this.form.isPreviewForm) {
      this.selectorWindow = isc.OBSelectorPopupWindow.create({
        // solves issue: https://issues.openbravo.com/view.php?id=17268
        title: (this.form && this.form.grid ? this.form.grid.getField(this.name).title : this.title),
        dataSource: this.dataSource,
        selector: this,
        valueField: this.gridValueField,
        displayField: this.gridDisplayField,
        selectorGridFields: isc.shallowClone(this.selectorGridFields)
      });
    }

    return this.Super('init', arguments);
  },

  changed: function () {
    var ret = this.Super('changed', arguments);
    this._hasChanged = true;
    this._doFICCall = true;
    if (this.form && this.form.handleItemChange) {
      this.form.handleItemChange(this);
    }
    return ret;
  },

  destroy: function () {
    // Explicitly destroy the selector window to avoid memory leaks
    if (this.selectorWindow) {
      this.selectorWindow.destroy();
      this.selectorWindow = null;
    }
    this.Super('destroy', arguments);
  }
});
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2012-2013 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */
// = OBMultiSelectorItem =
// OBMultiSelectorItem is a selector that allows selecting multiple records,
// specially intended for be used in parameter windows
isc.ClassFactory.defineClass('OBMultiSelectorItem', isc.CanvasItem);
isc.OBMultiSelectorItem.addProperties({
  rowSpan: 2,
  selectionLayout: null,
  selectorGridFields: [{
    title: OB.I18N.getLabel('OBUISC_Identifier'),
    name: OB.Constants.IDENTIFIER
  }],

  init: function () {
    this.icons = [{
      selector: this,
      src: this.popupIconSrc,
      width: this.popupIconWidth,
      height: this.popupIconHeight,
      hspace: this.popupIconHspace,
      keyPress: function (keyName, character, form, item, icon) {
        var response = OB.KeyboardManager.Shortcuts.monitor('OBSelectorItem.icon', this.selector);
        if (response !== false) {
          response = this.Super('keyPress', arguments);
        }
        return response;
      },
      click: function (form, item, icon) {
        item.openSelectorWindow();
      }
    }];

    if (this.selectorGridFields.length === 0) {
      this.showSelectorGrid = true;
      this.selectorGridFields = [{
        title: 'Identifier',
        name: OB.Constants.IDENTIFIER,
        type: 'text'
      }];
    }


    if (this.disabled) {
      // TODO: disable, remove icons
      this.icons = null;
    }
    if (!this.showSelectorGrid) {
      this.icons = null;
    }

    if (this.showSelectorGrid && !this.form.isPreviewForm) {
      // adds pin field, which is marked as pin whenever the
      // record is part of the selection
      // only adds it if the first field is not a pin field already
      if (this.selectorGridFields.length === 0 || this.selectorGridFields[0].name !== '_pin') {
        this.selectorGridFields.unshift({
          name: '_pin',
          type: 'boolean',
          title: '&nbsp;',
          canEdit: false,
          disableFilter: true,
          canSort: false,
          canReorder: false,
          canHide: false,
          frozen: true,
          canFreeze: false,
          canDragResize: false,
          canGroupBy: false,
          autoExpand: false,
          width: OB.Styles.Process.PickAndExecute.pinColumnWidth,
          formatCellValue: function (value, record, rowNum, colNum, grid) {
            if (grid && grid.selector && grid.selector.selectorWindow.selectedIds.contains(record[OB.Constants.ID])) {
              return '<img src="' + OB.Styles.Process.PickAndExecute.iconPinSrc + '" />';
            }
            return '';
          },
          formatEditorValue: function (value, record, rowNum, colNum, grid) {
            return this.formatCellValue(arguments);
          }
        });
      }


      this.selectorWindow = isc.OBSelectorPopupWindow.create({
        // solves issue: https://issues.openbravo.com/view.php?id=17268
        title: (this.form && this.form.grid ? this.form.grid.getField(this.name).title : this.title),
        dataSource: this.optionDataSource,
        selector: this,
        valueField: this.valueField,
        displayField: this.displayField,
        selectorGridFields: isc.shallowClone(this.selectorGridFields),
        selectionAppearance: 'checkbox',
        multiselect: true,
        selectedIds: this.getValue(),
        selectId: function (id) {
          if (!this.selectedIds.contains(id)) {
            this.selectedIds.push(id);
          }
        },
        closeClick: function () {
          var i, records = [];
          for (i = 0; i < this.origSelection.length; i++) {
            records.push(this.selectorGrid.data.find(OB.Constants.ID, this.origSelection[i]));
          }
          this.selector.setSelectedRecords(records);
          this.Super('closeClick', arguments);
        }
      });

      this.selectorWindow.selectorGrid.recordClick = function (viewer, record, recordnum, field, fieldnum) {
        // If a field other than the checkbox is clicked, select/deselect the record manually
        if (fieldnum !== 0) {
          if (this.isSelected(record)) {
            this.deselectRecord(record);
          } else {
            this.selectRecord(record);
          }
        }
      };

      this.selectorWindow.selectorGrid.recordDoubleClick = function (viewer, record, recordnum, field, fieldnum) {};
    }

    this.optionCriteria = {
      _selectorDefinitionId: this.selectorDefinitionId
    };

    this.canvas = isc.OBMultiSelectorSelectorLayout.create({
      selectorItem: this
    });

    this.Super('init', arguments);

    this.selectionLayout = this.canvas;

    if (this.initStyle) {
      this.initStyle();
    }
  },


  redrawn: function () {
    this.fixWidth();
    this.Super('redrawn', arguments);
  },
  fixWidth: function () {
    // hack to adapt the whole item width, so it takes the same space as other items
    var w = this.containerWidget.width / this.containerWidget.numCols - this.iconWidth - 3;
    if (this.width !== w) {
      this.setWidth(w);
    }
  },
  // resets whole selection to the records passed as parameter
  setSelectedRecords: function (records) {
    var i;
    this.storeValue([]);
    this.selectionLayout.removeMembers(this.selectionLayout.getMembers());
    for (i = 0; i < records.length; i++) {
      this.setValueFromRecord(records[i]);
    }
  },

  // set value is invoked by isString default validator causing array to be converted into
  // a string, let's recover the array
  setValue: function (value) {
    if (value) {
      value = value.split(',');
      this.storeValue(value);
    } else {
      this.Super('setValue', arguments);
    }
  },

  // adds a new record to the selection
  setValueFromRecord: function (record) {
    var me = this,
        selectedElement, currentValue = this.getValue();

    // add record to selected values
    currentValue.push(record[OB.Constants.ID]);
    this.storeValue(currentValue);

    // display it in the layout
    selectedElement = isc.OBMultiSelectorItemLabel.create({
      contents: record[OB.Constants.IDENTIFIER],
      icon: me.buttonDefaults.icon,
      height: 1,
      width: '90%',
      // Setting width to reserve some space for vertical scrollbar
      value: record[OB.Constants.ID],
      iconClick: function () {
        var currentValues = me.getValue();
        currentValues.remove(this.value);
        me.selectionLayout.removeMember(this);
      }
    });
    this.selectionLayout.addMember(selectedElement);

    if (this.form && this.form.handleItemChange) {
      this._hasChanged = true;
      this.form.handleItemChange(this);
    }

    if (this.form.focusInNextItem && isc.EH.getKeyName() !== 'Tab') {
      this.form.focusInNextItem(this.name);
    }
  },

  disable: function () {
    var i;
    this.Super('disable', arguments);
    // Remove the icon that removes a selection
    for (i = 0; i < this.selectionLayout.members.length; i++) {
      this.selectionLayout.members[i].setIcon(null);
    }
  },

  openSelectorWindow: function () {
    // always refresh the content of the grid to force a reload
    // if the organization has changed
    if (this.selectorWindow.selectorGrid) {
      this.selectorWindow.selectorGrid.invalidateCache();
    }
    this.selectorWindow.selectedIds = this.getValue();
    this.selectorWindow.origSelection = isc.shallowClone(this.selectorWindow.selectedIds);
    this.selectorWindow.open();
  },

  destroy: function () {
    // Explicitly destroy elements avoid memory leaks
    if (this.canvas) {
      this.canvas.destroy();
      this.canvas = null;
    }

    if (this.selectorWindow) {
      this.selectorWindow.destroy();
      this.selectorWindow = null;
    }
    this.Super('destroy', arguments);
  },

  getValue: function () {
    var value = this.Super('getValue', arguments);
    return (value ? value : []);
  }
});


// = OBMultiSelectorItemLabel =
// OBMultiSelectorItemLabel is used for selected element label
isc.ClassFactory.defineClass('OBMultiSelectorItemLabel', isc.Label);


// = OBMultiSelectorSelectorLayout =
// Utility layout to display selected records in a OBMultiSelectorItem
isc.ClassFactory.defineClass('OBMultiSelectorSelectorLayout', isc.VStack);

isc.OBMultiSelectorSelectorLayout.addProperties({
  popupTextMatchStyle: 'startswith',
  suggestionTextMatchStyle: 'startswith',
  showOptionsFromDataSource: true,
  autoDraw: false,
  overflow: 'auto',
  members: [],
  animateMembers: true,
  animateMemberTime: 100,
  width: '*',
  initWidget: function () {
    this.selectorItem.fixWidth();
    this.Super('initWidget', arguments);
  }
});
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2011-2012 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */
isc.ClassFactory.defineClass('OBSelectorFilterSelectItem', isc.OBFKFilterTextItem);

isc.OBSelectorFilterSelectItem.addProperties({

  filterDataBoundPickList: function (requestProperties, dropCache) {
    requestProperties = requestProperties || {};
    requestProperties.params = requestProperties.params || {};
    // on purpose not passing the third boolean param
    var contextInfo = this.selectorWindow.selector.form.view.getContextInfo(false, true);

    // also add the special ORG parameter
    if (this.selectorWindow.selector.form.getField('organization')) {
      requestProperties.params[OB.Constants.ORG_PARAMETER] = this.selectorWindow.selector.form.getValue('organization');
    } else if (contextInfo.inpadOrgId) {
      requestProperties.params[OB.Constants.ORG_PARAMETER] = contextInfo.inpadOrgId;
    }

    return this.Super('filterDataBoundPickList', [requestProperties, true]);
  }
});
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2011-2013 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */
isc.OBSelectorPopupWindow.addProperties({
  autoSize: false,
  width: '85%',
  height: '85%',
  align: 'center',
  autoCenter: true,
  isModal: true,
  showModalMask: true,
  animateMinimize: false,
  showMaximizeButton: true,
  headerControls: ['headerIcon', 'headerLabel', 'minimizeButton', 'maximizeButton', 'closeButton'],
  //  headerIconProperties: {
  //    width: 16,
  //    height: 16,
  //    src: 'OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/form/search_picker.png'
  //  },
  buttonBarHeight: 40,
  buttonBarSpace: 20,
  buttonBarStyleName: null,

  selectorGridProperties: {
    width: '100%',
    height: '100%',
    alternateRecordStyles: true
  }
});

isc.OBSelectorItem.addProperties(isc.addProperties({}, OB.Styles.OBFormField.DefaultComboBox));

isc.OBSelectorItem.addProperties({
  newTabIconSrc: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/form/ico-to-new-tab.png',
  newTabIconSize: 8,

  popupIconSrc: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/form/search_picker.png',
  popupIconWidth: 21,
  popupIconHeight: 21,
  popupIconHspace: 0
});

isc.OBSelectorLinkItem.addProperties({
  cellStyle: 'OBFormField',
  titleStyle: 'OBFormFieldLabel',
  textBoxStyle: 'OBFormFieldInput',
  newTabIconSrc: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/form/ico-to-new-tab.png',
  newTabIconSize: 8,
  pickerIconHeight: 21,
  pickerIconWidth: 21,
  height: 21,
  pickerIconSrc: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/form/search_picker.png',
  showPickerIcon: true,
  clearIcon: {
    showRollOver: true,
    showDown: true,
    height: 21,
    width: 21,
    hspace: 0,
    src: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/form/clearField.png',
    prompt: OB.I18N.getLabel('OBUIAPP_ClearIconPrompt')
  }
});

isc.OBMultiSelectorItem.addProperties(isc.addProperties({}, OB.Styles.OBFormField.DefaultComboBox));
isc.OBMultiSelectorItem.addProperties({

  comboBoxProperties: OB.Styles.OBFormField.DefaultComboBox,
  requiredStyle: 'OBFormFieldInputRequired',

  popupIconSrc: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/form/search_picker.png',
  popupIconWidth: 21,
  popupIconHeight: 21,
  popupIconHspace: 0,
  buttonDefaults: {
    iconOrientation: 'left',
    align: 'left',
    icon: OB.Styles.skinsPath + 'Default/org.openbravo.client.application/images/form/clearField.png'
  },
  initStyle: function () {
    if (this.required) {
      this.selectionLayout.setStyleName(this.requiredStyle);
    }

    //To adapt the height this code is used because height: '*' doesn't work properly (conflicts with OBSectionItem).
    var rowSpan = 3;
    var singleRowHeight = this.getHeight();
    var multipleRowHeight = singleRowHeight + 24; // 24px = title height + form item padding defined in CSS
    if (this.rowSpan) {
      rowSpan = this.rowSpan;
    }
    var newHeight = singleRowHeight + (rowSpan - 1) * multipleRowHeight;
    this.setHeight(newHeight);
  }
});

isc.OBMultiSelectorItemLabel.addProperties({
  styleName: 'OBMultiSelectorItemLabel'
});

isc.OBMultiSelectorSelectorLayout.addProperties({
  styleName: 'OBFormFieldInput'
});
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.0  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2011-2012 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */

OB.APRM = {};

OB.APRM.bankTransitoryAccountCalloutResponse = function (me, confirmMessage, financialAccountId) {
  isc.confirm(confirmMessage, function (value) {
    var post;
    if (value) {
      var bankTransitoryAccount = me.getField('fINTransitoryAcct')._value,
          bankTransitoryAccountDesc = me.getField('fINTransitoryAcct').valueMap[bankTransitoryAccount];

      me.getField('clearedPaymentAccount').valueMap[bankTransitoryAccount] = bankTransitoryAccountDesc;
      me.getField('clearedPaymentAccount').setValue(bankTransitoryAccount);
      me.getField('clearedPaymentAccountOUT').valueMap[bankTransitoryAccount] = bankTransitoryAccountDesc;
      me.getField('clearedPaymentAccountOUT').setValue(bankTransitoryAccount);

      post = {
        'eventType': 'bankTransitoryCalloutResponse',
        'financialAccountId': financialAccountId
      };

      OB.RemoteCallManager.call('org.openbravo.advpaymentmngt.APRMActionHandler', post, {}, {});

    }
  });
};

OB.APRM.validateMPPUserWarnedAwaiting = false;
OB.APRM.validateMPPUserWarnedSign = false;

OB.APRM.validateModifyPaymentPlanAmounts = function (item, validator, value, record) {
  var indRow, allRows = item.grid.data,
      row, allGreen = true,
      totalExpected = new BigDecimal("0"),
      totalReceived = new BigDecimal("0"),
      totalOutstanding = new BigDecimal("0"),
      isNumber = isc.isA.Number,
      invoiceOutstanding = new BigDecimal(String(item.grid.view.parentWindow.views[0].getParentRecord().outstandingAmount));

  if (new BigDecimal(String(value)).compareTo(new BigDecimal("0")) !== 0 && (new BigDecimal(String(value)).compareTo(new BigDecimal("0")) !== invoiceOutstanding.compareTo(new BigDecimal("0")))) {
    if (!OB.APRM.validateMPPUserWarnedSign) {
      OB.APRM.validateMPPUserWarnedSign = true;
      isc.warn(OB.I18N.getLabel('APRM_DifferentSignError'));
    }
    return false;
  }

  for (indRow = 0; indRow < allRows.length; indRow++) {
    row = allRows[indRow];

    if (!isNumber(row.expected) || !isNumber(row.outstanding) || !isNumber(row.received)) {
      return false;
    }

    totalExpected = totalExpected.add(new BigDecimal(String(row.expected)));
    totalOutstanding = totalOutstanding.add(new BigDecimal(String(row.outstanding)));
    totalReceived = totalReceived.add(new BigDecimal(String(row.received)));
  }
  row.expected = Number(new BigDecimal(String(row.outstanding)).add(new BigDecimal(String(row.received))));
  if (totalOutstanding.abs().compareTo(invoiceOutstanding.abs()) !== 0) {
    return false;
  }
  if (new BigDecimal(String(record.awaitingExecutionAmount)).abs().compareTo(new BigDecimal(String(record.outstanding)).abs()) > 0) {
    if (!OB.APRM.validateMPPUserWarnedAwaiting) {
      OB.APRM.validateMPPUserWarnedAwaiting = true;
      isc.warn(OB.I18N.getLabel('APRM_AwaitingExecutionAmountError'));
    }
    return false;
  }
  for (indRow = 0; indRow < allRows.length; indRow++) {
    if (typeof item.grid.rowHasErrors(allRows[indRow]) !== 'undefined' && item.grid.rowHasErrors(allRows[indRow]) && allRows[indRow] !== record) {
      allGreen = false;
    }
  }
  if (allGreen) {
    OB.APRM.validateMPPUserWarnedAwaiting = false;
    OB.APRM.validateMPPUserWarnedSign = false;
  }
  return true;
};

OB.APRM.selectionChangePaymentProposalPickAndEdit = function (grid, record, state) {
  if (state) {
    var paidamount = new BigDecimal(String(record.payment));

    if (paidamount.compareTo(new BigDecimal('0')) === 0) {
      record.payment = record.outstanding;
      record.difference = Number(new BigDecimal('0'));
    }
  }
};

OB.APRM.validatePaymentProposalPickAndEdit = function (item, validator, value, record) {

  if (!isc.isA.Number(record.payment)) {
    isc.warn(OB.I18N.getLabel('APRM_NotValidNumber'));
    return false;
  }

  var i, row, allRows = item.grid.data,
      outstanding = new BigDecimal(String(record.outstanding)),
      paidamount = new BigDecimal(String(record.payment));

  if (outstanding.abs().compareTo(paidamount.abs()) < 0) {
    isc.warn(OB.I18N.getLabel('APRM_MoreAmountThanOutstanding'));
    return false;
  }

  for (i = 0; i < allRows.size(); i++) {
    if (record.id === allRows.get(i).id) {
      row = allRows.get(i);
      break;
    }
  }
  var contextInfo = null;
  contextInfo = item.grid.view.parentWindow.activeView.getContextInfo(false, true, true, true);

  // When possible to capture on change event, move this code to another method
  if (row) {
    row.difference = Number(outstanding.subtract(paidamount));
    row.payment = Number(record.payment);
    if (contextInfo.inplimitwriteoff && contextInfo.inplimitwriteoff !== "") {
      var differencewriteoff = OB.Utilities.Number.JSToOBMasked((row.difference * contextInfo.inpfinaccTxnConvertRate), OB.Format.defaultNumericMask, OB.Format.defaultDecimalSymbol, OB.Format.defaultGroupingSymbol, OB.Format.defaultGroupingSize);
      if (differencewriteoff > contextInfo.inplimitwriteoff && record.writeoff === true) {
        isc.warn(OB.I18N.getLabel('APRM_NotAllowWriteOff'));
        return false;
      }
    }

  } else {
    return false;
  }

  return true;
};

OB.APRM.addNew = function (grid) {
  var selectedRecord = grid.view.parentWindow.views[0].getParentRecord();
  var returnObject = isc.addProperties({}, grid.data[0]);
  var indRow, allRows = grid.data,
      row, totalOutstanding = new BigDecimal("0");
  for (indRow = 0; indRow < allRows.length; indRow++) {
    row = allRows[indRow];
    totalOutstanding = totalOutstanding.add(new BigDecimal(String(row.outstanding)));
  }
  returnObject.outstanding = Number(new BigDecimal(String(selectedRecord.outstandingAmount)).subtract(totalOutstanding));
  returnObject.received = 0;
  returnObject.expected = 0;
  returnObject.awaitingExecutionAmount = 0;
  returnObject.id = '';
  returnObject.paymentMethod = selectedRecord.paymentMethod;
  returnObject['paymentMethod' + OB.Constants.FIELDSEPARATOR + OB.Constants.IDENTIFIER] = selectedRecord['paymentMethod' + OB.Constants.FIELDSEPARATOR + OB.Constants.IDENTIFIER];
  returnObject.currency = selectedRecord.currency;
  returnObject['currency' + OB.Constants.FIELDSEPARATOR + OB.Constants.IDENTIFIER] = selectedRecord['currency' + OB.Constants.FIELDSEPARATOR + OB.Constants.IDENTIFIER];
  returnObject.duedate = selectedRecord.invoiceDate;
  //General properties
  returnObject.organization = selectedRecord.organization;
  returnObject.client = selectedRecord.client;
  returnObject.invoice = selectedRecord.id;
  return returnObject;
};

OB.APRM.deleteRow = function (grid, rowNum, record) {
  if (new BigDecimal(String(record.awaitingExecutionAmount)).compareTo(new BigDecimal('0')) !== 0) {
    isc.warn(OB.I18N.getLabel('APRM_AwaitingExecutionAmountNotDeleted'));
    return false;
  }
  if (new BigDecimal(String(record.received)).compareTo(new BigDecimal('0')) !== 0) {
    isc.warn(OB.I18N.getLabel('APRM_ReceivedAmountNotDeleted'));
    return false;
  }
  return true;
};

OB.APRM.validateDoubtfulDebtPickAndEdit = function (item, validator, value, record) {
  if (!isc.isA.Number(record.doubtfulDebtAmount)) {
    isc.warn(OB.I18N.getLabel('APRM_NotValidNumber'));
    return false;
  }

  var outstanding = new BigDecimal(String(record.outstandingamt)),
      amount = new BigDecimal(String(record.doubtfulDebtAmount));

  if (outstanding.abs().compareTo(amount.abs()) < 0) {
    isc.warn(OB.I18N.getLabel('APRM_DoubtfulDebtMoreAmountThanOutstanding'));
    return false;
  }

  return true;
};

OB.APRM.selectDoubtfulDebtPickAndEdit = function (grid, record, state) {
  var percentage = grid.view.parentWindow.views[0].getParentRecord().percentage;
  if (state) {
    record.doubtfulDebtAmount = Number(new BigDecimal(String(record.outstandingamt)).multiply(new BigDecimal(String(percentage))).divide(new BigDecimal('100'), record.currency$standardPrecision, BigDecimal.prototype.ROUND_HALF_UP));
  } else {
    record.doubtfulDebtAmount = Number(new BigDecimal("0"));
  }
  return true;
};
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2011-2012 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */
// = OBHTMLWidget =
//
// Implements the HTML widget superclass.
//
isc.defineClass('OBHTMLWidget', isc.OBWidget).addProperties({
  contentSource: null,

  initWidget: function () {
    this.Super('initWidget', arguments);
    this.setWidgetHeight();
  },

  createWindowContents: function () {
    if (!this.contentSource && this.parameters.htmlcode) {
      this.contentSource = this.evaluateContents(this.parameters.htmlcode);
    }
    if (this.parameters.widgetTitle) {
      this.setTitle(this.parameters.widgetTitle);
    }
    return isc.HTMLFlow.create({
      contents: this.contentSource,
      height: '100%',
      width: '100%'
    });
  },

  refresh: function () {
    this.setWidgetHeight();
    if (this.parameters.widgetTitle) {
      this.setTitle(this.parameters.widgetTitle);
    }
    if (this.parameters.htmlcode) {
      this.contentSource = this.evaluateContents(this.parameters.htmlcode);
    }
    this.windowContents.setContents(this.contentSource);
  },

  setWidgetHeight: function () {
    var currentHeight = this.getHeight(),
        contentHeight = this.parameters.widgetHeight,
        edgeTop = this.edgeTop,
        edgeBottom = this.edgeBottom,
        newHeight = contentHeight + edgeTop + edgeBottom;

    if (!isc.isA.Number(this.parameters.widgetHeight)) {
      return;
    }

    this.setHeight(newHeight);
    if (this.parentElement) {
      var heightDiff = newHeight - currentHeight,
          parentHeight = this.parentElement.getHeight();
      this.parentElement.setHeight(parentHeight + heightDiff);
    }
  }
});
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2010-2013 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */
// = OBQueryListWidget =
//
// Implements the Query / List widget superclass.
//
isc.defineClass('OBQueryListWidget', isc.OBWidget).addProperties({

  widgetId: null,
  widgetInstanceId: null,
  fields: null,
  maximizedFields: null,
  gridDataSource: null,
  grid: null,
  gridProperties: {},
  viewMode: 'widget',
  totalRows: null,
  widgetTitle: null,

  showAllLabel: null,
  OBQueryListShowAllLabelHeight: null,

  initWidget: function () {
    var field, i;
    this.showAllLabel = isc.HLayout.create({
      height: this.OBQueryListShowAllLabelHeight,
      members: [
      isc.OBQueryListRowsNumberLabel.create({
        contents: ''
      }), isc.OBQueryListShowAllLabel.create({
        contents: OB.I18N.getLabel('OBCQL_ShowAll'),
        widget: this,
        action: function () {
          this.widget.maximize();
        }
      })]
    });

    this.gridDataSource = this.createGridDataSource();

    // To use 'OBQLCanvasItem_Link' clientClass in case we have just a simple 'link' (with no clientClass defined)
    if (this.fields) {
      for (i = 0; i < this.fields.length; i++) {
        field = this.fields[i];
        if (field.isLink && !field.clientClass) {
          field.clientClass = 'OBQLCanvasItem_Link';
        }
      }
    }

    this.Super('initWidget', arguments);
    this.widgetTitle = this.title;
    // refresh if the dbInstanceId is set
    if (this.dbInstanceId) {
      this.refresh();
    }
  },

  setDbInstanceId: function (instanceId) {
    this.Super('setDbInstanceId', instanceId);
    this.grid.fetchData();
  },

  setWidgetHeight: function () {
    // when used inside generated window, just accept externally defined height (via rowspan) and
    // don't override it as will break normal window layout
    if (this.inWidgetInFormMode) {
      return;
    }
    var currentHeight = this.getHeight(),
        edgeTop = this.edgeTop,
        edgeBottom = this.edgeBottom,
        newGridHeight = this.grid.headerHeight + (this.grid.cellHeight * (this.parameters.RowsNumber ? this.parameters.RowsNumber : 10)) + this.grid.summaryRowHeight + 2;
    this.grid.setHeight(newGridHeight);

    var newHeight = edgeTop + newGridHeight + edgeBottom;
    if (this.showAllLabel.isVisible()) {
      newHeight += this.showAllLabel.height;
    }
    this.setHeight(newHeight);
    if (this.parentElement) {
      var heightDiff = newHeight - currentHeight,
          parentHeight = this.parentElement.getHeight();
      this.parentElement.setHeight(parentHeight + heightDiff);
    }
  },

  createWindowContents: function () {
    var layout, url, params = {},
        showFilter = (this.viewMode === 'maximized');

    layout = isc.VStack.create({
      height: '100%',
      width: '100%',
      styleName: ''
    });

    isc.addProperties(this.gridProperties, {
      showFilterEditor: showFilter
    });

    this.grid = isc.OBQueryListGrid.create(isc.addProperties({
      dataSource: this.gridDataSource,
      widget: this,
      fields: this.fields
    }, this.gridProperties));

    layout.addMember(this.grid);
    layout.addMember(this.showAllLabel);

    return layout;
  },

  refresh: function () {
    if (this.viewMode === 'widget') {
      this.setWidgetHeight();
    }
    // sometimes when removing the form, this gets called
    // at that point this.grid is not set anymore
    if (this.grid) {
      this.grid.invalidateCache();
      this.grid.filterData();
    }
  },

  exportGrid: function () {
    var grid = this.widget.grid,
        requestProperties, additionalProperties;

    if (OB.Application.licenseType === 'C') {
      isc.warn(OB.I18N.getLabel('OBUIAPP_ActivateMessage', [OB.I18N.getLabel('OBCQL_ActivateMessageExport')]), {
        isModal: true,
        showModalMask: true,
        toolbarButtons: [isc.Dialog.OK]
      });
      return;
    }

    requestProperties = {
      exportAs: 'csv',
      exportDisplay: 'download',
      params: {
        exportToFile: true
      }
    };

    additionalProperties = {
      widgetInstanceId: this.widget.dbInstanceId
    };

    grid.exportData(requestProperties, additionalProperties);
  },

  maximize: function () {
    OB.Layout.ViewManager.openView('OBQueryListView', {
      tabTitle: this.widgetTitle,
      widgetInstanceId: this.dbInstanceId,
      widgetId: this.widgetId,
      fields: this.maximizedFields,
      gridDataSource: this.gridDataSource,
      parameters: this.parameters,
      menuItems: this.menuItems,
      fieldDefinitions: this.fieldDefinitions
    });
  },

  setTotalRows: function (totalRows) {
    this.totalRows = totalRows;
    if (this.viewMode === 'maximized') {
      this.setTitle(this.widgetTitle + " (" + this.totalRows + ")");
      this.showAllLabel.hide();
      return;
    }
    if (this.showAllLabel.getMembers()[0]) {
      this.showAllLabel.getMembers()[0].setContents(
      OB.I18N.getLabel('OBCQL_RowsNumber', [this.parameters.RowsNumber, this.totalRows]));
    }
    if (this.parameters.showAll || this.totalRows <= this.parameters.RowsNumber) {
      this.showAllLabel.hide();
    } else {
      this.showAllLabel.show();
    }
    this.setWidgetHeight();
  }
});

isc.ClassFactory.defineClass('OBQueryListGrid', isc.OBGrid);

isc.OBQueryListGrid.addProperties({
  width: '100%',
  height: '100%',
  dataSource: null,

  // some common settings
  //showFilterEditor: false,
  filterOnKeypress: true,
  canEdit: false,
  alternateRecordStyles: true,
  canReorderFields: false,
  canFreezeFields: false,
  canGroupBy: false,
  autoFetchData: false,
  canAutoFitFields: false,
  showGridSummary: true,

  summaryRowProperties: {
    showEmptyMessage: false
  },

  dataProperties: {
    useClientFiltering: false //,
    //useClientSorting: false
  },

  initWidget: function () {
    var i;
    // overridden as query list widgets can't handle date ranges (yet)
    for (i = 0; i < this.getFields().length; i++) {
      var fld = this.getFields()[i];
      if (fld.filterEditorType === 'OBMiniDateRangeItem') {
        fld.filterEditorType = 'OBDateItem';
      }
    }
    this.Super('initWidget', arguments);
  },

  filterData: function (criteria, callback, requestProperties) {
    var newCallBack, crit = criteria || {},
        reqProperties = requestProperties || {};

    reqProperties.params = reqProperties.params || {};
    reqProperties.params = this.getFetchRequestParams(reqProperties.params);

    reqProperties.showPrompt = false;

    reqProperties.clientContext = {
      grid: this,
      criteria: crit
    };

    newCallBack = function (dsResponse, data, dsRequest) {
      dsResponse.clientContext.grid.getWidgetTotalRows(dsResponse, data, dsRequest);
      if (callback) {
        callback();
      }
    };

    return this.Super('filterData', [crit, newCallBack, reqProperties]);
  },

  getFetchRequestParams: function (params) {
    var localWidgetProperties, propName, propValue;

    // process dynamic parameters
    localWidgetProperties = isc.clone(this.widget.parameters);
    delete localWidgetProperties.formValues;
    for (propName in localWidgetProperties) {
      if (localWidgetProperties.hasOwnProperty(propName)) {
        propValue = localWidgetProperties[propName];
        if (typeof propValue === 'string') {
          localWidgetProperties[propName] = this.widget.evaluateContents(propValue);
        }
      }
    }

    params = params || {};
    params.serializedParameters = isc.JSON.encode(localWidgetProperties);
    params.widgetId = this.widget.widgetId;
    params.widgetInstanceId = this.widget.dbInstanceId;
    params.rowsNumber = this.widget.parameters.RowsNumber;
    params.viewMode = this.widget.viewMode;
    params.showAll = this.widget.parameters.showAll;
    params.UTCOffsetMiliseconds = OB.Utilities.Date.getUTCOffsetInMiliseconds();
    return params;
  },

  destroy: function () {
    if (this.dataSource) {
      this.dataSource.destroy();
      this.dataSource = null;
    }
    this.Super('destroy', arguments);
  },

  fetchData: function (criteria, callback, requestProperties) {
    var newCallBack, crit = criteria || {},
        reqProperties = requestProperties || {};

    reqProperties.params = reqProperties.params || {};
    reqProperties.params = this.getFetchRequestParams(reqProperties.params);

    reqProperties.showPrompt = false;

    reqProperties.clientContext = {
      grid: this,
      criteria: crit
    };

    newCallBack = function (dsResponse, data, dsRequest) {
      dsResponse.clientContext.grid.getWidgetTotalRows(dsResponse, data, dsRequest);
      if (callback) {
        callback();
      }
    };

    return this.Super('fetchData', [crit, newCallBack, reqProperties]);
  },

  getWidgetTotalRows: function (dsResponse, data, dsRequest) {
    if (this.widget.viewMode === 'widget' && !this.widget.parameters.showAll) {
      var criteria = dsResponse.clientContext.criteria || {},
          requestProperties = {};
      requestProperties.showPrompt = false;
      requestProperties.clientContext = {
        grid: this
      };
      requestProperties.params = requestProperties.params || {};
      requestProperties.params = this.getFetchRequestParams(requestProperties.params);

      requestProperties.params.showAll = true;
      // sometimes we get here before the datasource
      // is set
      if (this.dataSource) {
        this.dataSource.fetchData(criteria, function (dsResponse, data, dsRequest) {
          dsResponse.clientContext.grid.widget.setTotalRows(dsResponse.totalRows);
        }, requestProperties);
      }
    } else {
      this.widget.setTotalRows(dsResponse.totalRows);
    }
  }
});
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2010-2012 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */
// = OBQueryListView =
//
// Implements the Query / List widget maximized view.
//
isc.defineClass('OBQueryListView', isc.PortalLayout);

isc.OBQueryListView.addProperties({
  widgetInstanceId: null,
  fields: null,
  gridDataSource: null,
  widgetId: null,

  //Set PortalLayout common parameters
  numColumns: 1,
  showColumnMenus: false,
  canDropComponents: false,

  initWidget: function (args) {
    this.Super('initWidget', arguments);

    this.widgetInstanceId = args.widgetInstanceId;
    this.fields = args.fields;
    this.gridDataSource = args.gridDataSource;
    this.widgetId = args.widgetId;

    var widgetInstance = isc['_' + this.widgetId].create(isc.addProperties({
      viewMode: 'maximized',
      fields: this.fields,
      widgetInstanceId: this.widgetInstanceId,
      widgetId: this.widgetId,
      dbInstanceId: this.widgetInstanceId,
      gridDataSource: this.gridDataSource,
      title: args.tabTitle,
      menuItems: args.menuItems,
      parameters: args.parameters,
      fieldDefinitions: args.fieldDefinitions,
      canDelete: false
    }));
    this.addPortlet(widgetInstance);
  },

  isSameTab: function (viewName, params) {
    return this.widgetInstanceId === params.widgetInstanceId;
  }
});
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2013 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */

isc.defineClass('OBQLCanvasItem_Link', isc.OBGridLinkItem);

isc.OBQLCanvasItem_Link.addProperties({
  setRecord: function () {
    this.setTitle(this.grid.formatLinkValue(this.record, this.field, this.colNum, this.rowNum, this.record[this.field.name]));
  },
  doAction: function () {
    if (this.field.OB_TabId && this.field.OB_LinkExpression) {
      //To open the tab provided in the widget column. Refer https://issues.openbravo.com/view.php?id=17411.
      OB.Utilities.openDirectTab(this.field.OB_TabId, this.record[this.field.OB_LinkExpression]);
    }
  }
});

isc.defineClass('OBQLCanvasItem_Print', isc.OBGridLinkItem);

isc.OBQLCanvasItem_Print.addProperties({
  initWidget: function () {
    if (this.record.isGridSummary) {
      this.title = '';
    }
    return this.Super('initWidget', arguments);
  },
  title: OB.I18N.getLabel('OBUIAPP_PrintGridLink'),
  isDirectPDF: true,
  isDirectAttach: false,
  blockAction: false,
  doAction: function () {
    var postParams = {
      inpdirectprint: "N",
      inppdfpath: this.field.OB_printUrl,
      inpwindowId: this.field.OB_WindowId,
      inpkeyColumnId: this.field.OB_keyColumnName,
      inpTabId: this.field.OB_TabId,
      inphiddenvalue: this.record[this.field.OB_LinkExpression],
      inpIsDirectPDF: this.isDirectPDF,
      inpIsDirectAttach: this.isDirectAttach
    },
        showPopup = (postParams.inpIsDirectPDF || postParams.inpIsDirectAttach ? false : true),
        me = this;
    if (postParams.inppdfpath && !this.blockAction) {
      // Block action + setTimeout to avoid user double-click the 'Print' button in 4 seconds.
      this.blockAction = true;
      OB.Layout.ClassicOBCompatibility.Popup.open('print', 0, 0, OB.Application.contextUrl + 'businessUtility/PrinterReports.html', '', window, false, false, true, postParams, showPopup, showPopup);
      setTimeout(function () {
        me.blockAction = false;
      }, 4000);
    }
  }
});
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2011-2012 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */


isc.OBQueryListView.addProperties({
  styleName: 'OBQueryListView'
});

isc.OBQueryListGrid.addProperties({
  bodyStyleName: 'OBQueryListGridBody'
});

isc.OBQueryListWidget.addProperties({
  OBQueryListShowAllLabelHeight: 20
});


isc.ClassFactory.defineClass('OBQueryListShowAllLabel', isc.Label);

isc.OBQueryListShowAllLabel.addProperties({
  className: 'OBQueryListShowAllLabel',
  showDown: true,
  showFocused: true,
  showFocusedAsOver: true,
  showRollOver: true,
  height: 20,
  wrap: false,
  width: '*'
});

isc.ClassFactory.defineClass('OBQueryListRowsNumberLabel', isc.Label);

isc.OBQueryListRowsNumberLabel.addProperties({
  className: 'OBQueryListRowsNumberLabel',
  showDown: false,
  showFocused: false,
  showFocusedAsOver: false,
  showRollOver: false,
  height: 20,
  wrap: false,
  width: '*'
});
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2011-2012 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */

// == OBGCalWidget ==
isc.defineClass('OBGCalWidget', isc.OBUrlWidget);

isc.OBGCalWidget.addProperties({
  initWidget: function () {
    this.setContentSource();
    this.Super('initWidget', arguments);
  },
  setContentSource: function () {
    this.contentSource = 'http://www.google.com/calendar/embed?src=' + this.parameters.account + '&ctz=Europe/Madrid&preventCache=' + Math.random();
  },
  refresh: function () {
    this.setContentSource();
    this.Super('refresh', arguments);
  }
});
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2011-2012 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */
isc.defineClass('OBTwitterWidget', isc.OBUrlWidget);

isc.OBTwitterWidget.addProperties({
  initWidget: function () {
    this.setContentSource();
    this.Super('initWidget', arguments);
  },
  setContentSource: function () {
    this.contentSource = OB.Application.contextUrl + 'web/org.openbravo.client.widgets/twitter.html?t=search' + '&s=' + this.parameters.search + '&preventCache=' + Math.random();
  },
  refresh: function () {
    this.setContentSource();
    this.Super('refresh', arguments);
  }
});
/*
 *************************************************************************
 * The contents of this file are subject to the Openbravo  Public  License
 * Version  1.1  (the  "License"),  being   the  Mozilla   Public  License
 * Version 1.1  with a permitted attribution clause; you may not  use this
 * file except in compliance with the License. You  may  obtain  a copy of
 * the License at http://www.openbravo.com/legal/license.html
 * Software distributed under the License  is  distributed  on  an "AS IS"
 * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
 * License for the specific  language  governing  rights  and  limitations
 * under the License.
 * The Original Code is Openbravo ERP.
 * The Initial Developer of the Original Code is Openbravo SLU
 * All portions are Copyright (C) 2011-2012 Openbravo SLU
 * All Rights Reserved.
 * Contributor(s):  ______________________________________.
 ************************************************************************
 */

isc.defineClass('OBSEIG_AccountAssociationView', isc.Dialog);

isc.OBSEIG_AccountAssociationView.addProperties({
  showMinimizeButton: false,
  showMaximizeButton: false,
  autoSize: true,

  isSameTab: function (viewId, params) {
    return viewId === 'OBSEIG_AccountAssociationView';
  },

  getBookMarkParams: function () {
    var result = {};
    result.viewId = 'OBSEIG_AccountAssociationView';
    return result;
  },

  OK_BUTTON: isc.addProperties({}, isc.Dialog.OK, {
    click: function () {
      this.topElement.cancelClick();
      top.location.href = OB.Application.contextUrl + 'org.openbravo.service.integration.google/auth.html?is_association=true';
    }
  }),

  initWidget: function (args) {
    var community = (OB.Application.licenseType === 'C'),
        label = community ? 'OBSEIG_Activate' : 'OBSEIG_AssociateAccount';

    this.title = args && args.tabTitle ? args.tabTitle : '';

    this.items = isc.Label.create({
      contents: OB.I18N.getLabel(label),
      width: '100%'
    });

    if (community) {
      this.toolbarButtons = [isc.Dialog.OK];
    } else {
      this.toolbarButtons = [this.OK_BUTTON, isc.Dialog.CANCEL];
    }

    this.Super('initWidget', arguments);
  }
});
/*
// put within a function to hide local vars etc.
(function () {
  var buttonProps = {
      action: function(){
        alert('You clicked me!');
      },
      buttonType: 'no_process',
      prompt: OB.I18N.getLabel('NO_Procesar'),
      updateState: function(){
          var view = this.view, form = view.viewForm, grid = view.viewGrid, selectedRecords = grid.getSelectedRecords();
          if (view.isShowingForm && form.isNew) {
            this.setDisabled(true);
          } else if (view.isEditingGrid && grid.getEditForm().isNew) {
            this.setDisabled(true);
          } else {
            this.setDisabled(selectedRecords.length == 0);
          }
      }
    };
  
  // register the button for the sales order tab
  // the first parameter is a unique identification so that one button can not be registered multiple times.
  OB.ToolbarRegistry.registerButton(buttonProps.buttonType, isc.OBToolbarIconButton, buttonProps, 100, "'55D81228F99B47F8AAC41D1DE0175DFC'");
}());

*/


// put within a function to hide local vars etc.
(function () {
  var buttonProps = {
      action: function(){
        var i,callback, view = this.view, selectedRecords = view.viewGrid.getSelectedRecords(),
        roles = [];

//        if (selectedRecords.length == 0) {
//            isc.say(OB.I18N.getLabel('NO_NoLiquidSelected'));
//            return;
//        } else if (selectedRecords.length > 1) {
//            //isc.say(OB.I18N.getLabel('HOTEL_OneGuestOnly'));
//            return;
//        }
        
        
        for(i = 0; i < selectedRecords.length;i++){
        	
        	roles.push(selectedRecords[i].id);
        	
        };

        // define the callback function which shows the result to the user
        callback = function(rpcResponse, data, rpcRequest) {
          if (data.success) {
              isc.say(OB.I18N.getLabel('NO_CheckoutResultRol', [data.total]));
          } else {
              isc.say(data.message);
          }
          
        }
        
        // ask for confirmation
        isc.ask(OB.I18N.getLabel('NO_ConfirmCheckoutRol'), function(ok) {
            if (ok) {
                // and call the server
               OB.RemoteCallManager.call('com.atrums.nomina.ad_actionButton.RolProvisionCheckOutActionHandler', {roles: roles}, {}, callback);
            }
        });
      },
      buttonType: 'no_prov',
      prompt: OB.I18N.getLabel('NO_CheckRolTip'),
      updateState: function(){
      }
    };
  
  // register the button for the Guest tab of the Guest/Stay window (look up the ID of the tab inside the AD_TAB database table!)
  OB.ToolbarRegistry.registerButton(buttonProps.buttonType, isc.OBToolbarIconButton, buttonProps, 100, '9627836015B94CF6ACD14D0E16F4627B');
  
}());
/*
// put within a function to hide local vars etc.
(function () {
  var buttonProps = {
      action: function(){
        alert('You clicked me!');
      },
      buttonType: 'no_process',
      prompt: OB.I18N.getLabel('NO_Procesar'),
      updateState: function(){
          var view = this.view, form = view.viewForm, grid = view.viewGrid, selectedRecords = grid.getSelectedRecords();
          if (view.isShowingForm && form.isNew) {
            this.setDisabled(true);
          } else if (view.isEditingGrid && grid.getEditForm().isNew) {
            this.setDisabled(true);
          } else {
            this.setDisabled(selectedRecords.length == 0);
          }
      }
    };
  
  // register the button for the sales order tab
  // the first parameter is a unique identification so that one button can not be registered multiple times.
  OB.ToolbarRegistry.registerButton(buttonProps.buttonType, isc.OBToolbarIconButton, buttonProps, 100, "'55D81228F99B47F8AAC41D1DE0175DFC'");
}());

*/


// put within a function to hide local vars etc.
(function () {
  var buttonProps = {
      action: function(){
        var i, callback, view = this.view, selectedRecords = view.viewGrid.getSelectedRecords()
        avances = [];

        for(i=0; i < selectedRecords.length; i++){
        	
        	avances.push(selectedRecords[i].id);
        	
        };
        

        // define the callback function which shows the result to the user
        callback = function(rpcResponse, data, rpcRequest) {
          if (data.success) {
              isc.say(OB.I18N.getLabel('NO_CheckoutResultAva', [data.total]));
          } else {
              isc.say(data.message);
          }
          
        }
        
        // ask for confirmation
        isc.ask(OB.I18N.getLabel('NO_ConfirmCheckoutAva'), function(ok) {
            if (ok) {
                // and call the server
                OB.RemoteCallManager.call('com.atrums.nomina.ad_actionButton.AvanceCheckOutActionHandler', {avances: avances}, {}, callback);
            }
        });
      },
      buttonType: 'no_ava',
      prompt: OB.I18N.getLabel('NO_CheckAvanTip'),
      updateState: function(){
      }
    };
  
  // register the button for the Guest tab of the Guest/Stay window (look up the ID of the tab inside the AD_TAB database table!)
  OB.ToolbarRegistry.registerButton(buttonProps.buttonType, isc.OBToolbarIconButton, buttonProps, 100, 'C018CCAD1E4F435EB18BF1CCA45604CC');
}());
alert('aqui');

OB.NO = OB.NO || {};

OB.NO.Process = {
	execute: function (params, view) {
		var i, selection = params.button.contextView.viewGrid.getSelectedRecords(),
		rolpago = [], messageBar = view.getView(params.adTabId).messageBar, 
		callback;
		
		alert('aqui estoy 1');
		
		callback = function (rpcResponse, data, rpcRequest) {
			/*isc.say(OB.I18N.getLabel('Atacv_Updated', [data.updated]));*/
			//params.button.contextView.viewGrid.refreshGrid();
			var status = rpcResponse.status,
			view = rpcRequest.clientContext.view.getView(params.adTabId);
			view.messageBar.setMessage(data.message.severity, null, data.message.text);
			
			params.button.closeProcessPopup();
		};
		
		for (i = 0; i < selection.length; i++) {
		    rolpago.push(selection[i].id);
		};
		
		OB.RemoteCallManager.call('com.atrums.nomina.ad_process.RolEnvioMailHandler', {
		    rolpago: rolpago,
		    action: params.action
		}, {}, callback, {
      view: view
    });
	},
	
	email: function (params, view) {
		alert('aqui estoy');
		params.action = 'PROCESS';
		params.adTabId = '9627836015B94CF6ACD14D0E16F4627B';		
		OB.NO.Process.execute(params, view);
	}
};
/*
// put within a function to hide local vars etc.
(function () {
  var buttonProps = {
      action: function(){
        alert('You clicked me!');
      },
      buttonType: 'no_process',
      prompt: OB.I18N.getLabel('NO_Procesar'),
      updateState: function(){
          var view = this.view, form = view.viewForm, grid = view.viewGrid, selectedRecords = grid.getSelectedRecords();
          if (view.isShowingForm && form.isNew) {
            this.setDisabled(true);
          } else if (view.isEditingGrid && grid.getEditForm().isNew) {
            this.setDisabled(true);
          } else {
            this.setDisabled(selectedRecords.length == 0);
          }
      }
    };
  
  // register the button for the sales order tab
  // the first parameter is a unique identification so that one button can not be registered multiple times.
  OB.ToolbarRegistry.registerButton(buttonProps.buttonType, isc.OBToolbarIconButton, buttonProps, 100, "'55D81228F99B47F8AAC41D1DE0175DFC'");
}());

*/


// put within a function to hide local vars etc.
(function () {
  var buttonProps = {
      action: function(){
        var i,callback, view = this.view, selectedRecords = view.viewGrid.getSelectedRecords(),
        utilidades = [];

//        if (selectedRecords.length == 0) {
//            isc.say(OB.I18N.getLabel('NO_NoLiquidSelected'));
//            return;
//        } else if (selectedRecords.length > 1) {
//            //isc.say(OB.I18N.getLabel('HOTEL_OneGuestOnly'));
//            return;
//        }
        
        
        for(i = 0; i < selectedRecords.length;i++){
        	
        	utilidades.push(selectedRecords[i].id);
        	
        };

        // define the callback function which shows the result to the user
        callback = function(rpcResponse, data, rpcRequest) {
          if (data.success) {
              isc.say(OB.I18N.getLabel('NO_CheckoutResultRol', [data.total]));
          } else {
              isc.say(data.message);
          }
          
        }
        
        // ask for confirmation
        isc.ask(OB.I18N.getLabel('NO_ConfirmCheckoutRol'), function(ok) {
            if (ok) {
                // and call the server
              OB.RemoteCallManager.call('com.atrums.nomina.ad_actionButton.UtilidadCheckOutActionHandler', {utilidades: utilidades}, {}, callback);
            }
        });
      },
      buttonType: 'no_util',
      prompt: OB.I18N.getLabel('NO_CheckRolTip'),
      updateState: function(){
      }
    };
  
  // register the button for the Guest tab of the Guest/Stay window (look up the ID of the tab inside the AD_TAB database table!)
  OB.ToolbarRegistry.registerButton(buttonProps.buttonType, isc.OBToolbarIconButton, buttonProps, 100, '1233721A9756424EA0F9F757F1F30B45');
  
}());
/*
// put within a function to hide local vars etc.
(function () {
  var buttonProps = {
      action: function(){
        alert('You clicked me!');
      },
      buttonType: 'no_process',
      prompt: OB.I18N.getLabel('NO_Procesar'),
      updateState: function(){
          var view = this.view, form = view.viewForm, grid = view.viewGrid, selectedRecords = grid.getSelectedRecords();
          if (view.isShowingForm && form.isNew) {
            this.setDisabled(true);
          } else if (view.isEditingGrid && grid.getEditForm().isNew) {
            this.setDisabled(true);
          } else {
            this.setDisabled(selectedRecords.length == 0);
          }
      }
    };
  
  // register the button for the sales order tab
  // the first parameter is a unique identification so that one button can not be registered multiple times.
  OB.ToolbarRegistry.registerButton(buttonProps.buttonType, isc.OBToolbarIconButton, buttonProps, 100, "'55D81228F99B47F8AAC41D1DE0175DFC'");
}());

*/


// put within a function to hide local vars etc.
(function () {
  var buttonProps = {
      action: function(){
        var i,callback, view = this.view, selectedRecords = view.viewGrid.getSelectedRecords(),
        roles = [];

//        if (selectedRecords.length == 0) {
//            isc.say(OB.I18N.getLabel('NO_NoLiquidSelected'));
//            return;
//        } else if (selectedRecords.length > 1) {
//            //isc.say(OB.I18N.getLabel('HOTEL_OneGuestOnly'));
//            return;
//        }
        
        
        for(i = 0; i < selectedRecords.length;i++){
        	
        	roles.push(selectedRecords[i].id);
        	
        };

        // define the callback function which shows the result to the user
        callback = function(rpcResponse, data, rpcRequest) {
          if (data.success) {
              isc.say(OB.I18N.getLabel('NO_CheckoutResultRol', [data.total]));
          } else {
              isc.say(data.message);
          }
          
        }
        
        // ask for confirmation
        isc.ask(OB.I18N.getLabel('NO_ConfirmCheckoutRol'), function(ok) {
            if (ok) {
                // and call the server
                OB.RemoteCallManager.call('com.atrums.nomina.ad_actionButton.RolPagoCheckOutActionHandler', {roles: roles}, {}, callback);
            }
        });
      },
      buttonType: 'no_rol',
      prompt: OB.I18N.getLabel('NO_CheckRolTip'),
      updateState: function(){
      }
    };
  
  // register the button for the Guest tab of the Guest/Stay window (look up the ID of the tab inside the AD_TAB database table!)
  OB.ToolbarRegistry.registerButton(buttonProps.buttonType, isc.OBToolbarIconButton, buttonProps, 100, '9627836015B94CF6ACD14D0E16F4627B');
  
}());
/*
// put within a function to hide local vars etc.
(function () {
  var buttonProps = {
      action: function(){
        alert('You clicked me!');
      },
      buttonType: 'no_process',
      prompt: OB.I18N.getLabel('NO_Procesar'),
      updateState: function(){
          var view = this.view, form = view.viewForm, grid = view.viewGrid, selectedRecords = grid.getSelectedRecords();
          if (view.isShowingForm && form.isNew) {
            this.setDisabled(true);
          } else if (view.isEditingGrid && grid.getEditForm().isNew) {
            this.setDisabled(true);
          } else {
            this.setDisabled(selectedRecords.length == 0);
          }
      }
    };
  
  // register the button for the sales order tab
  // the first parameter is a unique identification so that one button can not be registered multiple times.
  OB.ToolbarRegistry.registerButton(buttonProps.buttonType, isc.OBToolbarIconButton, buttonProps, 100, "'55D81228F99B47F8AAC41D1DE0175DFC'");
}());

*/


// put within a function to hide local vars etc.
(function () {
  var buttonProps = {
      action: function(){
        var i, callback, view = this.view, selectedRecords = view.viewGrid.getSelectedRecords(),
        pagos = [];

        
        for(i=0;i<selectedRecords.length;i++){
        	pagos.push(selectedRecords[i].id);
        };
        

        // define the callback function which shows the result to the user
        callback = function(rpcResponse, data, rpcRequest) {
          if (data.success) {
              isc.say(OB.I18N.getLabel('NO_CheckoutResultPagos', [data.total]));
          } else {
              isc.say(data.message);
          }
          
        }
        
        // ask for confirmation
        isc.ask(OB.I18N.getLabel('NO_ConfirmCheckoutPagos'), function(ok) {
            if (ok) {
                // and call the server
                OB.RemoteCallManager.call('com.atrums.nomina.ad_actionButton.PagoNominaCheckOutActionHandler', {pagos: pagos}, {}, callback);
            }
        });
      },
      buttonType: 'no_pago',
      prompt: OB.I18N.getLabel('NO_CheckGenerarPagoTip'),
      updateState: function(){
      }
    };
  
  // register the button for the Guest tab of the Guest/Stay window (look up the ID of the tab inside the AD_TAB database table!)
  OB.ToolbarRegistry.registerButton(buttonProps.buttonType, isc.OBToolbarIconButton, buttonProps, 100, '73F13903850E4045BB1933F61EB7C133');
  
}());
/*
// put within a function to hide local vars etc.
(function () {
  var buttonProps = {
      action: function(){
        alert('You clicked me!');
      },
      buttonType: 'no_process',
      prompt: OB.I18N.getLabel('NO_Procesar'),
      updateState: function(){
          var view = this.view, form = view.viewForm, grid = view.viewGrid, selectedRecords = grid.getSelectedRecords();
          if (view.isShowingForm && form.isNew) {
            this.setDisabled(true);
          } else if (view.isEditingGrid && grid.getEditForm().isNew) {
            this.setDisabled(true);
          } else {
            this.setDisabled(selectedRecords.length == 0);
          }
      }
    };
  
  // register the button for the sales order tab
  // the first parameter is a unique identification so that one button can not be registered multiple times.
  OB.ToolbarRegistry.registerButton(buttonProps.buttonType, isc.OBToolbarIconButton, buttonProps, 100, "'55D81228F99B47F8AAC41D1DE0175DFC'");
}());

*/


// put within a function to hide local vars etc.
(function () {
  var buttonProps = {
      action: function(){
        var i, callback, view = this.view, selectedRecords = view.viewGrid.getSelectedRecords(),
        liquidaciones=[];

        for(i=0; i < selectedRecords.length; i++){
        	
        	liquidaciones.push(selectedRecords[i].id);
        	
        };

        // define the callback function which shows the result to the user
        callback = function(rpcResponse, data, rpcRequest) {
          if (data.success) {
              isc.say(OB.I18N.getLabel('NO_CheckoutResultLiq', [data.total]));
          } else {
              isc.say(data.message);
          }
          
        }
        
        // ask for confirmation
        isc.ask(OB.I18N.getLabel('NO_ConfirmCheckoutLiq'), function(ok) {
            if (ok) {
                // and call the server
                OB.RemoteCallManager.call('com.atrums.nomina.ad_actionButton.NominaCheckOutActionHandler', {liquidaciones: liquidaciones}, {}, callback);
            }
        });
      },
      buttonType: 'no_liqu',
      prompt: OB.I18N.getLabel('NO_CheckLiquidTip'),
      updateState: function(){
      }
    };
  
  // register the button for the Guest tab of the Guest/Stay window (look up the ID of the tab inside the AD_TAB database table!)
  OB.ToolbarRegistry.registerButton(buttonProps.buttonType, isc.OBToolbarIconButton, buttonProps, 100, '55D81228F99B47F8AAC41D1DE0175DFC');
  
}());
if (window.onerror && window.onerror.name === 'indexErrorHandler') { window.onerror = null; }if (typeof OBStartApplication !== 'undefined' && Object.prototype.toString.call(OBStartApplication) === '[object Function]') { OBStartApplication(); }
} catch (_exception) {if (isc) { isc.Log.logError(_exception + ' ' + _exception.message + ' ' + _exception.stack); }if (console && console.trace) { console.trace();}}
});
} catch (_exception) {if (isc) { isc.Log.logError(_exception + ' ' + _exception.message + ' ' + _exception.stack); }if (console && console.trace) { console.trace();}}
});
} catch (_exception) {if (isc) { isc.Log.logError(_exception + ' ' + _exception.message + ' ' + _exception.stack); }if (console && console.trace) { console.trace();}}
});
} catch (_exception) {if (isc) { isc.Log.logError(_exception + ' ' + _exception.message + ' ' + _exception.stack); }if (console && console.trace) { console.trace();}}
});
} catch (_exception) {if (isc) { isc.Log.logError(_exception + ' ' + _exception.message + ' ' + _exception.stack); }if (console && console.trace) { console.trace();}}
});