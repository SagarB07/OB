<?xml version="1.0"?>
  <database name="TRIGGER NE_RUBRO_LINEA_TRG">
    <trigger name="NE_RUBRO_LINEA_TRG" table="NE_PERFIL_RUBRO" fires="after" insert="true" update="false" delete="false" foreach="row">
      <body><![CDATA[

DECLARE
	v_cursor record;
	v_no_tipo_ing_egr_acct_id character varying(32);
	v_n_debe_acct character varying(32);
	v_n_haber_acct character varying(32);
	v_ad_client_id character varying(32);
	v_isactive character varying(1);
BEGIN
	for v_cursor in (select * 
		from no_tipo_ingreso_egreso tie
		where tie.isactive = 'Y')
	loop
		select no_tipo_ing_egr_acct_id, n_debe_acct, n_haber_acct, ad_client_id, isactive
		into v_no_tipo_ing_egr_acct_id, v_n_debe_acct, v_n_haber_acct, v_ad_client_id, v_isactive
		from no_tipo_ing_egr_acct
		where no_tipo_ingreso_egreso_id = v_cursor.no_tipo_ingreso_egreso_id
		limit 1;

		if v_n_debe_acct is not null or v_n_haber_acct is not null then

			
			insert into ne_perfil_rubro_line(
				ne_perfil_rubro_line_id, ad_client_id,
				ad_org_id, isactive,
				created, createdby,
				updated, updatedby,
				ne_perfil_rubro_id, no_tipo_ingreso_egreso_id, ne_debe_acct,
				ne_haber_acct, c_acctschema_id
				)
			values (
				get_uuid(), :new.ad_client_id,
				:new.ad_org_id, v_isactive,
				now(), :new.createdby,
				now(), :new.updatedby,
				:new.ne_perfil_rubro_id, v_cursor.no_tipo_ingreso_egreso_id, v_n_debe_acct,
				v_n_haber_acct,(select a.c_acctschema_id from c_acctschema a where a.ad_client_id=v_ad_client_id)
				);
		end if;
	end loop;
	
	RETURN NEW;
END NE_RUBRO_LINEA_TRG
]]></body>
    </trigger>
  </database>
