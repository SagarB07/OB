<?xml version="1.0"?>
  <database name="FUNCTION ASV_PRODUCCION_LDM">
    <function name="ASV_PRODUCCION_LDM" type="NULL">
      <parameter name="p_pinstance_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <body><![CDATA[Cur_Parameter RECORD;
	v_Client_ID VARCHAR(32);
	v_docaction VARCHAR(32);
	v_docstatus VARCHAR(32);
	v_Message VARCHAR(2000):='';
	v_Org_ID VARCHAR(32);
	v_Result NUMBER:=1;
	v_ResultStr VARCHAR(2000):='';
	v_User_ID VARCHAR(32);

	v_bnd character varying(1) := 'Y';
	v_cursor RECORD;
	v_line NUMBER(10,0) := 0;
	v_m_production_id character varying(32);
	v_m_locator_id character varying(32);
BEGIN
	DBMS_OUTPUT.PUT_LINE('Updating PInstance - Processing ' || p_PInstance_ID);
	v_ResultStr:='PInstanceNotFound';
	AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'Y', NULL, NULL);
BEGIN
	DBMS_OUTPUT.PUT_LINE('Updating - Processing ');

	--RAISE NO_DATA_FOUND;
	
	FOR Cur_Parameter IN
		(SELECT i.Record_ID,
	    i.AD_User_ID,
	    p.ParameterName,
	    p.P_String,
	    p.P_Number,
	    p.P_Date,
	    i.AD_Org_ID,
	    i.AD_Client_ID
	  FROM AD_PInstance i
	  LEFT JOIN AD_PInstance_Para p
	    ON i.AD_PInstance_ID = p.AD_PInstance_ID
	  WHERE i.AD_PInstance_ID = p_PInstance_ID
	  ORDER BY p.SeqNo)
	LOOP
	    --:= Cur_Parameter.Record_ID;
	    v_User_ID := Cur_Parameter.AD_User_ID;
	    v_Org_ID := Cur_Parameter.AD_Org_ID;
	    v_Client_ID := Cur_Parameter.AD_Client_ID;
	    v_docaction := Cur_Parameter.p_string;
	END LOOP;
	
	FOR v_cursor IN
		(select fl.m_product_id, sum(fl.qtyinvoiced), p.isbom
		from c_invoice f, c_invoiceline fl, m_product p
		where f.c_invoice_id = fl.c_invoice_id
		and fl.m_product_id = p.m_product_id
		and date(fl.created) = date(now())
		and f.docstatus = 'CO'
		and fl.ad_org_id = v_Org_ID
		group by fl.m_product_id, p.isbom)
	LOOP
		
		if v_cursor.isbom = 'Y' then
			if v_bnd = 'Y' then
				v_m_production_id := get_uuid();
				
				INSERT INTO m_production(
					m_production_id, ad_client_id, ad_org_id, isactive, created, 
					createdby, updated, updatedby, name, description, movementdate, 
					iscreated, posted, processed, processing, ad_orgtrx_id, c_project_id, 
					c_campaign_id, c_activity_id, user1_id, user2_id, documentno, 
					endtime, issotrx, starttime, validating, c_costcenter_id, a_asset_id)
				VALUES (v_m_production_id, v_Client_ID, v_Org_ID, 'Y', now(), 
					100, now(), 100, 'PRD_LDM '||now(), null, now(), 
					'N', 'N', 'N', 'N', null, null, 
					null, null, null, null, null, 
					null, 'Y', null, 'N', null, null);
					
				v_m_locator_id := (select m_locator_id 
					from m_locator
					where ad_org_id = v_Org_ID
					and value = 'TransformaciÃ³n');

				v_bnd = 'N';
			end if;
			
			v_line := v_line + 10;

			INSERT INTO m_productionplan(
				m_productionplan_id, ad_client_id, ad_org_id, isactive, created, 
				createdby, updated, updatedby, m_production_id, line, m_product_id, 
				productionqty, m_locator_id, description, conversionrate, ma_costcenteruse, 
				ma_wrphase_id, neededquantity, processed, rejectedquantity, secondaryqty, 
				secondaryunit, usedmaterial, calccost, ma_costcenter_version_id, 
				outsourced, starttime, endtime, estimatedtime, runtime, closephase, 
				validating, productionplandate)
			VALUES (get_uuid(), v_Client_ID, v_Org_ID, 'Y', now(), 
				100, now(), 100, v_m_production_id, v_line, v_cursor.m_product_id, 
				v_cursor.sum, v_m_locator_id, null, null, null, 
				null, null, 'N', null, null, 
				null, 'N', null, null, 
				'N', null, null, 0, 0, 'N', 
				'N', null);
		end if;
	END LOOP;

	ASV_PRODUCTION_LINE(v_m_production_id);
	ASV_GUIA_INGRESO_LDM(v_m_production_id);
	ASV_GUIA_DESPACHO_LDM(v_m_production_id);

	DBMS_OUTPUT.PUT_LINE('Updating PInstance - Finished - ' || v_Message) ;
	AD_UPDATE_PINSTANCE(p_PInstance_ID, v_User_ID, 'Y', v_Result, v_Message);

	RETURN;
END;
EXCEPTION
	WHEN OTHERS THEN
		v_ResultStr:= '@ERROR=' || SQLERRM;
		DBMS_OUTPUT.PUT_LINE(v_ResultStr);
		AD_UPDATE_PINSTANCE(p_PInstance_ID, NULL, 'N', 0, v_ResultStr);
	RETURN;
END ASV_PRODUCCION_LDM
]]></body>
    </function>
  </database>
